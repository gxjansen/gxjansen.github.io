import{makeSubject as e,filter as r,mergeMap as t,takeUntil as n,fromPromise as s,map as i,merge as o}from"wonka";import{makeOperation as a,stringifyDocument as u}from"@urql/core";var d,p="undefined"!=typeof window?window.crypto:"undefined"!=typeof self?self.crypto:null,y=async e=>{if(p&&p.subtle){var r=await p.subtle.digest({name:"SHA-256"},(new TextEncoder).encode(e));return new Uint8Array(r).reduce(((e,r)=>e+r.toString(16).padStart(2,"0")),"")}return await(async()=>{if(!d)try{d=new Function("require",'return require("crypto")')(require)}catch(e){try{d=new Function('return import("crypto")')()}catch(e){}}return d})()?(await d).createHash("sha256").update(e).digest("hex"):""},c=d=>({forward:p})=>{d||(d={});var c=d.preferGetForPersistedQueries,f=!!d.enforcePersistedQueries,x=d.generateHash||y,m=!!d.enableForMutation,w=!!d.enableForSubscriptions,l=!0,Q=e=>l&&!e.context.persistAttempt&&(m&&"mutation"===e.kind||w&&"subscription"===e.kind||"query"===e.kind);return d=>{var y=e(),m=r((e=>!Q(e)))(d),w=t((e=>{var t=(async e=>{var r=a(e.kind,e,{...e.context,persistAttempt:!0}),t=await x(u(e.query),e.query);return t&&(r.extensions={...r.extensions,persistedQuery:{version:1,sha256Hash:t}},"query"===r.kind&&c&&(r.context.preferGetMethod=c)),r})(e);return n(r((r=>"teardown"===r.kind&&r.key===e.key))(d))(s(t))}))(r(Q)(d));return r((e=>!!e))(i((e=>{if(!f&&e.operation.extensions&&e.operation.extensions.persistedQuery){if(e.error&&e.error.graphQLErrors.some((e=>"PersistedQueryNotSupported"===e.message))){l=!1;var r=a(e.operation.kind,e.operation);return r.extensions&&delete r.extensions.persistedQuery,y.next(r),null}if(e.error&&e.error.graphQLErrors.some((e=>"PersistedQueryNotFound"===e.message))){if(e.operation.extensions.persistedQuery.miss)return e;var t=a(e.operation.kind,e.operation);return t.extensions={...t.extensions,persistedQuery:{...(t.extensions||{}).persistedQuery,miss:!0}},y.next(t),null}}return e}))(p(o([w,m,y.source]))))}};export{c as persistedExchange};
//# sourceMappingURL=urql-exchange-persisted.min.mjs.map
