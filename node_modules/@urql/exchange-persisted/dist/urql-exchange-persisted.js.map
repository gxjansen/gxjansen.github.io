{"version":3,"file":"urql-exchange-persisted.js","sources":["../src/sha256.ts","../src/persistedExchange.ts"],"sourcesContent":["const webCrypto = (\n  typeof window !== 'undefined'\n    ? window.crypto\n    : typeof self !== 'undefined'\n    ? self.crypto\n    : null\n) as typeof globalThis.crypto | null;\n\nlet nodeCrypto: Promise<typeof import('crypto') | void> | void;\n\nconst getNodeCrypto = async (): Promise<typeof import('crypto') | void> => {\n  if (!nodeCrypto) {\n    // Indirect eval'd require/import to guarantee no side-effects in module scope\n    // (optimization for minifiers)\n    try {\n      nodeCrypto = new Function('require', 'return require(\"crypto\")')(require);\n    } catch (_error) {\n      try {\n        nodeCrypto = new Function('return import(\"crypto\")')();\n      } catch (_error) {}\n    }\n  }\n  return nodeCrypto;\n};\n\nexport const hash = async (query: string): Promise<string> => {\n  if (webCrypto && webCrypto.subtle) {\n    const digest = await webCrypto.subtle.digest(\n      { name: 'SHA-256' },\n      new TextEncoder().encode(query)\n    );\n    return new Uint8Array(digest).reduce(\n      (prev, byte) => prev + byte.toString(16).padStart(2, '0'),\n      ''\n    );\n  } else if (await getNodeCrypto()) {\n    // Node.js support\n    return (await nodeCrypto)!.createHash('sha256').update(query).digest('hex');\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    console.warn(\n      '[@urql/exchange-persisted-fetch]: The Node Crypto and Web Crypto APIs are not available.\\n' +\n        'This is an unexpected error. Please report it by filing a GitHub Issue.'\n    );\n  }\n\n  return '';\n};\n","import {\n  map,\n  makeSubject,\n  fromPromise,\n  filter,\n  merge,\n  mergeMap,\n  takeUntil,\n  pipe,\n} from 'wonka';\n\nimport type {\n  PersistedRequestExtensions,\n  TypedDocumentNode,\n  OperationResult,\n  CombinedError,\n  Exchange,\n  Operation,\n  OperationContext,\n} from '@urql/core';\nimport { makeOperation, stringifyDocument } from '@urql/core';\n\nimport { hash } from './sha256';\n\nconst isPersistedMiss = (error: CombinedError): boolean =>\n  error.graphQLErrors.some(x => x.message === 'PersistedQueryNotFound');\n\nconst isPersistedUnsupported = (error: CombinedError): boolean =>\n  error.graphQLErrors.some(x => x.message === 'PersistedQueryNotSupported');\n\n/** Input parameters for the {@link persistedExchange}. */\nexport interface PersistedExchangeOptions {\n  /** Controls whether GET method requests will be made for Persisted Queries.\n   *\n   * @remarks\n   * When set to `true` or `'within-url-limit'`, the `persistedExchange`\n   * will use GET requests on persisted queries when the request URL\n   * doesn't exceed the 2048 character limit.\n   *\n   * When set to `force`, the `persistedExchange` will set\n   * `OperationContext.preferGetMethod` to `'force'` on persisted queries,\n   * which will force requests to be made using a GET request.\n   *\n   * GET requests are frequently used to make GraphQL requests more\n   * cacheable on CDNs.\n   *\n   * @defaultValue `undefined` - disabled\n   */\n  preferGetForPersistedQueries?: OperationContext['preferGetMethod'];\n  /** Enforces non-automatic persisted queries by ignoring APQ errors.\n   *\n   * @remarks\n   * When enabled, the `persistedExchange` will ignore `PersistedQueryNotFound`\n   * and `PersistedQueryNotSupported` errors and assume that all persisted\n   * queries are already known to the API.\n   *\n   * This is used to switch from Automatic Persisted Queries to\n   * Persisted Queries. This is commonly used to obfuscate GraphQL\n   * APIs.\n   */\n  enforcePersistedQueries?: boolean;\n  /** Custom hashing function for persisted queries.\n   *\n   * @remarks\n   * By default, `persistedExchange` will create a SHA-256 hash for\n   * persisted queries automatically. If you're instead generating\n   * hashes at compile-time, or need to use a custom SHA-256 function,\n   * you may pass one here.\n   *\n   * If `generateHash` returns either `null` or `undefined`, the\n   * operation will not be treated as a persisted operation, which\n   * essentially skips this exchange’s logic for a given operation.\n   *\n   * Hint: The default SHA-256 function uses the WebCrypto API. This\n   * API is unavailable on React Native, which may require you to\n   * pass a custom function here.\n   */\n  generateHash?(\n    query: string,\n    document: TypedDocumentNode<any, any>\n  ): Promise<string | undefined | null>;\n  /** Enables persisted queries to be used for mutations.\n   *\n   * @remarks\n   * When enabled, the `persistedExchange` will also use the persisted queries\n   * logic for mutation operations.\n   *\n   * This is disabled by default, but often used on APIs that obfuscate\n   * their GraphQL APIs.\n   */\n  enableForMutation?: boolean;\n  /** Enables persisted queries to be used for subscriptions.\n   *\n   * @remarks\n   * When enabled, the `persistedExchange` will also use the persisted queries\n   * logic for subscription operations.\n   *\n   * This is disabled by default, but often used on APIs that obfuscate\n   * their GraphQL APIs.\n   */\n  enableForSubscriptions?: boolean;\n}\n\n/** Exchange factory that adds support for Persisted Queries.\n *\n * @param options - A {@link PersistedExchangeOptions} configuration object.\n * @returns the created persisted queries {@link Exchange}.\n *\n * @remarks\n * The `persistedExchange` adds support for (Automatic) Persisted Queries\n * to any `fetchExchange`, `subscriptionExchange`, or other API exchanges\n * following it.\n *\n * It does so by adding the `persistedQuery` extensions field to GraphQL\n * requests and handles `PersistedQueryNotFound` and\n * `PersistedQueryNotSupported` errors.\n *\n * @example\n * ```ts\n * import { Client, cacheExchange, fetchExchange } from '@urql/core';\n * import { persistedExchange } from '@urql/exchange-persisted';\n *\n * const client = new Client({\n *   url: 'URL',\n *   exchanges: [\n *     cacheExchange,\n *     persistedExchange({\n *       preferGetForPersistedQueries: true,\n *     }),\n *     fetchExchange\n *   ],\n * });\n * ```\n */\nexport const persistedExchange =\n  (options?: PersistedExchangeOptions): Exchange =>\n  ({ forward }) => {\n    if (!options) options = {};\n\n    const preferGetForPersistedQueries = options.preferGetForPersistedQueries;\n    const enforcePersistedQueries = !!options.enforcePersistedQueries;\n    const hashFn = options.generateHash || hash;\n    const enableForMutation = !!options.enableForMutation;\n    const enableForSubscriptions = !!options.enableForSubscriptions;\n    let supportsPersistedQueries = true;\n\n    const operationFilter = (operation: Operation) =>\n      supportsPersistedQueries &&\n      !operation.context.persistAttempt &&\n      ((enableForMutation && operation.kind === 'mutation') ||\n        (enableForSubscriptions && operation.kind === 'subscription') ||\n        operation.kind === 'query');\n\n    const getPersistedOperation = async (operation: Operation) => {\n      const persistedOperation = makeOperation(operation.kind, operation, {\n        ...operation.context,\n        persistAttempt: true,\n      });\n\n      const sha256Hash = await hashFn(\n        stringifyDocument(operation.query),\n        operation.query\n      );\n      if (sha256Hash) {\n        persistedOperation.extensions = {\n          ...persistedOperation.extensions,\n          persistedQuery: {\n            version: 1,\n            sha256Hash,\n          },\n        };\n        if (\n          persistedOperation.kind === 'query' &&\n          preferGetForPersistedQueries\n        ) {\n          persistedOperation.context.preferGetMethod =\n            preferGetForPersistedQueries;\n        }\n      }\n\n      return persistedOperation;\n    };\n\n    return operations$ => {\n      const retries = makeSubject<Operation>();\n\n      const forwardedOps$ = pipe(\n        operations$,\n        filter(operation => !operationFilter(operation))\n      );\n\n      const persistedOps$ = pipe(\n        operations$,\n        filter(operationFilter),\n        mergeMap(operation => {\n          const persistedOperation$ = getPersistedOperation(operation);\n          return pipe(\n            fromPromise(persistedOperation$),\n            takeUntil(\n              pipe(\n                operations$,\n                filter(op => op.kind === 'teardown' && op.key === operation.key)\n              )\n            )\n          );\n        })\n      );\n\n      return pipe(\n        merge([persistedOps$, forwardedOps$, retries.source]),\n        forward,\n        map(result => {\n          if (\n            !enforcePersistedQueries &&\n            result.operation.extensions &&\n            result.operation.extensions.persistedQuery\n          ) {\n            if (result.error && isPersistedUnsupported(result.error)) {\n              // Disable future persisted queries if they're not enforced\n              supportsPersistedQueries = false;\n              // Update operation with unsupported attempt\n              const followupOperation = makeOperation(\n                result.operation.kind,\n                result.operation\n              );\n              if (followupOperation.extensions)\n                delete followupOperation.extensions.persistedQuery;\n              retries.next(followupOperation);\n              return null;\n            } else if (result.error && isPersistedMiss(result.error)) {\n              if (result.operation.extensions.persistedQuery.miss) {\n                if (process.env.NODE_ENV !== 'production') {\n                  console.warn(\n                    'persistedExchange()’s results include two misses for the same operation.\\n' +\n                      'This is not expected as it means a persisted error has been delivered for a non-persisted query!\\n' +\n                      'Another exchange with a cache may be delivering an outdated result. For example, a server-side ssrExchange() may be caching an errored result.\\n' +\n                      'Try moving the persistedExchange() in past these exchanges, for example in front of your fetchExchange.'\n                  );\n                }\n\n                return result;\n              }\n              // Update operation with unsupported attempt\n              const followupOperation = makeOperation(\n                result.operation.kind,\n                result.operation\n              );\n              // Mark as missed persisted query\n              followupOperation.extensions = {\n                ...followupOperation.extensions,\n                persistedQuery: {\n                  ...(followupOperation.extensions || {}).persistedQuery,\n                  miss: true,\n                } as PersistedRequestExtensions,\n              };\n              retries.next(followupOperation);\n              return null;\n            }\n          }\n          return result;\n        }),\n        filter((result): result is OperationResult => !!result)\n      );\n    };\n  };\n"],"names":["webCrypto","window","crypto","self","nodeCrypto","getNodeCrypto","Function","require","_error","hash","query","subtle","digest","name","TextEncoder","encode","Uint8Array","reduce","prev","byte","toString","padStart","createHash","update","process","env","NODE_ENV","console","warn","isPersistedMiss","error","graphQLErrors","some","x","message","isPersistedUnsupported","persistedExchange","options","forward","preferGetForPersistedQueries","enforcePersistedQueries","hashFn","generateHash","enableForMutation","enableForSubscriptions","supportsPersistedQueries","operationFilter","operation","context","persistAttempt","kind","getPersistedOperation","persistedOperation","makeOperation","sha256Hash","stringifyDocument","extensions","persistedQuery","version","preferGetMethod","operations$","retries","makeSubject","forwardedOps$","filter","persistedOps$","mergeMap","persistedOperation$","takeUntil","op","key","fromPromise","result","map","followupOperation","next","miss","merge","source"],"mappings":"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"}