{"version":3,"file":"urql-exchange-graphcache-extras.js","sources":["../src/extras/relayPagination.ts","../src/extras/simplePagination.ts"],"sourcesContent":["import { stringifyVariables } from '@urql/core';\nimport type { Cache, Resolver, Variables, NullArray } from '../types';\n\nexport type MergeMode = 'outwards' | 'inwards';\n\n/** Input parameters for the {@link relayPagination} factory. */\nexport interface PaginationParams {\n  /** Flip between inwards and outwards pagination.\n   *\n   * @remarks\n   * This is only relevant if youâ€™re querying pages using forwards and\n   * backwards pagination at the same time.\n   * When set to `'inwards'`, its default, pages that have been queried\n   * forward are placed in front of all pages that were queried backwards.\n   * When set to `'outwards'`, the two sets are merged in reverse.\n   */\n  mergeMode?: MergeMode;\n}\n\ninterface PageInfo {\n  __typename: string;\n  endCursor: null | string;\n  startCursor: null | string;\n  hasNextPage: boolean;\n  hasPreviousPage: boolean;\n}\n\ninterface Page {\n  __typename: string;\n  edges: NullArray<string>;\n  nodes: NullArray<string>;\n  pageInfo: PageInfo;\n}\n\nconst defaultPageInfo: PageInfo = {\n  __typename: 'PageInfo',\n  endCursor: null,\n  startCursor: null,\n  hasNextPage: false,\n  hasPreviousPage: false,\n};\n\nconst ensureKey = (x: any): string | null => (typeof x === 'string' ? x : null);\n\nconst concatEdges = (\n  cache: Cache,\n  leftEdges: NullArray<string>,\n  rightEdges: NullArray<string>\n) => {\n  const ids = new Set<string>();\n  for (let i = 0, l = leftEdges.length; i < l; i++) {\n    const edge = leftEdges[i] as string | null;\n    const node = cache.resolve(edge, 'node');\n    if (typeof node === 'string') ids.add(node);\n  }\n\n  const newEdges = leftEdges.slice();\n  for (let i = 0, l = rightEdges.length; i < l; i++) {\n    const edge = rightEdges[i] as string | null;\n    const node = cache.resolve(edge, 'node');\n    if (typeof node === 'string' && !ids.has(node)) {\n      ids.add(node);\n      newEdges.push(edge);\n    }\n  }\n\n  return newEdges;\n};\n\nconst concatNodes = (\n  leftNodes: NullArray<string>,\n  rightNodes: NullArray<string>\n) => {\n  const ids = new Set<string>();\n  for (let i = 0, l = leftNodes.length; i < l; i++) {\n    const node = leftNodes[i];\n    if (typeof node === 'string') ids.add(node);\n  }\n\n  const newNodes = leftNodes.slice();\n  for (let i = 0, l = rightNodes.length; i < l; i++) {\n    const node = rightNodes[i];\n    if (typeof node === 'string' && !ids.has(node)) {\n      ids.add(node);\n      newNodes.push(node);\n    }\n  }\n\n  return newNodes;\n};\n\nconst compareArgs = (\n  fieldArgs: Variables,\n  connectionArgs: Variables\n): boolean => {\n  for (const key in connectionArgs) {\n    if (\n      key === 'first' ||\n      key === 'last' ||\n      key === 'after' ||\n      key === 'before'\n    ) {\n      continue;\n    } else if (!(key in fieldArgs)) {\n      return false;\n    }\n\n    const argA = fieldArgs[key];\n    const argB = connectionArgs[key];\n\n    if (\n      typeof argA !== typeof argB || typeof argA !== 'object'\n        ? argA !== argB\n        : stringifyVariables(argA) !== stringifyVariables(argB)\n    ) {\n      return false;\n    }\n  }\n\n  for (const key in fieldArgs) {\n    if (\n      key === 'first' ||\n      key === 'last' ||\n      key === 'after' ||\n      key === 'before'\n    ) {\n      continue;\n    }\n\n    if (!(key in connectionArgs)) return false;\n  }\n\n  return true;\n};\n\nconst getPage = (\n  cache: Cache,\n  entityKey: string,\n  fieldKey: string\n): Page | null => {\n  const link = ensureKey(cache.resolve(entityKey, fieldKey));\n  if (!link) return null;\n\n  const typename = cache.resolve(link, '__typename') as string;\n  const edges = (cache.resolve(link, 'edges') || []) as NullArray<string>;\n  const nodes = (cache.resolve(link, 'nodes') || []) as NullArray<string>;\n  if (typeof typename !== 'string') {\n    return null;\n  }\n\n  const page: Page = {\n    __typename: typename,\n    edges,\n    nodes,\n    pageInfo: defaultPageInfo,\n  };\n\n  const pageInfoKey = cache.resolve(link, 'pageInfo');\n  if (typeof pageInfoKey === 'string') {\n    const pageInfoType = ensureKey(cache.resolve(pageInfoKey, '__typename'));\n    const endCursor = ensureKey(cache.resolve(pageInfoKey, 'endCursor'));\n    const startCursor = ensureKey(cache.resolve(pageInfoKey, 'startCursor'));\n    const hasNextPage = cache.resolve(pageInfoKey, 'hasNextPage');\n    const hasPreviousPage = cache.resolve(pageInfoKey, 'hasPreviousPage');\n\n    const pageInfo: PageInfo = (page.pageInfo = {\n      __typename: typeof pageInfoType === 'string' ? pageInfoType : 'PageInfo',\n      hasNextPage: typeof hasNextPage === 'boolean' ? hasNextPage : !!endCursor,\n      hasPreviousPage:\n        typeof hasPreviousPage === 'boolean' ? hasPreviousPage : !!startCursor,\n      endCursor,\n      startCursor,\n    });\n\n    if (pageInfo.endCursor === null) {\n      const edge = edges[edges.length - 1] as string | null;\n      if (edge) {\n        const endCursor = cache.resolve(edge, 'cursor');\n        pageInfo.endCursor = ensureKey(endCursor);\n      }\n    }\n\n    if (pageInfo.startCursor === null) {\n      const edge = edges[0] as string | null;\n      if (edge) {\n        const startCursor = cache.resolve(edge, 'cursor');\n        pageInfo.startCursor = ensureKey(startCursor);\n      }\n    }\n  }\n\n  return page;\n};\n\n/** Creates a {@link Resolver} that combines pages that comply to the Relay pagination spec.\n *\n * @param params - A {@link PaginationParams} configuration object.\n * @returns the created Relay pagination {@link Resolver}.\n *\n * @remarks\n * `relayPagination` is a factory that creates a {@link Resolver} that can combine\n * multiple pages on a field that complies to the Relay pagination spec into a single,\n * combined list for infinite scrolling.\n *\n * This resolver will only work on fields that return a `Connection` GraphQL object\n * type, according to the Relay pagination spec.\n *\n * Hint: It's not recommended to use this when you can handle infinite scrolling\n * in your UI code instead.\n *\n * @see {@link https://urql.dev/goto/docs/graphcache/local-resolvers#relay-pagination} for more information.\n * @see {@link https://urql.dev/goto/docs/basics/ui-patterns/#infinite-scrolling} for an alternate approach.\n */\nexport const relayPagination = (\n  params: PaginationParams = {}\n): Resolver<any, any, any> => {\n  const mergeMode = params.mergeMode || 'inwards';\n\n  return (_parent, fieldArgs, cache, info) => {\n    const { parentKey: entityKey, fieldName } = info;\n\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter(info => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n    if (size === 0) {\n      return undefined;\n    }\n\n    let typename: string | null = null;\n    let startEdges: NullArray<string> = [];\n    let endEdges: NullArray<string> = [];\n    let startNodes: NullArray<string> = [];\n    let endNodes: NullArray<string> = [];\n    let pageInfo: PageInfo = { ...defaultPageInfo };\n\n    for (let i = 0; i < size; i++) {\n      const { fieldKey, arguments: args } = fieldInfos[i];\n      if (args === null || !compareArgs(fieldArgs, args)) {\n        continue;\n      }\n\n      const page = getPage(cache, entityKey, fieldKey);\n      if (page === null) {\n        continue;\n      }\n      if (page.nodes.length === 0 && page.edges.length === 0 && typename) {\n        continue;\n      }\n\n      if (\n        mergeMode === 'inwards' &&\n        typeof args.last === 'number' &&\n        typeof args.first === 'number'\n      ) {\n        const firstEdges = page.edges.slice(0, args.first + 1);\n        const lastEdges = page.edges.slice(-args.last);\n        const firstNodes = page.nodes.slice(0, args.first + 1);\n        const lastNodes = page.nodes.slice(-args.last);\n\n        startEdges = concatEdges(cache, startEdges, firstEdges);\n        endEdges = concatEdges(cache, lastEdges, endEdges);\n        startNodes = concatNodes(startNodes, firstNodes);\n        endNodes = concatNodes(lastNodes, endNodes);\n\n        pageInfo = page.pageInfo;\n      } else if (args.after) {\n        startEdges = concatEdges(cache, startEdges, page.edges);\n        startNodes = concatNodes(startNodes, page.nodes);\n        pageInfo.endCursor = page.pageInfo.endCursor;\n        pageInfo.hasNextPage = page.pageInfo.hasNextPage;\n      } else if (args.before) {\n        endEdges = concatEdges(cache, page.edges, endEdges);\n        endNodes = concatNodes(page.nodes, endNodes);\n        pageInfo.startCursor = page.pageInfo.startCursor;\n        pageInfo.hasPreviousPage = page.pageInfo.hasPreviousPage;\n      } else if (typeof args.last === 'number') {\n        endEdges = concatEdges(cache, page.edges, endEdges);\n        endNodes = concatNodes(page.nodes, endNodes);\n        pageInfo = page.pageInfo;\n      } else {\n        startEdges = concatEdges(cache, startEdges, page.edges);\n        startNodes = concatNodes(startNodes, page.nodes);\n        pageInfo = page.pageInfo;\n      }\n\n      if (page.pageInfo.__typename !== pageInfo.__typename)\n        pageInfo.__typename = page.pageInfo.__typename;\n      if (typename !== page.__typename) typename = page.__typename;\n    }\n\n    if (typeof typename !== 'string') {\n      return undefined;\n    }\n\n    const hasCurrentPage = !!ensureKey(\n      cache.resolve(entityKey, fieldName, fieldArgs)\n    );\n    if (!hasCurrentPage) {\n      if (!(info as any).store.schema) {\n        return undefined;\n      } else {\n        info.partial = true;\n      }\n    }\n\n    return {\n      __typename: typename,\n      edges:\n        mergeMode === 'inwards'\n          ? concatEdges(cache, startEdges, endEdges)\n          : concatEdges(cache, endEdges, startEdges),\n      nodes:\n        mergeMode === 'inwards'\n          ? concatNodes(startNodes, endNodes)\n          : concatNodes(endNodes, startNodes),\n      pageInfo: {\n        __typename: pageInfo.__typename,\n        endCursor: pageInfo.endCursor,\n        startCursor: pageInfo.startCursor,\n        hasNextPage: pageInfo.hasNextPage,\n        hasPreviousPage: pageInfo.hasPreviousPage,\n      },\n    };\n  };\n};\n","import { stringifyVariables } from '@urql/core';\nimport type { Resolver, Variables, NullArray } from '../types';\n\nexport type MergeMode = 'before' | 'after';\n\n/** Input parameters for the {@link simplePagination} factory. */\nexport interface PaginationParams {\n  /** The name of the field argument used to define the pageâ€™s offset. */\n  offsetArgument?: string;\n  /** The name of the field argument used to define the pageâ€™s length. */\n  limitArgument?: string;\n  /** Flip between forward and backwards pagination.\n   *\n   * @remarks\n   * When set to `'after'`, its default, pages are merged forwards and in order.\n   * When set to `'before'`, pages are merged in reverse, putting later pages\n   * in front of earlier ones.\n   */\n  mergeMode?: MergeMode;\n}\n\n/** Creates a {@link Resolver} that combines pages of a primitive pagination field.\n *\n * @param options - A {@link PaginationParams} configuration object.\n * @returns the created pagination {@link Resolver}.\n *\n * @remarks\n * `simplePagination` is a factory that creates a {@link Resolver} that can combine\n * multiple lists on a paginated field into a single, combined list for infinite\n * scrolling.\n *\n * Hint: It's not recommended to use this when you can handle infinite scrolling\n * in your UI code instead.\n *\n * @see {@link https://urql.dev/goto/docs/graphcache/local-resolvers#simple-pagination} for more information.\n * @see {@link https://urql.dev/goto/docs/basics/ui-patterns/#infinite-scrolling} for an alternate approach.\n */\nexport const simplePagination = ({\n  offsetArgument = 'skip',\n  limitArgument = 'limit',\n  mergeMode = 'after',\n}: PaginationParams = {}): Resolver<any, any, any> => {\n  const compareArgs = (\n    fieldArgs: Variables,\n    connectionArgs: Variables\n  ): boolean => {\n    for (const key in connectionArgs) {\n      if (key === offsetArgument || key === limitArgument) {\n        continue;\n      } else if (!(key in fieldArgs)) {\n        return false;\n      }\n\n      const argA = fieldArgs[key];\n      const argB = connectionArgs[key];\n\n      if (\n        typeof argA !== typeof argB || typeof argA !== 'object'\n          ? argA !== argB\n          : stringifyVariables(argA) !== stringifyVariables(argB)\n      ) {\n        return false;\n      }\n    }\n\n    for (const key in fieldArgs) {\n      if (key === offsetArgument || key === limitArgument) {\n        continue;\n      }\n      if (!(key in connectionArgs)) return false;\n    }\n\n    return true;\n  };\n\n  return (_parent, fieldArgs, cache, info) => {\n    const { parentKey: entityKey, fieldName } = info;\n\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter(info => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n    if (size === 0) {\n      return undefined;\n    }\n\n    const visited = new Set();\n    let result: NullArray<string> = [];\n    let prevOffset: number | null = null;\n\n    for (let i = 0; i < size; i++) {\n      const { fieldKey, arguments: args } = fieldInfos[i];\n      if (args === null || !compareArgs(fieldArgs, args)) {\n        continue;\n      }\n\n      const links = cache.resolve(entityKey, fieldKey) as string[];\n      const currentOffset = args[offsetArgument];\n\n      if (\n        links === null ||\n        links.length === 0 ||\n        typeof currentOffset !== 'number'\n      ) {\n        continue;\n      }\n\n      const tempResult: NullArray<string> = [];\n\n      for (let j = 0; j < links.length; j++) {\n        const link = links[j];\n        if (visited.has(link)) continue;\n        tempResult.push(link);\n        visited.add(link);\n      }\n\n      if (\n        (!prevOffset || currentOffset > prevOffset) ===\n        (mergeMode === 'after')\n      ) {\n        result = [...result, ...tempResult];\n      } else {\n        result = [...tempResult, ...result];\n      }\n\n      prevOffset = currentOffset;\n    }\n\n    const hasCurrentPage = cache.resolve(entityKey, fieldName, fieldArgs);\n    if (hasCurrentPage) {\n      return result;\n    } else if (!(info as any).store.schema) {\n      return undefined;\n    } else {\n      info.partial = true;\n      return result;\n    }\n  };\n};\n"],"names":["defaultPageInfo","__typename","endCursor","startCursor","hasNextPage","hasPreviousPage","ensureKey","x","concatEdges","cache","leftEdges","rightEdges","ids","Set","i","l","length","edge","node","resolve","add","newEdges","slice","has","push","concatNodes","leftNodes","rightNodes","newNodes","compareArgs","fieldArgs","connectionArgs","key","argA","argB","stringifyVariables","getPage","entityKey","fieldKey","link","typename","edges","nodes","page","pageInfo","pageInfoKey","pageInfoType","relayPagination","params","mergeMode","_parent","info","parentKey","fieldName","allFields","inspectFields","fieldInfos","filter","size","undefined","startEdges","endEdges","startNodes","endNodes","arguments","args","last","first","firstEdges","lastEdges","firstNodes","lastNodes","after","before","hasCurrentPage","store","schema","partial","simplePagination","offsetArgument","limitArgument","visited","result","prevOffset","links","currentOffset","tempResult","j"],"mappings":"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"}