{"version":3,"file":"urql-exchange-graphcache.min.mjs","sources":["../src/helpers/help.ts","../src/ast/node.ts","../src/ast/variables.ts","../src/ast/traversal.ts","../src/ast/schemaPredicates.ts","../src/store/keys.ts","../src/store/data.ts","../src/operations/shared.ts","../src/operations/query.ts","../src/operations/invalidate.ts","../src/operations/write.ts","../src/store/store.ts","../src/ast/schema.ts","../src/helpers/operation.ts","../src/cacheExchange.ts","../src/offlineExchange.ts"],"sourcesContent":["// These are guards that are used throughout the codebase to warn or error on\n// unexpected behaviour or conditions.\n// Every warning and error comes with a number that uniquely identifies them.\n// You can read more about the messages themselves in `docs/graphcache/errors.md`\n\nimport type {\n  ExecutableDefinitionNode,\n  InlineFragmentNode,\n} from '@0no-co/graphql.web';\nimport type { Logger } from '../types';\nimport { Kind } from '@0no-co/graphql.web';\n\nexport type ErrorCode =\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | 13\n  | 14\n  | 15\n  | 16\n  | 17\n  | 18\n  | 19\n  | 20\n  | 21\n  | 22\n  | 23\n  | 24\n  | 25\n  | 26\n  | 27\n  | 28;\n\ntype DebugNode = ExecutableDefinitionNode | InlineFragmentNode;\n\n// URL unfurls to https://formidable.com/open-source/urql/docs/graphcache/errors/\nconst helpUrl = '\\nhttps://bit.ly/2XbVrpR#';\nconst cache = new Set<string>();\n\nexport const currentDebugStack: string[] = [];\n\nexport const popDebugNode = () => currentDebugStack.pop();\n\nexport const pushDebugNode = (typename: void | string, node: DebugNode) => {\n  let identifier = '';\n  if (node.kind === Kind.INLINE_FRAGMENT) {\n    identifier = typename\n      ? `Inline Fragment on \"${typename}\"`\n      : 'Inline Fragment';\n  } else if (node.kind === Kind.OPERATION_DEFINITION) {\n    const name = node.name ? `\"${node.name.value}\"` : 'Unnamed';\n    identifier = `${name} ${node.operation}`;\n  } else if (node.kind === Kind.FRAGMENT_DEFINITION) {\n    identifier = `\"${node.name.value}\" Fragment`;\n  }\n\n  if (identifier) {\n    currentDebugStack.push(identifier);\n  }\n};\n\nconst getDebugOutput = (): string =>\n  currentDebugStack.length\n    ? '\\n(Caused At: ' + currentDebugStack.join(', ') + ')'\n    : '';\n\nexport function invariant(\n  condition: any,\n  message: string,\n  code: ErrorCode\n): asserts condition {\n  if (!condition) {\n    let errorMessage = message || 'Minfied Error #' + code + '\\n';\n    if (process.env.NODE_ENV !== 'production') {\n      errorMessage += getDebugOutput();\n    }\n\n    const error = new Error(errorMessage + helpUrl + code);\n    error.name = 'Graphcache Error';\n    throw error;\n  }\n}\n\nexport function warn(\n  message: string,\n  code: ErrorCode,\n  logger: Logger | undefined\n) {\n  if (!cache.has(message)) {\n    if (logger) {\n      logger('warn', message + getDebugOutput() + helpUrl + code);\n    } else {\n      console.warn(message + getDebugOutput() + helpUrl + code);\n    }\n    cache.add(message);\n  }\n}\n","import type {\n  NamedTypeNode,\n  NameNode,\n  DirectiveNode,\n  SelectionNode,\n  SelectionSetNode,\n  FieldNode,\n  FragmentDefinitionNode,\n} from '@0no-co/graphql.web';\n\nimport type { FormattedNode } from '@urql/core';\n\nexport type SelectionSet = readonly FormattedNode<SelectionNode>[];\n\nconst EMPTY_DIRECTIVES: Record<string, DirectiveNode | undefined> = {};\n\n/** Returns the directives dictionary of a given node */\nexport const getDirectives = (node: {\n  _directives?: Record<string, DirectiveNode | undefined>;\n}) => node._directives || EMPTY_DIRECTIVES;\n\n/** Returns the name of a given node */\nexport const getName = (node: { name: NameNode }): string => node.name.value;\n\nexport const getFragmentTypeName = (node: FragmentDefinitionNode): string =>\n  node.typeCondition.name.value;\n\n/** Returns either the field's name or the field's alias */\nexport const getFieldAlias = (node: FieldNode): string =>\n  node.alias ? node.alias.value : node.name.value;\n\nconst emptySelectionSet: SelectionSet = [];\n\n/** Returns the SelectionSet for a given inline or defined fragment node */\nexport const getSelectionSet = (node: {\n  selectionSet?: FormattedNode<SelectionSetNode>;\n}): FormattedNode<SelectionSet> =>\n  (node.selectionSet\n    ? node.selectionSet.selections\n    : emptySelectionSet) as FormattedNode<SelectionSet>;\n\nexport const getTypeCondition = (node: {\n  typeCondition?: NamedTypeNode;\n}): string | null =>\n  node.typeCondition ? node.typeCondition.name.value : null;\n","import type {\n  FieldNode,\n  DirectiveNode,\n  OperationDefinitionNode,\n} from '@0no-co/graphql.web';\nimport { valueFromASTUntyped } from '@0no-co/graphql.web';\n\nimport { getName } from './node';\n\nimport type { Variables } from '../types';\n\n/** Evaluates a fields arguments taking vars into account */\nexport const getFieldArguments = (\n  node: FieldNode | DirectiveNode,\n  vars: Variables\n): null | Variables => {\n  let args: null | Variables = null;\n  if (node.arguments) {\n    for (let i = 0, l = node.arguments.length; i < l; i++) {\n      const arg = node.arguments[i];\n      const value = valueFromASTUntyped(arg.value, vars);\n      if (value !== undefined && value !== null) {\n        if (!args) args = {};\n        args[getName(arg)] = value as any;\n      }\n    }\n  }\n  return args;\n};\n\n/** Returns a filtered form of variables with values missing that the query doesn't require */\nexport const filterVariables = (\n  node: OperationDefinitionNode,\n  input: void | object\n) => {\n  if (!input || !node.variableDefinitions) {\n    return undefined;\n  }\n\n  const vars = {};\n  for (let i = 0, l = node.variableDefinitions.length; i < l; i++) {\n    const name = getName(node.variableDefinitions[i].variable);\n    vars[name] = input[name];\n  }\n\n  return vars;\n};\n\n/** Returns a normalized form of variables with defaulted values */\nexport const normalizeVariables = (\n  node: OperationDefinitionNode,\n  input: void | Record<string, unknown>\n): Variables => {\n  const vars = {};\n  if (!input) return vars;\n\n  if (node.variableDefinitions) {\n    for (let i = 0, l = node.variableDefinitions.length; i < l; i++) {\n      const def = node.variableDefinitions[i];\n      const name = getName(def.variable);\n      vars[name] =\n        input[name] === undefined && def.defaultValue\n          ? valueFromASTUntyped(def.defaultValue, input)\n          : input[name];\n    }\n  }\n\n  for (const key in input) {\n    if (!(key in vars)) vars[key] = input[key];\n  }\n\n  return vars;\n};\n","import type {\n  SelectionNode,\n  DocumentNode,\n  OperationDefinitionNode,\n  FragmentSpreadNode,\n  InlineFragmentNode,\n} from '@0no-co/graphql.web';\nimport { valueFromASTUntyped, Kind } from '@0no-co/graphql.web';\n\nimport type { FormattedNode } from '@urql/core';\nimport { getName, getDirectives } from './node';\nimport { invariant } from '../helpers/help';\nimport type { Fragments, Variables } from '../types';\n\nfunction getMainOperation(\n  doc: FormattedNode<DocumentNode>\n): FormattedNode<OperationDefinitionNode>;\nfunction getMainOperation(doc: DocumentNode): OperationDefinitionNode;\n\n/** Returns the main operation's definition */\nfunction getMainOperation(doc: DocumentNode): OperationDefinitionNode {\n  for (let i = 0; i < doc.definitions.length; i++) {\n    if (doc.definitions[i].kind === Kind.OPERATION_DEFINITION) {\n      return doc.definitions[i] as FormattedNode<OperationDefinitionNode>;\n    }\n  }\n\n  invariant(\n    false,\n    'Invalid GraphQL document: All GraphQL documents must contain an OperationDefinition' +\n      'node for a query, subscription, or mutation.',\n    1\n  );\n}\n\nexport { getMainOperation };\n\n/** Returns a mapping from fragment names to their selections */\nexport const getFragments = (doc: FormattedNode<DocumentNode>): Fragments => {\n  const fragments: Fragments = {};\n  for (let i = 0; i < doc.definitions.length; i++) {\n    const node = doc.definitions[i];\n    if (node.kind === Kind.FRAGMENT_DEFINITION) {\n      fragments[getName(node)] = node;\n    }\n  }\n\n  return fragments;\n};\n\n/** Resolves @include and @skip directives to determine whether field is included. */\nexport const shouldInclude = (\n  node: FormattedNode<SelectionNode>,\n  vars: Variables\n): boolean => {\n  const directives = getDirectives(node);\n  if (directives.include || directives.skip) {\n    // Finds any @include or @skip directive that forces the node to be skipped\n    for (const name in directives) {\n      const directive = directives[name];\n      if (\n        directive &&\n        (name === 'include' || name === 'skip') &&\n        directive.arguments &&\n        directive.arguments[0] &&\n        getName(directive.arguments[0]) === 'if'\n      ) {\n        // Return whether this directive forces us to skip\n        // `@include(if: false)` or `@skip(if: true)`\n        const value = valueFromASTUntyped(directive.arguments[0].value, vars);\n        return name === 'include' ? !!value : !value;\n      }\n    }\n  }\n  return true;\n};\n\n/** Resolves @defer directive to determine whether a fragment is potentially skipped. */\nexport const isDeferred = (\n  node: FormattedNode<FragmentSpreadNode | InlineFragmentNode>,\n  vars: Variables\n): boolean => {\n  const { defer } = getDirectives(node);\n  if (defer) {\n    for (const argument of defer.arguments || []) {\n      if (getName(argument) === 'if') {\n        // Return whether `@defer(if: )` is enabled\n        return !!valueFromASTUntyped(argument.value, vars);\n      }\n    }\n    return true;\n  }\n\n  return false;\n};\n\n/** Resolves @_optional and @_required directive to determine whether the fields in a fragment are conaidered optional. */\nexport const isOptional = (\n  node: FormattedNode<FragmentSpreadNode | InlineFragmentNode>\n): boolean | undefined => {\n  const { optional, required } = getDirectives(node);\n  if (required) {\n    return false;\n  }\n\n  if (optional) {\n    return true;\n  }\n\n  return undefined;\n};\n","import type {\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n} from '@0no-co/graphql.web';\n\nimport { warn, invariant } from '../helpers/help';\nimport { getTypeCondition } from './node';\nimport type { SchemaIntrospector, SchemaObject } from './schema';\n\nimport type {\n  KeyingConfig,\n  UpdatesConfig,\n  ResolverConfig,\n  OptimisticMutationConfig,\n  Logger,\n} from '../types';\n\nconst BUILTIN_NAME = '__';\n\nexport const isFieldNullable = (\n  schema: SchemaIntrospector,\n  typename: string,\n  fieldName: string,\n  logger: Logger | undefined\n): boolean => {\n  const field = getField(schema, typename, fieldName, logger);\n  return !!field && field.type.kind !== 'NON_NULL';\n};\n\nexport const isListNullable = (\n  schema: SchemaIntrospector,\n  typename: string,\n  fieldName: string,\n  logger: Logger | undefined\n): boolean => {\n  const field = getField(schema, typename, fieldName, logger);\n  if (!field) return false;\n  const ofType =\n    field.type.kind === 'NON_NULL' ? field.type.ofType : field.type;\n  return ofType.kind === 'LIST' && ofType.ofType.kind !== 'NON_NULL';\n};\n\nexport const isFieldAvailableOnType = (\n  schema: SchemaIntrospector,\n  typename: string,\n  fieldName: string,\n  logger: Logger | undefined\n): boolean =>\n  fieldName.indexOf(BUILTIN_NAME) === 0 ||\n  typename.indexOf(BUILTIN_NAME) === 0 ||\n  !!getField(schema, typename, fieldName, logger);\n\nexport const isInterfaceOfType = (\n  schema: SchemaIntrospector,\n  node: InlineFragmentNode | FragmentDefinitionNode,\n  typename: string | void\n): boolean => {\n  if (!typename) return false;\n  const typeCondition = getTypeCondition(node);\n  if (!typeCondition || typename === typeCondition) {\n    return true;\n  } else if (\n    schema.types!.has(typeCondition) &&\n    schema.types!.get(typeCondition)!.kind === 'OBJECT'\n  ) {\n    return typeCondition === typename;\n  }\n\n  expectAbstractType(schema, typeCondition!);\n  expectObjectType(schema, typename!);\n  return schema.isSubType(typeCondition, typename);\n};\n\nconst getField = (\n  schema: SchemaIntrospector,\n  typename: string,\n  fieldName: string,\n  logger: Logger | undefined\n) => {\n  if (\n    fieldName.indexOf(BUILTIN_NAME) === 0 ||\n    typename.indexOf(BUILTIN_NAME) === 0\n  )\n    return;\n\n  expectObjectType(schema, typename);\n  const object = schema.types!.get(typename) as SchemaObject;\n  const field = object.fields()[fieldName];\n  if (!field) {\n    warn(\n      'Invalid field: The field `' +\n        fieldName +\n        '` does not exist on `' +\n        typename +\n        '`, ' +\n        'but the GraphQL document expects it to exist.\\n' +\n        'Traversal will continue, however this may lead to undefined behavior!',\n      4,\n      logger\n    );\n  }\n\n  return field;\n};\n\nfunction expectObjectType(schema: SchemaIntrospector, typename: string) {\n  invariant(\n    schema.types!.has(typename) &&\n      schema.types!.get(typename)!.kind === 'OBJECT',\n    'Invalid Object type: The type `' +\n      typename +\n      '` is not an object in the defined schema, ' +\n      'but the GraphQL document is traversing it.',\n    3\n  );\n}\n\nfunction expectAbstractType(schema: SchemaIntrospector, typename: string) {\n  invariant(\n    schema.types!.has(typename) &&\n      (schema.types!.get(typename)!.kind === 'INTERFACE' ||\n        schema.types!.get(typename)!.kind === 'UNION'),\n    'Invalid Abstract type: The type `' +\n      typename +\n      '` is not an Interface or Union type in the defined schema, ' +\n      'but a fragment in the GraphQL document is using it as a type condition.',\n    5\n  );\n}\n\nexport function expectValidKeyingConfig(\n  schema: SchemaIntrospector,\n  keys: KeyingConfig,\n  logger: Logger | undefined\n): void {\n  if (process.env.NODE_ENV !== 'production') {\n    for (const key in keys) {\n      if (!schema.types!.has(key)) {\n        warn(\n          'Invalid Object type: The type `' +\n            key +\n            '` is not an object in the defined schema, but the `keys` option is referencing it.',\n          20,\n          logger\n        );\n      }\n    }\n  }\n}\n\nexport function expectValidUpdatesConfig(\n  schema: SchemaIntrospector,\n  updates: UpdatesConfig,\n  logger: Logger | undefined\n): void {\n  if (process.env.NODE_ENV === 'production') {\n    return;\n  }\n\n  for (const typename in updates) {\n    if (!updates[typename]) {\n      continue;\n    } else if (!schema.types!.has(typename)) {\n      let addition = '';\n\n      if (\n        typename === 'Mutation' &&\n        schema.mutation &&\n        schema.mutation !== 'Mutation'\n      ) {\n        addition +=\n          '\\nMaybe your config should reference `' + schema.mutation + '`?';\n      } else if (\n        typename === 'Subscription' &&\n        schema.subscription &&\n        schema.subscription !== 'Subscription'\n      ) {\n        addition +=\n          '\\nMaybe your config should reference `' + schema.subscription + '`?';\n      }\n\n      return warn(\n        'Invalid updates type: The type `' +\n          typename +\n          '` is not an object in the defined schema, but the `updates` config is referencing it.' +\n          addition,\n        21,\n        logger\n      );\n    }\n\n    const fields = (schema.types!.get(typename)! as SchemaObject).fields();\n    for (const fieldName in updates[typename]!) {\n      if (!fields[fieldName]) {\n        warn(\n          'Invalid updates field: `' +\n            fieldName +\n            '` on `' +\n            typename +\n            '` is not in the defined schema, but the `updates` config is referencing it.',\n          22,\n          logger\n        );\n      }\n    }\n  }\n}\n\nfunction warnAboutResolver(name: string, logger: Logger | undefined): void {\n  warn(\n    `Invalid resolver: \\`${name}\\` is not in the defined schema, but the \\`resolvers\\` option is referencing it.`,\n    23,\n    logger\n  );\n}\n\nfunction warnAboutAbstractResolver(\n  name: string,\n  kind: 'UNION' | 'INTERFACE',\n  logger: Logger | undefined\n): void {\n  warn(\n    `Invalid resolver: \\`${name}\\` does not match to a concrete type in the schema, but the \\`resolvers\\` option is referencing it. Implement the resolver for the types that ${\n      kind === 'UNION' ? 'make up the union' : 'implement the interface'\n    } instead.`,\n    26,\n    logger\n  );\n}\n\nexport function expectValidResolversConfig(\n  schema: SchemaIntrospector,\n  resolvers: ResolverConfig,\n  logger: Logger | undefined\n): void {\n  if (process.env.NODE_ENV === 'production') {\n    return;\n  }\n\n  for (const key in resolvers) {\n    if (key === 'Query') {\n      if (schema.query) {\n        const validQueries = (\n          schema.types!.get(schema.query) as SchemaObject\n        ).fields();\n        for (const resolverQuery in resolvers.Query || {}) {\n          if (!validQueries[resolverQuery]) {\n            warnAboutResolver('Query.' + resolverQuery, logger);\n          }\n        }\n      } else {\n        warnAboutResolver('Query', logger);\n      }\n    } else {\n      if (!schema.types!.has(key)) {\n        warnAboutResolver(key, logger);\n      } else if (\n        schema.types!.get(key)!.kind === 'INTERFACE' ||\n        schema.types!.get(key)!.kind === 'UNION'\n      ) {\n        warnAboutAbstractResolver(\n          key,\n          schema.types!.get(key)!.kind as 'INTERFACE' | 'UNION',\n          logger\n        );\n      } else {\n        const validTypeProperties = (\n          schema.types!.get(key) as SchemaObject\n        ).fields();\n        for (const resolverProperty in resolvers[key] || {}) {\n          if (!validTypeProperties[resolverProperty]) {\n            warnAboutResolver(key + '.' + resolverProperty, logger);\n          }\n        }\n      }\n    }\n  }\n}\n\nexport function expectValidOptimisticMutationsConfig(\n  schema: SchemaIntrospector,\n  optimisticMutations: OptimisticMutationConfig,\n  logger: Logger | undefined\n): void {\n  if (process.env.NODE_ENV === 'production') {\n    return;\n  }\n\n  if (schema.mutation) {\n    const validMutations = (\n      schema.types!.get(schema.mutation) as SchemaObject\n    ).fields();\n    for (const mutation in optimisticMutations) {\n      if (!validMutations[mutation]) {\n        warn(\n          `Invalid optimistic mutation field: \\`${mutation}\\` is not a mutation field in the defined schema, but the \\`optimistic\\` option is referencing it.`,\n          24,\n          logger\n        );\n      }\n    }\n  }\n}\n","import { stringifyVariables } from '@urql/core';\nimport type { FieldArgs, FieldInfo, KeyInfo } from '../types';\n\nexport const keyOfField = (fieldName: string, args?: FieldArgs) =>\n  args ? `${fieldName}(${stringifyVariables(args)})` : fieldName;\n\nexport const joinKeys = (parentKey: string, key: string) =>\n  `${parentKey}.${key}`;\n\nexport const fieldInfoOfKey = (fieldKey: string): FieldInfo => {\n  const parenIndex = fieldKey.indexOf('(');\n  if (parenIndex > -1) {\n    return {\n      fieldKey,\n      fieldName: fieldKey.slice(0, parenIndex),\n      arguments: JSON.parse(fieldKey.slice(parenIndex + 1, -1)),\n    };\n  } else {\n    return {\n      fieldKey,\n      fieldName: fieldKey,\n      arguments: null,\n    };\n  }\n};\n\nexport const serializeKeys = (entityKey: string, fieldKey: string) =>\n  `${entityKey.replace(/\\./g, '%2e')}.${fieldKey}`;\n\nexport const deserializeKeyInfo = (key: string): KeyInfo => {\n  const dotIndex = key.indexOf('.');\n  const entityKey = key.slice(0, dotIndex).replace(/%2e/g, '.');\n  const fieldKey = key.slice(dotIndex + 1);\n  return { entityKey, fieldKey };\n};\n","import { stringifyVariables } from '@urql/core';\n\nimport type {\n  Link,\n  EntityField,\n  FieldInfo,\n  StorageAdapter,\n  SerializedEntries,\n  Dependencies,\n  OperationType,\n  DataField,\n  Data,\n} from '../types';\n\nimport {\n  serializeKeys,\n  deserializeKeyInfo,\n  fieldInfoOfKey,\n  joinKeys,\n} from './keys';\n\nimport { invariant, currentDebugStack } from '../helpers/help';\n\ntype Dict<T> = Record<string, T>;\ntype KeyMap<T> = Map<string, T>;\ntype OperationMap<T> = Map<number, T>;\n\ninterface NodeMap<T> {\n  optimistic: OperationMap<KeyMap<Dict<T | undefined>>>;\n  base: KeyMap<Dict<T>>;\n}\n\nexport interface InMemoryData {\n  /** Flag for whether the data is waiting for hydration */\n  hydrating: boolean;\n  /** Flag for whether deferred tasks have been scheduled yet */\n  defer: boolean;\n  /** A list of entities that have been flagged for gargabe collection since no references to them are left */\n  gc: Set<string>;\n  /** A list of entity+field keys that will be persisted */\n  persist: Set<string>;\n  /** The API's \"Query\" typename which is needed to filter dependencies */\n  queryRootKey: string;\n  /** Number of references to each entity (except \"Query\") */\n  refCount: KeyMap<number>;\n  /** A map of entity fields (key-value entries per entity) */\n  records: NodeMap<EntityField>;\n  /** A map of entity links which are connections from one entity to another (key-value entries per entity) */\n  links: NodeMap<Link>;\n  /** A map of typename to a list of entity-keys belonging to said type */\n  types: Map<string, Set<string>>;\n  /** A set of Query operation keys that are in-flight and deferred/streamed */\n  deferredKeys: Set<number>;\n  /** A set of Query operation keys that are in-flight and awaiting a result */\n  commutativeKeys: Set<number>;\n  /** A set of Query operation keys that have been written to */\n  dirtyKeys: Set<number>;\n  /** The order of optimistic layers */\n  optimisticOrder: number[];\n  /** This may be a persistence adapter that will receive changes in a batch */\n  storage: StorageAdapter | null;\n  /** A map of all the types we have encountered that did not map directly to a concrete type */\n  abstractToConcreteMap: Map<string, Set<string>>;\n}\n\nlet currentOwnership: null | WeakSet<any> = null;\nlet currentDataMapping: null | WeakMap<any, any> = null;\nlet currentData: null | InMemoryData = null;\nlet currentOptimisticKey: null | number = null;\nexport let currentOperation: null | OperationType = null;\nexport let currentDependencies: null | Dependencies = null;\nexport let currentForeignData = false;\nexport let currentOptimistic = false;\n\nexport function makeData(data: DataField | void, isArray?: false): Data;\nexport function makeData(data: DataField | void, isArray: true): DataField[];\n\n/** Creates a new data object unless it's been created in this data run */\nexport function makeData(data?: DataField | void, isArray?: boolean) {\n  let newData: Data | Data[] | undefined;\n  if (data) {\n    if (currentOwnership!.has(data)) return data;\n    newData = currentDataMapping!.get(data) as any;\n  }\n\n  if (newData == null) {\n    newData = (isArray ? [] : {}) as any;\n  }\n\n  if (data) {\n    currentDataMapping!.set(data, newData);\n  }\n\n  currentOwnership!.add(newData);\n  return newData;\n}\n\nexport const ownsData = (data?: Data): boolean =>\n  !!data && currentOwnership!.has(data);\n\n/** Before reading or writing the global state needs to be initialised */\nexport const initDataState = (\n  operationType: OperationType,\n  data: InMemoryData,\n  layerKey?: number | null,\n  isOptimistic?: boolean,\n  isForeignData?: boolean\n) => {\n  currentOwnership = new WeakSet();\n  currentDataMapping = new WeakMap();\n  currentOperation = operationType;\n  currentData = data;\n  currentDependencies = new Set();\n  currentOptimistic = !!isOptimistic;\n  currentForeignData = !!isForeignData;\n  if (process.env.NODE_ENV !== 'production') {\n    currentDebugStack.length = 0;\n  }\n\n  if (!layerKey) {\n    currentOptimisticKey = null;\n  } else if (currentOperation === 'read') {\n    // We don't create new layers for read operations and instead simply\n    // apply the currently available layer, if any\n    currentOptimisticKey = layerKey;\n  } else if (\n    isOptimistic ||\n    data.hydrating ||\n    data.optimisticOrder.length > 1\n  ) {\n    // If this operation isn't optimistic and we see it for the first time,\n    // then it must've been optimistic in the past, so we can proactively\n    // clear the optimistic data before writing\n    if (!isOptimistic && !data.commutativeKeys.has(layerKey)) {\n      reserveLayer(data, layerKey);\n    } else if (isOptimistic) {\n      if (\n        data.optimisticOrder.indexOf(layerKey) !== -1 &&\n        !data.commutativeKeys.has(layerKey)\n      ) {\n        data.optimisticOrder.splice(data.optimisticOrder.indexOf(layerKey), 1);\n      }\n      // NOTE: This optimally shouldn't happen as it implies that an optimistic\n      // write is being performed after a concrete write.\n      data.commutativeKeys.delete(layerKey);\n    }\n\n    // An optimistic update of a mutation may force an optimistic layer,\n    // or this Query update may be applied optimistically since it's part\n    // of a commutative chain\n    currentOptimisticKey = layerKey;\n    createLayer(data, layerKey);\n  } else {\n    // Otherwise we don't create an optimistic layer and clear the\n    // operation's one if it already exists\n    // We also do this when only one layer exists to avoid having to squash\n    // any layers at the end of writing this layer\n    currentOptimisticKey = null;\n    deleteLayer(data, layerKey);\n  }\n};\n\n/** Reset the data state after read/write is complete */\nexport const clearDataState = () => {\n  // NOTE: This is only called to check for the invariant to pass\n  if (process.env.NODE_ENV !== 'production') {\n    getCurrentDependencies();\n  }\n\n  const data = currentData!;\n  const layerKey = currentOptimisticKey;\n  currentOptimistic = false;\n  currentOptimisticKey = null;\n\n  // Determine whether the current operation has been a commutative layer\n  if (\n    !data.hydrating &&\n    layerKey &&\n    data.optimisticOrder.indexOf(layerKey) > -1\n  ) {\n    // Squash all layers in reverse order (low priority upwards) that have\n    // been written already\n    let i = data.optimisticOrder.length;\n    while (\n      --i >= 0 &&\n      data.dirtyKeys.has(data.optimisticOrder[i]) &&\n      data.commutativeKeys.has(data.optimisticOrder[i])\n    )\n      squashLayer(data.optimisticOrder[i]);\n  }\n\n  currentOwnership = null;\n  currentDataMapping = null;\n  currentOperation = null;\n  currentData = null;\n  currentDependencies = null;\n  if (process.env.NODE_ENV !== 'production') {\n    currentDebugStack.length = 0;\n  }\n\n  if (process.env.NODE_ENV !== 'test') {\n    // Schedule deferred tasks if we haven't already, and if either a persist or GC run\n    // are likely to be needed\n    if (!data.defer && (data.storage || !data.optimisticOrder.length)) {\n      data.defer = true;\n      setTimeout(() => {\n        initDataState('read', data, null);\n        gc();\n        persistData();\n        clearDataState();\n        data.defer = false;\n      });\n    }\n  }\n};\n\n/** Initialises then resets the data state, which may squash this layer if necessary */\nexport const noopDataState = (\n  data: InMemoryData,\n  layerKey: number | null,\n  isOptimistic?: boolean\n) => {\n  if (layerKey && !isOptimistic) data.deferredKeys.delete(layerKey);\n  initDataState('write', data, layerKey, isOptimistic);\n  clearDataState();\n};\n\n/** As we're writing, we keep around all the records and links we've read or have written to */\nexport const getCurrentDependencies = (): Dependencies => {\n  invariant(\n    currentDependencies !== null,\n    'Invalid Cache call: The cache may only be accessed or mutated during' +\n      'operations like write or query, or as part of its resolvers, updaters, ' +\n      'or optimistic configs.',\n    2\n  );\n\n  return currentDependencies;\n};\n\nconst DEFAULT_EMPTY_SET = new Set<string>();\nexport const make = (queryRootKey: string): InMemoryData => ({\n  hydrating: false,\n  defer: false,\n  gc: new Set(),\n  types: new Map(),\n  persist: new Set(),\n  queryRootKey,\n  refCount: new Map(),\n  links: {\n    optimistic: new Map(),\n    base: new Map(),\n  },\n  abstractToConcreteMap: new Map(),\n  records: {\n    optimistic: new Map(),\n    base: new Map(),\n  },\n  deferredKeys: new Set(),\n  commutativeKeys: new Set(),\n  dirtyKeys: new Set(),\n  optimisticOrder: [],\n  storage: null,\n});\n\n/** Adds a node value to a NodeMap (taking optimistic values into account */\nconst setNode = <T>(\n  map: NodeMap<T>,\n  entityKey: string,\n  fieldKey: string,\n  value: T\n) => {\n  if (process.env.NODE_ENV !== 'production') {\n    invariant(\n      currentOperation !== 'read',\n      'Invalid Cache write: You may not write to the cache during cache reads. ' +\n        ' Accesses to `cache.writeFragment`, `cache.updateQuery`, and `cache.link` may ' +\n        ' not be made inside `resolvers` for instance.',\n      27\n    );\n  }\n\n  // Optimistic values are written to a map in the optimistic dict\n  // All other values are written to the base map\n  const keymap: KeyMap<Dict<T | undefined>> = currentOptimisticKey\n    ? map.optimistic.get(currentOptimisticKey)!\n    : map.base;\n\n  // On the map itself we get or create the entity as a dict\n  let entity = keymap.get(entityKey) as Dict<T | undefined>;\n  if (entity === undefined) {\n    keymap.set(entityKey, (entity = Object.create(null)));\n  }\n\n  // If we're setting undefined we delete the node's entry\n  // On optimistic layers we actually set undefined so it can\n  // override the base value\n  if (value === undefined && !currentOptimisticKey) {\n    delete entity[fieldKey];\n  } else {\n    entity[fieldKey] = value;\n  }\n};\n\n/** Gets a node value from a NodeMap (taking optimistic values into account */\nconst getNode = <T>(\n  map: NodeMap<T>,\n  entityKey: string,\n  fieldKey: string\n): T | undefined => {\n  let node: Dict<T | undefined> | undefined;\n  // A read may be initialised to skip layers until its own, which is useful for\n  // reading back written data. It won't skip over optimistic layers however\n  let skip =\n    !currentOptimistic &&\n    currentOperation === 'read' &&\n    currentOptimisticKey &&\n    currentData!.commutativeKeys.has(currentOptimisticKey);\n  // This first iterates over optimistic layers (in order)\n  for (let i = 0, l = currentData!.optimisticOrder.length; i < l; i++) {\n    const layerKey = currentData!.optimisticOrder[i];\n    const optimistic = map.optimistic.get(layerKey);\n    // If we're reading starting from a specific layer, we skip until a match\n    skip = skip && layerKey !== currentOptimisticKey;\n    // If the node and node value exists it is returned, including undefined\n    if (\n      optimistic &&\n      (!skip || !currentData!.commutativeKeys.has(layerKey)) &&\n      (!currentOptimistic ||\n        currentOperation === 'write' ||\n        currentData!.commutativeKeys.has(layerKey)) &&\n      (node = optimistic.get(entityKey)) !== undefined &&\n      fieldKey in node\n    ) {\n      return node[fieldKey];\n    }\n  }\n\n  // Otherwise we read the non-optimistic base value\n  node = map.base.get(entityKey);\n  return node !== undefined ? node[fieldKey] : undefined;\n};\n\nexport function getRefCount(entityKey: string): number {\n  return currentData!.refCount.get(entityKey) || 0;\n}\n\n/** Adjusts the reference count of an entity on a refCount dict by \"by\" and updates the gc */\nconst updateRCForEntity = (entityKey: string, by: number): void => {\n  // Retrieve the reference count and adjust it by \"by\"\n  const count = getRefCount(entityKey);\n  const newCount = count + by > 0 ? count + by : 0;\n  currentData!.refCount.set(entityKey, newCount);\n  // Add it to the garbage collection batch if it needs to be deleted or remove it\n  // from the batch if it needs to be kept\n  if (!newCount) currentData!.gc.add(entityKey);\n  else if (!count && newCount) currentData!.gc.delete(entityKey);\n};\n\n/** Adjusts the reference counts of all entities of a link on a refCount dict by \"by\" and updates the gc */\nconst updateRCForLink = (link: Link | undefined, by: number): void => {\n  if (Array.isArray(link)) {\n    for (let i = 0, l = link.length; i < l; i++) updateRCForLink(link[i], by);\n  } else if (typeof link === 'string') {\n    updateRCForEntity(link, by);\n  }\n};\n\n/** Writes all parsed FieldInfo objects of a given node dict to a given array if it hasn't been seen */\nconst extractNodeFields = <T>(\n  fieldInfos: FieldInfo[],\n  seenFieldKeys: Set<string>,\n  node: Dict<T> | undefined\n): void => {\n  if (node !== undefined) {\n    for (const fieldKey in node) {\n      if (!seenFieldKeys.has(fieldKey)) {\n        // If the node hasn't been seen the serialized fieldKey is turnt back into\n        // a rich FieldInfo object that also contains the field's name and arguments\n        fieldInfos.push(fieldInfoOfKey(fieldKey));\n        seenFieldKeys.add(fieldKey);\n      }\n    }\n  }\n};\n\n/** Writes all parsed FieldInfo objects of all nodes in a NodeMap to a given array */\nconst extractNodeMapFields = <T>(\n  fieldInfos: FieldInfo[],\n  seenFieldKeys: Set<string>,\n  entityKey: string,\n  map: NodeMap<T>\n) => {\n  // Extracts FieldInfo for the entity in the base map\n  extractNodeFields(fieldInfos, seenFieldKeys, map.base.get(entityKey));\n\n  // Then extracts FieldInfo for the entity from the optimistic maps\n  for (let i = 0, l = currentData!.optimisticOrder.length; i < l; i++) {\n    const optimistic = map.optimistic.get(currentData!.optimisticOrder[i]);\n    if (optimistic !== undefined) {\n      extractNodeFields(fieldInfos, seenFieldKeys, optimistic.get(entityKey));\n    }\n  }\n};\n\n/** Garbage collects all entities that have been marked as having no references */\nexport const gc = () => {\n  // If we're currently awaiting deferred results, abort GC run\n  if (currentData!.optimisticOrder.length) return;\n\n  // Iterate over all entities that have been marked for deletion\n  // Entities have been marked for deletion in `updateRCForEntity` if\n  // their reference count dropped to 0\n  for (const entityKey of currentData!.gc.keys()) {\n    // Remove the current key from the GC batch\n    currentData!.gc.delete(entityKey);\n\n    // Check first whether the entity has any references,\n    // if so, we skip it from the GC run\n    const rc = getRefCount(entityKey);\n    if (rc > 0) continue;\n\n    const record = currentData!.records.base.get(entityKey);\n    // Delete the reference count, and delete the entity from the GC batch\n    currentData!.refCount.delete(entityKey);\n    currentData!.records.base.delete(entityKey);\n\n    const typename = (record && record.__typename) as string | undefined;\n    if (typename) {\n      const type = currentData!.types.get(typename);\n      if (type) type.delete(entityKey);\n    }\n\n    const linkNode = currentData!.links.base.get(entityKey);\n    if (linkNode) {\n      currentData!.links.base.delete(entityKey);\n      for (const fieldKey in linkNode) updateRCForLink(linkNode[fieldKey], -1);\n    }\n  }\n};\n\nconst updateDependencies = (entityKey: string, fieldKey?: string) => {\n  if (entityKey !== currentData!.queryRootKey) {\n    currentDependencies!.add(entityKey);\n  } else if (fieldKey !== undefined && fieldKey !== '__typename') {\n    currentDependencies!.add(joinKeys(entityKey, fieldKey));\n  }\n};\n\nconst updatePersist = (entityKey: string, fieldKey: string) => {\n  if (!currentOptimistic && currentData!.storage) {\n    currentData!.persist.add(serializeKeys(entityKey, fieldKey));\n  }\n};\n\n/** Reads an entity's field (a \"record\") from data */\nexport const readRecord = (\n  entityKey: string,\n  fieldKey: string\n): EntityField => {\n  if (currentOperation === 'read') {\n    updateDependencies(entityKey, fieldKey);\n  }\n  return getNode(currentData!.records, entityKey, fieldKey);\n};\n\n/** Reads an entity's link from data */\nexport const readLink = (\n  entityKey: string,\n  fieldKey: string\n): Link | undefined => {\n  if (currentOperation === 'read') {\n    updateDependencies(entityKey, fieldKey);\n  }\n  return getNode(currentData!.links, entityKey, fieldKey);\n};\n\nexport const getEntitiesForType = (typename: string): Set<string> =>\n  currentData!.types.get(typename) || DEFAULT_EMPTY_SET;\n\nexport const writeType = (typename: string, entityKey: string) => {\n  const existingTypes = currentData!.types.get(typename);\n  if (!existingTypes) {\n    const typeSet = new Set<string>();\n    typeSet.add(entityKey);\n    currentData!.types.set(typename, typeSet);\n  } else {\n    existingTypes.add(entityKey);\n  }\n};\n\nexport const getConcreteTypes = (typename: string): Set<string> =>\n  currentData!.abstractToConcreteMap.get(typename) || DEFAULT_EMPTY_SET;\n\nexport const isSeenConcreteType = (typename: string): boolean =>\n  currentData!.types.has(typename);\n\nexport const writeConcreteType = (\n  abstractType: string,\n  concreteType: string\n) => {\n  const existingTypes = currentData!.abstractToConcreteMap.get(abstractType);\n  if (!existingTypes) {\n    const typeSet = new Set<string>();\n    typeSet.add(concreteType);\n    currentData!.abstractToConcreteMap.set(abstractType, typeSet);\n  } else {\n    existingTypes.add(concreteType);\n  }\n};\n\n/** Writes an entity's field (a \"record\") to data */\nexport const writeRecord = (\n  entityKey: string,\n  fieldKey: string,\n  value?: EntityField\n) => {\n  const existing = getNode(currentData!.records, entityKey, fieldKey);\n  if (!isEqualLinkOrScalar(existing, value)) {\n    updateDependencies(entityKey, fieldKey);\n    updatePersist(entityKey, fieldKey);\n  }\n\n  setNode(currentData!.records, entityKey, fieldKey, value);\n};\n\nexport const hasField = (entityKey: string, fieldKey: string): boolean =>\n  readRecord(entityKey, fieldKey) !== undefined ||\n  readLink(entityKey, fieldKey) !== undefined;\n\n/** Writes an entity's link to data */\nexport const writeLink = (\n  entityKey: string,\n  fieldKey: string,\n  link?: Link | undefined\n) => {\n  // Retrieve the link NodeMap from either an optimistic or the base layer\n  const links = currentOptimisticKey\n    ? currentData!.links.optimistic.get(currentOptimisticKey)\n    : currentData!.links.base;\n  // Update the reference count for the link\n  if (!currentOptimisticKey) {\n    const entityLinks = links && links.get(entityKey);\n    updateRCForLink(entityLinks && entityLinks[fieldKey], -1);\n    updateRCForLink(link, 1);\n  }\n  const existing = getNode(currentData!.links, entityKey, fieldKey);\n  if (!isEqualLinkOrScalar(existing, link)) {\n    updateDependencies(entityKey, fieldKey);\n    updatePersist(entityKey, fieldKey);\n  }\n\n  // Update the link\n  setNode(currentData!.links, entityKey, fieldKey, link);\n};\n\n/** Reserves an optimistic layer and preorders it */\nexport const reserveLayer = (\n  data: InMemoryData,\n  layerKey: number,\n  hasNext?: boolean\n) => {\n  // Find the current index for the layer, and remove it from\n  // the order if it exists already\n  let index = data.optimisticOrder.indexOf(layerKey);\n  if (index > -1) data.optimisticOrder.splice(index, 1);\n\n  if (hasNext) {\n    data.deferredKeys.add(layerKey);\n    // If the layer has future results then we'll move it past any layer that's\n    // still empty, so currently pending operations will take precedence over it\n    for (\n      index = index > -1 ? index : 0;\n      index < data.optimisticOrder.length &&\n      !data.deferredKeys.has(data.optimisticOrder[index]) &&\n      (!data.dirtyKeys.has(data.optimisticOrder[index]) ||\n        !data.commutativeKeys.has(data.optimisticOrder[index]));\n      index++\n    );\n  } else {\n    data.deferredKeys.delete(layerKey);\n    // Protect optimistic layers from being turned into non-optimistic layers\n    // while preserving optimistic data\n    if (index > -1 && !data.commutativeKeys.has(layerKey))\n      clearLayer(data, layerKey);\n    index = 0;\n  }\n\n  // Register the layer with the deferred or \"top\" index and\n  // mark it as commutative\n  data.optimisticOrder.splice(index, 0, layerKey);\n  data.commutativeKeys.add(layerKey);\n};\n\n/** Checks whether a given layer exists */\nexport const hasLayer = (data: InMemoryData, layerKey: number) =>\n  data.commutativeKeys.has(layerKey) ||\n  data.optimisticOrder.indexOf(layerKey) > -1;\n\n/** Creates an optimistic layer of links and records */\nconst createLayer = (data: InMemoryData, layerKey: number) => {\n  if (data.optimisticOrder.indexOf(layerKey) === -1) {\n    data.optimisticOrder.unshift(layerKey);\n  }\n\n  if (!data.dirtyKeys.has(layerKey)) {\n    data.dirtyKeys.add(layerKey);\n    data.links.optimistic.set(layerKey, new Map());\n    data.records.optimistic.set(layerKey, new Map());\n  }\n};\n\n/** Clears all links and records of an optimistic layer */\nconst clearLayer = (data: InMemoryData, layerKey: number) => {\n  if (data.dirtyKeys.has(layerKey)) {\n    data.dirtyKeys.delete(layerKey);\n    data.records.optimistic.delete(layerKey);\n    data.links.optimistic.delete(layerKey);\n    data.deferredKeys.delete(layerKey);\n  }\n};\n\n/** Deletes links and records of an optimistic layer, and the layer itself */\nconst deleteLayer = (data: InMemoryData, layerKey: number) => {\n  const index = data.optimisticOrder.indexOf(layerKey);\n  if (index > -1) {\n    data.optimisticOrder.splice(index, 1);\n    data.commutativeKeys.delete(layerKey);\n  }\n\n  clearLayer(data, layerKey);\n};\n\n/** Merges an optimistic layer of links and records into the base data */\nconst squashLayer = (layerKey: number) => {\n  // Hide current dependencies from squashing operations\n  const previousDependencies = currentDependencies;\n  currentDependencies = new Set();\n  currentOperation = 'write';\n\n  const links = currentData!.links.optimistic.get(layerKey);\n  if (links) {\n    for (const entry of links.entries()) {\n      const entityKey = entry[0];\n      const keyMap = entry[1];\n      for (const fieldKey in keyMap) {\n        writeLink(entityKey, fieldKey, keyMap[fieldKey]);\n      }\n    }\n  }\n\n  const records = currentData!.records.optimistic.get(layerKey);\n  if (records) {\n    for (const entry of records.entries()) {\n      const entityKey = entry[0];\n      const keyMap = entry[1];\n      for (const fieldKey in keyMap) {\n        writeRecord(entityKey, fieldKey, keyMap[fieldKey]);\n      }\n    }\n  }\n\n  currentDependencies = previousDependencies;\n  deleteLayer(currentData!, layerKey);\n};\n\n/** Return an array of FieldInfo (info on all the fields and their arguments) for a given entity */\nexport const inspectFields = (entityKey: string): FieldInfo[] => {\n  const { links, records } = currentData!;\n  const fieldInfos: FieldInfo[] = [];\n  const seenFieldKeys: Set<string> = new Set();\n  // Update dependencies\n  updateDependencies(entityKey);\n  // Extract FieldInfos to the fieldInfos array for links and records\n  // This also deduplicates by keeping track of fieldKeys in the seenFieldKeys Set\n  extractNodeMapFields(fieldInfos, seenFieldKeys, entityKey, links);\n  extractNodeMapFields(fieldInfos, seenFieldKeys, entityKey, records);\n  return fieldInfos;\n};\n\nexport const persistData = () => {\n  if (currentData!.storage) {\n    currentOptimistic = true;\n    currentOperation = 'read';\n    const entries: SerializedEntries = {};\n    for (const key of currentData!.persist.keys()) {\n      const { entityKey, fieldKey } = deserializeKeyInfo(key);\n      let x: void | Link | EntityField;\n      if ((x = readLink(entityKey, fieldKey)) !== undefined) {\n        entries[key] = `:${stringifyVariables(x)}`;\n      } else if ((x = readRecord(entityKey, fieldKey)) !== undefined) {\n        entries[key] = stringifyVariables(x);\n      } else {\n        entries[key] = undefined;\n      }\n    }\n\n    currentOptimistic = false;\n    currentData!.storage.writeData(entries);\n    currentData!.persist.clear();\n  }\n};\n\nexport const hydrateData = (\n  data: InMemoryData,\n  storage: StorageAdapter,\n  entries: SerializedEntries\n) => {\n  initDataState('write', data, null);\n\n  for (const key in entries) {\n    const value = entries[key];\n    if (value !== undefined) {\n      const { entityKey, fieldKey } = deserializeKeyInfo(key);\n      if (value[0] === ':') {\n        if (readLink(entityKey, fieldKey) === undefined)\n          writeLink(entityKey, fieldKey, JSON.parse(value.slice(1)));\n      } else {\n        if (readRecord(entityKey, fieldKey) === undefined)\n          writeRecord(entityKey, fieldKey, JSON.parse(value));\n      }\n    }\n  }\n\n  data.storage = storage;\n  data.hydrating = false;\n  clearDataState();\n};\n\nfunction isEqualLinkOrScalar(\n  a: Link | EntityField | undefined,\n  b: Link | EntityField | undefined\n) {\n  if (typeof a !== typeof b) return false;\n  if (a !== b) return false;\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a.length !== b.length) return false;\n    return !a.some((el, index) => el !== b[index]);\n  }\n\n  return true;\n}\n","import type { CombinedError, ErrorLike, FormattedNode } from '@urql/core';\n\nimport type {\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n} from '@0no-co/graphql.web';\nimport { Kind } from '@0no-co/graphql.web';\n\nimport type { SelectionSet } from '../ast';\nimport {\n  isDeferred,\n  getTypeCondition,\n  getSelectionSet,\n  getName,\n  isOptional,\n} from '../ast';\n\nimport { warn, pushDebugNode, popDebugNode } from '../helpers/help';\nimport {\n  hasField,\n  currentOperation,\n  currentOptimistic,\n  writeConcreteType,\n  getConcreteTypes,\n  isSeenConcreteType,\n} from '../store/data';\nimport { keyOfField } from '../store/keys';\nimport type { Store } from '../store/store';\n\nimport { getFieldArguments, shouldInclude, isInterfaceOfType } from '../ast';\n\nimport type {\n  Fragments,\n  Variables,\n  DataField,\n  NullArray,\n  Link,\n  Entity,\n  Data,\n  Logger,\n} from '../types';\n\nexport interface Context {\n  store: Store;\n  variables: Variables;\n  fragments: Fragments;\n  parentTypeName: string;\n  parentKey: string;\n  parentFieldKey: string;\n  parent: Data;\n  fieldName: string;\n  error: ErrorLike | undefined;\n  partial: boolean;\n  hasNext: boolean;\n  optimistic: boolean;\n  __internal: {\n    path: Array<string | number>;\n    errorMap: { [path: string]: ErrorLike } | undefined;\n  };\n}\n\nexport let contextRef: Context | null = null;\nexport let deferRef = false;\nexport let optionalRef: boolean | undefined = undefined;\n\n// Checks whether the current data field is a cache miss because of a GraphQLError\nexport const getFieldError = (ctx: Context): ErrorLike | undefined =>\n  ctx.__internal.path.length > 0 && ctx.__internal.errorMap\n    ? ctx.__internal.errorMap[ctx.__internal.path.join('.')]\n    : undefined;\n\nexport const makeContext = (\n  store: Store,\n  variables: Variables,\n  fragments: Fragments,\n  typename: string,\n  entityKey: string,\n  error: CombinedError | undefined\n): Context => {\n  const ctx: Context = {\n    store,\n    variables,\n    fragments,\n    parent: { __typename: typename },\n    parentTypeName: typename,\n    parentKey: entityKey,\n    parentFieldKey: '',\n    fieldName: '',\n    error: undefined,\n    partial: false,\n    hasNext: false,\n    optimistic: currentOptimistic,\n    __internal: {\n      path: [],\n      errorMap: undefined,\n    },\n  };\n\n  if (error && error.graphQLErrors) {\n    for (let i = 0; i < error.graphQLErrors.length; i++) {\n      const graphQLError = error.graphQLErrors[i];\n      if (graphQLError.path && graphQLError.path.length) {\n        if (!ctx.__internal.errorMap)\n          ctx.__internal.errorMap = Object.create(null);\n        ctx.__internal.errorMap![graphQLError.path.join('.')] = graphQLError;\n      }\n    }\n  }\n\n  return ctx;\n};\n\nexport const updateContext = (\n  ctx: Context,\n  data: Data,\n  typename: string,\n  entityKey: string,\n  fieldKey: string,\n  fieldName: string\n) => {\n  contextRef = ctx;\n  ctx.parent = data;\n  ctx.parentTypeName = typename;\n  ctx.parentKey = entityKey;\n  ctx.parentFieldKey = fieldKey;\n  ctx.fieldName = fieldName;\n  ctx.error = getFieldError(ctx);\n};\n\nconst isFragmentHeuristicallyMatching = (\n  node: FormattedNode<InlineFragmentNode | FragmentDefinitionNode>,\n  typename: void | string,\n  entityKey: string,\n  vars: Variables,\n  logger?: Logger\n) => {\n  if (!typename) return false;\n  const typeCondition = getTypeCondition(node);\n  if (!typeCondition || typename === typeCondition) return true;\n\n  warn(\n    'Heuristic Fragment Matching: A fragment is trying to match against the `' +\n      typename +\n      '` type, ' +\n      'but the type condition is `' +\n      typeCondition +\n      '`. Since GraphQL allows for interfaces `' +\n      typeCondition +\n      '` may be an ' +\n      'interface.\\nA schema needs to be defined for this match to be deterministic, ' +\n      'otherwise the fragment will be matched heuristically!',\n    16,\n    logger\n  );\n\n  return !getSelectionSet(node).some(node => {\n    if (node.kind !== Kind.FIELD) return false;\n    const fieldKey = keyOfField(getName(node), getFieldArguments(node, vars));\n    return !hasField(entityKey, fieldKey);\n  });\n};\n\nexport class SelectionIterator {\n  typename: undefined | string;\n  entityKey: string;\n  ctx: Context;\n  stack: {\n    selectionSet: FormattedNode<SelectionSet>;\n    index: number;\n    defer: boolean;\n    optional: boolean | undefined;\n  }[];\n\n  // NOTE: Outside of this file, we expect `_defer` to always be reset to `false`\n  constructor(\n    typename: undefined | string,\n    entityKey: string,\n    _defer: false,\n    _optional: undefined,\n    selectionSet: FormattedNode<SelectionSet>,\n    ctx: Context\n  );\n  // NOTE: Inside this file we expect the state to be recursively passed on\n  constructor(\n    typename: undefined | string,\n    entityKey: string,\n    _defer: boolean,\n    _optional: undefined | boolean,\n    selectionSet: FormattedNode<SelectionSet>,\n    ctx: Context\n  );\n\n  constructor(\n    typename: undefined | string,\n    entityKey: string,\n    _defer: boolean,\n    _optional: boolean | undefined,\n    selectionSet: FormattedNode<SelectionSet>,\n    ctx: Context\n  ) {\n    this.typename = typename;\n    this.entityKey = entityKey;\n    this.ctx = ctx;\n    this.stack = [\n      {\n        selectionSet,\n        index: 0,\n        defer: _defer,\n        optional: _optional,\n      },\n    ];\n  }\n\n  next() {\n    while (this.stack.length > 0) {\n      let state = this.stack[this.stack.length - 1];\n      while (state.index < state.selectionSet.length) {\n        const select = state.selectionSet[state.index++];\n        if (!shouldInclude(select, this.ctx.variables)) {\n          /*noop*/\n        } else if (select.kind !== Kind.FIELD) {\n          // A fragment is either referred to by FragmentSpread or inline\n          const fragment =\n            select.kind !== Kind.INLINE_FRAGMENT\n              ? this.ctx.fragments[getName(select)]\n              : select;\n          if (fragment) {\n            const isMatching =\n              !fragment.typeCondition ||\n              (this.ctx.store.schema\n                ? isInterfaceOfType(\n                    this.ctx.store.schema,\n                    fragment,\n                    this.typename\n                  )\n                : (currentOperation === 'read' &&\n                    isFragmentMatching(\n                      fragment.typeCondition.name.value,\n                      this.typename\n                    )) ||\n                  isFragmentHeuristicallyMatching(\n                    fragment,\n                    this.typename,\n                    this.entityKey,\n                    this.ctx.variables,\n                    this.ctx.store.logger\n                  ));\n            if (\n              isMatching ||\n              (currentOperation === 'write' && !this.ctx.store.schema)\n            ) {\n              if (process.env.NODE_ENV !== 'production')\n                pushDebugNode(this.typename, fragment);\n              const isFragmentOptional = isOptional(select);\n              if (\n                isMatching &&\n                fragment.typeCondition &&\n                this.typename !== fragment.typeCondition.name.value\n              ) {\n                writeConcreteType(\n                  fragment.typeCondition.name.value,\n                  this.typename!\n                );\n              }\n\n              this.stack.push(\n                (state = {\n                  selectionSet: getSelectionSet(fragment),\n                  index: 0,\n                  defer: state.defer || isDeferred(select, this.ctx.variables),\n                  optional:\n                    isFragmentOptional !== undefined\n                      ? isFragmentOptional\n                      : state.optional,\n                })\n              );\n            }\n          }\n        } else if (currentOperation === 'write' || !select._generated) {\n          deferRef = state.defer;\n          optionalRef = state.optional;\n          return select;\n        }\n      }\n      this.stack.pop();\n      if (process.env.NODE_ENV !== 'production') popDebugNode();\n    }\n    return undefined;\n  }\n}\n\nconst isFragmentMatching = (typeCondition: string, typename: string | void) => {\n  if (!typename) return false;\n  if (typeCondition === typename) return true;\n\n  const isProbableAbstractType = !isSeenConcreteType(typeCondition);\n  if (!isProbableAbstractType) return false;\n\n  const types = getConcreteTypes(typeCondition);\n  return types.size && types.has(typename);\n};\n\nexport const ensureData = (x: DataField): Data | NullArray<Data> | null =>\n  x == null ? null : (x as Data | NullArray<Data>);\n\nexport const ensureLink = (store: Store, ref: Link<Entity>): Link => {\n  if (!ref) {\n    return ref || null;\n  } else if (Array.isArray(ref)) {\n    const link = new Array(ref.length);\n    for (let i = 0, l = link.length; i < l; i++)\n      link[i] = ensureLink(store, ref[i]);\n    return link;\n  }\n\n  const link = store.keyOfEntity(ref);\n  if (!link && ref && typeof ref === 'object') {\n    warn(\n      \"Can't generate a key for link(...) item.\" +\n        '\\nYou have to pass an `id` or `_id` field or create a custom `keys` config for `' +\n        ref.__typename +\n        '`.',\n      12,\n      store.logger\n    );\n  }\n\n  return link;\n};\n","import type { FormattedNode, CombinedError } from '@urql/core';\nimport { formatDocument } from '@urql/core';\n\nimport type {\n  FieldNode,\n  DocumentNode,\n  FragmentDefinitionNode,\n} from '@0no-co/graphql.web';\n\nimport type { SelectionSet } from '../ast';\nimport {\n  getSelectionSet,\n  getName,\n  getFragmentTypeName,\n  getFieldAlias,\n  getFragments,\n  getMainOperation,\n  normalizeVariables,\n  getFieldArguments,\n  getDirectives,\n} from '../ast';\n\nimport type {\n  Variables,\n  Data,\n  DataField,\n  Link,\n  OperationRequest,\n  Dependencies,\n  Resolver,\n} from '../types';\n\nimport { joinKeys, keyOfField } from '../store/keys';\nimport type { Store } from '../store/store';\nimport * as InMemoryData from '../store/data';\nimport { warn, pushDebugNode, popDebugNode } from '../helpers/help';\n\nimport type { Context } from './shared';\nimport {\n  SelectionIterator,\n  ensureData,\n  makeContext,\n  updateContext,\n  getFieldError,\n  deferRef,\n  optionalRef,\n} from './shared';\n\nimport {\n  isFieldAvailableOnType,\n  isFieldNullable,\n  isListNullable,\n} from '../ast';\n\nexport interface QueryResult {\n  dependencies: Dependencies;\n  partial: boolean;\n  hasNext: boolean;\n  data: null | Data;\n}\n\n/** Reads a GraphQL query from the cache.\n * @internal\n */\nexport const __initAnd_query = (\n  store: Store,\n  request: OperationRequest,\n  data?: Data | null | undefined,\n  error?: CombinedError | undefined,\n  key?: number\n): QueryResult => {\n  InMemoryData.initDataState('read', store.data, key);\n  const result = _query(store, request, data, error);\n  InMemoryData.clearDataState();\n  return result;\n};\n\n/** Reads a GraphQL query from the cache.\n * @internal\n */\nexport const _query = (\n  store: Store,\n  request: OperationRequest,\n  input?: Data | null | undefined,\n  error?: CombinedError | undefined\n): QueryResult => {\n  const query = formatDocument(request.query);\n  const operation = getMainOperation(query);\n  const rootKey = store.rootFields[operation.operation];\n  const rootSelect = getSelectionSet(operation);\n\n  const ctx = makeContext(\n    store,\n    normalizeVariables(operation, request.variables),\n    getFragments(query),\n    rootKey,\n    rootKey,\n    error\n  );\n\n  if (process.env.NODE_ENV !== 'production') {\n    pushDebugNode(rootKey, operation);\n  }\n\n  // NOTE: This may reuse \"previous result data\" as indicated by the\n  // `originalData` argument in readRoot(). This behaviour isn't used\n  // for readSelection() however, which always produces results from\n  // scratch\n  const data =\n    rootKey !== ctx.store.rootFields['query']\n      ? readRoot(ctx, rootKey, rootSelect, input || InMemoryData.makeData())\n      : readSelection(\n          ctx,\n          rootKey,\n          rootSelect,\n          input || InMemoryData.makeData()\n        );\n\n  if (process.env.NODE_ENV !== 'production') {\n    popDebugNode();\n    InMemoryData.getCurrentDependencies();\n  }\n\n  return {\n    dependencies: InMemoryData.currentDependencies!,\n    partial: ctx.partial || !data,\n    hasNext: ctx.hasNext,\n    data: data || null,\n  };\n};\n\nconst readRoot = (\n  ctx: Context,\n  entityKey: string,\n  select: FormattedNode<SelectionSet>,\n  input: Data\n): Data => {\n  const typename = ctx.store.rootNames[entityKey]\n    ? entityKey\n    : input.__typename;\n  if (typeof typename !== 'string') {\n    return input;\n  }\n\n  const selection = new SelectionIterator(\n    entityKey,\n    entityKey,\n    false,\n    undefined,\n    select,\n    ctx\n  );\n\n  let node: FormattedNode<FieldNode> | void;\n  let hasChanged = InMemoryData.currentForeignData;\n  const output = InMemoryData.makeData(input);\n  while ((node = selection.next())) {\n    const fieldAlias = getFieldAlias(node);\n    const fieldValue = input[fieldAlias];\n    // Add the current alias to the walked path before processing the field's value\n    ctx.__internal.path.push(fieldAlias);\n    // We temporarily store the data field in here, but undefined\n    // means that the value is missing from the cache\n    let dataFieldValue: void | DataField;\n    if (node.selectionSet && fieldValue !== null) {\n      dataFieldValue = readRootField(\n        ctx,\n        getSelectionSet(node),\n        ensureData(fieldValue)\n      );\n    } else {\n      dataFieldValue = fieldValue;\n    }\n\n    // Check for any referential changes in the field's value\n    hasChanged = hasChanged || dataFieldValue !== fieldValue;\n    if (dataFieldValue !== undefined) output[fieldAlias] = dataFieldValue!;\n\n    // After processing the field, remove the current alias from the path again\n    ctx.__internal.path.pop();\n  }\n\n  return hasChanged ? output : input;\n};\n\nconst readRootField = (\n  ctx: Context,\n  select: FormattedNode<SelectionSet>,\n  originalData: Link<Data>\n): Link<Data> => {\n  if (Array.isArray(originalData)) {\n    const newData = new Array(originalData.length);\n    let hasChanged = InMemoryData.currentForeignData;\n    for (let i = 0, l = originalData.length; i < l; i++) {\n      // Add the current index to the walked path before reading the field's value\n      ctx.__internal.path.push(i);\n      // Recursively read the root field's value\n      newData[i] = readRootField(ctx, select, originalData[i]);\n      hasChanged = hasChanged || newData[i] !== originalData[i];\n      // After processing the field, remove the current index from the path\n      ctx.__internal.path.pop();\n    }\n\n    return hasChanged ? newData : originalData;\n  } else if (originalData === null) {\n    return null;\n  }\n\n  // Write entity to key that falls back to the given parentFieldKey\n  const entityKey = ctx.store.keyOfEntity(originalData);\n  if (entityKey !== null) {\n    // We assume that since this is used for result data this can never be undefined,\n    // since the result data has already been written to the cache\n    return readSelection(ctx, entityKey, select, originalData) || null;\n  } else {\n    return readRoot(ctx, originalData.__typename, select, originalData);\n  }\n};\n\nexport const _queryFragment = (\n  store: Store,\n  query: FormattedNode<DocumentNode>,\n  entity: Partial<Data> | string,\n  variables?: Variables,\n  fragmentName?: string\n): Data | null => {\n  const fragments = getFragments(query);\n\n  let fragment: FormattedNode<FragmentDefinitionNode>;\n  if (fragmentName) {\n    fragment = fragments[fragmentName]!;\n    if (!fragment) {\n      warn(\n        'readFragment(...) was called with a fragment name that does not exist.\\n' +\n          'You provided ' +\n          fragmentName +\n          ' but could only find ' +\n          Object.keys(fragments).join(', ') +\n          '.',\n        6,\n        store.logger\n      );\n\n      return null;\n    }\n  } else {\n    const names = Object.keys(fragments);\n    fragment = fragments[names[0]]!;\n    if (!fragment) {\n      warn(\n        'readFragment(...) was called with an empty fragment.\\n' +\n          'You have to call it with at least one fragment in your GraphQL document.',\n        6,\n        store.logger\n      );\n\n      return null;\n    }\n  }\n\n  const typename = getFragmentTypeName(fragment);\n  if (typeof entity !== 'string' && !entity.__typename)\n    entity.__typename = typename;\n  const entityKey = store.keyOfEntity(entity as Data);\n  if (!entityKey) {\n    warn(\n      \"Can't generate a key for readFragment(...).\\n\" +\n        'You have to pass an `id` or `_id` field or create a custom `keys` config for `' +\n        typename +\n        '`.',\n      7,\n      store.logger\n    );\n\n    return null;\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    pushDebugNode(typename, fragment);\n  }\n\n  const ctx = makeContext(\n    store,\n    variables || {},\n    fragments,\n    typename,\n    entityKey,\n    undefined\n  );\n\n  const result =\n    readSelection(\n      ctx,\n      entityKey,\n      getSelectionSet(fragment),\n      InMemoryData.makeData()\n    ) || null;\n\n  if (process.env.NODE_ENV !== 'production') {\n    popDebugNode();\n  }\n\n  return result;\n};\n\nfunction getFieldResolver(\n  directives: ReturnType<typeof getDirectives>,\n  typename: string,\n  fieldName: string,\n  ctx: Context\n): Resolver | void {\n  const resolvers = ctx.store.resolvers[typename];\n  const fieldResolver = resolvers && resolvers[fieldName];\n\n  let directiveResolver: Resolver | undefined;\n  for (const name in directives) {\n    const directiveNode = directives[name];\n    if (\n      directiveNode &&\n      name !== 'include' &&\n      name !== 'skip' &&\n      ctx.store.directives[name]\n    ) {\n      directiveResolver = ctx.store.directives[name](\n        getFieldArguments(directiveNode, ctx.variables)\n      );\n      if (process.env.NODE_ENV === 'production') return directiveResolver;\n      break;\n    }\n  }\n\n  if (fieldResolver && directiveResolver) {\n    warn(\n      `A resolver and directive is being used at \"${typename}.${fieldName}\" simultaneously. Only the directive will apply.`,\n      28,\n      ctx.store.logger\n    );\n  }\n\n  return directiveResolver || fieldResolver;\n}\n\nconst readSelection = (\n  ctx: Context,\n  key: string,\n  select: FormattedNode<SelectionSet>,\n  input: Data,\n  result?: Data\n): Data | undefined => {\n  const { store } = ctx;\n  const isQuery = key === store.rootFields.query;\n\n  const entityKey = (result && store.keyOfEntity(result)) || key;\n  if (!isQuery && !!ctx.store.rootNames[entityKey]) {\n    warn(\n      'Invalid root traversal: A selection was being read on `' +\n        entityKey +\n        '` which is an uncached root type.\\n' +\n        'The `' +\n        ctx.store.rootFields.mutation +\n        '` and `' +\n        ctx.store.rootFields.subscription +\n        '` types are special ' +\n        'Operation Root Types and cannot be read back from the cache.',\n      25,\n      store.logger\n    );\n  }\n\n  const typename = !isQuery\n    ? InMemoryData.readRecord(entityKey, '__typename') ||\n      (result && result.__typename)\n    : key;\n\n  if (typeof typename !== 'string') {\n    return;\n  } else if (result && typename !== result.__typename) {\n    warn(\n      'Invalid resolver data: The resolver at `' +\n        entityKey +\n        '` returned an ' +\n        'invalid typename that could not be reconciled with the cache.',\n      8,\n      store.logger\n    );\n\n    return;\n  }\n\n  const selection = new SelectionIterator(\n    typename,\n    entityKey,\n    false,\n    undefined,\n    select,\n    ctx\n  );\n\n  let hasFields = false;\n  let hasNext = false;\n  let hasChanged = InMemoryData.currentForeignData;\n  let node: FormattedNode<FieldNode> | void;\n  const hasPartials = ctx.partial;\n  const output = InMemoryData.makeData(input);\n  while ((node = selection.next()) !== undefined) {\n    // Derive the needed data from our node.\n    const fieldName = getName(node);\n    const fieldArgs = getFieldArguments(node, ctx.variables);\n    const fieldAlias = getFieldAlias(node);\n    const directives = getDirectives(node);\n    const resolver = getFieldResolver(directives, typename, fieldName, ctx);\n    const fieldKey = keyOfField(fieldName, fieldArgs);\n    const key = joinKeys(entityKey, fieldKey);\n    const fieldValue = InMemoryData.readRecord(entityKey, fieldKey);\n    const resultValue = result ? result[fieldName] : undefined;\n\n    if (process.env.NODE_ENV !== 'production' && store.schema && typename) {\n      isFieldAvailableOnType(\n        store.schema,\n        typename,\n        fieldName,\n        ctx.store.logger\n      );\n    }\n\n    // Add the current alias to the walked path before processing the field's value\n    ctx.__internal.path.push(fieldAlias);\n    // We temporarily store the data field in here, but undefined\n    // means that the value is missing from the cache\n    let dataFieldValue: void | DataField = undefined;\n\n    if (fieldName === '__typename') {\n      // We directly assign the typename as it's already available\n      dataFieldValue = typename;\n    } else if (resultValue !== undefined && node.selectionSet === undefined) {\n      // The field is a scalar and can be retrieved directly from the result\n      dataFieldValue = resultValue;\n    } else if (InMemoryData.currentOperation === 'read' && resolver) {\n      // We have a resolver for this field.\n      // Prepare the actual fieldValue, so that the resolver can use it,\n      // as to avoid the user having to do `cache.resolve(parent, info.fieldKey)`\n      // only to get a scalar value.\n      let parent = output;\n      if (node.selectionSet === undefined && fieldValue !== undefined) {\n        parent = {\n          ...output,\n          [fieldAlias]: fieldValue,\n          [fieldName]: fieldValue,\n        };\n      }\n\n      // We have to update the information in context to reflect the info\n      // that the resolver will receive\n      updateContext(ctx, parent, typename, entityKey, fieldKey, fieldName);\n\n      dataFieldValue = resolver(\n        parent,\n        fieldArgs || ({} as Variables),\n        store,\n        ctx\n      );\n\n      if (node.selectionSet) {\n        // When it has a selection set we are resolving an entity with a\n        // subselection. This can either be a list or an object.\n        dataFieldValue = resolveResolverResult(\n          ctx,\n          typename,\n          fieldName,\n          key,\n          getSelectionSet(node),\n          (output[fieldAlias] !== undefined\n            ? output[fieldAlias]\n            : input[fieldAlias]) as Data,\n          dataFieldValue,\n          InMemoryData.ownsData(input)\n        );\n      }\n\n      if (\n        store.schema &&\n        dataFieldValue === null &&\n        !isFieldNullable(store.schema, typename, fieldName, ctx.store.logger)\n      ) {\n        // Special case for when null is not a valid value for the\n        // current field\n        return undefined;\n      }\n    } else if (!node.selectionSet) {\n      // The field is a scalar but isn't on the result, so it's retrieved from the cache\n      dataFieldValue = fieldValue;\n    } else if (resultValue !== undefined) {\n      // We start walking the nested resolver result here\n      dataFieldValue = resolveResolverResult(\n        ctx,\n        typename,\n        fieldName,\n        key,\n        getSelectionSet(node),\n        (output[fieldAlias] !== undefined\n          ? output[fieldAlias]\n          : input[fieldAlias]) as Data,\n        resultValue,\n        InMemoryData.ownsData(input)\n      );\n    } else {\n      // Otherwise we attempt to get the missing field from the cache\n      const link = InMemoryData.readLink(entityKey, fieldKey);\n\n      if (link !== undefined) {\n        dataFieldValue = resolveLink(\n          ctx,\n          link,\n          typename,\n          fieldName,\n          getSelectionSet(node),\n          (output[fieldAlias] !== undefined\n            ? output[fieldAlias]\n            : input[fieldAlias]) as Data,\n          InMemoryData.ownsData(input)\n        );\n      } else if (typeof fieldValue === 'object' && fieldValue !== null) {\n        // The entity on the field was invalid but can still be recovered\n        dataFieldValue = fieldValue;\n      }\n    }\n\n    // Now that dataFieldValue has been retrieved it'll be set on data\n    // If it's uncached (undefined) but nullable we can continue assembling\n    // a partial query result\n    if (\n      !deferRef &&\n      dataFieldValue === undefined &&\n      (directives.optional ||\n        (optionalRef && !directives.required) ||\n        !!getFieldError(ctx) ||\n        (!directives.required &&\n          store.schema &&\n          isFieldNullable(store.schema, typename, fieldName, ctx.store.logger)))\n    ) {\n      // The field is uncached or has errored, so it'll be set to null and skipped\n      ctx.partial = true;\n      dataFieldValue = null;\n    } else if (\n      dataFieldValue === null &&\n      (directives.required || optionalRef === false)\n    ) {\n      if (\n        ctx.store.logger &&\n        process.env.NODE_ENV !== 'production' &&\n        InMemoryData.currentOperation === 'read'\n      ) {\n        ctx.store.logger(\n          'debug',\n          `Got value \"null\" for required field \"${fieldName}\"${\n            fieldArgs ? ` with args ${JSON.stringify(fieldArgs)}` : ''\n          } on entity \"${entityKey}\"`\n        );\n      }\n      dataFieldValue = undefined;\n    } else {\n      hasFields = hasFields || fieldName !== '__typename';\n    }\n\n    // After processing the field, remove the current alias from the path again\n    ctx.__internal.path.pop();\n    // Check for any referential changes in the field's value\n    hasChanged = hasChanged || dataFieldValue !== input[fieldAlias];\n    if (dataFieldValue !== undefined) {\n      output[fieldAlias] = dataFieldValue;\n    } else if (deferRef) {\n      hasNext = true;\n    } else {\n      if (\n        ctx.store.logger &&\n        process.env.NODE_ENV !== 'production' &&\n        InMemoryData.currentOperation === 'read'\n      ) {\n        ctx.store.logger(\n          'debug',\n          `No value for field \"${fieldName}\"${\n            fieldArgs ? ` with args ${JSON.stringify(fieldArgs)}` : ''\n          } on entity \"${entityKey}\"`\n        );\n      }\n      // If the field isn't deferred or partial then we have to abort and also reset\n      // the partial field\n      ctx.partial = hasPartials;\n      return undefined;\n    }\n  }\n\n  ctx.partial = ctx.partial || hasPartials;\n  ctx.hasNext = ctx.hasNext || hasNext;\n  return isQuery && ctx.partial && !hasFields\n    ? undefined\n    : hasChanged\n      ? output\n      : input;\n};\n\nconst resolveResolverResult = (\n  ctx: Context,\n  typename: string,\n  fieldName: string,\n  key: string,\n  select: FormattedNode<SelectionSet>,\n  prevData: void | null | Data | Data[],\n  result: void | DataField,\n  isOwnedData: boolean\n): DataField | void => {\n  if (Array.isArray(result)) {\n    const { store } = ctx;\n    // Check whether values of the list may be null; for resolvers we assume\n    // that they can be, since it's user-provided data\n    const _isListNullable = store.schema\n      ? isListNullable(store.schema, typename, fieldName, ctx.store.logger)\n      : false;\n    const hasPartials = ctx.partial;\n    const data = InMemoryData.makeData(prevData, true);\n    let hasChanged =\n      InMemoryData.currentForeignData ||\n      !Array.isArray(prevData) ||\n      result.length !== prevData.length;\n    for (let i = 0, l = result.length; i < l; i++) {\n      // Add the current index to the walked path before reading the field's value\n      ctx.__internal.path.push(i);\n      // Recursively read resolver result\n      const childResult = resolveResolverResult(\n        ctx,\n        typename,\n        fieldName,\n        joinKeys(key, `${i}`),\n        select,\n        prevData != null ? prevData[i] : undefined,\n        result[i],\n        isOwnedData\n      );\n      // After processing the field, remove the current index from the path\n      ctx.__internal.path.pop();\n      // Check the result for cache-missed values\n      if (childResult === undefined && !_isListNullable) {\n        ctx.partial = hasPartials;\n        return undefined;\n      } else {\n        ctx.partial =\n          ctx.partial || (childResult === undefined && _isListNullable);\n        data[i] = childResult != null ? childResult : null;\n        hasChanged = hasChanged || data[i] !== prevData![i];\n      }\n    }\n\n    return hasChanged ? data : prevData;\n  } else if (result === null || result === undefined) {\n    return result;\n  } else if (isOwnedData && prevData === null) {\n    return null;\n  } else if (isDataOrKey(result)) {\n    const data = (prevData || InMemoryData.makeData(prevData)) as Data;\n    return typeof result === 'string'\n      ? readSelection(ctx, result, select, data)\n      : readSelection(ctx, key, select, data, result);\n  } else {\n    warn(\n      'Invalid resolver value: The field at `' +\n        key +\n        '` is a scalar (number, boolean, etc)' +\n        ', but the GraphQL query expects a selection set for this field.',\n      9,\n      ctx.store.logger\n    );\n\n    return undefined;\n  }\n};\n\nconst resolveLink = (\n  ctx: Context,\n  link: Link | Link[],\n  typename: string,\n  fieldName: string,\n  select: FormattedNode<SelectionSet>,\n  prevData: void | null | Data | Data[],\n  isOwnedData: boolean\n): DataField | undefined => {\n  if (Array.isArray(link)) {\n    const { store } = ctx;\n    const _isListNullable = store.schema\n      ? isListNullable(store.schema, typename, fieldName, ctx.store.logger)\n      : false;\n    const newLink = InMemoryData.makeData(prevData, true);\n    const hasPartials = ctx.partial;\n    let hasChanged =\n      InMemoryData.currentForeignData ||\n      !Array.isArray(prevData) ||\n      link.length !== prevData.length;\n    for (let i = 0, l = link.length; i < l; i++) {\n      // Add the current index to the walked path before reading the field's value\n      ctx.__internal.path.push(i);\n      // Recursively read the link\n      const childLink = resolveLink(\n        ctx,\n        link[i],\n        typename,\n        fieldName,\n        select,\n        prevData != null ? prevData[i] : undefined,\n        isOwnedData\n      );\n      // After processing the field, remove the current index from the path\n      ctx.__internal.path.pop();\n      // Check the result for cache-missed values\n      if (childLink === undefined && !_isListNullable) {\n        ctx.partial = hasPartials;\n        return undefined;\n      } else {\n        ctx.partial =\n          ctx.partial || (childLink === undefined && _isListNullable);\n        newLink[i] = childLink || null;\n        hasChanged = hasChanged || newLink[i] !== prevData![i];\n      }\n    }\n\n    return hasChanged ? newLink : (prevData as Data[]);\n  } else if (link === null || (prevData === null && isOwnedData)) {\n    return null;\n  }\n\n  return readSelection(\n    ctx,\n    link,\n    select,\n    (prevData || InMemoryData.makeData(prevData)) as Data\n  );\n};\n\nconst isDataOrKey = (x: any): x is string | Data =>\n  typeof x === 'string' ||\n  (typeof x === 'object' && typeof (x as any).__typename === 'string');\n","import * as InMemoryData from '../store/data';\nimport { keyOfField } from '../store/keys';\nimport type { FieldArgs } from '../types';\n\ninterface PartialFieldInfo {\n  fieldKey: string;\n}\n\nexport const invalidateEntity = (\n  entityKey: string,\n  field?: string,\n  args?: FieldArgs\n) => {\n  const fields: PartialFieldInfo[] = field\n    ? [{ fieldKey: keyOfField(field, args) }]\n    : InMemoryData.inspectFields(entityKey);\n\n  for (let i = 0, l = fields.length; i < l; i++) {\n    const { fieldKey } = fields[i];\n    if (InMemoryData.readLink(entityKey, fieldKey) !== undefined) {\n      InMemoryData.writeLink(entityKey, fieldKey, undefined);\n    } else {\n      InMemoryData.writeRecord(entityKey, fieldKey, undefined);\n    }\n  }\n};\n\nexport const invalidateType = (\n  typename: string,\n  excludedEntities: string[]\n) => {\n  const types = InMemoryData.getEntitiesForType(typename);\n  for (const entity of types) {\n    if (excludedEntities.includes(entity)) continue;\n    invalidateEntity(entity);\n  }\n};\n","import type { FormattedNode, CombinedError } from '@urql/core';\nimport { formatDocument } from '@urql/core';\n\nimport type {\n  FieldNode,\n  DocumentNode,\n  FragmentDefinitionNode,\n} from '@0no-co/graphql.web';\n\nimport type { SelectionSet } from '../ast';\nimport {\n  getFragments,\n  getMainOperation,\n  normalizeVariables,\n  getFieldArguments,\n  isFieldAvailableOnType,\n  getSelectionSet,\n  getName,\n  getFragmentTypeName,\n  getFieldAlias,\n} from '../ast';\n\nimport { invariant, warn, pushDebugNode, popDebugNode } from '../helpers/help';\n\nimport type {\n  NullArray,\n  Variables,\n  Data,\n  Link,\n  OperationRequest,\n  Dependencies,\n  EntityField,\n  OptimisticMutationResolver,\n} from '../types';\n\nimport { joinKeys, keyOfField } from '../store/keys';\nimport type { Store } from '../store/store';\nimport * as InMemoryData from '../store/data';\n\nimport type { Context } from './shared';\nimport {\n  SelectionIterator,\n  ensureData,\n  makeContext,\n  updateContext,\n  getFieldError,\n  deferRef,\n} from './shared';\nimport { invalidateType } from './invalidate';\n\nexport interface WriteResult {\n  data: null | Data;\n  dependencies: Dependencies;\n}\n\n/** Writes a GraphQL response to the cache.\n * @internal\n */\nexport const __initAnd_write = (\n  store: Store,\n  request: OperationRequest,\n  data: Data,\n  error?: CombinedError | undefined,\n  key?: number\n): WriteResult => {\n  InMemoryData.initDataState('write', store.data, key || null);\n  const result = _write(store, request, data, error);\n  InMemoryData.clearDataState();\n  return result;\n};\n\nexport const __initAnd_writeOptimistic = (\n  store: Store,\n  request: OperationRequest,\n  key: number\n): WriteResult => {\n  if (process.env.NODE_ENV !== 'production') {\n    invariant(\n      getMainOperation(request.query).operation === 'mutation',\n      'writeOptimistic(...) was called with an operation that is not a mutation.\\n' +\n        'This case is unsupported and should never occur.',\n      10\n    );\n  }\n\n  InMemoryData.initDataState('write', store.data, key, true);\n  const result = _write(store, request, {} as Data, undefined);\n  InMemoryData.clearDataState();\n  return result;\n};\n\nexport const _write = (\n  store: Store,\n  request: OperationRequest,\n  data?: Data,\n  error?: CombinedError | undefined\n) => {\n  if (process.env.NODE_ENV !== 'production') {\n    InMemoryData.getCurrentDependencies();\n  }\n\n  const query = formatDocument(request.query);\n  const operation = getMainOperation(query);\n  const result: WriteResult = {\n    data: data || InMemoryData.makeData(),\n    dependencies: InMemoryData.currentDependencies!,\n  };\n  const kind = store.rootFields[operation.operation];\n\n  const ctx = makeContext(\n    store,\n    normalizeVariables(operation, request.variables),\n    getFragments(query),\n    kind,\n    kind,\n    error\n  );\n\n  if (process.env.NODE_ENV !== 'production') {\n    pushDebugNode(kind, operation);\n  }\n\n  writeSelection(ctx, kind, getSelectionSet(operation), result.data!);\n\n  if (process.env.NODE_ENV !== 'production') {\n    popDebugNode();\n  }\n\n  return result;\n};\n\nexport const _writeFragment = (\n  store: Store,\n  query: FormattedNode<DocumentNode>,\n  data: Partial<Data>,\n  variables?: Variables,\n  fragmentName?: string\n) => {\n  const fragments = getFragments(query);\n  let fragment: FormattedNode<FragmentDefinitionNode>;\n  if (fragmentName) {\n    fragment = fragments[fragmentName]!;\n    if (!fragment) {\n      warn(\n        'writeFragment(...) was called with a fragment name that does not exist.\\n' +\n          'You provided ' +\n          fragmentName +\n          ' but could only find ' +\n          Object.keys(fragments).join(', ') +\n          '.',\n        11,\n        store.logger\n      );\n\n      return null;\n    }\n  } else {\n    const names = Object.keys(fragments);\n    fragment = fragments[names[0]]!;\n    if (!fragment) {\n      warn(\n        'writeFragment(...) was called with an empty fragment.\\n' +\n          'You have to call it with at least one fragment in your GraphQL document.',\n        11,\n        store.logger\n      );\n\n      return null;\n    }\n  }\n\n  const typename = getFragmentTypeName(fragment);\n  const dataToWrite = { __typename: typename, ...data } as Data;\n  const entityKey = store.keyOfEntity(dataToWrite);\n  if (!entityKey) {\n    return warn(\n      \"Can't generate a key for writeFragment(...) data.\\n\" +\n        'You have to pass an `id` or `_id` field or create a custom `keys` config for `' +\n        typename +\n        '`.',\n      12,\n      store.logger\n    );\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    pushDebugNode(typename, fragment);\n  }\n\n  const ctx = makeContext(\n    store,\n    variables || {},\n    fragments,\n    typename,\n    entityKey,\n    undefined\n  );\n\n  writeSelection(ctx, entityKey, getSelectionSet(fragment), dataToWrite);\n\n  if (process.env.NODE_ENV !== 'production') {\n    popDebugNode();\n  }\n};\n\nconst writeSelection = (\n  ctx: Context,\n  entityKey: undefined | string,\n  select: FormattedNode<SelectionSet>,\n  data: Data\n) => {\n  // These fields determine how we write. The `Query` root type is written\n  // like a normal entity, hence, we use `rootField` with a default to determine\n  // this. All other root names (Subscription & Mutation) are in a different\n  // write mode\n  const rootField = ctx.store.rootNames[entityKey!] || 'query';\n  const isRoot = !!ctx.store.rootNames[entityKey!];\n\n  let typename = isRoot ? entityKey : data.__typename;\n  if (!typename && entityKey && ctx.optimistic) {\n    typename = InMemoryData.readRecord(entityKey, '__typename') as\n      | string\n      | undefined;\n  }\n\n  if (!typename) {\n    warn(\n      \"Couldn't find __typename when writing.\\n\" +\n        \"If you're writing to the cache manually have to pass a `__typename` property on each entity in your data.\",\n      14,\n      ctx.store.logger\n    );\n    return;\n  } else if (!isRoot && entityKey) {\n    InMemoryData.writeRecord(entityKey, '__typename', typename);\n    InMemoryData.writeType(typename, entityKey);\n  }\n\n  const updates = ctx.store.updates[typename];\n  const selection = new SelectionIterator(\n    typename,\n    entityKey || typename,\n    false,\n    undefined,\n    select,\n    ctx\n  );\n\n  let node: FormattedNode<FieldNode> | void;\n  while ((node = selection.next())) {\n    const fieldName = getName(node);\n    const fieldArgs = getFieldArguments(node, ctx.variables);\n    const fieldKey = keyOfField(fieldName, fieldArgs);\n    const fieldAlias = getFieldAlias(node);\n    let fieldValue = data[ctx.optimistic ? fieldName : fieldAlias];\n\n    if (\n      // Skip typename fields and assume they've already been written above\n      fieldName === '__typename' ||\n      // Fields marked as deferred that aren't defined must be skipped\n      // Otherwise, we also ignore undefined values in optimistic updaters\n      (fieldValue === undefined &&\n        (deferRef || (ctx.optimistic && rootField === 'query')))\n    ) {\n      continue;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (ctx.store.schema && typename && fieldName !== '__typename') {\n        isFieldAvailableOnType(\n          ctx.store.schema,\n          typename,\n          fieldName,\n          ctx.store.logger\n        );\n      }\n    }\n\n    // Add the current alias to the walked path before processing the field's value\n    ctx.__internal.path.push(fieldAlias);\n\n    // Execute optimistic mutation functions on root fields, or execute recursive functions\n    // that have been returned on optimistic objects\n    let resolver: OptimisticMutationResolver | undefined;\n    if (ctx.optimistic && rootField === 'mutation') {\n      resolver = ctx.store.optimisticMutations[fieldName];\n      if (!resolver) continue;\n    } else if (ctx.optimistic && typeof fieldValue === 'function') {\n      resolver = fieldValue as any;\n    }\n\n    // Execute the field-level resolver to retrieve its data\n    if (resolver) {\n      // We have to update the context to reflect up-to-date ResolveInfo\n      updateContext(\n        ctx,\n        data,\n        typename,\n        entityKey || typename,\n        fieldKey,\n        fieldName\n      );\n      fieldValue = ensureData(resolver(fieldArgs || {}, ctx.store, ctx));\n    }\n\n    if (fieldValue === undefined) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (\n          !entityKey ||\n          !InMemoryData.hasField(entityKey, fieldKey) ||\n          (ctx.optimistic && !InMemoryData.readRecord(entityKey, '__typename'))\n        ) {\n          const expected =\n            node.selectionSet === undefined\n              ? 'scalar (number, boolean, etc)'\n              : 'selection set';\n\n          warn(\n            'Invalid undefined: The field at `' +\n              fieldKey +\n              '` is `undefined`, but the GraphQL query expects a ' +\n              expected +\n              ' for this field.',\n            13,\n            ctx.store.logger\n          );\n        }\n      }\n\n      continue; // Skip this field\n    }\n\n    if (node.selectionSet) {\n      // Process the field and write links for the child entities that have been written\n      if (entityKey && rootField === 'query') {\n        const key = joinKeys(entityKey, fieldKey);\n        const link = writeField(\n          ctx,\n          getSelectionSet(node),\n          ensureData(fieldValue),\n          key,\n          ctx.optimistic\n            ? InMemoryData.readLink(entityKey || typename, fieldKey)\n            : undefined\n        );\n\n        InMemoryData.writeLink(entityKey || typename, fieldKey, link);\n      } else {\n        writeField(ctx, getSelectionSet(node), ensureData(fieldValue));\n      }\n    } else if (entityKey && rootField === 'query') {\n      // This is a leaf node, so we're setting the field's value directly\n      InMemoryData.writeRecord(\n        entityKey || typename,\n        fieldKey,\n        (fieldValue !== null || !getFieldError(ctx)\n          ? fieldValue\n          : undefined) as EntityField\n      );\n    }\n\n    // We run side-effect updates after the default, normalized updates\n    // so that the data is already available in-store if necessary\n    const updater = updates && updates[fieldName];\n    if (updater) {\n      // We have to update the context to reflect up-to-date ResolveInfo\n      updateContext(\n        ctx,\n        data,\n        typename,\n        entityKey || typename,\n        fieldKey,\n        fieldName\n      );\n\n      data[fieldName] = fieldValue;\n      updater(data, fieldArgs || {}, ctx.store, ctx);\n    } else if (\n      typename === ctx.store.rootFields['mutation'] &&\n      !ctx.optimistic\n    ) {\n      // If we're on a mutation that doesn't have an updater, we'll see\n      // whether we can find the entity returned by the mutation in the cache.\n      // if we don't we'll assume this is a create mutation and invalidate\n      // the found __typename.\n      if (fieldValue && Array.isArray(fieldValue)) {\n        const excludedEntities: string[] = fieldValue.map(\n          entity => ctx.store.keyOfEntity(entity) || ''\n        );\n        for (let i = 0, l = fieldValue.length; i < l; i++) {\n          const key = excludedEntities[i];\n          if (key && fieldValue[i].__typename) {\n            const resolved = InMemoryData.readRecord(key, '__typename');\n            const count = InMemoryData!.getRefCount(key);\n            if (resolved && !count) {\n              invalidateType(fieldValue[i].__typename, excludedEntities);\n            }\n          }\n        }\n      } else if (fieldValue && typeof fieldValue === 'object') {\n        const key = ctx.store.keyOfEntity(fieldValue as any);\n        if (key) {\n          const resolved = InMemoryData.readRecord(key, '__typename');\n          const count = InMemoryData.getRefCount(key);\n          if ((!resolved || !count) && fieldValue.__typename) {\n            invalidateType(fieldValue.__typename, [key]);\n          }\n        }\n      }\n    }\n\n    // After processing the field, remove the current alias from the path again\n    ctx.__internal.path.pop();\n  }\n};\n\n// A pattern to match typenames of types that are likely never keyable\nconst KEYLESS_TYPE_RE = /^__|PageInfo|(Connection|Edge)$/;\n\nconst writeField = (\n  ctx: Context,\n  select: FormattedNode<SelectionSet>,\n  data: null | Data | NullArray<Data>,\n  parentFieldKey?: string,\n  prevLink?: Link\n): Link | undefined => {\n  if (Array.isArray(data)) {\n    const newData = new Array(data.length);\n    for (let i = 0, l = data.length; i < l; i++) {\n      // Add the current index to the walked path before processing the link\n      ctx.__internal.path.push(i);\n      // Append the current index to the parentFieldKey fallback\n      const indexKey = parentFieldKey\n        ? joinKeys(parentFieldKey, `${i}`)\n        : undefined;\n      // Recursively write array data\n      const prevIndex = prevLink != null ? prevLink[i] : undefined;\n      const links = writeField(ctx, select, data[i], indexKey, prevIndex);\n      // Link cannot be expressed as a recursive type\n      newData[i] = links as string | null;\n      // After processing the field, remove the current index from the path\n      ctx.__internal.path.pop();\n    }\n\n    return newData;\n  } else if (data === null) {\n    return getFieldError(ctx) ? undefined : null;\n  }\n\n  const entityKey =\n    ctx.store.keyOfEntity(data) ||\n    (typeof prevLink === 'string' ? prevLink : null);\n  const typename = data.__typename;\n\n  if (\n    parentFieldKey &&\n    !ctx.store.keys[data.__typename] &&\n    entityKey === null &&\n    typeof typename === 'string' &&\n    !KEYLESS_TYPE_RE.test(typename)\n  ) {\n    warn(\n      'Invalid key: The GraphQL query at the field at `' +\n        parentFieldKey +\n        '` has a selection set, ' +\n        'but no key could be generated for the data at this field.\\n' +\n        'You have to request `id` or `_id` fields for all selection sets or create ' +\n        'a custom `keys` config for `' +\n        typename +\n        '`.\\n' +\n        'Entities without keys will be embedded directly on the parent entity. ' +\n        'If this is intentional, create a `keys` config for `' +\n        typename +\n        '` that always returns null.',\n      15,\n      ctx.store.logger\n    );\n  }\n\n  const childKey = entityKey || parentFieldKey;\n  writeSelection(ctx, childKey, select, data);\n  return childKey || null;\n};\n","import type { TypedDocumentNode } from '@urql/core';\nimport { formatDocument, createRequest } from '@urql/core';\n\nimport type {\n  Cache,\n  FieldInfo,\n  ResolverConfig,\n  DataField,\n  Variables,\n  FieldArgs,\n  Link,\n  Data,\n  QueryInput,\n  UpdatesConfig,\n  OptimisticMutationConfig,\n  KeyingConfig,\n  Entity,\n  CacheExchangeOpts,\n  DirectivesConfig,\n  Logger,\n} from '../types';\n\nimport { invariant } from '../helpers/help';\nimport { contextRef, ensureLink } from '../operations/shared';\nimport { _query, _queryFragment } from '../operations/query';\nimport { _write, _writeFragment } from '../operations/write';\nimport { invalidateEntity, invalidateType } from '../operations/invalidate';\nimport { keyOfField } from './keys';\nimport * as InMemoryData from './data';\n\nimport type { SchemaIntrospector } from '../ast';\nimport {\n  buildClientSchema,\n  expectValidKeyingConfig,\n  expectValidUpdatesConfig,\n  expectValidResolversConfig,\n  expectValidOptimisticMutationsConfig,\n} from '../ast';\n\ntype DocumentNode = TypedDocumentNode<any, any>;\ntype RootField = 'query' | 'mutation' | 'subscription';\n\n/** Implementation of the {@link Cache} interface as created internally by the {@link cacheExchange}.\n * @internal\n */\nexport class Store<\n  C extends Partial<CacheExchangeOpts> = Partial<CacheExchangeOpts>,\n> implements Cache\n{\n  data: InMemoryData.InMemoryData;\n\n  logger?: Logger;\n  directives: DirectivesConfig;\n  resolvers: ResolverConfig;\n  updates: UpdatesConfig;\n  optimisticMutations: OptimisticMutationConfig;\n  keys: KeyingConfig;\n  globalIDs: Set<string> | boolean;\n  schema?: SchemaIntrospector;\n\n  rootFields: { query: string; mutation: string; subscription: string };\n  rootNames: { [name: string]: RootField | void };\n\n  constructor(opts?: C) {\n    if (!opts) opts = {} as C;\n\n    this.logger = opts.logger;\n    this.resolvers = opts.resolvers || {};\n    this.directives = opts.directives || {};\n    this.optimisticMutations = opts.optimistic || {};\n    this.keys = opts.keys || {};\n\n    this.globalIDs = Array.isArray(opts.globalIDs)\n      ? new Set(opts.globalIDs)\n      : !!opts.globalIDs;\n\n    let queryName = 'Query';\n    let mutationName = 'Mutation';\n    let subscriptionName = 'Subscription';\n    if (opts.schema) {\n      const schema = buildClientSchema(opts.schema);\n      queryName = schema.query || queryName;\n      mutationName = schema.mutation || mutationName;\n      subscriptionName = schema.subscription || subscriptionName;\n      // Only add schema introspector if it has types info\n      if (schema.types) this.schema = schema;\n    }\n\n    this.updates = opts.updates || {};\n\n    this.rootFields = {\n      query: queryName,\n      mutation: mutationName,\n      subscription: subscriptionName,\n    };\n\n    this.rootNames = {\n      [queryName]: 'query',\n      [mutationName]: 'mutation',\n      [subscriptionName]: 'subscription',\n    };\n\n    this.data = InMemoryData.make(queryName);\n\n    if (this.schema && process.env.NODE_ENV !== 'production') {\n      expectValidKeyingConfig(this.schema, this.keys, this.logger);\n      expectValidUpdatesConfig(this.schema, this.updates, this.logger);\n      expectValidResolversConfig(this.schema, this.resolvers, this.logger);\n      expectValidOptimisticMutationsConfig(\n        this.schema,\n        this.optimisticMutations,\n        this.logger\n      );\n    }\n  }\n\n  keyOfField(fieldName: string, fieldArgs?: FieldArgs) {\n    return keyOfField(fieldName, fieldArgs);\n  }\n\n  keyOfEntity(data: Entity) {\n    // In resolvers and updaters we may have a specific parent\n    // object available that can be used to skip to a specific parent\n    // key directly without looking at its incomplete properties\n    if (contextRef && data === contextRef.parent) {\n      return contextRef.parentKey;\n    } else if (data == null || typeof data === 'string') {\n      return data || null;\n    } else if (!data.__typename) {\n      return null;\n    } else if (this.rootNames[data.__typename]) {\n      return data.__typename;\n    }\n\n    let key: string | null = null;\n    if (this.keys[data.__typename]) {\n      key = this.keys[data.__typename](data) || null;\n    } else if (data.id != null) {\n      key = `${data.id}`;\n    } else if (data._id != null) {\n      key = `${data._id}`;\n    }\n\n    const typename = data.__typename;\n    const globalID =\n      this.globalIDs === true ||\n      (this.globalIDs && this.globalIDs.has(typename));\n    return globalID || !key ? key : `${typename}:${key}`;\n  }\n\n  resolve(\n    entity: Entity,\n    field: string,\n    args?: FieldArgs\n  ): DataField | undefined {\n    const entityKey = this.keyOfEntity(entity);\n    if (entityKey) {\n      const fieldKey = keyOfField(field, args);\n      const fieldValue = InMemoryData.readRecord(entityKey, fieldKey);\n      if (fieldValue !== undefined) return fieldValue;\n      let fieldLink = InMemoryData.readLink(entityKey, fieldKey);\n      if (fieldLink !== undefined) fieldLink = ensureLink(this, fieldLink);\n      return fieldLink;\n    }\n  }\n\n  invalidate(entity: Entity, field?: string, args?: FieldArgs) {\n    const entityKey = this.keyOfEntity(entity);\n    const shouldInvalidateType =\n      entity &&\n      typeof entity === 'string' &&\n      !field &&\n      !args &&\n      !this.resolve(entity, '__typename');\n\n    if (shouldInvalidateType) {\n      invalidateType(entity, []);\n    } else {\n      invariant(\n        entityKey,\n        \"Can't generate a key for invalidate(...).\\n\" +\n          'You have to pass an id or _id field or create a custom `keys` field for `' +\n          (typeof entity === 'object'\n            ? (entity as Data).__typename\n            : entity + '`.'),\n        19\n      );\n\n      invalidateEntity(entityKey, field, args);\n    }\n  }\n\n  inspectFields(entity: Entity): FieldInfo[] {\n    const entityKey = this.keyOfEntity(entity);\n    return entityKey ? InMemoryData.inspectFields(entityKey) : [];\n  }\n\n  updateQuery<T = Data, V = Variables>(\n    input: QueryInput<T, V>,\n    updater: (data: T | null) => T | null\n  ): void {\n    const request = createRequest(input.query, input.variables!);\n    const output = updater(this.readQuery(request));\n    if (output !== null) {\n      _write(this, request, output as any, undefined);\n    }\n  }\n\n  readQuery<T = Data, V = Variables>(input: QueryInput<T, V>): T | null {\n    const request = createRequest(input.query, input.variables!);\n    return _query(this, request, undefined, undefined).data as T | null;\n  }\n\n  readFragment<T = Data, V = Variables>(\n    fragment: DocumentNode | TypedDocumentNode<T, V>,\n    entity: string | Data | T,\n    variables?: V,\n    fragmentName?: string\n  ): T | null {\n    return _queryFragment(\n      this,\n      formatDocument(fragment),\n      entity as Data,\n      variables as any,\n      fragmentName\n    ) as T | null;\n  }\n\n  writeFragment<T = Data, V = Variables>(\n    fragment: DocumentNode | TypedDocumentNode<T, V>,\n    data: T,\n    variables?: V,\n    fragmentName?: string\n  ): void {\n    _writeFragment(\n      this,\n      formatDocument(fragment),\n      data as Data,\n      variables as any,\n      fragmentName\n    );\n  }\n\n  link(\n    entity: Entity,\n    field: string,\n    args: FieldArgs,\n    link: Link<Entity>\n  ): void;\n\n  link(entity: Entity, field: string, link: Link<Entity>): void;\n\n  link(\n    entity: Entity,\n    field: string,\n    ...rest: [FieldArgs, Link<Entity>] | [Link<Entity>]\n  ): void {\n    const args = rest.length === 2 ? rest[0] : null;\n    const link = rest.length === 2 ? rest[1] : rest[0];\n    const entityKey = this.keyOfEntity(entity);\n    if (entityKey) {\n      InMemoryData.writeLink(\n        entityKey,\n        keyOfField(field, args),\n        ensureLink(this, link)\n      );\n    }\n  }\n}\n","import type {\n  IntrospectionQuery,\n  IntrospectionTypeRef,\n  IntrospectionInputValue,\n  IntrospectionType,\n} from './graphql';\n\nexport interface SchemaField {\n  name: string;\n  type: IntrospectionTypeRef;\n  args(): Record<string, IntrospectionInputValue | void>;\n}\n\nexport interface SchemaObject {\n  name: string;\n  kind: 'INTERFACE' | 'OBJECT';\n  interfaces(): Record<string, unknown>;\n  fields(): Record<string, SchemaField | void>;\n}\n\nexport interface SchemaUnion {\n  name: string;\n  kind: 'UNION';\n  types(): Record<string, unknown>;\n}\n\nexport interface SchemaIntrospector {\n  query: string | null;\n  mutation: string | null;\n  subscription: string | null;\n  types?: Map<string, SchemaObject | SchemaUnion>;\n  isSubType(abstract: string, possible: string): boolean;\n}\n\nexport interface PartialIntrospectionSchema {\n  queryType: { name: string; kind?: any };\n  mutationType?: { name: string; kind?: any } | null;\n  subscriptionType?: { name: string; kind?: any } | null;\n  types?: readonly any[];\n}\n\nexport type IntrospectionData =\n  | IntrospectionQuery\n  | { __schema: PartialIntrospectionSchema };\n\nexport const buildClientSchema = ({\n  __schema,\n}: IntrospectionData): SchemaIntrospector => {\n  const typemap: Map<string, SchemaObject | SchemaUnion> = new Map();\n\n  const buildNameMap = <T extends { name: string }>(\n    arr: ReadonlyArray<T>\n  ): (() => { [name: string]: T }) => {\n    let map: Record<string, T> | void;\n    return () => {\n      if (!map) {\n        map = {};\n        for (let i = 0; i < arr.length; i++) map[arr[i].name] = arr[i];\n      }\n      return map;\n    };\n  };\n\n  const buildType = (\n    type: IntrospectionType\n  ): SchemaObject | SchemaUnion | void => {\n    switch (type.kind) {\n      case 'OBJECT':\n      case 'INTERFACE':\n        return {\n          name: type.name,\n          kind: type.kind as 'OBJECT' | 'INTERFACE',\n          interfaces: buildNameMap(type.interfaces || []),\n          fields: buildNameMap(\n            type.fields!.map((field: any) => ({\n              name: field.name,\n              type: field.type,\n              args: buildNameMap(field.args),\n            }))\n          ),\n        } as SchemaObject;\n      case 'UNION':\n        return {\n          name: type.name,\n          kind: type.kind as 'UNION',\n          types: buildNameMap(type.possibleTypes || []),\n        } as SchemaUnion;\n    }\n  };\n\n  const schema: SchemaIntrospector = {\n    query: __schema.queryType ? __schema.queryType.name : null,\n    mutation: __schema.mutationType ? __schema.mutationType.name : null,\n    subscription: __schema.subscriptionType\n      ? __schema.subscriptionType.name\n      : null,\n    types: undefined,\n    isSubType(abstract: string, possible: string) {\n      const abstractType = typemap.get(abstract);\n      const possibleType = typemap.get(possible);\n      if (!abstractType || !possibleType) {\n        return false;\n      } else if (abstractType.kind === 'UNION') {\n        return !!abstractType.types()[possible];\n      } else if (\n        abstractType.kind !== 'OBJECT' &&\n        possibleType.kind === 'OBJECT'\n      ) {\n        return !!possibleType.interfaces()[abstract];\n      } else {\n        return abstract === possible;\n      }\n    },\n  };\n\n  if (__schema.types) {\n    schema.types = typemap;\n    for (let i = 0; i < __schema.types.length; i++) {\n      const type = __schema.types[i];\n      if (type && type.name) {\n        const out = buildType(type);\n        if (out) typemap.set(type.name, out);\n      }\n    }\n  }\n\n  return schema;\n};\n","import type { Operation, RequestPolicy, OperationDebugMeta } from '@urql/core';\nimport { makeOperation } from '@urql/core';\n\n// Returns the given operation result with added cacheOutcome meta field\nexport const addMetadata = (\n  operation: Operation,\n  meta: OperationDebugMeta\n): Operation =>\n  makeOperation(operation.kind, operation, {\n    ...operation.context,\n    meta: {\n      ...operation.context.meta,\n      ...meta,\n    },\n  });\n\n// Copy an operation and change the requestPolicy to skip the cache\nexport const toRequestPolicy = (\n  operation: Operation,\n  requestPolicy: RequestPolicy\n): Operation => {\n  return makeOperation(operation.kind, operation, {\n    ...operation.context,\n    requestPolicy,\n  });\n};\n","import type {\n  Exchange,\n  Operation,\n  OperationResult,\n  RequestPolicy,\n  CacheOutcome,\n} from '@urql/core';\nimport { formatDocument, makeOperation } from '@urql/core';\n\nimport type { Source } from 'wonka';\nimport {\n  filter,\n  map,\n  merge,\n  pipe,\n  share,\n  fromArray,\n  mergeMap,\n  empty,\n} from 'wonka';\n\nimport { _query } from './operations/query';\nimport { _write } from './operations/write';\nimport { addMetadata, toRequestPolicy } from './helpers/operation';\nimport { filterVariables, getMainOperation } from './ast';\nimport { Store } from './store/store';\nimport type { Data, Dependencies, CacheExchangeOpts } from './types';\n\nimport {\n  initDataState,\n  clearDataState,\n  noopDataState,\n  hydrateData,\n  reserveLayer,\n  hasLayer,\n} from './store/data';\n\ninterface OperationResultWithMeta extends Partial<OperationResult> {\n  operation: Operation;\n  outcome: CacheOutcome;\n  dependencies: Dependencies;\n  hasNext: boolean;\n}\n\ntype Operations = Set<number>;\ntype OperationMap = Map<number, Operation>;\ntype ResultMap = Map<number, Data | null>;\ntype OptimisticDependencies = Map<number, Dependencies>;\ntype DependentOperations = Map<string, Operations>;\n\n/** Exchange factory that creates a normalized cache exchange.\n *\n * @param opts - A {@link CacheExchangeOpts} configuration object.\n * @returns the created normalized cache {@link Exchange}.\n *\n * @remarks\n * Graphcache is a normalized cache, enabled by using the `cacheExchange`\n * in place of `@urql/core`’s. A normalized GraphQL cache uses typenames\n * and key fields in the result to share a single copy for each unique\n * entity across all queries.\n *\n * The `cacheExchange` may be passed a {@link CacheExchangeOpts} object\n * to define custom resolvers, custom updates for mutations,\n * optimistic updates, or to add custom key fields per type.\n *\n * @see {@link https://urql.dev/goto/docs/graphcache} for the full Graphcache docs.\n */\nexport const cacheExchange =\n  <C extends Partial<CacheExchangeOpts>>(opts?: C): Exchange =>\n  ({ forward, client, dispatchDebug }) => {\n    const store = new Store<C>(opts);\n\n    if (opts && opts.storage) {\n      store.data.hydrating = true;\n      opts.storage.readData().then(entries => {\n        hydrateData(store.data, opts!.storage!, entries);\n        if (opts.storage!.onCacheHydrated) opts.storage!.onCacheHydrated();\n      });\n    }\n\n    const optimisticKeysToDependencies: OptimisticDependencies = new Map();\n    const mutationResultBuffer: OperationResult[] = [];\n    const operations: OperationMap = new Map();\n    const results: ResultMap = new Map();\n    const blockedDependencies: Dependencies = new Set();\n    const requestedRefetch: Operations = new Set();\n    const deps: DependentOperations = new Map();\n\n    let reexecutingOperations: Operations = new Set();\n    let dependentOperations: Operations = new Set();\n\n    const isBlockedByOptimisticUpdate = (\n      dependencies: Dependencies\n    ): boolean => {\n      for (const dep of dependencies.values())\n        if (blockedDependencies.has(dep)) return true;\n      return false;\n    };\n\n    const collectPendingOperations = (\n      pendingOperations: Operations,\n      dependencies: undefined | Dependencies\n    ) => {\n      if (dependencies) {\n        // Collect operations that will be updated due to cache changes\n        for (const dep of dependencies.values()) {\n          const keys = deps.get(dep);\n          if (keys) for (const key of keys.values()) pendingOperations.add(key);\n        }\n      }\n    };\n\n    const executePendingOperations = (\n      operation: Operation,\n      pendingOperations: Operations,\n      isOptimistic: boolean\n    ) => {\n      // Reexecute collected operations and delete them from the mapping\n      for (const key of pendingOperations.values()) {\n        if (key !== operation.key) {\n          const op = operations.get(key);\n          if (op) {\n            // Collect all dependent operations if the reexecuting operation is a query\n            if (operation.kind === 'query') dependentOperations.add(key);\n            let policy: RequestPolicy = 'cache-first';\n            if (requestedRefetch.has(key)) {\n              requestedRefetch.delete(key);\n              policy = 'cache-and-network';\n            }\n            client.reexecuteOperation(toRequestPolicy(op, policy));\n          }\n        }\n      }\n\n      if (!isOptimistic) {\n        // Upon completion, all dependent operations become reexecuting operations, preventing\n        // them from reexecuting prior operations again, causing infinite loops\n        const _reexecutingOperations = reexecutingOperations;\n        reexecutingOperations = dependentOperations;\n        if (operation.kind === 'query') {\n          reexecutingOperations.add(operation.key);\n        }\n        (dependentOperations = _reexecutingOperations).clear();\n      }\n    };\n\n    // This registers queries with the data layer to ensure commutativity\n    const prepareForwardedOperation = (operation: Operation) => {\n      let optimistic = false;\n      if (operation.kind === 'query') {\n        // Pre-reserve the position of the result layer\n        reserveLayer(store.data, operation.key);\n        operations.set(operation.key, operation);\n      } else if (operation.kind === 'teardown') {\n        // Delete reference to operation if any exists to release it\n        operations.delete(operation.key);\n        results.delete(operation.key);\n        reexecutingOperations.delete(operation.key);\n        // Mark operation layer as done\n        noopDataState(store.data, operation.key);\n        return operation;\n      } else if (\n        operation.kind === 'mutation' &&\n        operation.context.requestPolicy !== 'network-only'\n      ) {\n        operations.set(operation.key, operation);\n        // This executes an optimistic update for mutations and registers it if necessary\n        initDataState('write', store.data, operation.key, true, false);\n        const { dependencies } = _write(\n          store,\n          operation as any,\n          undefined,\n          undefined\n        );\n        clearDataState();\n        if (dependencies.size) {\n          // Update blocked optimistic dependencies\n          for (const dep of dependencies.values()) blockedDependencies.add(dep);\n          // Store optimistic dependencies for update\n          optimisticKeysToDependencies.set(operation.key, dependencies);\n          // Update related queries\n          const pendingOperations: Operations = new Set();\n          collectPendingOperations(pendingOperations, dependencies);\n          executePendingOperations(operation, pendingOperations, true);\n          // Mark operation as optimistic\n          optimistic = true;\n        }\n      }\n\n      return makeOperation(\n        operation.kind,\n        {\n          key: operation.key,\n          query: formatDocument(operation.query),\n          variables: operation.variables\n            ? filterVariables(\n                getMainOperation(operation.query),\n                operation.variables\n              )\n            : operation.variables,\n        },\n        { ...operation.context, optimistic }\n      );\n    };\n\n    // This updates the known dependencies for the passed operation\n    const updateDependencies = (op: Operation, dependencies: Dependencies) => {\n      for (const dep of dependencies.values()) {\n        let depOps = deps.get(dep);\n        if (!depOps) deps.set(dep, (depOps = new Set()));\n        depOps.add(op.key);\n      }\n    };\n\n    // Retrieves a query result from cache and adds an `isComplete` hint\n    // This hint indicates whether the result is \"complete\" or not\n    const operationResultFromCache = (\n      operation: Operation\n    ): OperationResultWithMeta => {\n      initDataState('read', store.data, undefined, false, false);\n      const result = _query(\n        store,\n        operation,\n        results.get(operation.key),\n        undefined\n      );\n      clearDataState();\n      const cacheOutcome: CacheOutcome = result.data\n        ? !result.partial && !result.hasNext\n          ? 'hit'\n          : 'partial'\n        : 'miss';\n\n      results.set(operation.key, result.data);\n      operations.set(operation.key, operation);\n      updateDependencies(operation, result.dependencies);\n\n      return {\n        outcome: cacheOutcome,\n        operation,\n        data: result.data,\n        dependencies: result.dependencies,\n        hasNext: result.hasNext,\n      };\n    };\n\n    // Take any OperationResult and update the cache with it\n    const updateCacheWithResult = (\n      result: OperationResult,\n      pendingOperations: Operations\n    ): OperationResult => {\n      // Retrieve the original operation to get unfiltered variables\n      const operation =\n        operations.get(result.operation.key) || result.operation;\n      if (operation.kind === 'mutation') {\n        // Collect previous dependencies that have been written for optimistic updates\n        const dependencies = optimisticKeysToDependencies.get(operation.key);\n        collectPendingOperations(pendingOperations, dependencies);\n        optimisticKeysToDependencies.delete(operation.key);\n      }\n\n      if (operation.kind === 'subscription' || result.hasNext)\n        reserveLayer(store.data, operation.key, true);\n\n      let queryDependencies: undefined | Dependencies;\n      let data: Data | null = result.data;\n      if (data) {\n        // Write the result to cache and collect all dependencies that need to be\n        // updated\n        initDataState('write', store.data, operation.key, false, false);\n        const writeDependencies = _write(\n          store,\n          operation,\n          data,\n          result.error\n        ).dependencies;\n        clearDataState();\n        collectPendingOperations(pendingOperations, writeDependencies);\n        const prevData =\n          operation.kind === 'query' ? results.get(operation.key) : null;\n        initDataState(\n          'read',\n          store.data,\n          operation.key,\n          false,\n          prevData !== data\n        );\n        const queryResult = _query(\n          store,\n          operation,\n          prevData || data,\n          result.error\n        );\n        clearDataState();\n        data = queryResult.data;\n        if (operation.kind === 'query') {\n          // Collect the query's dependencies for future pending operation updates\n          queryDependencies = queryResult.dependencies;\n          collectPendingOperations(pendingOperations, queryDependencies);\n          results.set(operation.key, data);\n        }\n      } else {\n        noopDataState(store.data, operation.key);\n      }\n\n      // Update this operation's dependencies if it's a query\n      if (queryDependencies) {\n        updateDependencies(result.operation, queryDependencies);\n      }\n\n      return {\n        operation,\n        data,\n        error: result.error,\n        extensions: result.extensions,\n        hasNext: result.hasNext,\n        stale: result.stale,\n      };\n    };\n\n    return operations$ => {\n      // Filter by operations that are cacheable and attempt to query them from the cache\n      const cacheOps$ = pipe(\n        operations$,\n        filter(\n          op =>\n            op.kind === 'query' && op.context.requestPolicy !== 'network-only'\n        ),\n        map(operationResultFromCache),\n        share\n      );\n\n      const nonCacheOps$ = pipe(\n        operations$,\n        filter(\n          op =>\n            op.kind !== 'query' || op.context.requestPolicy === 'network-only'\n        )\n      );\n\n      // Rebound operations that are incomplete, i.e. couldn't be queried just from the cache\n      const cacheMissOps$ = pipe(\n        cacheOps$,\n        filter(\n          res =>\n            res.outcome === 'miss' &&\n            res.operation.context.requestPolicy !== 'cache-only' &&\n            !isBlockedByOptimisticUpdate(res.dependencies) &&\n            !reexecutingOperations.has(res.operation.key)\n        ),\n        map(res => {\n          dispatchDebug({\n            type: 'cacheMiss',\n            message: 'The result could not be retrieved from the cache',\n            operation: res.operation,\n          });\n          return addMetadata(res.operation, { cacheOutcome: 'miss' });\n        })\n      );\n\n      // Resolve OperationResults that the cache was able to assemble completely and trigger\n      // a network request if the current operation's policy is cache-and-network\n      const cacheResult$ = pipe(\n        cacheOps$,\n        filter(\n          res =>\n            res.outcome !== 'miss' ||\n            res.operation.context.requestPolicy === 'cache-only'\n        ),\n        map((res: OperationResultWithMeta): OperationResult => {\n          const { requestPolicy } = res.operation.context;\n\n          // We reexecute requests marked as `cache-and-network`, and partial responses,\n          // if we wouldn't cause a request loop\n          const shouldReexecute =\n            requestPolicy !== 'cache-only' &&\n            (res.hasNext ||\n              requestPolicy === 'cache-and-network' ||\n              (requestPolicy === 'cache-first' &&\n                res.outcome === 'partial' &&\n                !reexecutingOperations.has(res.operation.key)));\n          // Set stale to true anyway, even if the reexecute will be blocked, if the operation\n          // is in progress. We can be reasonably sure of that if a layer has been reserved for it.\n          const stale =\n            requestPolicy !== 'cache-only' &&\n            (shouldReexecute ||\n              (res.outcome === 'partial' &&\n                reexecutingOperations.has(res.operation.key) &&\n                hasLayer(store.data, res.operation.key)));\n\n          const result: OperationResult = {\n            operation: addMetadata(res.operation, {\n              cacheOutcome: res.outcome,\n            }),\n            data: res.data,\n            error: res.error,\n            extensions: res.extensions,\n            stale: stale && !res.hasNext,\n            hasNext: shouldReexecute && res.hasNext,\n          };\n\n          if (!shouldReexecute) {\n            /*noop*/\n          } else if (!isBlockedByOptimisticUpdate(res.dependencies)) {\n            client.reexecuteOperation(\n              toRequestPolicy(\n                operations.get(res.operation.key) || res.operation,\n                'network-only'\n              )\n            );\n          } else if (requestPolicy === 'cache-and-network') {\n            requestedRefetch.add(res.operation.key);\n          }\n\n          dispatchDebug({\n            type: 'cacheHit',\n            message: `A requested operation was found and returned from the cache.`,\n            operation: res.operation,\n            data: {\n              value: result,\n            },\n          });\n\n          return result;\n        })\n      );\n\n      // Forward operations that aren't cacheable and rebound operations\n      // Also update the cache with any network results\n      const result$ = pipe(\n        merge([nonCacheOps$, cacheMissOps$]),\n        map(prepareForwardedOperation),\n        forward\n      );\n\n      // Results that can immediately be resolved\n      const nonOptimisticResults$ = pipe(\n        result$,\n        filter(\n          result => !optimisticKeysToDependencies.has(result.operation.key)\n        ),\n        map(result => {\n          const pendingOperations: Operations = new Set();\n          // Update the cache with the incoming API result\n          const cacheResult = updateCacheWithResult(result, pendingOperations);\n          // Execute all dependent queries\n          executePendingOperations(result.operation, pendingOperations, false);\n          return cacheResult;\n        })\n      );\n\n      // Prevent mutations that were previously optimistic from being flushed\n      // immediately and instead clear them out slowly\n      const optimisticMutationCompletion$ = pipe(\n        result$,\n        filter(result =>\n          optimisticKeysToDependencies.has(result.operation.key)\n        ),\n        mergeMap((result: OperationResult): Source<OperationResult> => {\n          const length = mutationResultBuffer.push(result);\n          if (length < optimisticKeysToDependencies.size) {\n            return empty;\n          }\n\n          for (let i = 0; i < mutationResultBuffer.length; i++) {\n            reserveLayer(store.data, mutationResultBuffer[i].operation.key);\n          }\n\n          blockedDependencies.clear();\n\n          const results: OperationResult[] = [];\n          const pendingOperations: Operations = new Set();\n\n          let bufferedResult: OperationResult | void;\n          while ((bufferedResult = mutationResultBuffer.shift()))\n            results.push(\n              updateCacheWithResult(bufferedResult, pendingOperations)\n            );\n\n          // Execute all dependent queries as a single batch\n          executePendingOperations(result.operation, pendingOperations, false);\n\n          return fromArray(results);\n        })\n      );\n\n      return merge([\n        nonOptimisticResults$,\n        optimisticMutationCompletion$,\n        cacheResult$,\n      ]);\n    };\n  };\n","import { pipe, share, merge, makeSubject, filter, onPush } from 'wonka';\n\nimport type {\n  Operation,\n  OperationResult,\n  Exchange,\n  ExchangeIO,\n  CombinedError,\n  RequestPolicy,\n} from '@urql/core';\nimport { stringifyDocument, createRequest, makeOperation } from '@urql/core';\n\nimport type {\n  SerializedRequest,\n  CacheExchangeOpts,\n  StorageAdapter,\n} from './types';\nimport { cacheExchange } from './cacheExchange';\nimport { toRequestPolicy } from './helpers/operation';\n\nconst policyLevel = {\n  'cache-only': 0,\n  'cache-first': 1,\n  'network-only': 2,\n  'cache-and-network': 3,\n} as const;\n\n/** Input parameters for the {@link offlineExchange}.\n * @remarks\n * This configuration object extends the {@link CacheExchangeOpts}\n * as the `offlineExchange` extends the regular {@link cacheExchange}.\n */\nexport interface OfflineExchangeOpts extends CacheExchangeOpts {\n  /** Configures an offline storage adapter for Graphcache.\n   *\n   * @remarks\n   * A {@link StorageAdapter} allows Graphcache to write data to an external,\n   * asynchronous storage, and hydrate data from it when it first loads.\n   * This allows you to preserve normalized data between restarts/reloads.\n   *\n   * @see {@link https://urql.dev/goto/docs/graphcache/offline} for the full Offline Support docs.\n   */\n  storage: StorageAdapter;\n  /** Predicate function to determine whether a {@link CombinedError} hints at a network error.\n   *\n   * @remarks\n   * Not ever {@link CombinedError} means that the device is offline and by default\n   * the `offlineExchange` will check for common network error messages and check\n   * `navigator.onLine`. However, when `isOfflineError` is passed it can replace\n   * the default offline detection.\n   */\n  isOfflineError?(\n    error: undefined | CombinedError,\n    result: OperationResult\n  ): boolean;\n}\n\n/** Exchange factory that creates a normalized cache exchange in Offline Support mode.\n *\n * @param opts - A {@link OfflineExchangeOpts} configuration object.\n * @returns the created normalized, offline cache {@link Exchange}.\n *\n * @remarks\n * The `offlineExchange` is a wrapper around the regular {@link cacheExchange}\n * which adds logic via the {@link OfflineExchangeOpts.storage} adapter to\n * recognize when it’s offline, when to retry failed mutations, and how\n * to handle longer periods of being offline.\n *\n * @see {@link https://urql.dev/goto/docs/graphcache/offline} for the full Offline Support docs.\n */\nexport const offlineExchange =\n  <C extends OfflineExchangeOpts>(opts: C): Exchange =>\n  input => {\n    const { storage } = opts;\n\n    const isOfflineError =\n      opts.isOfflineError ||\n      ((error: undefined | CombinedError) =>\n        error &&\n        error.networkError &&\n        !error.response &&\n        ((typeof navigator !== 'undefined' && navigator.onLine === false) ||\n          /request failed|failed to fetch|network\\s?error/i.test(\n            error.networkError.message\n          )));\n\n    if (\n      storage &&\n      storage.onOnline &&\n      storage.readMetadata &&\n      storage.writeMetadata\n    ) {\n      const { forward: outerForward, client, dispatchDebug } = input;\n      const { source: reboundOps$, next } = makeSubject<Operation>();\n      const failedQueue: Operation[] = [];\n      let hasRehydrated = false;\n      let isFlushingQueue = false;\n\n      const updateMetadata = () => {\n        if (hasRehydrated) {\n          const requests: SerializedRequest[] = [];\n          for (let i = 0; i < failedQueue.length; i++) {\n            const operation = failedQueue[i];\n            if (operation.kind === 'mutation') {\n              requests.push({\n                query: stringifyDocument(operation.query),\n                variables: operation.variables,\n                extensions: operation.extensions,\n              });\n            }\n          }\n          storage.writeMetadata!(requests);\n        }\n      };\n\n      const filterQueue = (key: number) => {\n        for (let i = failedQueue.length - 1; i >= 0; i--)\n          if (failedQueue[i].key === key) failedQueue.splice(i, 1);\n      };\n\n      const flushQueue = () => {\n        if (!isFlushingQueue) {\n          const sent = new Set<number>();\n          isFlushingQueue = true;\n          for (let i = 0; i < failedQueue.length; i++) {\n            const operation = failedQueue[i];\n            if (operation.kind === 'mutation' || !sent.has(operation.key)) {\n              sent.add(operation.key);\n              if (operation.kind !== 'subscription') {\n                next(makeOperation('teardown', operation));\n                let overridePolicy: RequestPolicy = 'cache-first';\n                for (let i = 0; i < failedQueue.length; i++) {\n                  const { requestPolicy } = failedQueue[i].context;\n                  if (policyLevel[requestPolicy] > policyLevel[overridePolicy])\n                    overridePolicy = requestPolicy;\n                }\n                next(toRequestPolicy(operation, overridePolicy));\n              } else {\n                next(toRequestPolicy(operation, 'cache-first'));\n              }\n            }\n          }\n          isFlushingQueue = false;\n          failedQueue.length = 0;\n          updateMetadata();\n        }\n      };\n\n      const forward: ExchangeIO = ops$ => {\n        return pipe(\n          outerForward(ops$),\n          filter(res => {\n            if (\n              hasRehydrated &&\n              res.operation.kind === 'mutation' &&\n              res.operation.context.optimistic &&\n              isOfflineError(res.error, res)\n            ) {\n              failedQueue.push(res.operation);\n              updateMetadata();\n              return false;\n            }\n\n            return true;\n          }),\n          share\n        );\n      };\n\n      const cacheResults$ = cacheExchange({\n        ...opts,\n        storage: {\n          ...storage,\n          readData() {\n            const hydrate = storage.readData();\n            return {\n              async then(onEntries) {\n                const mutations = await storage.readMetadata!();\n                for (let i = 0; mutations && i < mutations.length; i++) {\n                  failedQueue.push(\n                    client.createRequestOperation(\n                      'mutation',\n                      createRequest(mutations[i].query, mutations[i].variables),\n                      mutations[i].extensions\n                    )\n                  );\n                }\n                onEntries!(await hydrate);\n                storage.onOnline!(flushQueue);\n                hasRehydrated = true;\n                flushQueue();\n              },\n            };\n          },\n        },\n      })({\n        client,\n        dispatchDebug,\n        forward,\n      });\n\n      return operations$ => {\n        const opsAndRebound$ = merge([\n          reboundOps$,\n          pipe(\n            operations$,\n            onPush(operation => {\n              if (operation.kind === 'query' && !hasRehydrated) {\n                failedQueue.push(operation);\n              } else if (operation.kind === 'teardown') {\n                filterQueue(operation.key);\n              }\n            })\n          ),\n        ]);\n\n        return pipe(\n          cacheResults$(opsAndRebound$),\n          filter(res => {\n            if (res.operation.kind === 'query') {\n              if (isOfflineError(res.error, res)) {\n                next(toRequestPolicy(res.operation, 'cache-only'));\n                failedQueue.push(res.operation);\n                return false;\n              } else if (!hasRehydrated) {\n                filterQueue(res.operation.key);\n              }\n            }\n            return true;\n          })\n        );\n      };\n    }\n\n    return cacheExchange(opts)(input);\n  };\n"],"names":["helpUrl","invariant","condition","message","code","error","Error","name","Set","EMPTY_DIRECTIVES","getDirectives","node","_directives","getName","value","getFragmentTypeName","typeCondition","getFieldAlias","alias","emptySelectionSet","getSelectionSet","selectionSet","selections","getTypeCondition","getFieldArguments","vars","args","arguments","i","l","length","arg","valueFromASTUntyped","filterVariables","input","variableDefinitions","variable","normalizeVariables","def","undefined","defaultValue","key","getMainOperation","doc","definitions","kind","Kind","OPERATION_DEFINITION","getFragments","fragments","FRAGMENT_DEFINITION","shouldInclude","directives","include","skip","directive","isDeferred","defer","argument","isOptional","optional","required","isFieldNullable","schema","typename","fieldName","logger","field","getField","type","isListNullable","ofType","isInterfaceOfType","types","has","get","expectAbstractType","expectObjectType","isSubType","indexOf","fields","keyOfField","stringifyVariables","joinKeys","parentKey","fieldInfoOfKey","fieldKey","parenIndex","slice","JSON","parse","deserializeKeyInfo","dotIndex","entityKey","replace","currentOwnership","currentDataMapping","currentData","currentOptimisticKey","currentOperation","currentDependencies","currentForeignData","currentOptimistic","makeData","data","isArray","newData","set","add","ownsData","initDataState","operationType","layerKey","isOptimistic","isForeignData","WeakSet","WeakMap","hydrating","optimisticOrder","commutativeKeys","splice","delete","reserveLayer","createLayer","deleteLayer","clearDataState","dirtyKeys","squashLayer","storage","setTimeout","gc","persistData","noopDataState","deferredKeys","DEFAULT_EMPTY_SET","setNode","map","keymap","optimistic","base","entity","Object","create","getNode","getRefCount","refCount","updateRCForLink","link","by","Array","updateRCForEntity","count","newCount","extractNodeFields","fieldInfos","seenFieldKeys","push","extractNodeMapFields","keys","record","records","__typename","linkNode","links","updateDependencies","queryRootKey","updatePersist","persist","serializeKeys","readRecord","readLink","writeConcreteType","abstractType","concreteType","existingTypes","abstractToConcreteMap","typeSet","writeRecord","isEqualLinkOrScalar","writeLink","entityLinks","hasNext","index","clearLayer","unshift","Map","previousDependencies","entry","entries","keyMap","inspectFields","x","writeData","clear","a","b","some","el","contextRef","deferRef","optionalRef","getFieldError","ctx","__internal","path","errorMap","join","makeContext","store","variables","parent","parentTypeName","parentFieldKey","partial","graphQLErrors","graphQLError","updateContext","isFragmentHeuristicallyMatching","FIELD","hasField","SelectionIterator","constructor","_defer","_optional","this","stack","next","state","select","fragment","INLINE_FRAGMENT","isMatching","isFragmentMatching","isFragmentOptional","_generated","pop","isProbableAbstractType","isSeenConcreteType","getConcreteTypes","size","ensureData","ensureLink","ref","keyOfEntity","_query","request","query","formatDocument","operation","rootKey","rootFields","rootSelect","readRoot","InMemoryData","readSelection","dependencies","rootNames","selection","hasChanged","output","dataFieldValue","fieldAlias","fieldValue","readRootField","originalData","getFieldResolver","resolvers","fieldResolver","directiveNode","result","isQuery","hasFields","hasPartials","fieldArgs","resolver","resultValue","resolveResolverResult","resolveLink","prevData","isOwnedData","_isListNullable","childResult","isDataOrKey","newLink","childLink","invalidateEntity","invalidateType","excludedEntities","includes","_write","writeSelection","rootField","isRoot","writeType","updates","optimisticMutations","writeField","updater","resolved","prevLink","indexKey","childKey","Store","opts","globalIDs","queryName","mutationName","subscriptionName","buildClientSchema","__schema","typemap","buildNameMap","arr","buildType","interfaces","possibleTypes","queryType","mutation","mutationType","subscription","subscriptionType","abstract","possible","possibleType","out","id","_id","resolve","fieldLink","invalidate","updateQuery","createRequest","readQuery","readFragment","fragmentName","_queryFragment","writeFragment","_writeFragment","dataToWrite","rest","toRequestPolicy","requestPolicy","makeOperation","context","cacheExchange","forward","client","readData","then","hydrateData","onCacheHydrated","optimisticKeysToDependencies","mutationResultBuffer","operations","results","blockedDependencies","requestedRefetch","deps","reexecutingOperations","dependentOperations","isBlockedByOptimisticUpdate","dep","values","collectPendingOperations","pendingOperations","executePendingOperations","op","policy","reexecuteOperation","_reexecutingOperations","prepareForwardedOperation","depOps","operationResultFromCache","cacheOutcome","outcome","updateCacheWithResult","queryDependencies","writeDependencies","queryResult","extensions","stale","operations$","cacheOps$","share","filter","nonCacheOps$","cacheMissOps$","res","cacheResult$","shouldReexecute","result$","merge","nonOptimisticResults$","cacheResult","optimisticMutationCompletion$","mergeMap","empty","bufferedResult","shift","fromArray","policyLevel","offlineExchange","isOfflineError","networkError","response","navigator","onLine","test","onOnline","readMetadata","writeMetadata","outerForward","dispatchDebug","source","reboundOps$","makeSubject","failedQueue","hasRehydrated","isFlushingQueue","updateMetadata","requests","stringifyDocument","filterQueue","flushQueue","sent","overridePolicy","cacheResults$","hydrate","onEntries","mutations","createRequestOperation","ops$","opsAndRebound$","onPush"],"mappings":"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"}