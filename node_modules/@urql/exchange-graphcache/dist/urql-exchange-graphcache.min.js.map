{"version":3,"file":"urql-exchange-graphcache.min.js","sources":["../src/helpers/help.ts","../src/ast/node.ts","../src/ast/variables.ts","../src/ast/traversal.ts","../src/ast/schemaPredicates.ts","../src/store/keys.ts","../src/store/data.ts","../src/operations/shared.ts","../src/operations/query.ts","../src/operations/write.ts","../src/operations/invalidate.ts","../src/store/store.ts","../src/ast/schema.ts","../src/helpers/operation.ts","../src/cacheExchange.ts","../src/offlineExchange.ts"],"sourcesContent":["// These are guards that are used throughout the codebase to warn or error on\n// unexpected behaviour or conditions.\n// Every warning and error comes with a number that uniquely identifies them.\n// You can read more about the messages themselves in `docs/graphcache/errors.md`\n\nimport type {\n  ExecutableDefinitionNode,\n  InlineFragmentNode,\n} from '@0no-co/graphql.web';\nimport type { Logger } from '../types';\nimport { Kind } from '@0no-co/graphql.web';\n\nexport type ErrorCode =\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | 13\n  | 14\n  | 15\n  | 16\n  | 17\n  | 18\n  | 19\n  | 20\n  | 21\n  | 22\n  | 23\n  | 24\n  | 25\n  | 26\n  | 27\n  | 28;\n\ntype DebugNode = ExecutableDefinitionNode | InlineFragmentNode;\n\n// URL unfurls to https://formidable.com/open-source/urql/docs/graphcache/errors/\nconst helpUrl = '\\nhttps://bit.ly/2XbVrpR#';\nconst cache = new Set<string>();\n\nexport const currentDebugStack: string[] = [];\n\nexport const popDebugNode = () => currentDebugStack.pop();\n\nexport const pushDebugNode = (typename: void | string, node: DebugNode) => {\n  let identifier = '';\n  if (node.kind === Kind.INLINE_FRAGMENT) {\n    identifier = typename\n      ? `Inline Fragment on \"${typename}\"`\n      : 'Inline Fragment';\n  } else if (node.kind === Kind.OPERATION_DEFINITION) {\n    const name = node.name ? `\"${node.name.value}\"` : 'Unnamed';\n    identifier = `${name} ${node.operation}`;\n  } else if (node.kind === Kind.FRAGMENT_DEFINITION) {\n    identifier = `\"${node.name.value}\" Fragment`;\n  }\n\n  if (identifier) {\n    currentDebugStack.push(identifier);\n  }\n};\n\nconst getDebugOutput = (): string =>\n  currentDebugStack.length\n    ? '\\n(Caused At: ' + currentDebugStack.join(', ') + ')'\n    : '';\n\nexport function invariant(\n  condition: any,\n  message: string,\n  code: ErrorCode\n): asserts condition {\n  if (!condition) {\n    let errorMessage = message || 'Minfied Error #' + code + '\\n';\n    if (process.env.NODE_ENV !== 'production') {\n      errorMessage += getDebugOutput();\n    }\n\n    const error = new Error(errorMessage + helpUrl + code);\n    error.name = 'Graphcache Error';\n    throw error;\n  }\n}\n\nexport function warn(\n  message: string,\n  code: ErrorCode,\n  logger: Logger | undefined\n) {\n  if (!cache.has(message)) {\n    if (logger) {\n      logger('warn', message + getDebugOutput() + helpUrl + code);\n    } else {\n      console.warn(message + getDebugOutput() + helpUrl + code);\n    }\n    cache.add(message);\n  }\n}\n","import type {\n  NamedTypeNode,\n  NameNode,\n  DirectiveNode,\n  SelectionNode,\n  SelectionSetNode,\n  FieldNode,\n  FragmentDefinitionNode,\n} from '@0no-co/graphql.web';\n\nimport type { FormattedNode } from '@urql/core';\n\nexport type SelectionSet = readonly FormattedNode<SelectionNode>[];\n\nconst EMPTY_DIRECTIVES: Record<string, DirectiveNode | undefined> = {};\n\n/** Returns the directives dictionary of a given node */\nexport const getDirectives = (node: {\n  _directives?: Record<string, DirectiveNode | undefined>;\n}) => node._directives || EMPTY_DIRECTIVES;\n\n/** Returns the name of a given node */\nexport const getName = (node: { name: NameNode }): string => node.name.value;\n\nexport const getFragmentTypeName = (node: FragmentDefinitionNode): string =>\n  node.typeCondition.name.value;\n\n/** Returns either the field's name or the field's alias */\nexport const getFieldAlias = (node: FieldNode): string =>\n  node.alias ? node.alias.value : node.name.value;\n\nconst emptySelectionSet: SelectionSet = [];\n\n/** Returns the SelectionSet for a given inline or defined fragment node */\nexport const getSelectionSet = (node: {\n  selectionSet?: FormattedNode<SelectionSetNode>;\n}): FormattedNode<SelectionSet> =>\n  (node.selectionSet\n    ? node.selectionSet.selections\n    : emptySelectionSet) as FormattedNode<SelectionSet>;\n\nexport const getTypeCondition = (node: {\n  typeCondition?: NamedTypeNode;\n}): string | null =>\n  node.typeCondition ? node.typeCondition.name.value : null;\n","import type {\n  FieldNode,\n  DirectiveNode,\n  OperationDefinitionNode,\n} from '@0no-co/graphql.web';\nimport { valueFromASTUntyped } from '@0no-co/graphql.web';\n\nimport { getName } from './node';\n\nimport type { Variables } from '../types';\n\n/** Evaluates a fields arguments taking vars into account */\nexport const getFieldArguments = (\n  node: FieldNode | DirectiveNode,\n  vars: Variables\n): null | Variables => {\n  let args: null | Variables = null;\n  if (node.arguments) {\n    for (let i = 0, l = node.arguments.length; i < l; i++) {\n      const arg = node.arguments[i];\n      const value = valueFromASTUntyped(arg.value, vars);\n      if (value !== undefined && value !== null) {\n        if (!args) args = {};\n        args[getName(arg)] = value as any;\n      }\n    }\n  }\n  return args;\n};\n\n/** Returns a filtered form of variables with values missing that the query doesn't require */\nexport const filterVariables = (\n  node: OperationDefinitionNode,\n  input: void | object\n) => {\n  if (!input || !node.variableDefinitions) {\n    return undefined;\n  }\n\n  const vars = {};\n  for (let i = 0, l = node.variableDefinitions.length; i < l; i++) {\n    const name = getName(node.variableDefinitions[i].variable);\n    vars[name] = input[name];\n  }\n\n  return vars;\n};\n\n/** Returns a normalized form of variables with defaulted values */\nexport const normalizeVariables = (\n  node: OperationDefinitionNode,\n  input: void | Record<string, unknown>\n): Variables => {\n  const vars = {};\n  if (!input) return vars;\n\n  if (node.variableDefinitions) {\n    for (let i = 0, l = node.variableDefinitions.length; i < l; i++) {\n      const def = node.variableDefinitions[i];\n      const name = getName(def.variable);\n      vars[name] =\n        input[name] === undefined && def.defaultValue\n          ? valueFromASTUntyped(def.defaultValue, input)\n          : input[name];\n    }\n  }\n\n  for (const key in input) {\n    if (!(key in vars)) vars[key] = input[key];\n  }\n\n  return vars;\n};\n","import type {\n  SelectionNode,\n  DocumentNode,\n  OperationDefinitionNode,\n  FragmentSpreadNode,\n  InlineFragmentNode,\n} from '@0no-co/graphql.web';\nimport { valueFromASTUntyped, Kind } from '@0no-co/graphql.web';\n\nimport type { FormattedNode } from '@urql/core';\nimport { getName, getDirectives } from './node';\nimport { invariant } from '../helpers/help';\nimport type { Fragments, Variables } from '../types';\n\nfunction getMainOperation(\n  doc: FormattedNode<DocumentNode>\n): FormattedNode<OperationDefinitionNode>;\nfunction getMainOperation(doc: DocumentNode): OperationDefinitionNode;\n\n/** Returns the main operation's definition */\nfunction getMainOperation(doc: DocumentNode): OperationDefinitionNode {\n  for (let i = 0; i < doc.definitions.length; i++) {\n    if (doc.definitions[i].kind === Kind.OPERATION_DEFINITION) {\n      return doc.definitions[i] as FormattedNode<OperationDefinitionNode>;\n    }\n  }\n\n  invariant(\n    false,\n    'Invalid GraphQL document: All GraphQL documents must contain an OperationDefinition' +\n      'node for a query, subscription, or mutation.',\n    1\n  );\n}\n\nexport { getMainOperation };\n\n/** Returns a mapping from fragment names to their selections */\nexport const getFragments = (doc: FormattedNode<DocumentNode>): Fragments => {\n  const fragments: Fragments = {};\n  for (let i = 0; i < doc.definitions.length; i++) {\n    const node = doc.definitions[i];\n    if (node.kind === Kind.FRAGMENT_DEFINITION) {\n      fragments[getName(node)] = node;\n    }\n  }\n\n  return fragments;\n};\n\n/** Resolves @include and @skip directives to determine whether field is included. */\nexport const shouldInclude = (\n  node: FormattedNode<SelectionNode>,\n  vars: Variables\n): boolean => {\n  const directives = getDirectives(node);\n  if (directives.include || directives.skip) {\n    // Finds any @include or @skip directive that forces the node to be skipped\n    for (const name in directives) {\n      const directive = directives[name];\n      if (\n        directive &&\n        (name === 'include' || name === 'skip') &&\n        directive.arguments &&\n        directive.arguments[0] &&\n        getName(directive.arguments[0]) === 'if'\n      ) {\n        // Return whether this directive forces us to skip\n        // `@include(if: false)` or `@skip(if: true)`\n        const value = valueFromASTUntyped(directive.arguments[0].value, vars);\n        return name === 'include' ? !!value : !value;\n      }\n    }\n  }\n  return true;\n};\n\n/** Resolves @defer directive to determine whether a fragment is potentially skipped. */\nexport const isDeferred = (\n  node: FormattedNode<FragmentSpreadNode | InlineFragmentNode>,\n  vars: Variables\n): boolean => {\n  const { defer } = getDirectives(node);\n  if (defer) {\n    for (const argument of defer.arguments || []) {\n      if (getName(argument) === 'if') {\n        // Return whether `@defer(if: )` is enabled\n        return !!valueFromASTUntyped(argument.value, vars);\n      }\n    }\n    return true;\n  }\n\n  return false;\n};\n\n/** Resolves @_optional and @_required directive to determine whether the fields in a fragment are conaidered optional. */\nexport const isOptional = (\n  node: FormattedNode<FragmentSpreadNode | InlineFragmentNode>\n): boolean | undefined => {\n  const { optional, required } = getDirectives(node);\n  if (required) {\n    return false;\n  }\n\n  if (optional) {\n    return true;\n  }\n\n  return undefined;\n};\n","import type {\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n} from '@0no-co/graphql.web';\n\nimport { warn, invariant } from '../helpers/help';\nimport { getTypeCondition } from './node';\nimport type { SchemaIntrospector, SchemaObject } from './schema';\n\nimport type {\n  KeyingConfig,\n  UpdatesConfig,\n  ResolverConfig,\n  OptimisticMutationConfig,\n  Logger,\n} from '../types';\n\nconst BUILTIN_NAME = '__';\n\nexport const isFieldNullable = (\n  schema: SchemaIntrospector,\n  typename: string,\n  fieldName: string,\n  logger: Logger | undefined\n): boolean => {\n  const field = getField(schema, typename, fieldName, logger);\n  return !!field && field.type.kind !== 'NON_NULL';\n};\n\nexport const isListNullable = (\n  schema: SchemaIntrospector,\n  typename: string,\n  fieldName: string,\n  logger: Logger | undefined\n): boolean => {\n  const field = getField(schema, typename, fieldName, logger);\n  if (!field) return false;\n  const ofType =\n    field.type.kind === 'NON_NULL' ? field.type.ofType : field.type;\n  return ofType.kind === 'LIST' && ofType.ofType.kind !== 'NON_NULL';\n};\n\nexport const isFieldAvailableOnType = (\n  schema: SchemaIntrospector,\n  typename: string,\n  fieldName: string,\n  logger: Logger | undefined\n): boolean =>\n  fieldName.indexOf(BUILTIN_NAME) === 0 ||\n  typename.indexOf(BUILTIN_NAME) === 0 ||\n  !!getField(schema, typename, fieldName, logger);\n\nexport const isInterfaceOfType = (\n  schema: SchemaIntrospector,\n  node: InlineFragmentNode | FragmentDefinitionNode,\n  typename: string | void\n): boolean => {\n  if (!typename) return false;\n  const typeCondition = getTypeCondition(node);\n  if (!typeCondition || typename === typeCondition) {\n    return true;\n  } else if (\n    schema.types!.has(typeCondition) &&\n    schema.types!.get(typeCondition)!.kind === 'OBJECT'\n  ) {\n    return typeCondition === typename;\n  }\n\n  expectAbstractType(schema, typeCondition!);\n  expectObjectType(schema, typename!);\n  return schema.isSubType(typeCondition, typename);\n};\n\nconst getField = (\n  schema: SchemaIntrospector,\n  typename: string,\n  fieldName: string,\n  logger: Logger | undefined\n) => {\n  if (\n    fieldName.indexOf(BUILTIN_NAME) === 0 ||\n    typename.indexOf(BUILTIN_NAME) === 0\n  )\n    return;\n\n  expectObjectType(schema, typename);\n  const object = schema.types!.get(typename) as SchemaObject;\n  const field = object.fields()[fieldName];\n  if (!field) {\n    warn(\n      'Invalid field: The field `' +\n        fieldName +\n        '` does not exist on `' +\n        typename +\n        '`, ' +\n        'but the GraphQL document expects it to exist.\\n' +\n        'Traversal will continue, however this may lead to undefined behavior!',\n      4,\n      logger\n    );\n  }\n\n  return field;\n};\n\nfunction expectObjectType(schema: SchemaIntrospector, typename: string) {\n  invariant(\n    schema.types!.has(typename) &&\n      schema.types!.get(typename)!.kind === 'OBJECT',\n    'Invalid Object type: The type `' +\n      typename +\n      '` is not an object in the defined schema, ' +\n      'but the GraphQL document is traversing it.',\n    3\n  );\n}\n\nfunction expectAbstractType(schema: SchemaIntrospector, typename: string) {\n  invariant(\n    schema.types!.has(typename) &&\n      (schema.types!.get(typename)!.kind === 'INTERFACE' ||\n        schema.types!.get(typename)!.kind === 'UNION'),\n    'Invalid Abstract type: The type `' +\n      typename +\n      '` is not an Interface or Union type in the defined schema, ' +\n      'but a fragment in the GraphQL document is using it as a type condition.',\n    5\n  );\n}\n\nexport function expectValidKeyingConfig(\n  schema: SchemaIntrospector,\n  keys: KeyingConfig,\n  logger: Logger | undefined\n): void {\n  if (process.env.NODE_ENV !== 'production') {\n    for (const key in keys) {\n      if (!schema.types!.has(key)) {\n        warn(\n          'Invalid Object type: The type `' +\n            key +\n            '` is not an object in the defined schema, but the `keys` option is referencing it.',\n          20,\n          logger\n        );\n      }\n    }\n  }\n}\n\nexport function expectValidUpdatesConfig(\n  schema: SchemaIntrospector,\n  updates: UpdatesConfig,\n  logger: Logger | undefined\n): void {\n  if (process.env.NODE_ENV === 'production') {\n    return;\n  }\n\n  for (const typename in updates) {\n    if (!updates[typename]) {\n      continue;\n    } else if (!schema.types!.has(typename)) {\n      let addition = '';\n\n      if (\n        typename === 'Mutation' &&\n        schema.mutation &&\n        schema.mutation !== 'Mutation'\n      ) {\n        addition +=\n          '\\nMaybe your config should reference `' + schema.mutation + '`?';\n      } else if (\n        typename === 'Subscription' &&\n        schema.subscription &&\n        schema.subscription !== 'Subscription'\n      ) {\n        addition +=\n          '\\nMaybe your config should reference `' + schema.subscription + '`?';\n      }\n\n      return warn(\n        'Invalid updates type: The type `' +\n          typename +\n          '` is not an object in the defined schema, but the `updates` config is referencing it.' +\n          addition,\n        21,\n        logger\n      );\n    }\n\n    const fields = (schema.types!.get(typename)! as SchemaObject).fields();\n    for (const fieldName in updates[typename]!) {\n      if (!fields[fieldName]) {\n        warn(\n          'Invalid updates field: `' +\n            fieldName +\n            '` on `' +\n            typename +\n            '` is not in the defined schema, but the `updates` config is referencing it.',\n          22,\n          logger\n        );\n      }\n    }\n  }\n}\n\nfunction warnAboutResolver(name: string, logger: Logger | undefined): void {\n  warn(\n    `Invalid resolver: \\`${name}\\` is not in the defined schema, but the \\`resolvers\\` option is referencing it.`,\n    23,\n    logger\n  );\n}\n\nfunction warnAboutAbstractResolver(\n  name: string,\n  kind: 'UNION' | 'INTERFACE',\n  logger: Logger | undefined\n): void {\n  warn(\n    `Invalid resolver: \\`${name}\\` does not match to a concrete type in the schema, but the \\`resolvers\\` option is referencing it. Implement the resolver for the types that ${\n      kind === 'UNION' ? 'make up the union' : 'implement the interface'\n    } instead.`,\n    26,\n    logger\n  );\n}\n\nexport function expectValidResolversConfig(\n  schema: SchemaIntrospector,\n  resolvers: ResolverConfig,\n  logger: Logger | undefined\n): void {\n  if (process.env.NODE_ENV === 'production') {\n    return;\n  }\n\n  for (const key in resolvers) {\n    if (key === 'Query') {\n      if (schema.query) {\n        const validQueries = (\n          schema.types!.get(schema.query) as SchemaObject\n        ).fields();\n        for (const resolverQuery in resolvers.Query || {}) {\n          if (!validQueries[resolverQuery]) {\n            warnAboutResolver('Query.' + resolverQuery, logger);\n          }\n        }\n      } else {\n        warnAboutResolver('Query', logger);\n      }\n    } else {\n      if (!schema.types!.has(key)) {\n        warnAboutResolver(key, logger);\n      } else if (\n        schema.types!.get(key)!.kind === 'INTERFACE' ||\n        schema.types!.get(key)!.kind === 'UNION'\n      ) {\n        warnAboutAbstractResolver(\n          key,\n          schema.types!.get(key)!.kind as 'INTERFACE' | 'UNION',\n          logger\n        );\n      } else {\n        const validTypeProperties = (\n          schema.types!.get(key) as SchemaObject\n        ).fields();\n        for (const resolverProperty in resolvers[key] || {}) {\n          if (!validTypeProperties[resolverProperty]) {\n            warnAboutResolver(key + '.' + resolverProperty, logger);\n          }\n        }\n      }\n    }\n  }\n}\n\nexport function expectValidOptimisticMutationsConfig(\n  schema: SchemaIntrospector,\n  optimisticMutations: OptimisticMutationConfig,\n  logger: Logger | undefined\n): void {\n  if (process.env.NODE_ENV === 'production') {\n    return;\n  }\n\n  if (schema.mutation) {\n    const validMutations = (\n      schema.types!.get(schema.mutation) as SchemaObject\n    ).fields();\n    for (const mutation in optimisticMutations) {\n      if (!validMutations[mutation]) {\n        warn(\n          `Invalid optimistic mutation field: \\`${mutation}\\` is not a mutation field in the defined schema, but the \\`optimistic\\` option is referencing it.`,\n          24,\n          logger\n        );\n      }\n    }\n  }\n}\n","import { stringifyVariables } from '@urql/core';\nimport type { FieldArgs, FieldInfo, KeyInfo } from '../types';\n\nexport const keyOfField = (fieldName: string, args?: FieldArgs) =>\n  args ? `${fieldName}(${stringifyVariables(args)})` : fieldName;\n\nexport const joinKeys = (parentKey: string, key: string) =>\n  `${parentKey}.${key}`;\n\nexport const fieldInfoOfKey = (fieldKey: string): FieldInfo => {\n  const parenIndex = fieldKey.indexOf('(');\n  if (parenIndex > -1) {\n    return {\n      fieldKey,\n      fieldName: fieldKey.slice(0, parenIndex),\n      arguments: JSON.parse(fieldKey.slice(parenIndex + 1, -1)),\n    };\n  } else {\n    return {\n      fieldKey,\n      fieldName: fieldKey,\n      arguments: null,\n    };\n  }\n};\n\nexport const serializeKeys = (entityKey: string, fieldKey: string) =>\n  `${entityKey.replace(/\\./g, '%2e')}.${fieldKey}`;\n\nexport const deserializeKeyInfo = (key: string): KeyInfo => {\n  const dotIndex = key.indexOf('.');\n  const entityKey = key.slice(0, dotIndex).replace(/%2e/g, '.');\n  const fieldKey = key.slice(dotIndex + 1);\n  return { entityKey, fieldKey };\n};\n","import { stringifyVariables } from '@urql/core';\n\nimport type {\n  Link,\n  EntityField,\n  FieldInfo,\n  StorageAdapter,\n  SerializedEntries,\n  Dependencies,\n  OperationType,\n  DataField,\n  Data,\n} from '../types';\n\nimport {\n  serializeKeys,\n  deserializeKeyInfo,\n  fieldInfoOfKey,\n  joinKeys,\n} from './keys';\n\nimport { invariant, currentDebugStack } from '../helpers/help';\n\ntype Dict<T> = Record<string, T>;\ntype KeyMap<T> = Map<string, T>;\ntype OperationMap<T> = Map<number, T>;\n\ninterface NodeMap<T> {\n  optimistic: OperationMap<KeyMap<Dict<T | undefined>>>;\n  base: KeyMap<Dict<T>>;\n}\n\nexport interface InMemoryData {\n  /** Flag for whether the data is waiting for hydration */\n  hydrating: boolean;\n  /** Flag for whether deferred tasks have been scheduled yet */\n  defer: boolean;\n  /** A list of entities that have been flagged for gargabe collection since no references to them are left */\n  gc: Set<string>;\n  /** A list of entity+field keys that will be persisted */\n  persist: Set<string>;\n  /** The API's \"Query\" typename which is needed to filter dependencies */\n  queryRootKey: string;\n  /** Number of references to each entity (except \"Query\") */\n  refCount: KeyMap<number>;\n  /** A map of entity fields (key-value entries per entity) */\n  records: NodeMap<EntityField>;\n  /** A map of entity links which are connections from one entity to another (key-value entries per entity) */\n  links: NodeMap<Link>;\n  /** A map of typename to a list of entity-keys belonging to said type */\n  types: Map<string, Set<string>>;\n  /** A set of Query operation keys that are in-flight and deferred/streamed */\n  deferredKeys: Set<number>;\n  /** A set of Query operation keys that are in-flight and awaiting a result */\n  commutativeKeys: Set<number>;\n  /** A set of Query operation keys that have been written to */\n  dirtyKeys: Set<number>;\n  /** The order of optimistic layers */\n  optimisticOrder: number[];\n  /** This may be a persistence adapter that will receive changes in a batch */\n  storage: StorageAdapter | null;\n}\n\nlet currentOwnership: null | WeakSet<any> = null;\nlet currentDataMapping: null | WeakMap<any, any> = null;\nlet currentData: null | InMemoryData = null;\nlet currentOptimisticKey: null | number = null;\nexport let currentOperation: null | OperationType = null;\nexport let currentDependencies: null | Dependencies = null;\nexport let currentForeignData = false;\nexport let currentOptimistic = false;\n\nexport function makeData(data: DataField | void, isArray?: false): Data;\nexport function makeData(data: DataField | void, isArray: true): DataField[];\n\n/** Creates a new data object unless it's been created in this data run */\nexport function makeData(data?: DataField | void, isArray?: boolean) {\n  let newData: Data | Data[] | undefined;\n  if (data) {\n    if (currentOwnership!.has(data)) return data;\n    newData = currentDataMapping!.get(data) as any;\n  }\n\n  if (newData == null) {\n    newData = (isArray ? [] : {}) as any;\n  }\n\n  if (data) {\n    currentDataMapping!.set(data, newData);\n  }\n\n  currentOwnership!.add(newData);\n  return newData;\n}\n\nexport const ownsData = (data?: Data): boolean =>\n  !!data && currentOwnership!.has(data);\n\n/** Before reading or writing the global state needs to be initialised */\nexport const initDataState = (\n  operationType: OperationType,\n  data: InMemoryData,\n  layerKey?: number | null,\n  isOptimistic?: boolean,\n  isForeignData?: boolean\n) => {\n  currentOwnership = new WeakSet();\n  currentDataMapping = new WeakMap();\n  currentOperation = operationType;\n  currentData = data;\n  currentDependencies = new Set();\n  currentOptimistic = !!isOptimistic;\n  currentForeignData = !!isForeignData;\n  if (process.env.NODE_ENV !== 'production') {\n    currentDebugStack.length = 0;\n  }\n\n  if (!layerKey) {\n    currentOptimisticKey = null;\n  } else if (currentOperation === 'read') {\n    // We don't create new layers for read operations and instead simply\n    // apply the currently available layer, if any\n    currentOptimisticKey = layerKey;\n  } else if (\n    isOptimistic ||\n    data.hydrating ||\n    data.optimisticOrder.length > 1\n  ) {\n    // If this operation isn't optimistic and we see it for the first time,\n    // then it must've been optimistic in the past, so we can proactively\n    // clear the optimistic data before writing\n    if (!isOptimistic && !data.commutativeKeys.has(layerKey)) {\n      reserveLayer(data, layerKey);\n    } else if (isOptimistic) {\n      if (\n        data.optimisticOrder.indexOf(layerKey) !== -1 &&\n        !data.commutativeKeys.has(layerKey)\n      ) {\n        data.optimisticOrder.splice(data.optimisticOrder.indexOf(layerKey), 1);\n      }\n      // NOTE: This optimally shouldn't happen as it implies that an optimistic\n      // write is being performed after a concrete write.\n      data.commutativeKeys.delete(layerKey);\n    }\n\n    // An optimistic update of a mutation may force an optimistic layer,\n    // or this Query update may be applied optimistically since it's part\n    // of a commutative chain\n    currentOptimisticKey = layerKey;\n    createLayer(data, layerKey);\n  } else {\n    // Otherwise we don't create an optimistic layer and clear the\n    // operation's one if it already exists\n    // We also do this when only one layer exists to avoid having to squash\n    // any layers at the end of writing this layer\n    currentOptimisticKey = null;\n    deleteLayer(data, layerKey);\n  }\n};\n\n/** Reset the data state after read/write is complete */\nexport const clearDataState = () => {\n  // NOTE: This is only called to check for the invariant to pass\n  if (process.env.NODE_ENV !== 'production') {\n    getCurrentDependencies();\n  }\n\n  const data = currentData!;\n  const layerKey = currentOptimisticKey;\n  currentOptimistic = false;\n  currentOptimisticKey = null;\n\n  // Determine whether the current operation has been a commutative layer\n  if (\n    !data.hydrating &&\n    layerKey &&\n    data.optimisticOrder.indexOf(layerKey) > -1\n  ) {\n    // Squash all layers in reverse order (low priority upwards) that have\n    // been written already\n    let i = data.optimisticOrder.length;\n    while (\n      --i >= 0 &&\n      data.dirtyKeys.has(data.optimisticOrder[i]) &&\n      data.commutativeKeys.has(data.optimisticOrder[i])\n    )\n      squashLayer(data.optimisticOrder[i]);\n  }\n\n  currentOwnership = null;\n  currentDataMapping = null;\n  currentOperation = null;\n  currentData = null;\n  currentDependencies = null;\n  if (process.env.NODE_ENV !== 'production') {\n    currentDebugStack.length = 0;\n  }\n\n  if (process.env.NODE_ENV !== 'test') {\n    // Schedule deferred tasks if we haven't already, and if either a persist or GC run\n    // are likely to be needed\n    if (!data.defer && (data.storage || !data.optimisticOrder.length)) {\n      data.defer = true;\n      setTimeout(() => {\n        initDataState('read', data, null);\n        gc();\n        persistData();\n        clearDataState();\n        data.defer = false;\n      });\n    }\n  }\n};\n\n/** Initialises then resets the data state, which may squash this layer if necessary */\nexport const noopDataState = (\n  data: InMemoryData,\n  layerKey: number | null,\n  isOptimistic?: boolean\n) => {\n  if (layerKey && !isOptimistic) data.deferredKeys.delete(layerKey);\n  initDataState('write', data, layerKey, isOptimistic);\n  clearDataState();\n};\n\n/** As we're writing, we keep around all the records and links we've read or have written to */\nexport const getCurrentDependencies = (): Dependencies => {\n  invariant(\n    currentDependencies !== null,\n    'Invalid Cache call: The cache may only be accessed or mutated during' +\n      'operations like write or query, or as part of its resolvers, updaters, ' +\n      'or optimistic configs.',\n    2\n  );\n\n  return currentDependencies;\n};\n\nconst DEFAULT_EMPTY_SET = new Set<string>();\nexport const make = (queryRootKey: string): InMemoryData => ({\n  hydrating: false,\n  defer: false,\n  gc: new Set(),\n  types: new Map(),\n  persist: new Set(),\n  queryRootKey,\n  refCount: new Map(),\n  links: {\n    optimistic: new Map(),\n    base: new Map(),\n  },\n  records: {\n    optimistic: new Map(),\n    base: new Map(),\n  },\n  deferredKeys: new Set(),\n  commutativeKeys: new Set(),\n  dirtyKeys: new Set(),\n  optimisticOrder: [],\n  storage: null,\n});\n\n/** Adds a node value to a NodeMap (taking optimistic values into account */\nconst setNode = <T>(\n  map: NodeMap<T>,\n  entityKey: string,\n  fieldKey: string,\n  value: T\n) => {\n  if (process.env.NODE_ENV !== 'production') {\n    invariant(\n      currentOperation !== 'read',\n      'Invalid Cache write: You may not write to the cache during cache reads. ' +\n        ' Accesses to `cache.writeFragment`, `cache.updateQuery`, and `cache.link` may ' +\n        ' not be made inside `resolvers` for instance.',\n      27\n    );\n  }\n\n  // Optimistic values are written to a map in the optimistic dict\n  // All other values are written to the base map\n  const keymap: KeyMap<Dict<T | undefined>> = currentOptimisticKey\n    ? map.optimistic.get(currentOptimisticKey)!\n    : map.base;\n\n  // On the map itself we get or create the entity as a dict\n  let entity = keymap.get(entityKey) as Dict<T | undefined>;\n  if (entity === undefined) {\n    keymap.set(entityKey, (entity = Object.create(null)));\n  }\n\n  // If we're setting undefined we delete the node's entry\n  // On optimistic layers we actually set undefined so it can\n  // override the base value\n  if (value === undefined && !currentOptimisticKey) {\n    delete entity[fieldKey];\n  } else {\n    entity[fieldKey] = value;\n  }\n};\n\n/** Gets a node value from a NodeMap (taking optimistic values into account */\nconst getNode = <T>(\n  map: NodeMap<T>,\n  entityKey: string,\n  fieldKey: string\n): T | undefined => {\n  let node: Dict<T | undefined> | undefined;\n  // A read may be initialised to skip layers until its own, which is useful for\n  // reading back written data. It won't skip over optimistic layers however\n  let skip =\n    !currentOptimistic &&\n    currentOperation === 'read' &&\n    currentOptimisticKey &&\n    currentData!.commutativeKeys.has(currentOptimisticKey);\n  // This first iterates over optimistic layers (in order)\n  for (let i = 0, l = currentData!.optimisticOrder.length; i < l; i++) {\n    const layerKey = currentData!.optimisticOrder[i];\n    const optimistic = map.optimistic.get(layerKey);\n    // If we're reading starting from a specific layer, we skip until a match\n    skip = skip && layerKey !== currentOptimisticKey;\n    // If the node and node value exists it is returned, including undefined\n    if (\n      optimistic &&\n      (!skip || !currentData!.commutativeKeys.has(layerKey)) &&\n      (!currentOptimistic ||\n        currentOperation === 'write' ||\n        currentData!.commutativeKeys.has(layerKey)) &&\n      (node = optimistic.get(entityKey)) !== undefined &&\n      fieldKey in node\n    ) {\n      return node[fieldKey];\n    }\n  }\n\n  // Otherwise we read the non-optimistic base value\n  node = map.base.get(entityKey);\n  return node !== undefined ? node[fieldKey] : undefined;\n};\n\n/** Adjusts the reference count of an entity on a refCount dict by \"by\" and updates the gc */\nconst updateRCForEntity = (entityKey: string, by: number): void => {\n  // Retrieve the reference count and adjust it by \"by\"\n  const count = currentData!.refCount.get(entityKey) || 0;\n  const newCount = count + by > 0 ? count + by : 0;\n  currentData!.refCount.set(entityKey, newCount);\n  // Add it to the garbage collection batch if it needs to be deleted or remove it\n  // from the batch if it needs to be kept\n  if (!newCount) currentData!.gc.add(entityKey);\n  else if (!count && newCount) currentData!.gc.delete(entityKey);\n};\n\n/** Adjusts the reference counts of all entities of a link on a refCount dict by \"by\" and updates the gc */\nconst updateRCForLink = (link: Link | undefined, by: number): void => {\n  if (Array.isArray(link)) {\n    for (let i = 0, l = link.length; i < l; i++) updateRCForLink(link[i], by);\n  } else if (typeof link === 'string') {\n    updateRCForEntity(link, by);\n  }\n};\n\n/** Writes all parsed FieldInfo objects of a given node dict to a given array if it hasn't been seen */\nconst extractNodeFields = <T>(\n  fieldInfos: FieldInfo[],\n  seenFieldKeys: Set<string>,\n  node: Dict<T> | undefined\n): void => {\n  if (node !== undefined) {\n    for (const fieldKey in node) {\n      if (!seenFieldKeys.has(fieldKey)) {\n        // If the node hasn't been seen the serialized fieldKey is turnt back into\n        // a rich FieldInfo object that also contains the field's name and arguments\n        fieldInfos.push(fieldInfoOfKey(fieldKey));\n        seenFieldKeys.add(fieldKey);\n      }\n    }\n  }\n};\n\n/** Writes all parsed FieldInfo objects of all nodes in a NodeMap to a given array */\nconst extractNodeMapFields = <T>(\n  fieldInfos: FieldInfo[],\n  seenFieldKeys: Set<string>,\n  entityKey: string,\n  map: NodeMap<T>\n) => {\n  // Extracts FieldInfo for the entity in the base map\n  extractNodeFields(fieldInfos, seenFieldKeys, map.base.get(entityKey));\n\n  // Then extracts FieldInfo for the entity from the optimistic maps\n  for (let i = 0, l = currentData!.optimisticOrder.length; i < l; i++) {\n    const optimistic = map.optimistic.get(currentData!.optimisticOrder[i]);\n    if (optimistic !== undefined) {\n      extractNodeFields(fieldInfos, seenFieldKeys, optimistic.get(entityKey));\n    }\n  }\n};\n\n/** Garbage collects all entities that have been marked as having no references */\nexport const gc = () => {\n  // If we're currently awaiting deferred results, abort GC run\n  if (currentData!.optimisticOrder.length) return;\n\n  // Iterate over all entities that have been marked for deletion\n  // Entities have been marked for deletion in `updateRCForEntity` if\n  // their reference count dropped to 0\n  for (const entityKey of currentData!.gc.keys()) {\n    // Remove the current key from the GC batch\n    currentData!.gc.delete(entityKey);\n\n    // Check first whether the entity has any references,\n    // if so, we skip it from the GC run\n    const rc = currentData!.refCount.get(entityKey) || 0;\n    if (rc > 0) continue;\n\n    const record = currentData!.records.base.get(entityKey);\n    // Delete the reference count, and delete the entity from the GC batch\n    currentData!.refCount.delete(entityKey);\n    currentData!.records.base.delete(entityKey);\n\n    const typename = (record && record.__typename) as string | undefined;\n    if (typename) {\n      const type = currentData!.types.get(typename);\n      if (type) type.delete(entityKey);\n    }\n\n    const linkNode = currentData!.links.base.get(entityKey);\n    if (linkNode) {\n      currentData!.links.base.delete(entityKey);\n      for (const fieldKey in linkNode) updateRCForLink(linkNode[fieldKey], -1);\n    }\n  }\n};\n\nconst updateDependencies = (entityKey: string, fieldKey?: string) => {\n  if (entityKey !== currentData!.queryRootKey) {\n    currentDependencies!.add(entityKey);\n  } else if (fieldKey !== undefined && fieldKey !== '__typename') {\n    currentDependencies!.add(joinKeys(entityKey, fieldKey));\n  }\n};\n\nconst updatePersist = (entityKey: string, fieldKey: string) => {\n  if (!currentOptimistic && currentData!.storage) {\n    currentData!.persist.add(serializeKeys(entityKey, fieldKey));\n  }\n};\n\n/** Reads an entity's field (a \"record\") from data */\nexport const readRecord = (\n  entityKey: string,\n  fieldKey: string\n): EntityField => {\n  updateDependencies(entityKey, fieldKey);\n  return getNode(currentData!.records, entityKey, fieldKey);\n};\n\n/** Reads an entity's link from data */\nexport const readLink = (\n  entityKey: string,\n  fieldKey: string\n): Link | undefined => {\n  updateDependencies(entityKey, fieldKey);\n  return getNode(currentData!.links, entityKey, fieldKey);\n};\n\nexport const getEntitiesForType = (typename: string): Set<string> =>\n  currentData!.types.get(typename) || DEFAULT_EMPTY_SET;\n\nexport const writeType = (typename: string, entityKey: string) => {\n  const existingTypes = currentData!.types.get(typename);\n  if (!existingTypes) {\n    const typeSet = new Set<string>();\n    typeSet.add(entityKey);\n    currentData!.types.set(typename, typeSet);\n  } else {\n    existingTypes.add(entityKey);\n  }\n};\n\n/** Writes an entity's field (a \"record\") to data */\nexport const writeRecord = (\n  entityKey: string,\n  fieldKey: string,\n  value?: EntityField\n) => {\n  updateDependencies(entityKey, fieldKey);\n  updatePersist(entityKey, fieldKey);\n  setNode(currentData!.records, entityKey, fieldKey, value);\n};\n\nexport const hasField = (entityKey: string, fieldKey: string): boolean =>\n  readRecord(entityKey, fieldKey) !== undefined ||\n  readLink(entityKey, fieldKey) !== undefined;\n\n/** Writes an entity's link to data */\nexport const writeLink = (\n  entityKey: string,\n  fieldKey: string,\n  link?: Link | undefined\n) => {\n  // Retrieve the link NodeMap from either an optimistic or the base layer\n  const links = currentOptimisticKey\n    ? currentData!.links.optimistic.get(currentOptimisticKey)\n    : currentData!.links.base;\n  // Update the reference count for the link\n  if (!currentOptimisticKey) {\n    const entityLinks = links && links.get(entityKey);\n    updateRCForLink(entityLinks && entityLinks[fieldKey], -1);\n    updateRCForLink(link, 1);\n  }\n  // Update persistence batch and dependencies\n  updateDependencies(entityKey, fieldKey);\n  updatePersist(entityKey, fieldKey);\n  // Update the link\n  setNode(currentData!.links, entityKey, fieldKey, link);\n};\n\n/** Reserves an optimistic layer and preorders it */\nexport const reserveLayer = (\n  data: InMemoryData,\n  layerKey: number,\n  hasNext?: boolean\n) => {\n  // Find the current index for the layer, and remove it from\n  // the order if it exists already\n  let index = data.optimisticOrder.indexOf(layerKey);\n  if (index > -1) data.optimisticOrder.splice(index, 1);\n\n  if (hasNext) {\n    data.deferredKeys.add(layerKey);\n    // If the layer has future results then we'll move it past any layer that's\n    // still empty, so currently pending operations will take precedence over it\n    for (\n      index = index > -1 ? index : 0;\n      index < data.optimisticOrder.length &&\n      !data.deferredKeys.has(data.optimisticOrder[index]) &&\n      (!data.dirtyKeys.has(data.optimisticOrder[index]) ||\n        !data.commutativeKeys.has(data.optimisticOrder[index]));\n      index++\n    );\n  } else {\n    data.deferredKeys.delete(layerKey);\n    // Protect optimistic layers from being turned into non-optimistic layers\n    // while preserving optimistic data\n    if (index > -1 && !data.commutativeKeys.has(layerKey))\n      clearLayer(data, layerKey);\n    index = 0;\n  }\n\n  // Register the layer with the deferred or \"top\" index and\n  // mark it as commutative\n  data.optimisticOrder.splice(index, 0, layerKey);\n  data.commutativeKeys.add(layerKey);\n};\n\n/** Checks whether a given layer exists */\nexport const hasLayer = (data: InMemoryData, layerKey: number) =>\n  data.commutativeKeys.has(layerKey) ||\n  data.optimisticOrder.indexOf(layerKey) > -1;\n\n/** Creates an optimistic layer of links and records */\nconst createLayer = (data: InMemoryData, layerKey: number) => {\n  if (data.optimisticOrder.indexOf(layerKey) === -1) {\n    data.optimisticOrder.unshift(layerKey);\n  }\n\n  if (!data.dirtyKeys.has(layerKey)) {\n    data.dirtyKeys.add(layerKey);\n    data.links.optimistic.set(layerKey, new Map());\n    data.records.optimistic.set(layerKey, new Map());\n  }\n};\n\n/** Clears all links and records of an optimistic layer */\nconst clearLayer = (data: InMemoryData, layerKey: number) => {\n  if (data.dirtyKeys.has(layerKey)) {\n    data.dirtyKeys.delete(layerKey);\n    data.records.optimistic.delete(layerKey);\n    data.links.optimistic.delete(layerKey);\n    data.deferredKeys.delete(layerKey);\n  }\n};\n\n/** Deletes links and records of an optimistic layer, and the layer itself */\nconst deleteLayer = (data: InMemoryData, layerKey: number) => {\n  const index = data.optimisticOrder.indexOf(layerKey);\n  if (index > -1) {\n    data.optimisticOrder.splice(index, 1);\n    data.commutativeKeys.delete(layerKey);\n  }\n\n  clearLayer(data, layerKey);\n};\n\n/** Merges an optimistic layer of links and records into the base data */\nconst squashLayer = (layerKey: number) => {\n  // Hide current dependencies from squashing operations\n  const previousDependencies = currentDependencies;\n  currentDependencies = new Set();\n  currentOperation = 'write';\n\n  const links = currentData!.links.optimistic.get(layerKey);\n  if (links) {\n    for (const entry of links.entries()) {\n      const entityKey = entry[0];\n      const keyMap = entry[1];\n      for (const fieldKey in keyMap)\n        writeLink(entityKey, fieldKey, keyMap[fieldKey]);\n    }\n  }\n\n  const records = currentData!.records.optimistic.get(layerKey);\n  if (records) {\n    for (const entry of records.entries()) {\n      const entityKey = entry[0];\n      const keyMap = entry[1];\n      for (const fieldKey in keyMap)\n        writeRecord(entityKey, fieldKey, keyMap[fieldKey]);\n    }\n  }\n\n  currentDependencies = previousDependencies;\n  deleteLayer(currentData!, layerKey);\n};\n\n/** Return an array of FieldInfo (info on all the fields and their arguments) for a given entity */\nexport const inspectFields = (entityKey: string): FieldInfo[] => {\n  const { links, records } = currentData!;\n  const fieldInfos: FieldInfo[] = [];\n  const seenFieldKeys: Set<string> = new Set();\n  // Update dependencies\n  updateDependencies(entityKey);\n  // Extract FieldInfos to the fieldInfos array for links and records\n  // This also deduplicates by keeping track of fieldKeys in the seenFieldKeys Set\n  extractNodeMapFields(fieldInfos, seenFieldKeys, entityKey, links);\n  extractNodeMapFields(fieldInfos, seenFieldKeys, entityKey, records);\n  return fieldInfos;\n};\n\nexport const persistData = () => {\n  if (currentData!.storage) {\n    currentOptimistic = true;\n    currentOperation = 'read';\n    const entries: SerializedEntries = {};\n    for (const key of currentData!.persist.keys()) {\n      const { entityKey, fieldKey } = deserializeKeyInfo(key);\n      let x: void | Link | EntityField;\n      if ((x = readLink(entityKey, fieldKey)) !== undefined) {\n        entries[key] = `:${stringifyVariables(x)}`;\n      } else if ((x = readRecord(entityKey, fieldKey)) !== undefined) {\n        entries[key] = stringifyVariables(x);\n      } else {\n        entries[key] = undefined;\n      }\n    }\n\n    currentOptimistic = false;\n    currentData!.storage.writeData(entries);\n    currentData!.persist.clear();\n  }\n};\n\nexport const hydrateData = (\n  data: InMemoryData,\n  storage: StorageAdapter,\n  entries: SerializedEntries\n) => {\n  initDataState('write', data, null);\n\n  for (const key in entries) {\n    const value = entries[key];\n    if (value !== undefined) {\n      const { entityKey, fieldKey } = deserializeKeyInfo(key);\n      if (value[0] === ':') {\n        if (readLink(entityKey, fieldKey) === undefined)\n          writeLink(entityKey, fieldKey, JSON.parse(value.slice(1)));\n      } else {\n        if (readRecord(entityKey, fieldKey) === undefined)\n          writeRecord(entityKey, fieldKey, JSON.parse(value));\n      }\n    }\n  }\n\n  data.storage = storage;\n  data.hydrating = false;\n  clearDataState();\n};\n","import type { CombinedError, ErrorLike, FormattedNode } from '@urql/core';\n\nimport type {\n  FieldNode,\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n} from '@0no-co/graphql.web';\nimport { Kind } from '@0no-co/graphql.web';\n\nimport type { SelectionSet } from '../ast';\nimport {\n  isDeferred,\n  getTypeCondition,\n  getSelectionSet,\n  getName,\n  isOptional,\n} from '../ast';\n\nimport { warn, pushDebugNode, popDebugNode } from '../helpers/help';\nimport { hasField, currentOperation, currentOptimistic } from '../store/data';\nimport { keyOfField } from '../store/keys';\nimport type { Store } from '../store/store';\n\nimport { getFieldArguments, shouldInclude, isInterfaceOfType } from '../ast';\n\nimport type {\n  Fragments,\n  Variables,\n  DataField,\n  NullArray,\n  Link,\n  Entity,\n  Data,\n  Logger,\n} from '../types';\n\nexport interface Context {\n  store: Store;\n  variables: Variables;\n  fragments: Fragments;\n  parentTypeName: string;\n  parentKey: string;\n  parentFieldKey: string;\n  parent: Data;\n  fieldName: string;\n  error: ErrorLike | undefined;\n  partial: boolean;\n  hasNext: boolean;\n  optimistic: boolean;\n  __internal: {\n    path: Array<string | number>;\n    errorMap: { [path: string]: ErrorLike } | undefined;\n  };\n}\n\nexport let contextRef: Context | null = null;\nexport let deferRef = false;\nexport let optionalRef: boolean | undefined = undefined;\n\n// Checks whether the current data field is a cache miss because of a GraphQLError\nexport const getFieldError = (ctx: Context): ErrorLike | undefined =>\n  ctx.__internal.path.length > 0 && ctx.__internal.errorMap\n    ? ctx.__internal.errorMap[ctx.__internal.path.join('.')]\n    : undefined;\n\nexport const makeContext = (\n  store: Store,\n  variables: Variables,\n  fragments: Fragments,\n  typename: string,\n  entityKey: string,\n  error: CombinedError | undefined\n): Context => {\n  const ctx: Context = {\n    store,\n    variables,\n    fragments,\n    parent: { __typename: typename },\n    parentTypeName: typename,\n    parentKey: entityKey,\n    parentFieldKey: '',\n    fieldName: '',\n    error: undefined,\n    partial: false,\n    hasNext: false,\n    optimistic: currentOptimistic,\n    __internal: {\n      path: [],\n      errorMap: undefined,\n    },\n  };\n\n  if (error && error.graphQLErrors) {\n    for (let i = 0; i < error.graphQLErrors.length; i++) {\n      const graphQLError = error.graphQLErrors[i];\n      if (graphQLError.path && graphQLError.path.length) {\n        if (!ctx.__internal.errorMap)\n          ctx.__internal.errorMap = Object.create(null);\n        ctx.__internal.errorMap![graphQLError.path.join('.')] = graphQLError;\n      }\n    }\n  }\n\n  return ctx;\n};\n\nexport const updateContext = (\n  ctx: Context,\n  data: Data,\n  typename: string,\n  entityKey: string,\n  fieldKey: string,\n  fieldName: string\n) => {\n  contextRef = ctx;\n  ctx.parent = data;\n  ctx.parentTypeName = typename;\n  ctx.parentKey = entityKey;\n  ctx.parentFieldKey = fieldKey;\n  ctx.fieldName = fieldName;\n  ctx.error = getFieldError(ctx);\n};\n\nconst isFragmentHeuristicallyMatching = (\n  node: FormattedNode<InlineFragmentNode | FragmentDefinitionNode>,\n  typename: void | string,\n  entityKey: string,\n  vars: Variables,\n  logger?: Logger\n) => {\n  if (!typename) return false;\n  const typeCondition = getTypeCondition(node);\n  if (!typeCondition || typename === typeCondition) return true;\n\n  warn(\n    'Heuristic Fragment Matching: A fragment is trying to match against the `' +\n      typename +\n      '` type, ' +\n      'but the type condition is `' +\n      typeCondition +\n      '`. Since GraphQL allows for interfaces `' +\n      typeCondition +\n      '` may be an ' +\n      'interface.\\nA schema needs to be defined for this match to be deterministic, ' +\n      'otherwise the fragment will be matched heuristically!',\n    16,\n    logger\n  );\n\n  return (\n    currentOperation === 'write' ||\n    !getSelectionSet(node).some(node => {\n      if (node.kind !== Kind.FIELD) return false;\n      const fieldKey = keyOfField(getName(node), getFieldArguments(node, vars));\n      return !hasField(entityKey, fieldKey);\n    })\n  );\n};\n\ninterface SelectionIterator {\n  (): FormattedNode<FieldNode> | undefined;\n}\n\n// NOTE: Outside of this file, we expect `_defer` to always be reset to `false`\nexport function makeSelectionIterator(\n  typename: undefined | string,\n  entityKey: string,\n  _defer: false,\n  _optional: undefined,\n  selectionSet: FormattedNode<SelectionSet>,\n  ctx: Context\n): SelectionIterator;\n// NOTE: Inside this file we expect the state to be recursively passed on\nexport function makeSelectionIterator(\n  typename: undefined | string,\n  entityKey: string,\n  _defer: boolean,\n  _optional: undefined | boolean,\n  selectionSet: FormattedNode<SelectionSet>,\n  ctx: Context\n): SelectionIterator;\n\nexport function makeSelectionIterator(\n  typename: undefined | string,\n  entityKey: string,\n  _defer: boolean,\n  _optional: boolean | undefined,\n  selectionSet: FormattedNode<SelectionSet>,\n  ctx: Context\n): SelectionIterator {\n  let child: SelectionIterator | void;\n  let index = 0;\n\n  return function next() {\n    let node: FormattedNode<FieldNode> | undefined;\n    while (child || index < selectionSet.length) {\n      node = undefined;\n      deferRef = _defer;\n      optionalRef = _optional;\n      if (child) {\n        if ((node = child())) {\n          return node;\n        } else {\n          child = undefined;\n          if (process.env.NODE_ENV !== 'production') popDebugNode();\n        }\n      } else {\n        const select = selectionSet[index++];\n        if (!shouldInclude(select, ctx.variables)) {\n          /*noop*/\n        } else if (select.kind !== Kind.FIELD) {\n          // A fragment is either referred to by FragmentSpread or inline\n          const fragment =\n            select.kind !== Kind.INLINE_FRAGMENT\n              ? ctx.fragments[getName(select)]\n              : select;\n          if (fragment) {\n            const isMatching =\n              !fragment.typeCondition ||\n              (ctx.store.schema\n                ? isInterfaceOfType(ctx.store.schema, fragment, typename)\n                : isFragmentHeuristicallyMatching(\n                    fragment,\n                    typename,\n                    entityKey,\n                    ctx.variables,\n                    ctx.store.logger\n                  ));\n            if (isMatching) {\n              if (process.env.NODE_ENV !== 'production')\n                pushDebugNode(typename, fragment);\n              const isFragmentOptional = isOptional(select);\n              child = makeSelectionIterator(\n                typename,\n                entityKey,\n                _defer || isDeferred(select, ctx.variables),\n                isFragmentOptional !== undefined\n                  ? isFragmentOptional\n                  : _optional,\n                getSelectionSet(fragment),\n                ctx\n              );\n            }\n          }\n        } else if (currentOperation === 'write' || !select._generated) {\n          return select;\n        }\n      }\n    }\n  };\n}\n\nexport const ensureData = (x: DataField): Data | NullArray<Data> | null =>\n  x == null ? null : (x as Data | NullArray<Data>);\n\nexport const ensureLink = (store: Store, ref: Link<Entity>): Link => {\n  if (!ref) {\n    return ref || null;\n  } else if (Array.isArray(ref)) {\n    const link = new Array(ref.length);\n    for (let i = 0, l = link.length; i < l; i++)\n      link[i] = ensureLink(store, ref[i]);\n    return link;\n  }\n\n  const link = store.keyOfEntity(ref);\n  if (!link && ref && typeof ref === 'object') {\n    warn(\n      \"Can't generate a key for link(...) item.\" +\n        '\\nYou have to pass an `id` or `_id` field or create a custom `keys` config for `' +\n        ref.__typename +\n        '`.',\n      12,\n      store.logger\n    );\n  }\n\n  return link;\n};\n","import type { FormattedNode, CombinedError } from '@urql/core';\nimport { formatDocument } from '@urql/core';\n\nimport type {\n  FieldNode,\n  DocumentNode,\n  FragmentDefinitionNode,\n} from '@0no-co/graphql.web';\n\nimport type { SelectionSet } from '../ast';\nimport {\n  getSelectionSet,\n  getName,\n  getFragmentTypeName,\n  getFieldAlias,\n  getFragments,\n  getMainOperation,\n  normalizeVariables,\n  getFieldArguments,\n  getDirectives,\n} from '../ast';\n\nimport type {\n  Variables,\n  Data,\n  DataField,\n  Link,\n  OperationRequest,\n  Dependencies,\n  Resolver,\n} from '../types';\n\nimport { joinKeys, keyOfField } from '../store/keys';\nimport type { Store } from '../store/store';\nimport * as InMemoryData from '../store/data';\nimport { warn, pushDebugNode, popDebugNode } from '../helpers/help';\n\nimport type { Context } from './shared';\nimport {\n  makeSelectionIterator,\n  ensureData,\n  makeContext,\n  updateContext,\n  getFieldError,\n  deferRef,\n  optionalRef,\n} from './shared';\n\nimport {\n  isFieldAvailableOnType,\n  isFieldNullable,\n  isListNullable,\n} from '../ast';\n\nexport interface QueryResult {\n  dependencies: Dependencies;\n  partial: boolean;\n  hasNext: boolean;\n  data: null | Data;\n}\n\n/** Reads a GraphQL query from the cache.\n * @internal\n */\nexport const __initAnd_query = (\n  store: Store,\n  request: OperationRequest,\n  data?: Data | null | undefined,\n  error?: CombinedError | undefined,\n  key?: number\n): QueryResult => {\n  InMemoryData.initDataState('read', store.data, key);\n  const result = _query(store, request, data, error);\n  InMemoryData.clearDataState();\n  return result;\n};\n\n/** Reads a GraphQL query from the cache.\n * @internal\n */\nexport const _query = (\n  store: Store,\n  request: OperationRequest,\n  input?: Data | null | undefined,\n  error?: CombinedError | undefined\n): QueryResult => {\n  const query = formatDocument(request.query);\n  const operation = getMainOperation(query);\n  const rootKey = store.rootFields[operation.operation];\n  const rootSelect = getSelectionSet(operation);\n\n  const ctx = makeContext(\n    store,\n    normalizeVariables(operation, request.variables),\n    getFragments(query),\n    rootKey,\n    rootKey,\n    error\n  );\n\n  if (process.env.NODE_ENV !== 'production') {\n    pushDebugNode(rootKey, operation);\n  }\n\n  // NOTE: This may reuse \"previous result data\" as indicated by the\n  // `originalData` argument in readRoot(). This behaviour isn't used\n  // for readSelection() however, which always produces results from\n  // scratch\n  const data =\n    rootKey !== ctx.store.rootFields['query']\n      ? readRoot(ctx, rootKey, rootSelect, input || InMemoryData.makeData())\n      : readSelection(\n          ctx,\n          rootKey,\n          rootSelect,\n          input || InMemoryData.makeData()\n        );\n\n  if (process.env.NODE_ENV !== 'production') {\n    popDebugNode();\n    InMemoryData.getCurrentDependencies();\n  }\n\n  return {\n    dependencies: InMemoryData.currentDependencies!,\n    partial: ctx.partial || !data,\n    hasNext: ctx.hasNext,\n    data: data || null,\n  };\n};\n\nconst readRoot = (\n  ctx: Context,\n  entityKey: string,\n  select: FormattedNode<SelectionSet>,\n  input: Data\n): Data => {\n  const typename = ctx.store.rootNames[entityKey]\n    ? entityKey\n    : input.__typename;\n  if (typeof typename !== 'string') {\n    return input;\n  }\n\n  const iterate = makeSelectionIterator(\n    entityKey,\n    entityKey,\n    false,\n    undefined,\n    select,\n    ctx\n  );\n\n  let node: FormattedNode<FieldNode> | void;\n  let hasChanged = InMemoryData.currentForeignData;\n  const output = InMemoryData.makeData(input);\n  while ((node = iterate())) {\n    const fieldAlias = getFieldAlias(node);\n    const fieldValue = input[fieldAlias];\n    // Add the current alias to the walked path before processing the field's value\n    ctx.__internal.path.push(fieldAlias);\n    // We temporarily store the data field in here, but undefined\n    // means that the value is missing from the cache\n    let dataFieldValue: void | DataField;\n    if (node.selectionSet && fieldValue !== null) {\n      dataFieldValue = readRootField(\n        ctx,\n        getSelectionSet(node),\n        ensureData(fieldValue)\n      );\n    } else {\n      dataFieldValue = fieldValue;\n    }\n\n    // Check for any referential changes in the field's value\n    hasChanged = hasChanged || dataFieldValue !== fieldValue;\n    if (dataFieldValue !== undefined) output[fieldAlias] = dataFieldValue!;\n\n    // After processing the field, remove the current alias from the path again\n    ctx.__internal.path.pop();\n  }\n\n  return hasChanged ? output : input;\n};\n\nconst readRootField = (\n  ctx: Context,\n  select: FormattedNode<SelectionSet>,\n  originalData: Link<Data>\n): Link<Data> => {\n  if (Array.isArray(originalData)) {\n    const newData = new Array(originalData.length);\n    let hasChanged = InMemoryData.currentForeignData;\n    for (let i = 0, l = originalData.length; i < l; i++) {\n      // Add the current index to the walked path before reading the field's value\n      ctx.__internal.path.push(i);\n      // Recursively read the root field's value\n      newData[i] = readRootField(ctx, select, originalData[i]);\n      hasChanged = hasChanged || newData[i] !== originalData[i];\n      // After processing the field, remove the current index from the path\n      ctx.__internal.path.pop();\n    }\n\n    return hasChanged ? newData : originalData;\n  } else if (originalData === null) {\n    return null;\n  }\n\n  // Write entity to key that falls back to the given parentFieldKey\n  const entityKey = ctx.store.keyOfEntity(originalData);\n  if (entityKey !== null) {\n    // We assume that since this is used for result data this can never be undefined,\n    // since the result data has already been written to the cache\n    return readSelection(ctx, entityKey, select, originalData) || null;\n  } else {\n    return readRoot(ctx, originalData.__typename, select, originalData);\n  }\n};\n\nexport const _queryFragment = (\n  store: Store,\n  query: FormattedNode<DocumentNode>,\n  entity: Partial<Data> | string,\n  variables?: Variables,\n  fragmentName?: string\n): Data | null => {\n  const fragments = getFragments(query);\n\n  let fragment: FormattedNode<FragmentDefinitionNode>;\n  if (fragmentName) {\n    fragment = fragments[fragmentName]!;\n    if (!fragment) {\n      warn(\n        'readFragment(...) was called with a fragment name that does not exist.\\n' +\n          'You provided ' +\n          fragmentName +\n          ' but could only find ' +\n          Object.keys(fragments).join(', ') +\n          '.',\n        6,\n        store.logger\n      );\n\n      return null;\n    }\n  } else {\n    const names = Object.keys(fragments);\n    fragment = fragments[names[0]]!;\n    if (!fragment) {\n      warn(\n        'readFragment(...) was called with an empty fragment.\\n' +\n          'You have to call it with at least one fragment in your GraphQL document.',\n        6,\n        store.logger\n      );\n\n      return null;\n    }\n  }\n\n  const typename = getFragmentTypeName(fragment);\n  if (typeof entity !== 'string' && !entity.__typename)\n    entity.__typename = typename;\n  const entityKey = store.keyOfEntity(entity as Data);\n  if (!entityKey) {\n    warn(\n      \"Can't generate a key for readFragment(...).\\n\" +\n        'You have to pass an `id` or `_id` field or create a custom `keys` config for `' +\n        typename +\n        '`.',\n      7,\n      store.logger\n    );\n\n    return null;\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    pushDebugNode(typename, fragment);\n  }\n\n  const ctx = makeContext(\n    store,\n    variables || {},\n    fragments,\n    typename,\n    entityKey,\n    undefined\n  );\n\n  const result =\n    readSelection(\n      ctx,\n      entityKey,\n      getSelectionSet(fragment),\n      InMemoryData.makeData()\n    ) || null;\n\n  if (process.env.NODE_ENV !== 'production') {\n    popDebugNode();\n  }\n\n  return result;\n};\n\nfunction getFieldResolver(\n  directives: ReturnType<typeof getDirectives>,\n  typename: string,\n  fieldName: string,\n  ctx: Context\n): Resolver | void {\n  const resolvers = ctx.store.resolvers[typename];\n  const fieldResolver = resolvers && resolvers[fieldName];\n\n  let directiveResolver: Resolver | undefined;\n  for (const name in directives) {\n    const directiveNode = directives[name];\n    if (\n      directiveNode &&\n      name !== 'include' &&\n      name !== 'skip' &&\n      ctx.store.directives[name]\n    ) {\n      directiveResolver = ctx.store.directives[name](\n        getFieldArguments(directiveNode, ctx.variables)\n      );\n      if (process.env.NODE_ENV === 'production') return directiveResolver;\n      break;\n    }\n  }\n\n  if (fieldResolver && directiveResolver) {\n    warn(\n      `A resolver and directive is being used at \"${typename}.${fieldName}\" simultaneously. Only the directive will apply.`,\n      28,\n      ctx.store.logger\n    );\n  }\n\n  return directiveResolver || fieldResolver;\n}\n\nconst readSelection = (\n  ctx: Context,\n  key: string,\n  select: FormattedNode<SelectionSet>,\n  input: Data,\n  result?: Data\n): Data | undefined => {\n  const { store } = ctx;\n  const isQuery = key === store.rootFields.query;\n\n  const entityKey = (result && store.keyOfEntity(result)) || key;\n  if (!isQuery && !!ctx.store.rootNames[entityKey]) {\n    warn(\n      'Invalid root traversal: A selection was being read on `' +\n        entityKey +\n        '` which is an uncached root type.\\n' +\n        'The `' +\n        ctx.store.rootFields.mutation +\n        '` and `' +\n        ctx.store.rootFields.subscription +\n        '` types are special ' +\n        'Operation Root Types and cannot be read back from the cache.',\n      25,\n      store.logger\n    );\n  }\n\n  const typename = !isQuery\n    ? InMemoryData.readRecord(entityKey, '__typename') ||\n      (result && result.__typename)\n    : key;\n\n  if (typeof typename !== 'string') {\n    return;\n  } else if (result && typename !== result.__typename) {\n    warn(\n      'Invalid resolver data: The resolver at `' +\n        entityKey +\n        '` returned an ' +\n        'invalid typename that could not be reconciled with the cache.',\n      8,\n      store.logger\n    );\n\n    return;\n  }\n\n  const iterate = makeSelectionIterator(\n    typename,\n    entityKey,\n    false,\n    undefined,\n    select,\n    ctx\n  );\n\n  let hasFields = false;\n  let hasNext = false;\n  let hasChanged = InMemoryData.currentForeignData;\n  let node: FormattedNode<FieldNode> | void;\n  const hasPartials = ctx.partial;\n  const output = InMemoryData.makeData(input);\n  while ((node = iterate()) !== undefined) {\n    // Derive the needed data from our node.\n    const fieldName = getName(node);\n    const fieldArgs = getFieldArguments(node, ctx.variables);\n    const fieldAlias = getFieldAlias(node);\n    const directives = getDirectives(node);\n    const resolver = getFieldResolver(directives, typename, fieldName, ctx);\n    const fieldKey = keyOfField(fieldName, fieldArgs);\n    const key = joinKeys(entityKey, fieldKey);\n    const fieldValue = InMemoryData.readRecord(entityKey, fieldKey);\n    const resultValue = result ? result[fieldName] : undefined;\n\n    if (process.env.NODE_ENV !== 'production' && store.schema && typename) {\n      isFieldAvailableOnType(\n        store.schema,\n        typename,\n        fieldName,\n        ctx.store.logger\n      );\n    }\n\n    // Add the current alias to the walked path before processing the field's value\n    ctx.__internal.path.push(fieldAlias);\n    // We temporarily store the data field in here, but undefined\n    // means that the value is missing from the cache\n    let dataFieldValue: void | DataField = undefined;\n\n    if (fieldName === '__typename') {\n      // We directly assign the typename as it's already available\n      dataFieldValue = typename;\n    } else if (resultValue !== undefined && node.selectionSet === undefined) {\n      // The field is a scalar and can be retrieved directly from the result\n      dataFieldValue = resultValue;\n    } else if (InMemoryData.currentOperation === 'read' && resolver) {\n      // We have a resolver for this field.\n      // Prepare the actual fieldValue, so that the resolver can use it,\n      // as to avoid the user having to do `cache.resolve(parent, info.fieldKey)`\n      // only to get a scalar value.\n      let parent = output;\n      if (node.selectionSet === undefined && fieldValue !== undefined) {\n        parent = {\n          ...output,\n          [fieldAlias]: fieldValue,\n          [fieldName]: fieldValue,\n        };\n      }\n\n      // We have to update the information in context to reflect the info\n      // that the resolver will receive\n      updateContext(ctx, parent, typename, entityKey, fieldKey, fieldName);\n\n      dataFieldValue = resolver(\n        parent,\n        fieldArgs || ({} as Variables),\n        store,\n        ctx\n      );\n\n      if (node.selectionSet) {\n        // When it has a selection set we are resolving an entity with a\n        // subselection. This can either be a list or an object.\n        dataFieldValue = resolveResolverResult(\n          ctx,\n          typename,\n          fieldName,\n          key,\n          getSelectionSet(node),\n          (output[fieldAlias] !== undefined\n            ? output[fieldAlias]\n            : input[fieldAlias]) as Data,\n          dataFieldValue,\n          InMemoryData.ownsData(input)\n        );\n      }\n\n      if (\n        store.schema &&\n        dataFieldValue === null &&\n        !isFieldNullable(store.schema, typename, fieldName, ctx.store.logger)\n      ) {\n        // Special case for when null is not a valid value for the\n        // current field\n        return undefined;\n      }\n    } else if (!node.selectionSet) {\n      // The field is a scalar but isn't on the result, so it's retrieved from the cache\n      dataFieldValue = fieldValue;\n    } else if (resultValue !== undefined) {\n      // We start walking the nested resolver result here\n      dataFieldValue = resolveResolverResult(\n        ctx,\n        typename,\n        fieldName,\n        key,\n        getSelectionSet(node),\n        (output[fieldAlias] !== undefined\n          ? output[fieldAlias]\n          : input[fieldAlias]) as Data,\n        resultValue,\n        InMemoryData.ownsData(input)\n      );\n    } else {\n      // Otherwise we attempt to get the missing field from the cache\n      const link = InMemoryData.readLink(entityKey, fieldKey);\n\n      if (link !== undefined) {\n        dataFieldValue = resolveLink(\n          ctx,\n          link,\n          typename,\n          fieldName,\n          getSelectionSet(node),\n          (output[fieldAlias] !== undefined\n            ? output[fieldAlias]\n            : input[fieldAlias]) as Data,\n          InMemoryData.ownsData(input)\n        );\n      } else if (typeof fieldValue === 'object' && fieldValue !== null) {\n        // The entity on the field was invalid but can still be recovered\n        dataFieldValue = fieldValue;\n      }\n    }\n\n    // Now that dataFieldValue has been retrieved it'll be set on data\n    // If it's uncached (undefined) but nullable we can continue assembling\n    // a partial query result\n    if (\n      !deferRef &&\n      dataFieldValue === undefined &&\n      (directives.optional ||\n        (optionalRef && !directives.required) ||\n        !!getFieldError(ctx) ||\n        (store.schema &&\n          isFieldNullable(store.schema, typename, fieldName, ctx.store.logger)))\n    ) {\n      // The field is uncached or has errored, so it'll be set to null and skipped\n      ctx.partial = true;\n      dataFieldValue = null;\n    } else if (\n      dataFieldValue === null &&\n      (directives.required || optionalRef === false)\n    ) {\n      if (\n        ctx.store.logger &&\n        process.env.NODE_ENV !== 'production' &&\n        InMemoryData.currentOperation === 'read'\n      ) {\n        ctx.store.logger(\n          'debug',\n          `Got value \"null\" for required field \"${fieldName}\"${\n            fieldArgs ? ` with args ${JSON.stringify(fieldArgs)}` : ''\n          } on entity \"${entityKey}\"`\n        );\n      }\n      dataFieldValue = undefined;\n    } else {\n      hasFields = hasFields || fieldName !== '__typename';\n    }\n\n    // After processing the field, remove the current alias from the path again\n    ctx.__internal.path.pop();\n    // Check for any referential changes in the field's value\n    hasChanged = hasChanged || dataFieldValue !== input[fieldAlias];\n    if (dataFieldValue !== undefined) {\n      output[fieldAlias] = dataFieldValue;\n    } else if (deferRef) {\n      hasNext = true;\n    } else {\n      if (\n        ctx.store.logger &&\n        process.env.NODE_ENV !== 'production' &&\n        InMemoryData.currentOperation === 'read'\n      ) {\n        ctx.store.logger(\n          'debug',\n          `No value for field \"${fieldName}\"${\n            fieldArgs ? ` with args ${JSON.stringify(fieldArgs)}` : ''\n          } on entity \"${entityKey}\"`\n        );\n      }\n      // If the field isn't deferred or partial then we have to abort and also reset\n      // the partial field\n      ctx.partial = hasPartials;\n      return undefined;\n    }\n  }\n\n  ctx.partial = ctx.partial || hasPartials;\n  ctx.hasNext = ctx.hasNext || hasNext;\n  return isQuery && ctx.partial && !hasFields\n    ? undefined\n    : hasChanged\n    ? output\n    : input;\n};\n\nconst resolveResolverResult = (\n  ctx: Context,\n  typename: string,\n  fieldName: string,\n  key: string,\n  select: FormattedNode<SelectionSet>,\n  prevData: void | null | Data | Data[],\n  result: void | DataField,\n  isOwnedData: boolean\n): DataField | void => {\n  if (Array.isArray(result)) {\n    const { store } = ctx;\n    // Check whether values of the list may be null; for resolvers we assume\n    // that they can be, since it's user-provided data\n    const _isListNullable = store.schema\n      ? isListNullable(store.schema, typename, fieldName, ctx.store.logger)\n      : false;\n    const hasPartials = ctx.partial;\n    const data = InMemoryData.makeData(prevData, true);\n    let hasChanged =\n      InMemoryData.currentForeignData ||\n      !Array.isArray(prevData) ||\n      result.length !== prevData.length;\n    for (let i = 0, l = result.length; i < l; i++) {\n      // Add the current index to the walked path before reading the field's value\n      ctx.__internal.path.push(i);\n      // Recursively read resolver result\n      const childResult = resolveResolverResult(\n        ctx,\n        typename,\n        fieldName,\n        joinKeys(key, `${i}`),\n        select,\n        prevData != null ? prevData[i] : undefined,\n        result[i],\n        isOwnedData\n      );\n      // After processing the field, remove the current index from the path\n      ctx.__internal.path.pop();\n      // Check the result for cache-missed values\n      if (childResult === undefined && !_isListNullable) {\n        ctx.partial = hasPartials;\n        return undefined;\n      } else {\n        ctx.partial =\n          ctx.partial || (childResult === undefined && _isListNullable);\n        data[i] = childResult != null ? childResult : null;\n        hasChanged = hasChanged || data[i] !== prevData![i];\n      }\n    }\n\n    return hasChanged ? data : prevData;\n  } else if (result === null || result === undefined) {\n    return result;\n  } else if (isOwnedData && prevData === null) {\n    return null;\n  } else if (isDataOrKey(result)) {\n    const data = (prevData || InMemoryData.makeData(prevData)) as Data;\n    return typeof result === 'string'\n      ? readSelection(ctx, result, select, data)\n      : readSelection(ctx, key, select, data, result);\n  } else {\n    warn(\n      'Invalid resolver value: The field at `' +\n        key +\n        '` is a scalar (number, boolean, etc)' +\n        ', but the GraphQL query expects a selection set for this field.',\n      9,\n      ctx.store.logger\n    );\n\n    return undefined;\n  }\n};\n\nconst resolveLink = (\n  ctx: Context,\n  link: Link | Link[],\n  typename: string,\n  fieldName: string,\n  select: FormattedNode<SelectionSet>,\n  prevData: void | null | Data | Data[],\n  isOwnedData: boolean\n): DataField | undefined => {\n  if (Array.isArray(link)) {\n    const { store } = ctx;\n    const _isListNullable = store.schema\n      ? isListNullable(store.schema, typename, fieldName, ctx.store.logger)\n      : false;\n    const newLink = InMemoryData.makeData(prevData, true);\n    const hasPartials = ctx.partial;\n    let hasChanged =\n      InMemoryData.currentForeignData ||\n      !Array.isArray(prevData) ||\n      link.length !== prevData.length;\n    for (let i = 0, l = link.length; i < l; i++) {\n      // Add the current index to the walked path before reading the field's value\n      ctx.__internal.path.push(i);\n      // Recursively read the link\n      const childLink = resolveLink(\n        ctx,\n        link[i],\n        typename,\n        fieldName,\n        select,\n        prevData != null ? prevData[i] : undefined,\n        isOwnedData\n      );\n      // After processing the field, remove the current index from the path\n      ctx.__internal.path.pop();\n      // Check the result for cache-missed values\n      if (childLink === undefined && !_isListNullable) {\n        ctx.partial = hasPartials;\n        return undefined;\n      } else {\n        ctx.partial =\n          ctx.partial || (childLink === undefined && _isListNullable);\n        newLink[i] = childLink || null;\n        hasChanged = hasChanged || newLink[i] !== prevData![i];\n      }\n    }\n\n    return hasChanged ? newLink : (prevData as Data[]);\n  } else if (link === null || (prevData === null && isOwnedData)) {\n    return null;\n  }\n\n  return readSelection(\n    ctx,\n    link,\n    select,\n    (prevData || InMemoryData.makeData(prevData)) as Data\n  );\n};\n\nconst isDataOrKey = (x: any): x is string | Data =>\n  typeof x === 'string' ||\n  (typeof x === 'object' && typeof (x as any).__typename === 'string');\n","import type { FormattedNode, CombinedError } from '@urql/core';\nimport { formatDocument } from '@urql/core';\n\nimport type {\n  FieldNode,\n  DocumentNode,\n  FragmentDefinitionNode,\n} from '@0no-co/graphql.web';\n\nimport type { SelectionSet } from '../ast';\nimport {\n  getFragments,\n  getMainOperation,\n  normalizeVariables,\n  getFieldArguments,\n  isFieldAvailableOnType,\n  getSelectionSet,\n  getName,\n  getFragmentTypeName,\n  getFieldAlias,\n} from '../ast';\n\nimport { invariant, warn, pushDebugNode, popDebugNode } from '../helpers/help';\n\nimport type {\n  NullArray,\n  Variables,\n  Data,\n  Link,\n  OperationRequest,\n  Dependencies,\n  EntityField,\n  OptimisticMutationResolver,\n} from '../types';\n\nimport { joinKeys, keyOfField } from '../store/keys';\nimport type { Store } from '../store/store';\nimport * as InMemoryData from '../store/data';\n\nimport type { Context } from './shared';\nimport {\n  makeSelectionIterator,\n  ensureData,\n  makeContext,\n  updateContext,\n  getFieldError,\n  deferRef,\n} from './shared';\n\nexport interface WriteResult {\n  data: null | Data;\n  dependencies: Dependencies;\n}\n\n/** Writes a GraphQL response to the cache.\n * @internal\n */\nexport const __initAnd_write = (\n  store: Store,\n  request: OperationRequest,\n  data: Data,\n  error?: CombinedError | undefined,\n  key?: number\n): WriteResult => {\n  InMemoryData.initDataState('write', store.data, key || null);\n  const result = _write(store, request, data, error);\n  InMemoryData.clearDataState();\n  return result;\n};\n\nexport const __initAnd_writeOptimistic = (\n  store: Store,\n  request: OperationRequest,\n  key: number\n): WriteResult => {\n  if (process.env.NODE_ENV !== 'production') {\n    invariant(\n      getMainOperation(request.query).operation === 'mutation',\n      'writeOptimistic(...) was called with an operation that is not a mutation.\\n' +\n        'This case is unsupported and should never occur.',\n      10\n    );\n  }\n\n  InMemoryData.initDataState('write', store.data, key, true);\n  const result = _write(store, request, {} as Data, undefined);\n  InMemoryData.clearDataState();\n  return result;\n};\n\nexport const _write = (\n  store: Store,\n  request: OperationRequest,\n  data?: Data,\n  error?: CombinedError | undefined\n) => {\n  if (process.env.NODE_ENV !== 'production') {\n    InMemoryData.getCurrentDependencies();\n  }\n\n  const query = formatDocument(request.query);\n  const operation = getMainOperation(query);\n  const result: WriteResult = {\n    data: data || InMemoryData.makeData(),\n    dependencies: InMemoryData.currentDependencies!,\n  };\n  const kind = store.rootFields[operation.operation];\n\n  const ctx = makeContext(\n    store,\n    normalizeVariables(operation, request.variables),\n    getFragments(query),\n    kind,\n    kind,\n    error\n  );\n\n  if (process.env.NODE_ENV !== 'production') {\n    pushDebugNode(kind, operation);\n  }\n\n  writeSelection(ctx, kind, getSelectionSet(operation), result.data!);\n\n  if (process.env.NODE_ENV !== 'production') {\n    popDebugNode();\n  }\n\n  return result;\n};\n\nexport const _writeFragment = (\n  store: Store,\n  query: FormattedNode<DocumentNode>,\n  data: Partial<Data>,\n  variables?: Variables,\n  fragmentName?: string\n) => {\n  const fragments = getFragments(query);\n  let fragment: FormattedNode<FragmentDefinitionNode>;\n  if (fragmentName) {\n    fragment = fragments[fragmentName]!;\n    if (!fragment) {\n      warn(\n        'writeFragment(...) was called with a fragment name that does not exist.\\n' +\n          'You provided ' +\n          fragmentName +\n          ' but could only find ' +\n          Object.keys(fragments).join(', ') +\n          '.',\n        11,\n        store.logger\n      );\n\n      return null;\n    }\n  } else {\n    const names = Object.keys(fragments);\n    fragment = fragments[names[0]]!;\n    if (!fragment) {\n      warn(\n        'writeFragment(...) was called with an empty fragment.\\n' +\n          'You have to call it with at least one fragment in your GraphQL document.',\n        11,\n        store.logger\n      );\n\n      return null;\n    }\n  }\n\n  const typename = getFragmentTypeName(fragment);\n  const dataToWrite = { __typename: typename, ...data } as Data;\n  const entityKey = store.keyOfEntity(dataToWrite);\n  if (!entityKey) {\n    return warn(\n      \"Can't generate a key for writeFragment(...) data.\\n\" +\n        'You have to pass an `id` or `_id` field or create a custom `keys` config for `' +\n        typename +\n        '`.',\n      12,\n      store.logger\n    );\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    pushDebugNode(typename, fragment);\n  }\n\n  const ctx = makeContext(\n    store,\n    variables || {},\n    fragments,\n    typename,\n    entityKey,\n    undefined\n  );\n\n  writeSelection(ctx, entityKey, getSelectionSet(fragment), dataToWrite);\n\n  if (process.env.NODE_ENV !== 'production') {\n    popDebugNode();\n  }\n};\n\nconst writeSelection = (\n  ctx: Context,\n  entityKey: undefined | string,\n  select: FormattedNode<SelectionSet>,\n  data: Data\n) => {\n  // These fields determine how we write. The `Query` root type is written\n  // like a normal entity, hence, we use `rootField` with a default to determine\n  // this. All other root names (Subscription & Mutation) are in a different\n  // write mode\n  const rootField = ctx.store.rootNames[entityKey!] || 'query';\n  const isRoot = !!ctx.store.rootNames[entityKey!];\n\n  let typename = isRoot ? entityKey : data.__typename;\n  if (!typename && entityKey && ctx.optimistic) {\n    typename = InMemoryData.readRecord(entityKey, '__typename') as\n      | string\n      | undefined;\n  }\n\n  if (!typename) {\n    warn(\n      \"Couldn't find __typename when writing.\\n\" +\n        \"If you're writing to the cache manually have to pass a `__typename` property on each entity in your data.\",\n      14,\n      ctx.store.logger\n    );\n    return;\n  } else if (!isRoot && entityKey) {\n    InMemoryData.writeRecord(entityKey, '__typename', typename);\n    InMemoryData.writeType(typename, entityKey);\n  }\n\n  const updates = ctx.store.updates[typename];\n  const iterate = makeSelectionIterator(\n    typename,\n    entityKey || typename,\n    false,\n    undefined,\n    select,\n    ctx\n  );\n\n  let node: FormattedNode<FieldNode> | void;\n  while ((node = iterate())) {\n    const fieldName = getName(node);\n    const fieldArgs = getFieldArguments(node, ctx.variables);\n    const fieldKey = keyOfField(fieldName, fieldArgs);\n    const fieldAlias = getFieldAlias(node);\n    let fieldValue = data[ctx.optimistic ? fieldName : fieldAlias];\n\n    if (\n      // Skip typename fields and assume they've already been written above\n      fieldName === '__typename' ||\n      // Fields marked as deferred that aren't defined must be skipped\n      // Otherwise, we also ignore undefined values in optimistic updaters\n      (fieldValue === undefined &&\n        (deferRef || (ctx.optimistic && rootField === 'query')))\n    ) {\n      continue;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (ctx.store.schema && typename && fieldName !== '__typename') {\n        isFieldAvailableOnType(\n          ctx.store.schema,\n          typename,\n          fieldName,\n          ctx.store.logger\n        );\n      }\n    }\n\n    // Add the current alias to the walked path before processing the field's value\n    ctx.__internal.path.push(fieldAlias);\n\n    // Execute optimistic mutation functions on root fields, or execute recursive functions\n    // that have been returned on optimistic objects\n    let resolver: OptimisticMutationResolver | undefined;\n    if (ctx.optimistic && rootField === 'mutation') {\n      resolver = ctx.store.optimisticMutations[fieldName];\n      if (!resolver) continue;\n    } else if (ctx.optimistic && typeof fieldValue === 'function') {\n      resolver = fieldValue as any;\n    }\n\n    // Execute the field-level resolver to retrieve its data\n    if (resolver) {\n      // We have to update the context to reflect up-to-date ResolveInfo\n      updateContext(\n        ctx,\n        data,\n        typename,\n        entityKey || typename,\n        fieldKey,\n        fieldName\n      );\n      fieldValue = ensureData(resolver(fieldArgs || {}, ctx.store, ctx));\n    }\n\n    if (fieldValue === undefined) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (\n          !entityKey ||\n          !InMemoryData.hasField(entityKey, fieldKey) ||\n          (ctx.optimistic && !InMemoryData.readRecord(entityKey, '__typename'))\n        ) {\n          const expected =\n            node.selectionSet === undefined\n              ? 'scalar (number, boolean, etc)'\n              : 'selection set';\n\n          warn(\n            'Invalid undefined: The field at `' +\n              fieldKey +\n              '` is `undefined`, but the GraphQL query expects a ' +\n              expected +\n              ' for this field.',\n            13,\n            ctx.store.logger\n          );\n        }\n      }\n\n      continue; // Skip this field\n    }\n\n    if (node.selectionSet) {\n      // Process the field and write links for the child entities that have been written\n      if (entityKey && rootField === 'query') {\n        const key = joinKeys(entityKey, fieldKey);\n        const link = writeField(\n          ctx,\n          getSelectionSet(node),\n          ensureData(fieldValue),\n          key,\n          ctx.optimistic\n            ? InMemoryData.readLink(entityKey || typename, fieldKey)\n            : undefined\n        );\n        InMemoryData.writeLink(entityKey || typename, fieldKey, link);\n      } else {\n        writeField(ctx, getSelectionSet(node), ensureData(fieldValue));\n      }\n    } else if (entityKey && rootField === 'query') {\n      // This is a leaf node, so we're setting the field's value directly\n      InMemoryData.writeRecord(\n        entityKey || typename,\n        fieldKey,\n        (fieldValue !== null || !getFieldError(ctx)\n          ? fieldValue\n          : undefined) as EntityField\n      );\n    }\n\n    // We run side-effect updates after the default, normalized updates\n    // so that the data is already available in-store if necessary\n    const updater = updates && updates[fieldName];\n    if (updater) {\n      // We have to update the context to reflect up-to-date ResolveInfo\n      updateContext(\n        ctx,\n        data,\n        typename,\n        entityKey || typename,\n        fieldKey,\n        fieldName\n      );\n\n      data[fieldName] = fieldValue;\n      updater(data, fieldArgs || {}, ctx.store, ctx);\n    }\n\n    // After processing the field, remove the current alias from the path again\n    ctx.__internal.path.pop();\n  }\n};\n\n// A pattern to match typenames of types that are likely never keyable\nconst KEYLESS_TYPE_RE = /^__|PageInfo|(Connection|Edge)$/;\n\nconst writeField = (\n  ctx: Context,\n  select: FormattedNode<SelectionSet>,\n  data: null | Data | NullArray<Data>,\n  parentFieldKey?: string,\n  prevLink?: Link\n): Link | undefined => {\n  if (Array.isArray(data)) {\n    const newData = new Array(data.length);\n    for (let i = 0, l = data.length; i < l; i++) {\n      // Add the current index to the walked path before processing the link\n      ctx.__internal.path.push(i);\n      // Append the current index to the parentFieldKey fallback\n      const indexKey = parentFieldKey\n        ? joinKeys(parentFieldKey, `${i}`)\n        : undefined;\n      // Recursively write array data\n      const prevIndex = prevLink != null ? prevLink[i] : undefined;\n      const links = writeField(ctx, select, data[i], indexKey, prevIndex);\n      // Link cannot be expressed as a recursive type\n      newData[i] = links as string | null;\n      // After processing the field, remove the current index from the path\n      ctx.__internal.path.pop();\n    }\n\n    return newData;\n  } else if (data === null) {\n    return getFieldError(ctx) ? undefined : null;\n  }\n\n  const entityKey =\n    ctx.store.keyOfEntity(data) ||\n    (typeof prevLink === 'string' ? prevLink : null);\n  const typename = data.__typename;\n\n  if (\n    parentFieldKey &&\n    !ctx.store.keys[data.__typename] &&\n    entityKey === null &&\n    typeof typename === 'string' &&\n    !KEYLESS_TYPE_RE.test(typename)\n  ) {\n    warn(\n      'Invalid key: The GraphQL query at the field at `' +\n        parentFieldKey +\n        '` has a selection set, ' +\n        'but no key could be generated for the data at this field.\\n' +\n        'You have to request `id` or `_id` fields for all selection sets or create ' +\n        'a custom `keys` config for `' +\n        typename +\n        '`.\\n' +\n        'Entities without keys will be embedded directly on the parent entity. ' +\n        'If this is intentional, create a `keys` config for `' +\n        typename +\n        '` that always returns null.',\n      15,\n      ctx.store.logger\n    );\n  }\n\n  const childKey = entityKey || parentFieldKey;\n  writeSelection(ctx, childKey, select, data);\n  return childKey || null;\n};\n","import * as InMemoryData from '../store/data';\nimport { keyOfField } from '../store/keys';\nimport type { FieldArgs } from '../types';\n\ninterface PartialFieldInfo {\n  fieldKey: string;\n}\n\nexport const invalidateEntity = (\n  entityKey: string,\n  field?: string,\n  args?: FieldArgs\n) => {\n  const fields: PartialFieldInfo[] = field\n    ? [{ fieldKey: keyOfField(field, args) }]\n    : InMemoryData.inspectFields(entityKey);\n\n  for (let i = 0, l = fields.length; i < l; i++) {\n    const { fieldKey } = fields[i];\n    if (InMemoryData.readLink(entityKey, fieldKey) !== undefined) {\n      InMemoryData.writeLink(entityKey, fieldKey, undefined);\n    } else {\n      InMemoryData.writeRecord(entityKey, fieldKey, undefined);\n    }\n  }\n};\n\nexport const invalidateType = (typename: string) => {\n  const types = InMemoryData.getEntitiesForType(typename);\n  for (const entity of types) {\n    invalidateEntity(entity);\n  }\n};\n","import type { TypedDocumentNode } from '@urql/core';\nimport { formatDocument, createRequest } from '@urql/core';\n\nimport type {\n  Cache,\n  FieldInfo,\n  ResolverConfig,\n  DataField,\n  Variables,\n  FieldArgs,\n  Link,\n  Data,\n  QueryInput,\n  UpdatesConfig,\n  OptimisticMutationConfig,\n  KeyingConfig,\n  Entity,\n  CacheExchangeOpts,\n  DirectivesConfig,\n  Logger,\n} from '../types';\n\nimport { invariant } from '../helpers/help';\nimport { contextRef, ensureLink } from '../operations/shared';\nimport { _query, _queryFragment } from '../operations/query';\nimport { _write, _writeFragment } from '../operations/write';\nimport { invalidateEntity, invalidateType } from '../operations/invalidate';\nimport { keyOfField } from './keys';\nimport * as InMemoryData from './data';\n\nimport type { SchemaIntrospector } from '../ast';\nimport {\n  buildClientSchema,\n  expectValidKeyingConfig,\n  expectValidUpdatesConfig,\n  expectValidResolversConfig,\n  expectValidOptimisticMutationsConfig,\n} from '../ast';\n\ntype DocumentNode = TypedDocumentNode<any, any>;\ntype RootField = 'query' | 'mutation' | 'subscription';\n\n/** Implementation of the {@link Cache} interface as created internally by the {@link cacheExchange}.\n * @internal\n */\nexport class Store<\n  C extends Partial<CacheExchangeOpts> = Partial<CacheExchangeOpts>,\n> implements Cache\n{\n  data: InMemoryData.InMemoryData;\n\n  logger?: Logger;\n  directives: DirectivesConfig;\n  resolvers: ResolverConfig;\n  updates: UpdatesConfig;\n  optimisticMutations: OptimisticMutationConfig;\n  keys: KeyingConfig;\n  globalIDs: Set<string> | boolean;\n  schema?: SchemaIntrospector;\n\n  rootFields: { query: string; mutation: string; subscription: string };\n  rootNames: { [name: string]: RootField | void };\n\n  constructor(opts?: C) {\n    if (!opts) opts = {} as C;\n\n    this.logger = opts.logger;\n    this.resolvers = opts.resolvers || {};\n    this.directives = opts.directives || {};\n    this.optimisticMutations = opts.optimistic || {};\n    this.keys = opts.keys || {};\n\n    this.globalIDs = Array.isArray(opts.globalIDs)\n      ? new Set(opts.globalIDs)\n      : !!opts.globalIDs;\n\n    let queryName = 'Query';\n    let mutationName = 'Mutation';\n    let subscriptionName = 'Subscription';\n    if (opts.schema) {\n      const schema = buildClientSchema(opts.schema);\n      queryName = schema.query || queryName;\n      mutationName = schema.mutation || mutationName;\n      subscriptionName = schema.subscription || subscriptionName;\n      // Only add schema introspector if it has types info\n      if (schema.types) this.schema = schema;\n    }\n\n    this.updates = opts.updates || {};\n\n    this.rootFields = {\n      query: queryName,\n      mutation: mutationName,\n      subscription: subscriptionName,\n    };\n\n    this.rootNames = {\n      [queryName]: 'query',\n      [mutationName]: 'mutation',\n      [subscriptionName]: 'subscription',\n    };\n\n    this.data = InMemoryData.make(queryName);\n\n    if (this.schema && process.env.NODE_ENV !== 'production') {\n      expectValidKeyingConfig(this.schema, this.keys, this.logger);\n      expectValidUpdatesConfig(this.schema, this.updates, this.logger);\n      expectValidResolversConfig(this.schema, this.resolvers, this.logger);\n      expectValidOptimisticMutationsConfig(\n        this.schema,\n        this.optimisticMutations,\n        this.logger\n      );\n    }\n  }\n\n  keyOfField(fieldName: string, fieldArgs?: FieldArgs) {\n    return keyOfField(fieldName, fieldArgs);\n  }\n\n  keyOfEntity(data: Entity) {\n    // In resolvers and updaters we may have a specific parent\n    // object available that can be used to skip to a specific parent\n    // key directly without looking at its incomplete properties\n    if (contextRef && data === contextRef.parent) {\n      return contextRef.parentKey;\n    } else if (data == null || typeof data === 'string') {\n      return data || null;\n    } else if (!data.__typename) {\n      return null;\n    } else if (this.rootNames[data.__typename]) {\n      return data.__typename;\n    }\n\n    let key: string | null = null;\n    if (this.keys[data.__typename]) {\n      key = this.keys[data.__typename](data) || null;\n    } else if (data.id != null) {\n      key = `${data.id}`;\n    } else if (data._id != null) {\n      key = `${data._id}`;\n    }\n\n    const typename = data.__typename;\n    const globalID =\n      this.globalIDs === true ||\n      (this.globalIDs && this.globalIDs.has(typename));\n    return globalID || !key ? key : `${typename}:${key}`;\n  }\n\n  resolve(\n    entity: Entity,\n    field: string,\n    args?: FieldArgs\n  ): DataField | undefined {\n    const entityKey = this.keyOfEntity(entity);\n    if (entityKey) {\n      const fieldKey = keyOfField(field, args);\n      const fieldValue = InMemoryData.readRecord(entityKey, fieldKey);\n      if (fieldValue !== undefined) return fieldValue;\n      let fieldLink = InMemoryData.readLink(entityKey, fieldKey);\n      if (fieldLink !== undefined) fieldLink = ensureLink(this, fieldLink);\n      return fieldLink;\n    }\n  }\n\n  resolveFieldByKey(entity: Entity, field: string, args?: FieldArgs) {\n    return this.resolve(entity, field, args);\n  }\n\n  invalidate(entity: Entity, field?: string, args?: FieldArgs) {\n    const entityKey = this.keyOfEntity(entity);\n    const shouldInvalidateType =\n      entity &&\n      typeof entity === 'string' &&\n      !field &&\n      !args &&\n      !this.resolve(entity, '__typename');\n\n    if (shouldInvalidateType) {\n      invalidateType(entity);\n    } else {\n      invariant(\n        entityKey,\n        \"Can't generate a key for invalidate(...).\\n\" +\n          'You have to pass an id or _id field or create a custom `keys` field for `' +\n          (typeof entity === 'object'\n            ? (entity as Data).__typename\n            : entity + '`.'),\n        19\n      );\n\n      invalidateEntity(entityKey, field, args);\n    }\n  }\n\n  inspectFields(entity: Entity): FieldInfo[] {\n    const entityKey = this.keyOfEntity(entity);\n    return entityKey ? InMemoryData.inspectFields(entityKey) : [];\n  }\n\n  updateQuery<T = Data, V = Variables>(\n    input: QueryInput<T, V>,\n    updater: (data: T | null) => T | null\n  ): void {\n    const request = createRequest(input.query, input.variables!);\n    const output = updater(this.readQuery(request));\n    if (output !== null) {\n      _write(this, request, output as any, undefined);\n    }\n  }\n\n  readQuery<T = Data, V = Variables>(input: QueryInput<T, V>): T | null {\n    const request = createRequest(input.query, input.variables!);\n    return _query(this, request, undefined, undefined).data as T | null;\n  }\n\n  readFragment<T = Data, V = Variables>(\n    fragment: DocumentNode | TypedDocumentNode<T, V>,\n    entity: string | Data | T,\n    variables?: V,\n    fragmentName?: string\n  ): T | null {\n    return _queryFragment(\n      this,\n      formatDocument(fragment),\n      entity as Data,\n      variables as any,\n      fragmentName\n    ) as T | null;\n  }\n\n  writeFragment<T = Data, V = Variables>(\n    fragment: DocumentNode | TypedDocumentNode<T, V>,\n    data: T,\n    variables?: V,\n    fragmentName?: string\n  ): void {\n    _writeFragment(\n      this,\n      formatDocument(fragment),\n      data as Data,\n      variables as any,\n      fragmentName\n    );\n  }\n\n  link(\n    entity: Entity,\n    field: string,\n    args: FieldArgs,\n    link: Link<Entity>\n  ): void;\n\n  link(entity: Entity, field: string, link: Link<Entity>): void;\n\n  link(\n    entity: Entity,\n    field: string,\n    ...rest: [FieldArgs, Link<Entity>] | [Link<Entity>]\n  ): void {\n    const args = rest.length === 2 ? rest[0] : null;\n    const link = rest.length === 2 ? rest[1] : rest[0];\n    const entityKey = this.keyOfEntity(entity);\n    if (entityKey) {\n      InMemoryData.writeLink(\n        entityKey,\n        keyOfField(field, args),\n        ensureLink(this, link)\n      );\n    }\n  }\n}\n","import type {\n  IntrospectionQuery,\n  IntrospectionTypeRef,\n  IntrospectionInputValue,\n  IntrospectionType,\n} from './graphql';\n\nexport interface SchemaField {\n  name: string;\n  type: IntrospectionTypeRef;\n  args(): Record<string, IntrospectionInputValue | void>;\n}\n\nexport interface SchemaObject {\n  name: string;\n  kind: 'INTERFACE' | 'OBJECT';\n  interfaces(): Record<string, unknown>;\n  fields(): Record<string, SchemaField | void>;\n}\n\nexport interface SchemaUnion {\n  name: string;\n  kind: 'UNION';\n  types(): Record<string, unknown>;\n}\n\nexport interface SchemaIntrospector {\n  query: string | null;\n  mutation: string | null;\n  subscription: string | null;\n  types?: Map<string, SchemaObject | SchemaUnion>;\n  isSubType(abstract: string, possible: string): boolean;\n}\n\nexport interface PartialIntrospectionSchema {\n  queryType: { name: string; kind?: any };\n  mutationType?: { name: string; kind?: any } | null;\n  subscriptionType?: { name: string; kind?: any } | null;\n  types?: readonly any[];\n}\n\nexport type IntrospectionData =\n  | IntrospectionQuery\n  | { __schema: PartialIntrospectionSchema };\n\nexport const buildClientSchema = ({\n  __schema,\n}: IntrospectionData): SchemaIntrospector => {\n  const typemap: Map<string, SchemaObject | SchemaUnion> = new Map();\n\n  const buildNameMap = <T extends { name: string }>(\n    arr: ReadonlyArray<T>\n  ): (() => { [name: string]: T }) => {\n    let map: Record<string, T> | void;\n    return () => {\n      if (!map) {\n        map = {};\n        for (let i = 0; i < arr.length; i++) map[arr[i].name] = arr[i];\n      }\n      return map;\n    };\n  };\n\n  const buildType = (\n    type: IntrospectionType\n  ): SchemaObject | SchemaUnion | void => {\n    switch (type.kind) {\n      case 'OBJECT':\n      case 'INTERFACE':\n        return {\n          name: type.name,\n          kind: type.kind as 'OBJECT' | 'INTERFACE',\n          interfaces: buildNameMap(type.interfaces || []),\n          fields: buildNameMap(\n            type.fields!.map((field: any) => ({\n              name: field.name,\n              type: field.type,\n              args: buildNameMap(field.args),\n            }))\n          ),\n        } as SchemaObject;\n      case 'UNION':\n        return {\n          name: type.name,\n          kind: type.kind as 'UNION',\n          types: buildNameMap(type.possibleTypes || []),\n        } as SchemaUnion;\n    }\n  };\n\n  const schema: SchemaIntrospector = {\n    query: __schema.queryType ? __schema.queryType.name : null,\n    mutation: __schema.mutationType ? __schema.mutationType.name : null,\n    subscription: __schema.subscriptionType\n      ? __schema.subscriptionType.name\n      : null,\n    types: undefined,\n    isSubType(abstract: string, possible: string) {\n      const abstractType = typemap.get(abstract);\n      const possibleType = typemap.get(possible);\n      if (!abstractType || !possibleType) {\n        return false;\n      } else if (abstractType.kind === 'UNION') {\n        return !!abstractType.types()[possible];\n      } else if (\n        abstractType.kind !== 'OBJECT' &&\n        possibleType.kind === 'OBJECT'\n      ) {\n        return !!possibleType.interfaces()[abstract];\n      } else {\n        return abstract === possible;\n      }\n    },\n  };\n\n  if (__schema.types) {\n    schema.types = typemap;\n    for (let i = 0; i < __schema.types.length; i++) {\n      const type = __schema.types[i];\n      if (type && type.name) {\n        const out = buildType(type);\n        if (out) typemap.set(type.name, out);\n      }\n    }\n  }\n\n  return schema;\n};\n","import type { Operation, RequestPolicy, OperationDebugMeta } from '@urql/core';\nimport { makeOperation } from '@urql/core';\n\n// Returns the given operation result with added cacheOutcome meta field\nexport const addMetadata = (\n  operation: Operation,\n  meta: OperationDebugMeta\n): Operation =>\n  makeOperation(operation.kind, operation, {\n    ...operation.context,\n    meta: {\n      ...operation.context.meta,\n      ...meta,\n    },\n  });\n\n// Copy an operation and change the requestPolicy to skip the cache\nexport const toRequestPolicy = (\n  operation: Operation,\n  requestPolicy: RequestPolicy\n): Operation => {\n  return makeOperation(operation.kind, operation, {\n    ...operation.context,\n    requestPolicy,\n  });\n};\n","import type {\n  Exchange,\n  Operation,\n  OperationResult,\n  RequestPolicy,\n  CacheOutcome,\n} from '@urql/core';\nimport { formatDocument, makeOperation } from '@urql/core';\n\nimport type { Source } from 'wonka';\nimport {\n  filter,\n  map,\n  merge,\n  pipe,\n  share,\n  fromArray,\n  mergeMap,\n  empty,\n} from 'wonka';\n\nimport { _query } from './operations/query';\nimport { _write } from './operations/write';\nimport { addMetadata, toRequestPolicy } from './helpers/operation';\nimport { filterVariables, getMainOperation } from './ast';\nimport { Store } from './store/store';\nimport type { Data, Dependencies, CacheExchangeOpts } from './types';\n\nimport {\n  initDataState,\n  clearDataState,\n  noopDataState,\n  hydrateData,\n  reserveLayer,\n  hasLayer,\n} from './store/data';\n\ninterface OperationResultWithMeta extends Partial<OperationResult> {\n  operation: Operation;\n  outcome: CacheOutcome;\n  dependencies: Dependencies;\n  hasNext: boolean;\n}\n\ntype Operations = Set<number>;\ntype OperationMap = Map<number, Operation>;\ntype ResultMap = Map<number, Data | null>;\ntype OptimisticDependencies = Map<number, Dependencies>;\ntype DependentOperations = Map<string, Operations>;\n\n/** Exchange factory that creates a normalized cache exchange.\n *\n * @param opts - A {@link CacheExchangeOpts} configuration object.\n * @returns the created normalized cache {@link Exchange}.\n *\n * @remarks\n * Graphcache is a normalized cache, enabled by using the `cacheExchange`\n * in place of `@urql/core`’s. A normalized GraphQL cache uses typenames\n * and key fields in the result to share a single copy for each unique\n * entity across all queries.\n *\n * The `cacheExchange` may be passed a {@link CacheExchangeOpts} object\n * to define custom resolvers, custom updates for mutations,\n * optimistic updates, or to add custom key fields per type.\n *\n * @see {@link https://urql.dev/goto/docs/graphcache} for the full Graphcache docs.\n */\nexport const cacheExchange =\n  <C extends Partial<CacheExchangeOpts>>(opts?: C): Exchange =>\n  ({ forward, client, dispatchDebug }) => {\n    const store = new Store<C>(opts);\n\n    if (opts && opts.storage) {\n      store.data.hydrating = true;\n      opts.storage.readData().then(entries => {\n        hydrateData(store.data, opts!.storage!, entries);\n        if (opts.storage!.onCacheHydrated) opts.storage!.onCacheHydrated();\n      });\n    }\n\n    const optimisticKeysToDependencies: OptimisticDependencies = new Map();\n    const mutationResultBuffer: OperationResult[] = [];\n    const operations: OperationMap = new Map();\n    const results: ResultMap = new Map();\n    const blockedDependencies: Dependencies = new Set();\n    const requestedRefetch: Operations = new Set();\n    const deps: DependentOperations = new Map();\n\n    let reexecutingOperations: Operations = new Set();\n    let dependentOperations: Operations = new Set();\n\n    const isBlockedByOptimisticUpdate = (\n      dependencies: Dependencies\n    ): boolean => {\n      for (const dep of dependencies.values())\n        if (blockedDependencies.has(dep)) return true;\n      return false;\n    };\n\n    const collectPendingOperations = (\n      pendingOperations: Operations,\n      dependencies: undefined | Dependencies\n    ) => {\n      if (dependencies) {\n        // Collect operations that will be updated due to cache changes\n        for (const dep of dependencies.values()) {\n          const keys = deps.get(dep);\n          if (keys) for (const key of keys.values()) pendingOperations.add(key);\n        }\n      }\n    };\n\n    const executePendingOperations = (\n      operation: Operation,\n      pendingOperations: Operations,\n      isOptimistic: boolean\n    ) => {\n      // Reexecute collected operations and delete them from the mapping\n      for (const key of pendingOperations.values()) {\n        if (key !== operation.key) {\n          const op = operations.get(key);\n          if (op) {\n            // Collect all dependent operations if the reexecuting operation is a query\n            if (operation.kind === 'query') dependentOperations.add(key);\n            let policy: RequestPolicy = 'cache-first';\n            if (requestedRefetch.has(key)) {\n              requestedRefetch.delete(key);\n              policy = 'cache-and-network';\n            }\n            client.reexecuteOperation(toRequestPolicy(op, policy));\n          }\n        }\n      }\n\n      if (!isOptimistic) {\n        // Upon completion, all dependent operations become reexecuting operations, preventing\n        // them from reexecuting prior operations again, causing infinite loops\n        const _reexecutingOperations = reexecutingOperations;\n        if (operation.kind === 'query') {\n          (reexecutingOperations = dependentOperations).add(operation.key);\n        }\n        (dependentOperations = _reexecutingOperations).clear();\n      }\n    };\n\n    // This registers queries with the data layer to ensure commutativity\n    const prepareForwardedOperation = (operation: Operation) => {\n      let optimistic = false;\n      if (operation.kind === 'query') {\n        // Pre-reserve the position of the result layer\n        reserveLayer(store.data, operation.key);\n        operations.set(operation.key, operation);\n      } else if (operation.kind === 'teardown') {\n        // Delete reference to operation if any exists to release it\n        operations.delete(operation.key);\n        results.delete(operation.key);\n        reexecutingOperations.delete(operation.key);\n        // Mark operation layer as done\n        noopDataState(store.data, operation.key);\n        return operation;\n      } else if (\n        operation.kind === 'mutation' &&\n        operation.context.requestPolicy !== 'network-only'\n      ) {\n        operations.set(operation.key, operation);\n        // This executes an optimistic update for mutations and registers it if necessary\n        initDataState('write', store.data, operation.key, true, false);\n        const { dependencies } = _write(\n          store,\n          operation as any,\n          undefined,\n          undefined\n        );\n        clearDataState();\n        if (dependencies.size) {\n          // Update blocked optimistic dependencies\n          for (const dep of dependencies.values()) blockedDependencies.add(dep);\n          // Store optimistic dependencies for update\n          optimisticKeysToDependencies.set(operation.key, dependencies);\n          // Update related queries\n          const pendingOperations: Operations = new Set();\n          collectPendingOperations(pendingOperations, dependencies);\n          executePendingOperations(operation, pendingOperations, true);\n          // Mark operation as optimistic\n          optimistic = true;\n        }\n      }\n\n      return makeOperation(\n        operation.kind,\n        {\n          key: operation.key,\n          query: formatDocument(operation.query),\n          variables: operation.variables\n            ? filterVariables(\n                getMainOperation(operation.query),\n                operation.variables\n              )\n            : operation.variables,\n        },\n        { ...operation.context, optimistic }\n      );\n    };\n\n    // This updates the known dependencies for the passed operation\n    const updateDependencies = (op: Operation, dependencies: Dependencies) => {\n      for (const dep of dependencies.values()) {\n        let depOps = deps.get(dep);\n        if (!depOps) deps.set(dep, (depOps = new Set()));\n        depOps.add(op.key);\n      }\n    };\n\n    // Retrieves a query result from cache and adds an `isComplete` hint\n    // This hint indicates whether the result is \"complete\" or not\n    const operationResultFromCache = (\n      operation: Operation\n    ): OperationResultWithMeta => {\n      initDataState('read', store.data, undefined, false, false);\n      const result = _query(\n        store,\n        operation,\n        results.get(operation.key),\n        undefined\n      );\n      clearDataState();\n      const cacheOutcome: CacheOutcome = result.data\n        ? !result.partial && !result.hasNext\n          ? 'hit'\n          : 'partial'\n        : 'miss';\n\n      results.set(operation.key, result.data);\n      operations.set(operation.key, operation);\n      updateDependencies(operation, result.dependencies);\n\n      return {\n        outcome: cacheOutcome,\n        operation,\n        data: result.data,\n        dependencies: result.dependencies,\n        hasNext: result.hasNext,\n      };\n    };\n\n    // Take any OperationResult and update the cache with it\n    const updateCacheWithResult = (\n      result: OperationResult,\n      pendingOperations: Operations\n    ): OperationResult => {\n      // Retrieve the original operation to get unfiltered variables\n      const operation =\n        operations.get(result.operation.key) || result.operation;\n      if (operation.kind === 'mutation') {\n        // Collect previous dependencies that have been written for optimistic updates\n        const dependencies = optimisticKeysToDependencies.get(operation.key);\n        collectPendingOperations(pendingOperations, dependencies);\n        optimisticKeysToDependencies.delete(operation.key);\n      }\n\n      if (operation.kind === 'subscription' || result.hasNext)\n        reserveLayer(store.data, operation.key, true);\n\n      let queryDependencies: undefined | Dependencies;\n      let data: Data | null = result.data;\n      if (data) {\n        // Write the result to cache and collect all dependencies that need to be\n        // updated\n        initDataState('write', store.data, operation.key, false, false);\n        const writeDependencies = _write(\n          store,\n          operation,\n          data,\n          result.error\n        ).dependencies;\n        clearDataState();\n        collectPendingOperations(pendingOperations, writeDependencies);\n        const prevData =\n          operation.kind === 'query' ? results.get(operation.key) : null;\n        initDataState(\n          'read',\n          store.data,\n          operation.key,\n          false,\n          prevData !== data\n        );\n        const queryResult = _query(\n          store,\n          operation,\n          prevData || data,\n          result.error\n        );\n        clearDataState();\n        data = queryResult.data;\n        if (operation.kind === 'query') {\n          // Collect the query's dependencies for future pending operation updates\n          queryDependencies = queryResult.dependencies;\n          collectPendingOperations(pendingOperations, queryDependencies);\n          results.set(operation.key, data);\n        }\n      } else {\n        noopDataState(store.data, operation.key);\n      }\n\n      // Update this operation's dependencies if it's a query\n      if (queryDependencies) {\n        updateDependencies(result.operation, queryDependencies);\n      }\n\n      return {\n        operation,\n        data,\n        error: result.error,\n        extensions: result.extensions,\n        hasNext: result.hasNext,\n        stale: result.stale,\n      };\n    };\n\n    return operations$ => {\n      // Filter by operations that are cacheable and attempt to query them from the cache\n      const cacheOps$ = pipe(\n        operations$,\n        filter(\n          op =>\n            op.kind === 'query' && op.context.requestPolicy !== 'network-only'\n        ),\n        map(operationResultFromCache),\n        share\n      );\n\n      const nonCacheOps$ = pipe(\n        operations$,\n        filter(\n          op =>\n            op.kind !== 'query' || op.context.requestPolicy === 'network-only'\n        )\n      );\n\n      // Rebound operations that are incomplete, i.e. couldn't be queried just from the cache\n      const cacheMissOps$ = pipe(\n        cacheOps$,\n        filter(\n          res =>\n            res.outcome === 'miss' &&\n            res.operation.context.requestPolicy !== 'cache-only' &&\n            !isBlockedByOptimisticUpdate(res.dependencies) &&\n            !reexecutingOperations.has(res.operation.key)\n        ),\n        map(res => {\n          dispatchDebug({\n            type: 'cacheMiss',\n            message: 'The result could not be retrieved from the cache',\n            operation: res.operation,\n          });\n          return addMetadata(res.operation, { cacheOutcome: 'miss' });\n        })\n      );\n\n      // Resolve OperationResults that the cache was able to assemble completely and trigger\n      // a network request if the current operation's policy is cache-and-network\n      const cacheResult$ = pipe(\n        cacheOps$,\n        filter(\n          res =>\n            res.outcome !== 'miss' ||\n            res.operation.context.requestPolicy === 'cache-only'\n        ),\n        map((res: OperationResultWithMeta): OperationResult => {\n          const { requestPolicy } = res.operation.context;\n\n          // We reexecute requests marked as `cache-and-network`, and partial responses,\n          // if we wouldn't cause a request loop\n          const shouldReexecute =\n            requestPolicy !== 'cache-only' &&\n            (res.hasNext ||\n              requestPolicy === 'cache-and-network' ||\n              (requestPolicy === 'cache-first' &&\n                res.outcome === 'partial' &&\n                !reexecutingOperations.has(res.operation.key)));\n          // Set stale to true anyway, even if the reexecute will be blocked, if the operation\n          // is in progress. We can be reasonably sure of that if a layer has been reserved for it.\n          const stale =\n            requestPolicy !== 'cache-only' &&\n            (shouldReexecute ||\n              (res.outcome === 'partial' &&\n                reexecutingOperations.has(res.operation.key) &&\n                hasLayer(store.data, res.operation.key)));\n\n          const result: OperationResult = {\n            operation: addMetadata(res.operation, {\n              cacheOutcome: res.outcome,\n            }),\n            data: res.data,\n            error: res.error,\n            extensions: res.extensions,\n            stale: stale && !res.hasNext,\n            hasNext: shouldReexecute && res.hasNext,\n          };\n\n          if (!shouldReexecute) {\n            /*noop*/\n          } else if (!isBlockedByOptimisticUpdate(res.dependencies)) {\n            client.reexecuteOperation(\n              toRequestPolicy(\n                operations.get(res.operation.key) || res.operation,\n                'network-only'\n              )\n            );\n          } else if (requestPolicy === 'cache-and-network') {\n            requestedRefetch.add(res.operation.key);\n          }\n\n          dispatchDebug({\n            type: 'cacheHit',\n            message: `A requested operation was found and returned from the cache.`,\n            operation: res.operation,\n            data: {\n              value: result,\n            },\n          });\n\n          return result;\n        })\n      );\n\n      // Forward operations that aren't cacheable and rebound operations\n      // Also update the cache with any network results\n      const result$ = pipe(\n        merge([nonCacheOps$, cacheMissOps$]),\n        map(prepareForwardedOperation),\n        forward\n      );\n\n      // Results that can immediately be resolved\n      const nonOptimisticResults$ = pipe(\n        result$,\n        filter(\n          result => !optimisticKeysToDependencies.has(result.operation.key)\n        ),\n        map(result => {\n          const pendingOperations: Operations = new Set();\n          // Update the cache with the incoming API result\n          const cacheResult = updateCacheWithResult(result, pendingOperations);\n          // Execute all dependent queries\n          executePendingOperations(result.operation, pendingOperations, false);\n          return cacheResult;\n        })\n      );\n\n      // Prevent mutations that were previously optimistic from being flushed\n      // immediately and instead clear them out slowly\n      const optimisticMutationCompletion$ = pipe(\n        result$,\n        filter(result =>\n          optimisticKeysToDependencies.has(result.operation.key)\n        ),\n        mergeMap((result: OperationResult): Source<OperationResult> => {\n          const length = mutationResultBuffer.push(result);\n          if (length < optimisticKeysToDependencies.size) {\n            return empty;\n          }\n\n          for (let i = 0; i < mutationResultBuffer.length; i++) {\n            reserveLayer(store.data, mutationResultBuffer[i].operation.key);\n          }\n\n          blockedDependencies.clear();\n\n          const results: OperationResult[] = [];\n          const pendingOperations: Operations = new Set();\n\n          let bufferedResult: OperationResult | void;\n          while ((bufferedResult = mutationResultBuffer.shift()))\n            results.push(\n              updateCacheWithResult(bufferedResult, pendingOperations)\n            );\n\n          // Execute all dependent queries as a single batch\n          executePendingOperations(result.operation, pendingOperations, false);\n\n          return fromArray(results);\n        })\n      );\n\n      return merge([\n        nonOptimisticResults$,\n        optimisticMutationCompletion$,\n        cacheResult$,\n      ]);\n    };\n  };\n","import { pipe, share, merge, makeSubject, filter, onPush } from 'wonka';\n\nimport type {\n  Operation,\n  OperationResult,\n  Exchange,\n  ExchangeIO,\n  CombinedError,\n  RequestPolicy,\n} from '@urql/core';\nimport { stringifyDocument, createRequest, makeOperation } from '@urql/core';\n\nimport type {\n  SerializedRequest,\n  CacheExchangeOpts,\n  StorageAdapter,\n} from './types';\nimport { cacheExchange } from './cacheExchange';\nimport { toRequestPolicy } from './helpers/operation';\n\nconst policyLevel = {\n  'cache-only': 0,\n  'cache-first': 1,\n  'network-only': 2,\n  'cache-and-network': 3,\n} as const;\n\n/** Input parameters for the {@link offlineExchange}.\n * @remarks\n * This configuration object extends the {@link CacheExchangeOpts}\n * as the `offlineExchange` extends the regular {@link cacheExchange}.\n */\nexport interface OfflineExchangeOpts extends CacheExchangeOpts {\n  /** Configures an offline storage adapter for Graphcache.\n   *\n   * @remarks\n   * A {@link StorageAdapter} allows Graphcache to write data to an external,\n   * asynchronous storage, and hydrate data from it when it first loads.\n   * This allows you to preserve normalized data between restarts/reloads.\n   *\n   * @see {@link https://urql.dev/goto/docs/graphcache/offline} for the full Offline Support docs.\n   */\n  storage: StorageAdapter;\n  /** Predicate function to determine whether a {@link CombinedError} hints at a network error.\n   *\n   * @remarks\n   * Not ever {@link CombinedError} means that the device is offline and by default\n   * the `offlineExchange` will check for common network error messages and check\n   * `navigator.onLine`. However, when `isOfflineError` is passed it can replace\n   * the default offline detection.\n   */\n  isOfflineError?(\n    error: undefined | CombinedError,\n    result: OperationResult\n  ): boolean;\n}\n\n/** Exchange factory that creates a normalized cache exchange in Offline Support mode.\n *\n * @param opts - A {@link OfflineExchangeOpts} configuration object.\n * @returns the created normalized, offline cache {@link Exchange}.\n *\n * @remarks\n * The `offlineExchange` is a wrapper around the regular {@link cacheExchange}\n * which adds logic via the {@link OfflineExchangeOpts.storage} adapter to\n * recognize when it’s offline, when to retry failed mutations, and how\n * to handle longer periods of being offline.\n *\n * @see {@link https://urql.dev/goto/docs/graphcache/offline} for the full Offline Support docs.\n */\nexport const offlineExchange =\n  <C extends OfflineExchangeOpts>(opts: C): Exchange =>\n  input => {\n    const { storage } = opts;\n\n    const isOfflineError =\n      opts.isOfflineError ||\n      ((error: undefined | CombinedError) =>\n        error &&\n        error.networkError &&\n        !error.response &&\n        ((typeof navigator !== 'undefined' && navigator.onLine === false) ||\n          /request failed|failed to fetch|network\\s?error/i.test(\n            error.networkError.message\n          )));\n\n    if (\n      storage &&\n      storage.onOnline &&\n      storage.readMetadata &&\n      storage.writeMetadata\n    ) {\n      const { forward: outerForward, client, dispatchDebug } = input;\n      const { source: reboundOps$, next } = makeSubject<Operation>();\n      const failedQueue: Operation[] = [];\n      let hasRehydrated = false;\n      let isFlushingQueue = false;\n\n      const updateMetadata = () => {\n        if (hasRehydrated) {\n          const requests: SerializedRequest[] = [];\n          for (let i = 0; i < failedQueue.length; i++) {\n            const operation = failedQueue[i];\n            if (operation.kind === 'mutation') {\n              requests.push({\n                query: stringifyDocument(operation.query),\n                variables: operation.variables,\n                extensions: operation.extensions,\n              });\n            }\n          }\n          storage.writeMetadata!(requests);\n        }\n      };\n\n      const filterQueue = (key: number) => {\n        for (let i = failedQueue.length - 1; i >= 0; i--)\n          if (failedQueue[i].key === key) failedQueue.splice(i, 1);\n      };\n\n      const flushQueue = () => {\n        if (!isFlushingQueue) {\n          const sent = new Set<number>();\n          isFlushingQueue = true;\n          for (let i = 0; i < failedQueue.length; i++) {\n            const operation = failedQueue[i];\n            if (operation.kind === 'mutation' || !sent.has(operation.key)) {\n              sent.add(operation.key);\n              if (operation.kind !== 'subscription') {\n                next(makeOperation('teardown', operation));\n                let overridePolicy: RequestPolicy = 'cache-first';\n                for (let i = 0; i < failedQueue.length; i++) {\n                  const { requestPolicy } = failedQueue[i].context;\n                  if (policyLevel[requestPolicy] > policyLevel[overridePolicy])\n                    overridePolicy = requestPolicy;\n                }\n                next(toRequestPolicy(operation, overridePolicy));\n              } else {\n                next(toRequestPolicy(operation, 'cache-first'));\n              }\n            }\n          }\n          isFlushingQueue = false;\n          failedQueue.length = 0;\n          updateMetadata();\n        }\n      };\n\n      const forward: ExchangeIO = ops$ => {\n        return pipe(\n          outerForward(ops$),\n          filter(res => {\n            if (\n              hasRehydrated &&\n              res.operation.kind === 'mutation' &&\n              res.operation.context.optimistic &&\n              isOfflineError(res.error, res)\n            ) {\n              failedQueue.push(res.operation);\n              updateMetadata();\n              return false;\n            }\n\n            return true;\n          }),\n          share\n        );\n      };\n\n      const cacheResults$ = cacheExchange({\n        ...opts,\n        storage: {\n          ...storage,\n          readData() {\n            const hydrate = storage.readData();\n            return {\n              async then(onEntries) {\n                const mutations = await storage.readMetadata!();\n                for (let i = 0; mutations && i < mutations.length; i++) {\n                  failedQueue.push(\n                    client.createRequestOperation(\n                      'mutation',\n                      createRequest(mutations[i].query, mutations[i].variables),\n                      mutations[i].extensions\n                    )\n                  );\n                }\n                onEntries!(await hydrate);\n                storage.onOnline!(flushQueue);\n                hasRehydrated = true;\n                flushQueue();\n              },\n            };\n          },\n        },\n      })({\n        client,\n        dispatchDebug,\n        forward,\n      });\n\n      return operations$ => {\n        const opsAndRebound$ = merge([\n          reboundOps$,\n          pipe(\n            operations$,\n            onPush(operation => {\n              if (operation.kind === 'query' && !hasRehydrated) {\n                failedQueue.push(operation);\n              } else if (operation.kind === 'teardown') {\n                filterQueue(operation.key);\n              }\n            })\n          ),\n        ]);\n\n        return pipe(\n          cacheResults$(opsAndRebound$),\n          filter(res => {\n            if (res.operation.kind === 'query') {\n              if (isOfflineError(res.error, res)) {\n                next(toRequestPolicy(res.operation, 'cache-only'));\n                failedQueue.push(res.operation);\n                return false;\n              } else if (!hasRehydrated) {\n                filterQueue(res.operation.key);\n              }\n            }\n            return true;\n          })\n        );\n      };\n    }\n\n    return cacheExchange(opts)(input);\n  };\n"],"names":["helpUrl","invariant","condition","message","code","error","Error","name","Set","EMPTY_DIRECTIVES","getDirectives","node","_directives","getName","value","getFragmentTypeName","typeCondition","getFieldAlias","alias","emptySelectionSet","getSelectionSet","selectionSet","selections","getTypeCondition","getFieldArguments","vars","args","arguments","i","l","length","arg","valueFromASTUntyped","filterVariables","input","variableDefinitions","variable","normalizeVariables","def","undefined","defaultValue","key","getMainOperation","doc","definitions","kind","Kind","OPERATION_DEFINITION","getFragments","fragments","FRAGMENT_DEFINITION","shouldInclude","directives","include","skip","directive","isDeferred","defer","argument","isOptional","optional","required","isFieldNullable","schema","typename","fieldName","logger","field","getField","type","isListNullable","ofType","isInterfaceOfType","types","has","get","expectAbstractType","expectObjectType","isSubType","indexOf","fields","keyOfField","stringifyVariables","joinKeys","parentKey","fieldInfoOfKey","fieldKey","parenIndex","slice","JSON","parse","deserializeKeyInfo","dotIndex","entityKey","replace","currentOwnership","currentDataMapping","currentData","currentOptimisticKey","currentOperation","currentDependencies","currentForeignData","currentOptimistic","makeData","data","isArray","newData","set","add","ownsData","initDataState","operationType","layerKey","isOptimistic","isForeignData","WeakSet","WeakMap","hydrating","optimisticOrder","commutativeKeys","splice","delete","reserveLayer","createLayer","deleteLayer","clearDataState","dirtyKeys","squashLayer","storage","setTimeout","gc","persistData","noopDataState","deferredKeys","DEFAULT_EMPTY_SET","setNode","map","keymap","optimistic","base","entity","Object","create","getNode","updateRCForLink","link","by","Array","updateRCForEntity","count","refCount","newCount","extractNodeFields","fieldInfos","seenFieldKeys","push","extractNodeMapFields","keys","record","records","__typename","linkNode","links","updateDependencies","queryRootKey","updatePersist","persist","serializeKeys","readRecord","readLink","writeRecord","writeLink","entityLinks","hasNext","index","clearLayer","unshift","Map","previousDependencies","entry","entries","keyMap","inspectFields","x","writeData","clear","contextRef","deferRef","optionalRef","getFieldError","ctx","__internal","path","errorMap","join","makeContext","store","variables","parent","parentTypeName","parentFieldKey","partial","graphQLErrors","graphQLError","updateContext","isFragmentHeuristicallyMatching","some","FIELD","hasField","makeSelectionIterator","_defer","_optional","child","select","fragment","INLINE_FRAGMENT","isFragmentOptional","_generated","ensureData","ensureLink","ref","keyOfEntity","_query","request","query","formatDocument","operation","rootKey","rootFields","rootSelect","readRoot","InMemoryData","readSelection","dependencies","rootNames","iterate","hasChanged","output","dataFieldValue","fieldAlias","fieldValue","readRootField","pop","originalData","getFieldResolver","resolvers","fieldResolver","directiveNode","result","isQuery","hasFields","hasPartials","fieldArgs","resolver","resultValue","resolveResolverResult","resolveLink","prevData","isOwnedData","_isListNullable","childResult","isDataOrKey","newLink","childLink","_write","writeSelection","rootField","isRoot","writeType","existingTypes","typeSet","updates","optimisticMutations","writeField","updater","prevLink","indexKey","childKey","invalidateEntity","Store","constructor","opts","this","globalIDs","queryName","mutationName","subscriptionName","buildClientSchema","__schema","typemap","buildNameMap","arr","buildType","interfaces","possibleTypes","queryType","mutation","mutationType","subscription","subscriptionType","abstract","possible","abstractType","possibleType","out","id","_id","resolve","fieldLink","resolveFieldByKey","invalidate","invalidateType","updateQuery","createRequest","readQuery","readFragment","fragmentName","_queryFragment","writeFragment","_writeFragment","dataToWrite","rest","toRequestPolicy","requestPolicy","makeOperation","context","cacheExchange","forward","client","readData","then","hydrateData","onCacheHydrated","optimisticKeysToDependencies","mutationResultBuffer","operations","results","blockedDependencies","requestedRefetch","deps","reexecutingOperations","dependentOperations","isBlockedByOptimisticUpdate","dep","values","collectPendingOperations","pendingOperations","executePendingOperations","op","policy","reexecuteOperation","_reexecutingOperations","prepareForwardedOperation","size","depOps","operationResultFromCache","cacheOutcome","outcome","updateCacheWithResult","queryDependencies","writeDependencies","queryResult","extensions","stale","operations$","cacheOps$","share","filter","nonCacheOps$","cacheMissOps$","res","cacheResult$","shouldReexecute","result$","merge","nonOptimisticResults$","cacheResult","optimisticMutationCompletion$","mergeMap","empty","bufferedResult","shift","fromArray","policyLevel","isOfflineError","networkError","response","navigator","onLine","test","onOnline","readMetadata","writeMetadata","outerForward","dispatchDebug","source","reboundOps$","next","makeSubject","failedQueue","hasRehydrated","isFlushingQueue","updateMetadata","requests","stringifyDocument","filterQueue","flushQueue","sent","overridePolicy","cacheResults$","hydrate","async","onEntries","mutations","createRequestOperation","ops$","opsAndRebound$","onPush"],"mappings":"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"}