{"version":3,"file":"urql-exchange-graphcache-extras.min.mjs","sources":["../src/extras/relayPagination.ts","../src/extras/simplePagination.ts"],"sourcesContent":["import { stringifyVariables } from '@urql/core';\nimport type { Cache, Resolver, Variables, NullArray } from '../types';\n\nexport type MergeMode = 'outwards' | 'inwards';\n\n/** Input parameters for the {@link relayPagination} factory. */\nexport interface PaginationParams {\n  /** Flip between inwards and outwards pagination.\n   *\n   * @remarks\n   * This is only relevant if youâ€™re querying pages using forwards and\n   * backwards pagination at the same time.\n   * When set to `'inwards'`, its default, pages that have been queried\n   * forward are placed in front of all pages that were queried backwards.\n   * When set to `'outwards'`, the two sets are merged in reverse.\n   */\n  mergeMode?: MergeMode;\n}\n\ninterface PageInfo {\n  __typename: string;\n  endCursor: null | string;\n  startCursor: null | string;\n  hasNextPage: boolean;\n  hasPreviousPage: boolean;\n}\n\ninterface Page {\n  __typename: string;\n  edges: NullArray<string>;\n  nodes: NullArray<string>;\n  pageInfo: PageInfo;\n}\n\nconst defaultPageInfo: PageInfo = {\n  __typename: 'PageInfo',\n  endCursor: null,\n  startCursor: null,\n  hasNextPage: false,\n  hasPreviousPage: false,\n};\n\nconst ensureKey = (x: any): string | null => (typeof x === 'string' ? x : null);\n\nconst concatEdges = (\n  cache: Cache,\n  leftEdges: NullArray<string>,\n  rightEdges: NullArray<string>\n) => {\n  const ids = new Set<string>();\n  for (let i = 0, l = leftEdges.length; i < l; i++) {\n    const edge = leftEdges[i] as string | null;\n    const node = cache.resolve(edge, 'node');\n    if (typeof node === 'string') ids.add(node);\n  }\n\n  const newEdges = leftEdges.slice();\n  for (let i = 0, l = rightEdges.length; i < l; i++) {\n    const edge = rightEdges[i] as string | null;\n    const node = cache.resolve(edge, 'node');\n    if (typeof node === 'string' && !ids.has(node)) {\n      ids.add(node);\n      newEdges.push(edge);\n    }\n  }\n\n  return newEdges;\n};\n\nconst concatNodes = (\n  leftNodes: NullArray<string>,\n  rightNodes: NullArray<string>\n) => {\n  const ids = new Set<string>();\n  for (let i = 0, l = leftNodes.length; i < l; i++) {\n    const node = leftNodes[i];\n    if (typeof node === 'string') ids.add(node);\n  }\n\n  const newNodes = leftNodes.slice();\n  for (let i = 0, l = rightNodes.length; i < l; i++) {\n    const node = rightNodes[i];\n    if (typeof node === 'string' && !ids.has(node)) {\n      ids.add(node);\n      newNodes.push(node);\n    }\n  }\n\n  return newNodes;\n};\n\nconst compareArgs = (\n  fieldArgs: Variables,\n  connectionArgs: Variables\n): boolean => {\n  for (const key in connectionArgs) {\n    if (\n      key === 'first' ||\n      key === 'last' ||\n      key === 'after' ||\n      key === 'before'\n    ) {\n      continue;\n    } else if (!(key in fieldArgs)) {\n      return false;\n    }\n\n    const argA = fieldArgs[key];\n    const argB = connectionArgs[key];\n\n    if (\n      typeof argA !== typeof argB || typeof argA !== 'object'\n        ? argA !== argB\n        : stringifyVariables(argA) !== stringifyVariables(argB)\n    ) {\n      return false;\n    }\n  }\n\n  for (const key in fieldArgs) {\n    if (\n      key === 'first' ||\n      key === 'last' ||\n      key === 'after' ||\n      key === 'before'\n    ) {\n      continue;\n    }\n\n    if (!(key in connectionArgs)) return false;\n  }\n\n  return true;\n};\n\nconst getPage = (\n  cache: Cache,\n  entityKey: string,\n  fieldKey: string\n): Page | null => {\n  const link = ensureKey(cache.resolve(entityKey, fieldKey));\n  if (!link) return null;\n\n  const typename = cache.resolve(link, '__typename') as string;\n  const edges = (cache.resolve(link, 'edges') || []) as NullArray<string>;\n  const nodes = (cache.resolve(link, 'nodes') || []) as NullArray<string>;\n  if (typeof typename !== 'string') {\n    return null;\n  }\n\n  const page: Page = {\n    __typename: typename,\n    edges,\n    nodes,\n    pageInfo: defaultPageInfo,\n  };\n\n  const pageInfoKey = cache.resolve(link, 'pageInfo');\n  if (typeof pageInfoKey === 'string') {\n    const pageInfoType = ensureKey(cache.resolve(pageInfoKey, '__typename'));\n    const endCursor = ensureKey(cache.resolve(pageInfoKey, 'endCursor'));\n    const startCursor = ensureKey(cache.resolve(pageInfoKey, 'startCursor'));\n    const hasNextPage = cache.resolve(pageInfoKey, 'hasNextPage');\n    const hasPreviousPage = cache.resolve(pageInfoKey, 'hasPreviousPage');\n\n    const pageInfo: PageInfo = (page.pageInfo = {\n      __typename: typeof pageInfoType === 'string' ? pageInfoType : 'PageInfo',\n      hasNextPage: typeof hasNextPage === 'boolean' ? hasNextPage : !!endCursor,\n      hasPreviousPage:\n        typeof hasPreviousPage === 'boolean' ? hasPreviousPage : !!startCursor,\n      endCursor,\n      startCursor,\n    });\n\n    if (pageInfo.endCursor === null) {\n      const edge = edges[edges.length - 1] as string | null;\n      if (edge) {\n        const endCursor = cache.resolve(edge, 'cursor');\n        pageInfo.endCursor = ensureKey(endCursor);\n      }\n    }\n\n    if (pageInfo.startCursor === null) {\n      const edge = edges[0] as string | null;\n      if (edge) {\n        const startCursor = cache.resolve(edge, 'cursor');\n        pageInfo.startCursor = ensureKey(startCursor);\n      }\n    }\n  }\n\n  return page;\n};\n\n/** Creates a {@link Resolver} that combines pages that comply to the Relay pagination spec.\n *\n * @param params - A {@link PaginationParams} configuration object.\n * @returns the created Relay pagination {@link Resolver}.\n *\n * @remarks\n * `relayPagination` is a factory that creates a {@link Resolver} that can combine\n * multiple pages on a field that complies to the Relay pagination spec into a single,\n * combined list for infinite scrolling.\n *\n * This resolver will only work on fields that return a `Connection` GraphQL object\n * type, according to the Relay pagination spec.\n *\n * Hint: It's not recommended to use this when you can handle infinite scrolling\n * in your UI code instead.\n *\n * @see {@link https://urql.dev/goto/docs/graphcache/local-resolvers#relay-pagination} for more information.\n * @see {@link https://urql.dev/goto/docs/basics/ui-patterns/#infinite-scrolling} for an alternate approach.\n */\nexport const relayPagination = (\n  params: PaginationParams = {}\n): Resolver<any, any, any> => {\n  const mergeMode = params.mergeMode || 'inwards';\n\n  return (_parent, fieldArgs, cache, info) => {\n    const { parentKey: entityKey, fieldName } = info;\n\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter(info => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n    if (size === 0) {\n      return undefined;\n    }\n\n    let typename: string | null = null;\n    let startEdges: NullArray<string> = [];\n    let endEdges: NullArray<string> = [];\n    let startNodes: NullArray<string> = [];\n    let endNodes: NullArray<string> = [];\n    let pageInfo: PageInfo = { ...defaultPageInfo };\n\n    for (let i = 0; i < size; i++) {\n      const { fieldKey, arguments: args } = fieldInfos[i];\n      if (args === null || !compareArgs(fieldArgs, args)) {\n        continue;\n      }\n\n      const page = getPage(cache, entityKey, fieldKey);\n      if (page === null) {\n        continue;\n      }\n      if (page.nodes.length === 0 && page.edges.length === 0 && typename) {\n        continue;\n      }\n\n      if (\n        mergeMode === 'inwards' &&\n        typeof args.last === 'number' &&\n        typeof args.first === 'number'\n      ) {\n        const firstEdges = page.edges.slice(0, args.first + 1);\n        const lastEdges = page.edges.slice(-args.last);\n        const firstNodes = page.nodes.slice(0, args.first + 1);\n        const lastNodes = page.nodes.slice(-args.last);\n\n        startEdges = concatEdges(cache, startEdges, firstEdges);\n        endEdges = concatEdges(cache, lastEdges, endEdges);\n        startNodes = concatNodes(startNodes, firstNodes);\n        endNodes = concatNodes(lastNodes, endNodes);\n\n        pageInfo = page.pageInfo;\n      } else if (args.after) {\n        startEdges = concatEdges(cache, startEdges, page.edges);\n        startNodes = concatNodes(startNodes, page.nodes);\n        pageInfo.endCursor = page.pageInfo.endCursor;\n        pageInfo.hasNextPage = page.pageInfo.hasNextPage;\n      } else if (args.before) {\n        endEdges = concatEdges(cache, page.edges, endEdges);\n        endNodes = concatNodes(page.nodes, endNodes);\n        pageInfo.startCursor = page.pageInfo.startCursor;\n        pageInfo.hasPreviousPage = page.pageInfo.hasPreviousPage;\n      } else if (typeof args.last === 'number') {\n        endEdges = concatEdges(cache, page.edges, endEdges);\n        endNodes = concatNodes(page.nodes, endNodes);\n        pageInfo = page.pageInfo;\n      } else {\n        startEdges = concatEdges(cache, startEdges, page.edges);\n        startNodes = concatNodes(startNodes, page.nodes);\n        pageInfo = page.pageInfo;\n      }\n\n      if (page.pageInfo.__typename !== pageInfo.__typename)\n        pageInfo.__typename = page.pageInfo.__typename;\n      if (typename !== page.__typename) typename = page.__typename;\n    }\n\n    if (typeof typename !== 'string') {\n      return undefined;\n    }\n\n    const hasCurrentPage = !!ensureKey(\n      cache.resolve(entityKey, fieldName, fieldArgs)\n    );\n    if (!hasCurrentPage) {\n      if (!(info as any).store.schema) {\n        return undefined;\n      } else {\n        info.partial = true;\n      }\n    }\n\n    return {\n      __typename: typename,\n      edges:\n        mergeMode === 'inwards'\n          ? concatEdges(cache, startEdges, endEdges)\n          : concatEdges(cache, endEdges, startEdges),\n      nodes:\n        mergeMode === 'inwards'\n          ? concatNodes(startNodes, endNodes)\n          : concatNodes(endNodes, startNodes),\n      pageInfo: {\n        __typename: pageInfo.__typename,\n        endCursor: pageInfo.endCursor,\n        startCursor: pageInfo.startCursor,\n        hasNextPage: pageInfo.hasNextPage,\n        hasPreviousPage: pageInfo.hasPreviousPage,\n      },\n    };\n  };\n};\n","import { stringifyVariables } from '@urql/core';\nimport type { Resolver, Variables, NullArray } from '../types';\n\nexport type MergeMode = 'before' | 'after';\n\n/** Input parameters for the {@link simplePagination} factory. */\nexport interface PaginationParams {\n  /** The name of the field argument used to define the pageâ€™s offset. */\n  offsetArgument?: string;\n  /** The name of the field argument used to define the pageâ€™s length. */\n  limitArgument?: string;\n  /** Flip between forward and backwards pagination.\n   *\n   * @remarks\n   * When set to `'after'`, its default, pages are merged forwards and in order.\n   * When set to `'before'`, pages are merged in reverse, putting later pages\n   * in front of earlier ones.\n   */\n  mergeMode?: MergeMode;\n}\n\n/** Creates a {@link Resolver} that combines pages of a primitive pagination field.\n *\n * @param options - A {@link PaginationParams} configuration object.\n * @returns the created pagination {@link Resolver}.\n *\n * @remarks\n * `simplePagination` is a factory that creates a {@link Resolver} that can combine\n * multiple lists on a paginated field into a single, combined list for infinite\n * scrolling.\n *\n * Hint: It's not recommended to use this when you can handle infinite scrolling\n * in your UI code instead.\n *\n * @see {@link https://urql.dev/goto/docs/graphcache/local-resolvers#simple-pagination} for more information.\n * @see {@link https://urql.dev/goto/docs/basics/ui-patterns/#infinite-scrolling} for an alternate approach.\n */\nexport const simplePagination = ({\n  offsetArgument = 'skip',\n  limitArgument = 'limit',\n  mergeMode = 'after',\n}: PaginationParams = {}): Resolver<any, any, any> => {\n  const compareArgs = (\n    fieldArgs: Variables,\n    connectionArgs: Variables\n  ): boolean => {\n    for (const key in connectionArgs) {\n      if (key === offsetArgument || key === limitArgument) {\n        continue;\n      } else if (!(key in fieldArgs)) {\n        return false;\n      }\n\n      const argA = fieldArgs[key];\n      const argB = connectionArgs[key];\n\n      if (\n        typeof argA !== typeof argB || typeof argA !== 'object'\n          ? argA !== argB\n          : stringifyVariables(argA) !== stringifyVariables(argB)\n      ) {\n        return false;\n      }\n    }\n\n    for (const key in fieldArgs) {\n      if (key === offsetArgument || key === limitArgument) {\n        continue;\n      }\n      if (!(key in connectionArgs)) return false;\n    }\n\n    return true;\n  };\n\n  return (_parent, fieldArgs, cache, info) => {\n    const { parentKey: entityKey, fieldName } = info;\n\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter(info => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n    if (size === 0) {\n      return undefined;\n    }\n\n    const visited = new Set();\n    let result: NullArray<string> = [];\n    let prevOffset: number | null = null;\n\n    for (let i = 0; i < size; i++) {\n      const { fieldKey, arguments: args } = fieldInfos[i];\n      if (args === null || !compareArgs(fieldArgs, args)) {\n        continue;\n      }\n\n      const links = cache.resolve(entityKey, fieldKey) as string[];\n      const currentOffset = args[offsetArgument];\n\n      if (\n        links === null ||\n        links.length === 0 ||\n        typeof currentOffset !== 'number'\n      ) {\n        continue;\n      }\n\n      const tempResult: NullArray<string> = [];\n\n      for (let j = 0; j < links.length; j++) {\n        const link = links[j];\n        if (visited.has(link)) continue;\n        tempResult.push(link);\n        visited.add(link);\n      }\n\n      if (\n        (!prevOffset || currentOffset > prevOffset) ===\n        (mergeMode === 'after')\n      ) {\n        result = [...result, ...tempResult];\n      } else {\n        result = [...tempResult, ...result];\n      }\n\n      prevOffset = currentOffset;\n    }\n\n    const hasCurrentPage = cache.resolve(entityKey, fieldName, fieldArgs);\n    if (hasCurrentPage) {\n      return result;\n    } else if (!(info as any).store.schema) {\n      return undefined;\n    } else {\n      info.partial = true;\n      return result;\n    }\n  };\n};\n"],"names":["defaultPageInfo","__typename","endCursor","startCursor","hasNextPage","hasPreviousPage","ensureKey","x","concatEdges","cache","leftEdges","rightEdges","ids","Set","i","l","length","node","resolve","add","newEdges","slice","edge","has","push","concatNodes","leftNodes","rightNodes","newNodes","compareArgs","fieldArgs","connectionArgs","key","argA","argB","stringifyVariables","getPage","entityKey","fieldKey","link","typename","edges","nodes","page","pageInfo","pageInfoKey","pageInfoType","relayPagination","params","mergeMode","_parent","info","parentKey","fieldName","fieldInfos","inspectFields","filter","size","startEdges","endEdges","startNodes","endNodes","arguments","args","last","first","firstEdges","lastEdges","firstNodes","lastNodes","after","before","store","schema","partial","simplePagination","offsetArgument","limitArgument","visited","result","prevOffset","links","currentOffset","tempResult","j"],"mappings":"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"}