{"version":3,"file":"urql-exchange-graphcache-default-storage.js","sources":["../src/default-storage/index.ts"],"sourcesContent":["import type {\n  SerializedEntries,\n  SerializedRequest,\n  StorageAdapter,\n} from '../types';\n\nconst getRequestPromise = <T>(request: IDBRequest<T>): Promise<T> => {\n  return new Promise((resolve, reject) => {\n    request.onerror = () => {\n      reject(request.error);\n    };\n\n    request.onsuccess = () => {\n      resolve(request.result);\n    };\n  });\n};\n\nconst getTransactionPromise = (transaction: IDBTransaction): Promise<any> => {\n  return new Promise((resolve, reject) => {\n    transaction.onerror = () => {\n      reject(transaction.error);\n    };\n\n    transaction.oncomplete = resolve;\n  });\n};\n\nexport interface StorageOptions {\n  /** Name of the IndexedDB database that will be used.\n   * @defaultValue `'graphcache-v4'`\n   */\n  idbName?: string;\n  /** Maximum age of cache entries (in days) after which data is discarded.\n   * @defaultValue `7` days\n   */\n  maxAge?: number;\n  /** Gets Called when the exchange has hydrated the data from storage. */\n  onCacheHydrated?: () => void;\n}\n\n/** Sample storage adapter persisting to IndexedDB. */\nexport interface DefaultStorage extends StorageAdapter {\n  /** Clears the entire IndexedDB storage. */\n  clear(): Promise<any>;\n}\n\n/** Creates a default {@link StorageAdapter} which uses IndexedDB for storage.\n *\n * @param opts - A {@link StorageOptions} configuration object.\n * @returns the created {@link StorageAdapter}.\n *\n * @remarks\n * The default storage uses IndexedDB to persist the normalized cache for\n * offline use. It demonstrates that the cache can be chunked by timestamps.\n *\n * Note: We have no data on stability of this storage and our Offline Support\n * for large APIs or longterm use. Proceed with caution.\n */\nexport const makeDefaultStorage = (opts?: StorageOptions): DefaultStorage => {\n  if (!opts) opts = {};\n\n  let callback: (() => void) | undefined;\n\n  const DB_NAME = opts.idbName || 'graphcache-v4';\n  const ENTRIES_STORE_NAME = 'entries';\n  const METADATA_STORE_NAME = 'metadata';\n\n  let batch: Record<string, string | undefined> = Object.create(null);\n  const timestamp = Math.floor(new Date().valueOf() / (1000 * 60 * 60 * 24));\n  const maxAge = timestamp - (opts.maxAge || 7);\n\n  const req = indexedDB.open(DB_NAME, 1);\n  const database$ = getRequestPromise(req);\n\n  req.onupgradeneeded = () => {\n    req.result.createObjectStore(ENTRIES_STORE_NAME);\n    req.result.createObjectStore(METADATA_STORE_NAME);\n  };\n\n  const serializeEntry = (entry: string): string => entry.replace(/:/g, '%3a');\n\n  const deserializeEntry = (entry: string): string =>\n    entry.replace(/%3a/g, ':');\n\n  const serializeBatch = (): string => {\n    let data = '';\n    for (const key in batch) {\n      const value = batch[key];\n      data += serializeEntry(key);\n      data += ':';\n      if (value) data += serializeEntry(value);\n      data += ':';\n    }\n\n    return data;\n  };\n\n  const deserializeBatch = (input: string) => {\n    const data = {};\n    let char = '';\n    let key = '';\n    let entry = '';\n    let mode = 0;\n    let index = 0;\n    while (index < input.length) {\n      entry = '';\n      while ((char = input[index++]) !== ':' && char) {\n        entry += char;\n      }\n\n      if (mode) {\n        data[key] = deserializeEntry(entry) || undefined;\n        mode = 0;\n      } else {\n        key = deserializeEntry(entry);\n        mode = 1;\n      }\n    }\n\n    return data;\n  };\n\n  return {\n    clear() {\n      return database$.then(database => {\n        const transaction = database.transaction(\n          [METADATA_STORE_NAME, ENTRIES_STORE_NAME],\n          'readwrite'\n        );\n        transaction.objectStore(METADATA_STORE_NAME).clear();\n        transaction.objectStore(ENTRIES_STORE_NAME).clear();\n        batch = Object.create(null);\n        return getTransactionPromise(transaction);\n      });\n    },\n\n    readMetadata(): Promise<null | SerializedRequest[]> {\n      return database$.then(\n        database => {\n          return getRequestPromise<SerializedRequest[]>(\n            database\n              .transaction(METADATA_STORE_NAME, 'readonly')\n              .objectStore(METADATA_STORE_NAME)\n              .get(METADATA_STORE_NAME)\n          );\n        },\n        () => null\n      );\n    },\n\n    writeMetadata(metadata: SerializedRequest[]) {\n      database$.then(\n        database => {\n          return getRequestPromise(\n            database\n              .transaction(METADATA_STORE_NAME, 'readwrite')\n              .objectStore(METADATA_STORE_NAME)\n              .put(metadata, METADATA_STORE_NAME)\n          );\n        },\n        () => {\n          /* noop */\n        }\n      );\n    },\n\n    writeData(entries: SerializedEntries): Promise<void> {\n      Object.assign(batch, entries);\n      const toUndefined = () => undefined;\n\n      return database$\n        .then(database => {\n          return getRequestPromise(\n            database\n              .transaction(ENTRIES_STORE_NAME, 'readwrite')\n              .objectStore(ENTRIES_STORE_NAME)\n              .put(serializeBatch(), timestamp)\n          );\n        })\n        .then(toUndefined, toUndefined);\n    },\n\n    readData(): Promise<SerializedEntries> {\n      const chunks: string[] = [];\n      return database$\n        .then(database => {\n          const transaction = database.transaction(\n            ENTRIES_STORE_NAME,\n            'readwrite'\n          );\n\n          const store = transaction.objectStore(ENTRIES_STORE_NAME);\n          const request = (store.openKeyCursor || store.openCursor).call(store);\n\n          request.onsuccess = function () {\n            if (this.result) {\n              const { key } = this.result;\n              if (typeof key !== 'number' || key < maxAge) {\n                store.delete(key);\n              } else {\n                const request = store.get(key);\n                const index = chunks.length;\n                chunks.push('');\n                request.onsuccess = () => {\n                  const result = '' + request.result;\n                  if (key === timestamp)\n                    Object.assign(batch, deserializeBatch(result));\n                  chunks[index] = result;\n                };\n              }\n\n              this.result.continue();\n            }\n          };\n\n          return getTransactionPromise(transaction);\n        })\n        .then(\n          () => deserializeBatch(chunks.join('')),\n          () => batch\n        );\n    },\n    onCacheHydrated: opts.onCacheHydrated,\n    onOnline(cb: () => void) {\n      if (callback) {\n        window.removeEventListener('online', callback);\n        callback = undefined;\n      }\n\n      window.addEventListener(\n        'online',\n        (callback = () => {\n          cb();\n        })\n      );\n    },\n  };\n};\n"],"names":["getRequestPromise","request","Promise","resolve","reject","onerror","error","onsuccess","result","getTransactionPromise","transaction","oncomplete","makeDefaultStorage","opts","callback","DB_NAME","idbName","ENTRIES_STORE_NAME","METADATA_STORE_NAME","batch","Object","create","timestamp","Math","floor","Date","valueOf","maxAge","req","indexedDB","open","database$","onupgradeneeded","createObjectStore","serializeEntry","entry","replace","deserializeEntry","serializeBatch","data","key","value","deserializeBatch","input","char","mode","index","length","undefined","clear","then","database","objectStore","readMetadata","get","writeMetadata","metadata","put","writeData","entries","assign","toUndefined","readData","chunks","store","openKeyCursor","openCursor","call","delete","push","continue","join","onCacheHydrated","onOnline","cb","window","removeEventListener","addEventListener"],"mappings":";;AAMA,IAAMA,iBAAiB,GAAOC,OAAsB,IAAiB;AACnE,EAAA,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCH,OAAO,CAACI,OAAO,GAAG,MAAM;AACtBD,MAAAA,MAAM,CAACH,OAAO,CAACK,KAAK,CAAC,CAAA;KACtB,CAAA;IAEDL,OAAO,CAACM,SAAS,GAAG,MAAM;AACxBJ,MAAAA,OAAO,CAACF,OAAO,CAACO,MAAM,CAAC,CAAA;KACxB,CAAA;AACH,GAAC,CAAC,CAAA;AACJ,CAAC,CAAA;AAED,IAAMC,qBAAqB,GAAIC,WAA2B,IAAmB;AAC3E,EAAA,OAAO,IAAIR,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCM,WAAW,CAACL,OAAO,GAAG,MAAM;AAC1BD,MAAAA,MAAM,CAACM,WAAW,CAACJ,KAAK,CAAC,CAAA;KAC1B,CAAA;IAEDI,WAAW,CAACC,UAAU,GAAGR,OAAO,CAAA;AAClC,GAAC,CAAC,CAAA;AACJ,CAAC,CAAA;;AAeD;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACaS,IAAAA,kBAAkB,GAAIC,IAAqB,IAAqB;AAC3E,EAAA,IAAI,CAACA,IAAI,EAAEA,IAAI,GAAG,EAAE,CAAA;AAEpB,EAAA,IAAIC,QAAkC,CAAA;AAEtC,EAAA,IAAMC,OAAO,GAAGF,IAAI,CAACG,OAAO,IAAI,eAAe,CAAA;EAC/C,IAAMC,kBAAkB,GAAG,SAAS,CAAA;EACpC,IAAMC,mBAAmB,GAAG,UAAU,CAAA;AAEtC,EAAA,IAAIC,KAAyC,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC,CAAA;EACnE,IAAMC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAAC,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAA;EAC1E,IAAMC,MAAM,GAAGL,SAAS,IAAIT,IAAI,CAACc,MAAM,IAAI,CAAC,CAAC,CAAA;EAE7C,IAAMC,GAAG,GAAGC,SAAS,CAACC,IAAI,CAACf,OAAO,EAAE,CAAC,CAAC,CAAA;AACtC,EAAA,IAAMgB,SAAS,GAAG/B,iBAAiB,CAAC4B,GAAG,CAAC,CAAA;EAExCA,GAAG,CAACI,eAAe,GAAG,MAAM;AAC1BJ,IAAAA,GAAG,CAACpB,MAAM,CAACyB,iBAAiB,CAAChB,kBAAkB,CAAC,CAAA;AAChDW,IAAAA,GAAG,CAACpB,MAAM,CAACyB,iBAAiB,CAACf,mBAAmB,CAAC,CAAA;GAClD,CAAA;EAED,IAAMgB,cAAc,GAAIC,KAAa,IAAaA,KAAK,CAACC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAA;EAE5E,IAAMC,gBAAgB,GAAIF,KAAa,IACrCA,KAAK,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;EAE5B,IAAME,cAAc,GAAGA,MAAc;IACnC,IAAIC,IAAI,GAAG,EAAE,CAAA;AACb,IAAA,KAAK,IAAMC,GAAG,IAAIrB,KAAK,EAAE;AACvB,MAAA,IAAMsB,KAAK,GAAGtB,KAAK,CAACqB,GAAG,CAAC,CAAA;AACxBD,MAAAA,IAAI,IAAIL,cAAc,CAACM,GAAG,CAAC,CAAA;AAC3BD,MAAAA,IAAI,IAAI,GAAG,CAAA;AACX,MAAA,IAAIE,KAAK,EAAEF,IAAI,IAAIL,cAAc,CAACO,KAAK,CAAC,CAAA;AACxCF,MAAAA,IAAI,IAAI,GAAG,CAAA;AACb,KAAA;AAEA,IAAA,OAAOA,IAAI,CAAA;GACZ,CAAA;EAED,IAAMG,gBAAgB,GAAIC,KAAa,IAAK;IAC1C,IAAMJ,IAAI,GAAG,EAAE,CAAA;IACf,IAAIK,IAAI,GAAG,EAAE,CAAA;IACb,IAAIJ,GAAG,GAAG,EAAE,CAAA;IACZ,IAAIL,KAAK,GAAG,EAAE,CAAA;IACd,IAAIU,IAAI,GAAG,CAAC,CAAA;IACZ,IAAIC,KAAK,GAAG,CAAC,CAAA;AACb,IAAA,OAAOA,KAAK,GAAGH,KAAK,CAACI,MAAM,EAAE;AAC3BZ,MAAAA,KAAK,GAAG,EAAE,CAAA;AACV,MAAA,OAAO,CAACS,IAAI,GAAGD,KAAK,CAACG,KAAK,EAAE,CAAC,MAAM,GAAG,IAAIF,IAAI,EAAE;AAC9CT,QAAAA,KAAK,IAAIS,IAAI,CAAA;AACf,OAAA;AAEA,MAAA,IAAIC,IAAI,EAAE;QACRN,IAAI,CAACC,GAAG,CAAC,GAAGH,gBAAgB,CAACF,KAAK,CAAC,IAAIa,SAAS,CAAA;AAChDH,QAAAA,IAAI,GAAG,CAAC,CAAA;AACV,OAAC,MAAM;AACLL,QAAAA,GAAG,GAAGH,gBAAgB,CAACF,KAAK,CAAC,CAAA;AAC7BU,QAAAA,IAAI,GAAG,CAAC,CAAA;AACV,OAAA;AACF,KAAA;AAEA,IAAA,OAAON,IAAI,CAAA;GACZ,CAAA;EAED,OAAO;AACLU,IAAAA,KAAKA,GAAG;AACN,MAAA,OAAOlB,SAAS,CAACmB,IAAI,CAACC,QAAQ,IAAI;AAChC,QAAA,IAAMzC,WAAW,GAAGyC,QAAQ,CAACzC,WAAW,CACtC,CAACQ,mBAAmB,EAAED,kBAAkB,CAAC,EACzC,WACF,CAAC,CAAA;QACDP,WAAW,CAAC0C,WAAW,CAAClC,mBAAmB,CAAC,CAAC+B,KAAK,EAAE,CAAA;QACpDvC,WAAW,CAAC0C,WAAW,CAACnC,kBAAkB,CAAC,CAACgC,KAAK,EAAE,CAAA;AACnD9B,QAAAA,KAAK,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC,CAAA;QAC3B,OAAOZ,qBAAqB,CAACC,WAAW,CAAC,CAAA;AAC3C,OAAC,CAAC,CAAA;KACH;AAED2C,IAAAA,YAAYA,GAAwC;AAClD,MAAA,OAAOtB,SAAS,CAACmB,IAAI,CACnBC,QAAQ,IAAI;QACV,OAAOnD,iBAAiB,CACtBmD,QAAQ,CACLzC,WAAW,CAACQ,mBAAmB,EAAE,UAAU,CAAC,CAC5CkC,WAAW,CAAClC,mBAAmB,CAAC,CAChCoC,GAAG,CAACpC,mBAAmB,CAC5B,CAAC,CAAA;OACF,EACD,MAAM,IACR,CAAC,CAAA;KACF;IAEDqC,aAAaA,CAACC,QAA6B,EAAE;AAC3CzB,MAAAA,SAAS,CAACmB,IAAI,CACZC,QAAQ,IAAI;QACV,OAAOnD,iBAAiB,CACtBmD,QAAQ,CACLzC,WAAW,CAACQ,mBAAmB,EAAE,WAAW,CAAC,CAC7CkC,WAAW,CAAClC,mBAAmB,CAAC,CAChCuC,GAAG,CAACD,QAAQ,EAAEtC,mBAAmB,CACtC,CAAC,CAAA;AACH,OAAC,EACD,MAAM;AACJ;AAAA,OAEJ,CAAC,CAAA;KACF;IAEDwC,SAASA,CAACC,OAA0B,EAAiB;AACnDvC,MAAAA,MAAM,CAACwC,MAAM,CAACzC,KAAK,EAAEwC,OAAO,CAAC,CAAA;AAC7B,MAAA,IAAME,WAAW,GAAGA,MAAMb,SAAS,CAAA;AAEnC,MAAA,OAAOjB,SAAS,CACbmB,IAAI,CAACC,QAAQ,IAAI;QAChB,OAAOnD,iBAAiB,CACtBmD,QAAQ,CACLzC,WAAW,CAACO,kBAAkB,EAAE,WAAW,CAAC,CAC5CmC,WAAW,CAACnC,kBAAkB,CAAC,CAC/BwC,GAAG,CAACnB,cAAc,EAAE,EAAEhB,SAAS,CACpC,CAAC,CAAA;AACH,OAAC,CAAC,CACD4B,IAAI,CAACW,WAAW,EAAEA,WAAW,CAAC,CAAA;KAClC;AAEDC,IAAAA,QAAQA,GAA+B;MACrC,IAAMC,MAAgB,GAAG,EAAE,CAAA;AAC3B,MAAA,OAAOhC,SAAS,CACbmB,IAAI,CAACC,QAAQ,IAAI;QAChB,IAAMzC,WAAW,GAAGyC,QAAQ,CAACzC,WAAW,CACtCO,kBAAkB,EAClB,WACF,CAAC,CAAA;AAED,QAAA,IAAM+C,KAAK,GAAGtD,WAAW,CAAC0C,WAAW,CAACnC,kBAAkB,CAAC,CAAA;AACzD,QAAA,IAAMhB,OAAO,GAAG,CAAC+D,KAAK,CAACC,aAAa,IAAID,KAAK,CAACE,UAAU,EAAEC,IAAI,CAACH,KAAK,CAAC,CAAA;QAErE/D,OAAO,CAACM,SAAS,GAAG,YAAY;UAC9B,IAAI,IAAI,CAACC,MAAM,EAAE;YACf,IAAM;AAAEgC,cAAAA,GAAAA;aAAK,GAAG,IAAI,CAAChC,MAAM,CAAA;YAC3B,IAAI,OAAOgC,GAAG,KAAK,QAAQ,IAAIA,GAAG,GAAGb,MAAM,EAAE;AAC3CqC,cAAAA,KAAK,CAACI,MAAM,CAAC5B,GAAG,CAAC,CAAA;AACnB,aAAC,MAAM;AACL,cAAA,IAAMvC,QAAO,GAAG+D,KAAK,CAACV,GAAG,CAACd,GAAG,CAAC,CAAA;AAC9B,cAAA,IAAMM,KAAK,GAAGiB,MAAM,CAAChB,MAAM,CAAA;AAC3BgB,cAAAA,MAAM,CAACM,IAAI,CAAC,EAAE,CAAC,CAAA;cACfpE,QAAO,CAACM,SAAS,GAAG,MAAM;AACxB,gBAAA,IAAMC,MAAM,GAAG,EAAE,GAAGP,QAAO,CAACO,MAAM,CAAA;AAClC,gBAAA,IAAIgC,GAAG,KAAKlB,SAAS,EACnBF,MAAM,CAACwC,MAAM,CAACzC,KAAK,EAAEuB,gBAAgB,CAAClC,MAAM,CAAC,CAAC,CAAA;AAChDuD,gBAAAA,MAAM,CAACjB,KAAK,CAAC,GAAGtC,MAAM,CAAA;eACvB,CAAA;AACH,aAAA;AAEA,YAAA,IAAI,CAACA,MAAM,CAAC8D,QAAQ,EAAE,CAAA;AACxB,WAAA;SACD,CAAA;QAED,OAAO7D,qBAAqB,CAACC,WAAW,CAAC,CAAA;AAC3C,OAAC,CAAC,CACDwC,IAAI,CACH,MAAMR,gBAAgB,CAACqB,MAAM,CAACQ,IAAI,CAAC,EAAE,CAAC,CAAC,EACvC,MAAMpD,KACR,CAAC,CAAA;KACJ;IACDqD,eAAe,EAAE3D,IAAI,CAAC2D,eAAe;IACrCC,QAAQA,CAACC,EAAc,EAAE;AACvB,MAAA,IAAI5D,QAAQ,EAAE;AACZ6D,QAAAA,MAAM,CAACC,mBAAmB,CAAC,QAAQ,EAAE9D,QAAQ,CAAC,CAAA;AAC9CA,QAAAA,QAAQ,GAAGkC,SAAS,CAAA;AACtB,OAAA;MAEA2B,MAAM,CAACE,gBAAgB,CACrB,QAAQ,EACP/D,QAAQ,GAAGA,MAAM;AAChB4D,QAAAA,EAAE,EAAE,CAAA;AACN,OACF,CAAC,CAAA;AACH,KAAA;GACD,CAAA;AACH;;;;"}