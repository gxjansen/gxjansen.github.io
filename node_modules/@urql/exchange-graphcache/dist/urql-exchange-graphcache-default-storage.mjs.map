{"version":3,"file":"urql-exchange-graphcache-default-storage.mjs","sources":["../src/default-storage/index.ts"],"sourcesContent":["import type {\n  SerializedEntries,\n  SerializedRequest,\n  StorageAdapter,\n} from '../types';\n\nconst getRequestPromise = <T>(request: IDBRequest<T>): Promise<T> => {\n  return new Promise((resolve, reject) => {\n    request.onerror = () => {\n      reject(request.error);\n    };\n\n    request.onsuccess = () => {\n      resolve(request.result);\n    };\n  });\n};\n\nconst getTransactionPromise = (transaction: IDBTransaction): Promise<any> => {\n  return new Promise((resolve, reject) => {\n    transaction.onerror = () => {\n      reject(transaction.error);\n    };\n\n    transaction.oncomplete = resolve;\n  });\n};\n\nexport interface StorageOptions {\n  /** Name of the IndexedDB database that will be used.\n   * @defaultValue `'graphcache-v4'`\n   */\n  idbName?: string;\n  /** Maximum age of cache entries (in days) after which data is discarded.\n   * @defaultValue `7` days\n   */\n  maxAge?: number;\n  /** Gets Called when the exchange has hydrated the data from storage. */\n  onCacheHydrated?: () => void;\n}\n\n/** Sample storage adapter persisting to IndexedDB. */\nexport interface DefaultStorage extends StorageAdapter {\n  /** Clears the entire IndexedDB storage. */\n  clear(): Promise<any>;\n}\n\n/** Creates a default {@link StorageAdapter} which uses IndexedDB for storage.\n *\n * @param opts - A {@link StorageOptions} configuration object.\n * @returns the created {@link StorageAdapter}.\n *\n * @remarks\n * The default storage uses IndexedDB to persist the normalized cache for\n * offline use. It demonstrates that the cache can be chunked by timestamps.\n *\n * Note: We have no data on stability of this storage and our Offline Support\n * for large APIs or longterm use. Proceed with caution.\n */\nexport const makeDefaultStorage = (opts?: StorageOptions): DefaultStorage => {\n  if (!opts) opts = {};\n\n  let callback: (() => void) | undefined;\n\n  const DB_NAME = opts.idbName || 'graphcache-v4';\n  const ENTRIES_STORE_NAME = 'entries';\n  const METADATA_STORE_NAME = 'metadata';\n\n  let batch: Record<string, string | undefined> = Object.create(null);\n  const timestamp = Math.floor(new Date().valueOf() / (1000 * 60 * 60 * 24));\n  const maxAge = timestamp - (opts.maxAge || 7);\n\n  const req = indexedDB.open(DB_NAME, 1);\n  const database$ = getRequestPromise(req);\n\n  req.onupgradeneeded = () => {\n    req.result.createObjectStore(ENTRIES_STORE_NAME);\n    req.result.createObjectStore(METADATA_STORE_NAME);\n  };\n\n  const serializeEntry = (entry: string): string => entry.replace(/:/g, '%3a');\n\n  const deserializeEntry = (entry: string): string =>\n    entry.replace(/%3a/g, ':');\n\n  const serializeBatch = (): string => {\n    let data = '';\n    for (const key in batch) {\n      const value = batch[key];\n      data += serializeEntry(key);\n      data += ':';\n      if (value) data += serializeEntry(value);\n      data += ':';\n    }\n\n    return data;\n  };\n\n  const deserializeBatch = (input: string) => {\n    const data = {};\n    let char = '';\n    let key = '';\n    let entry = '';\n    let mode = 0;\n    let index = 0;\n    while (index < input.length) {\n      entry = '';\n      while ((char = input[index++]) !== ':' && char) {\n        entry += char;\n      }\n\n      if (mode) {\n        data[key] = deserializeEntry(entry) || undefined;\n        mode = 0;\n      } else {\n        key = deserializeEntry(entry);\n        mode = 1;\n      }\n    }\n\n    return data;\n  };\n\n  return {\n    clear() {\n      return database$.then(database => {\n        const transaction = database.transaction(\n          [METADATA_STORE_NAME, ENTRIES_STORE_NAME],\n          'readwrite'\n        );\n        transaction.objectStore(METADATA_STORE_NAME).clear();\n        transaction.objectStore(ENTRIES_STORE_NAME).clear();\n        batch = Object.create(null);\n        return getTransactionPromise(transaction);\n      });\n    },\n\n    readMetadata(): Promise<null | SerializedRequest[]> {\n      return database$.then(\n        database => {\n          return getRequestPromise<SerializedRequest[]>(\n            database\n              .transaction(METADATA_STORE_NAME, 'readonly')\n              .objectStore(METADATA_STORE_NAME)\n              .get(METADATA_STORE_NAME)\n          );\n        },\n        () => null\n      );\n    },\n\n    writeMetadata(metadata: SerializedRequest[]) {\n      database$.then(\n        database => {\n          return getRequestPromise(\n            database\n              .transaction(METADATA_STORE_NAME, 'readwrite')\n              .objectStore(METADATA_STORE_NAME)\n              .put(metadata, METADATA_STORE_NAME)\n          );\n        },\n        () => {\n          /* noop */\n        }\n      );\n    },\n\n    writeData(entries: SerializedEntries): Promise<void> {\n      Object.assign(batch, entries);\n      const toUndefined = () => undefined;\n\n      return database$\n        .then(database => {\n          return getRequestPromise(\n            database\n              .transaction(ENTRIES_STORE_NAME, 'readwrite')\n              .objectStore(ENTRIES_STORE_NAME)\n              .put(serializeBatch(), timestamp)\n          );\n        })\n        .then(toUndefined, toUndefined);\n    },\n\n    readData(): Promise<SerializedEntries> {\n      const chunks: string[] = [];\n      return database$\n        .then(database => {\n          const transaction = database.transaction(\n            ENTRIES_STORE_NAME,\n            'readwrite'\n          );\n\n          const store = transaction.objectStore(ENTRIES_STORE_NAME);\n          const request = (store.openKeyCursor || store.openCursor).call(store);\n\n          request.onsuccess = function () {\n            if (this.result) {\n              const { key } = this.result;\n              if (typeof key !== 'number' || key < maxAge) {\n                store.delete(key);\n              } else {\n                const request = store.get(key);\n                const index = chunks.length;\n                chunks.push('');\n                request.onsuccess = () => {\n                  const result = '' + request.result;\n                  if (key === timestamp)\n                    Object.assign(batch, deserializeBatch(result));\n                  chunks[index] = result;\n                };\n              }\n\n              this.result.continue();\n            }\n          };\n\n          return getTransactionPromise(transaction);\n        })\n        .then(\n          () => deserializeBatch(chunks.join('')),\n          () => batch\n        );\n    },\n    onCacheHydrated: opts.onCacheHydrated,\n    onOnline(cb: () => void) {\n      if (callback) {\n        window.removeEventListener('online', callback);\n        callback = undefined;\n      }\n\n      window.addEventListener(\n        'online',\n        (callback = () => {\n          cb();\n        })\n      );\n    },\n  };\n};\n"],"names":["getRequestPromise","request","Promise","resolve","reject","onerror","error","onsuccess","result","getTransactionPromise","transaction","oncomplete","makeDefaultStorage","opts","callback","DB_NAME","idbName","ENTRIES_STORE_NAME","METADATA_STORE_NAME","batch","Object","create","timestamp","Math","floor","Date","valueOf","maxAge","req","indexedDB","open","database$","onupgradeneeded","createObjectStore","serializeEntry","entry","replace","deserializeEntry","deserializeBatch","input","data","char","key","mode","index","length","undefined","clear","then","database","objectStore","readMetadata","get","writeMetadata","metadata","put","writeData","entries","assign","toUndefined","serializeBatch","value","readData","chunks","store","openKeyCursor","openCursor","call","this","delete","push","continue","join","onCacheHydrated","onOnline","cb","window","removeEventListener","addEventListener"],"mappings":"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"}