'use strict';

/**
 * Returns a new function for checking *all* cases against a value, a bit
 * like `pipe` for predicates.
 */
function checkAll() {
  for (var _len = arguments.length, predicates = new Array(_len), _key = 0; _key < _len; _key++) {
    predicates[_key] = arguments[_key];
  }

  return function (value) {
    return predicates.every(function (p) {
      return p(value);
    });
  };
}
/** Apply *all* checks against a value. */

function checkAllWith(value) {
  for (var _len2 = arguments.length, predicates = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    predicates[_key2 - 1] = arguments[_key2];
  }

  return checkAll.apply(void 0, predicates)(value);
}
/** Returns a new negated version of the stated predicate function. */

function negate(predicate) {
  return function (value) {
    return !predicate(value);
  };
}

/** Checks whether a number is a finite */

var isFinite = Number.isFinite;
/** Checks whether a number is a infinite */

var isInfinite = negate(isFinite);
/** Checks whether a number is an integer */

var isInteger = Number.isInteger;
/** Checks whether a number is a float */

var isFloat = negate(isInteger);
/** Checks whether a number is even. */

var isEven = function isEven(value) {
  return value % 2 === 0;
};
/** Checks whether a number is odd. */

var isOdd = function isOdd(value) {
  return Math.abs(value % 2) === 1;
};
/** Checks whether a number is negative zero */

var isNegativeZero = function isNegativeZero(value) {
  return 1 / value === Number.NEGATIVE_INFINITY;
};
/** Checks whether a number is negative */

var isNegative = function isNegative(value) {
  return value < 0;
};
/** Checks whether a number is positive */

var isPositive = function isPositive(value) {
  return value > 0;
};
/** Checks whether a number is non-negative */

var isNonNegative = function isNonNegative(value) {
  return value >= 0;
};
/** Checks whether a number is non-positive */

var isNonPositive = function isNonPositive(value) {
  return value <= 0;
};

exports.checkAll = checkAll;
exports.checkAllWith = checkAllWith;
exports.isEven = isEven;
exports.isFinite = isFinite;
exports.isFloat = isFloat;
exports.isInfinite = isInfinite;
exports.isInteger = isInteger;
exports.isNegative = isNegative;
exports.isNegativeZero = isNegativeZero;
exports.isNonNegative = isNonNegative;
exports.isNonPositive = isNonPositive;
exports.isOdd = isOdd;
exports.isPositive = isPositive;
exports.negate = negate;
