/// <reference lib="es2020.promise" />
import { Nullish } from "./types.js";
/** Checks whether a value is a boolean */
export declare function isBoolean(value: unknown): value is boolean;
/** Checks whether a value is null */
export declare function isNull(value: unknown): value is null;
/** Checks whether a value is a number */
export declare function isNumber(value: unknown): value is number;
/** Checks whether a value is a string */
export declare function isString(value: unknown): value is string;
/** Checks whether a value is undefined */
export declare function isUndefined(value: unknown): value is undefined;
/** Checks whether or not an array is empty. */
export declare function isNonEmptyArray<T>(value: readonly T[]): value is [T, ...T[]];
/** Checks whether a value is null or undefined */
export declare function isNullish(value: unknown): value is Nullish;
/** Checks whether a value is defined */
export declare function isDefined<T>(value: T): value is NonNullable<T>;
/**
 * Checks whether a result from `Promise.allSettled` is fulfilled
 *
 * ```ts
 * const results = await Promise.allSettled(promises);
 * const fulfilledValues = results.filter(isFulfilled).map(result => result.value);
 * ```
 */
export declare function isFulfilled<T>(result: PromiseSettledResult<T>): result is PromiseFulfilledResult<T>;
/**
 * Checks whether a result from `Promise.allSettled` is rejected
 *
 * ```ts
 * const results = await Promise.allSettled(promises);
 * const rejectionReasons = results.filter(isRejected).map(result => result.reason);
 * ```
 */
export declare function isRejected(result: PromiseSettledResult<unknown>): result is PromiseRejectedResult;
//# sourceMappingURL=guards.d.ts.map