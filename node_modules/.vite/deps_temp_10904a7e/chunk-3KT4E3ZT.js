import {
  FieldDataError,
  NumberField,
  assertRequired,
  basicFormFieldWithSimpleReaderParse
} from "./chunk-CGMUFSJF.js";
import {
  require_jsx_runtime
} from "./chunk-QRIEPQWS.js";
import {
  require_react
} from "./chunk-VJA5E53X.js";
import {
  __toESM
} from "./chunk-SNAQBZPT.js";

// node_modules/@keystatic/core/dist/index-4fcf9271.js
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
function validateInteger(validation, value, label) {
  if (value !== null && (typeof value !== "number" || !Number.isInteger(value))) {
    return `${label} must be a whole number`;
  }
  if (validation !== null && validation !== void 0 && validation.isRequired && value === null) {
    return `${label} is required`;
  }
  if (value !== null) {
    if ((validation === null || validation === void 0 ? void 0 : validation.min) !== void 0 && value < validation.min) {
      return `${label} must be at least ${validation.min}`;
    }
    if ((validation === null || validation === void 0 ? void 0 : validation.max) !== void 0 && value > validation.max) {
      return `${label} must be at most ${validation.max}`;
    }
  }
}
function IntegerFieldInput(props) {
  var _props$validation;
  const [blurred, onBlur] = (0, import_react.useReducer)(() => true, false);
  return (0, import_jsx_runtime.jsx)(NumberField, {
    label: props.label,
    description: props.description,
    isRequired: (_props$validation = props.validation) === null || _props$validation === void 0 ? void 0 : _props$validation.isRequired,
    errorMessage: props.forceValidation || blurred ? validateInteger(props.validation, props.value, props.label) : void 0,
    onBlur,
    autoFocus: props.autoFocus,
    value: props.value === null ? void 0 : props.value,
    onChange: (val) => {
      props.onChange(val === void 0 ? null : val);
    }
  });
}
function integer({
  label,
  defaultValue,
  validation,
  description
}) {
  return basicFormFieldWithSimpleReaderParse({
    label,
    Input(props) {
      return (0, import_jsx_runtime.jsx)(IntegerFieldInput, {
        label,
        description,
        validation,
        ...props
      });
    },
    defaultValue() {
      return defaultValue !== null && defaultValue !== void 0 ? defaultValue : null;
    },
    parse(value) {
      if (value === void 0) {
        return null;
      }
      if (typeof value === "number") {
        return value;
      }
      throw new FieldDataError("Must be a number");
    },
    validate(value) {
      const message = validateInteger(validation, value, label);
      if (message !== void 0) {
        throw new FieldDataError(message);
      }
      assertRequired(value, validation, label);
      return value;
    },
    serialize(value) {
      return {
        value: value === null ? void 0 : value
      };
    }
  });
}

export {
  integer
};
//# sourceMappingURL=chunk-3KT4E3ZT.js.map
