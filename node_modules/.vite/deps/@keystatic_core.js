import {
  integer
} from "./chunk-PWEFCNFI.js";
import {
  $c1d7fb2ec91bae71$export$6d08773d2e66f8f2,
  ArrayFieldListView,
  BlockWrapper$1,
  Checkbox,
  FormValueContentFromPreviewProps,
  ImageFieldInput,
  MenuTrigger,
  ToolbarSeparator,
  _ActionBar,
  _ActionBarContainer,
  _Combobox,
  _ListView,
  _Menu,
  _Picker,
  clientSideValidateProp,
  collection,
  config,
  createGetPreviewProps,
  document$1,
  filter,
  getInitialPropsValue,
  getSrcPrefix,
  getUploadedFile,
  isValidURL$1,
  markdoc,
  mdx,
  move,
  pluralize,
  refreshCwIcon,
  require_dist as require_dist2,
  require_escape_string_regexp,
  require_lib,
  require_slugify,
  singleton,
  strings,
  useArrayFieldValidationMessage,
  useFieldSpan,
  useIsInDocumentEditor,
  useObjectURL,
  useSlugsInCollection,
  valueToUpdater
} from "./chunk-O347IA5V.js";
import {
  $2baaea4c71418dea$export$294aa081a6c6f55d,
  $fca6afa0e843324b$export$f12b703ca79dfbb1,
  ActionButton,
  Box,
  Button,
  ButtonGroup,
  ClearButton,
  Content,
  Dialog,
  DialogContainer,
  FieldDataError,
  FieldLabel,
  FieldMessage,
  Flex,
  Heading,
  Icon,
  ImageDimensionsInput,
  NotEditable,
  NumberField,
  PathContext,
  ProgressCircle,
  SlugFieldContext,
  Text,
  TextArea,
  TextField,
  TextLink,
  UploadImageButton,
  VStack,
  assertRequired,
  basicFormFieldWithSimpleReaderParse,
  c,
  containerQueries,
  css,
  emptyImageData,
  fixPath,
  imageIcon,
  isString,
  loadImageData,
  object,
  parseImageData,
  text,
  tokenSchema,
  trash2Icon,
  useConfig,
  useDialogContainer,
  useDragAndDrop,
  useEventCallback,
  useImageLibraryURL,
  useTree,
  validateText
} from "./chunk-XHUR5DH2.js";
import {
  require_dist
} from "./chunk-OORZSDVZ.js";
import {
  require_jsx_runtime
} from "./chunk-QRIEPQWS.js";
import {
  require_react_dom
} from "./chunk-XQLYTHWV.js";
import {
  require_react
} from "./chunk-VJA5E53X.js";
import {
  __toESM
} from "./chunk-SNAQBZPT.js";

// node_modules/@keystatic/core/dist/api-362efc2c.js
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_sanitize_url = __toESM(require_dist2(), 1);
var import_slugify = __toESM(require_slugify(), 1);
function component(options) {
  return options;
}

// node_modules/@keystatic/core/dist/keystatic-core.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var import_react2 = __toESM(require_react());
var import_sanitize_url2 = __toESM(require_dist2());
var import_slugify2 = __toESM(require_slugify());
var import_is_hotkey = __toESM(require_lib());
var import_react_dom = __toESM(require_react_dom());
var import_escape_string_regexp = __toESM(require_escape_string_regexp());
var import_cookie = __toESM(require_dist());
function array(element, opts) {
  var _opts$label;
  return {
    kind: "array",
    element,
    label: (_opts$label = opts === null || opts === void 0 ? void 0 : opts.label) !== null && _opts$label !== void 0 ? _opts$label : "Items",
    description: opts === null || opts === void 0 ? void 0 : opts.description,
    itemLabel: opts === null || opts === void 0 ? void 0 : opts.itemLabel,
    asChildTag: opts === null || opts === void 0 ? void 0 : opts.asChildTag,
    slugField: opts === null || opts === void 0 ? void 0 : opts.slugField,
    validation: opts === null || opts === void 0 ? void 0 : opts.validation
  };
}
function SelectFieldInput(props) {
  const $ = c(13);
  const fieldSpan = useFieldSpan();
  let t0;
  if ($[0] !== props) {
    t0 = (key) => {
      props.onChange(key);
    };
    $[0] = props;
    $[1] = t0;
  } else {
    t0 = $[1];
  }
  const t1 = fieldSpan === 12 ? "alias.singleLineWidth" : "auto";
  let t2;
  if ($[2] !== t1) {
    t2 = {
      mobile: "auto",
      tablet: t1
    };
    $[2] = t1;
    $[3] = t2;
  } else {
    t2 = $[3];
  }
  let t3;
  if ($[4] === Symbol.for("react.memo_cache_sentinel")) {
    t3 = (item) => (0, import_jsx_runtime2.jsx)($c1d7fb2ec91bae71$export$6d08773d2e66f8f2, {
      children: item.label
    }, item.value);
    $[4] = t3;
  } else {
    t3 = $[4];
  }
  let t4;
  if ($[5] !== props.label || $[6] !== props.description || $[7] !== props.options || $[8] !== props.value || $[9] !== props.autoFocus || $[10] !== t0 || $[11] !== t2) {
    t4 = (0, import_jsx_runtime2.jsx)(_Picker, {
      label: props.label,
      description: props.description,
      items: props.options,
      selectedKey: props.value,
      onSelectionChange: t0,
      autoFocus: props.autoFocus,
      width: t2,
      children: t3
    });
    $[5] = props.label;
    $[6] = props.description;
    $[7] = props.options;
    $[8] = props.value;
    $[9] = props.autoFocus;
    $[10] = t0;
    $[11] = t2;
    $[12] = t4;
  } else {
    t4 = $[12];
  }
  return t4;
}
function select({
  label,
  options,
  defaultValue,
  description
}) {
  const optionValuesSet = new Set(options.map((x) => x.value));
  if (!optionValuesSet.has(defaultValue)) {
    throw new Error(`A defaultValue of ${defaultValue} was provided to a select field but it does not match the value of one of the options provided`);
  }
  const field = basicFormFieldWithSimpleReaderParse({
    label,
    Input(props) {
      return (0, import_jsx_runtime2.jsx)(SelectFieldInput, {
        label,
        options,
        description,
        ...props
      });
    },
    defaultValue() {
      return defaultValue;
    },
    parse(value) {
      if (value === void 0) {
        return defaultValue;
      }
      if (typeof value !== "string") {
        throw new FieldDataError("Must be a string");
      }
      if (!optionValuesSet.has(value)) {
        throw new FieldDataError("Must be a valid option");
      }
      return value;
    },
    validate(value) {
      return value;
    },
    serialize(value) {
      return {
        value
      };
    }
  });
  return {
    ...field,
    options
  };
}
function BlocksFieldInput(props) {
  var _props$schema$validat, _props$schema$validat2;
  const $ = c(77);
  let t0;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    t0 = {
      kind: "closed"
    };
    $[0] = t0;
  } else {
    t0 = $[0];
  }
  const [modalState, setModalState] = (0, import_react2.useState)(t0);
  let t1;
  if ($[1] === Symbol.for("react.memo_cache_sentinel")) {
    t1 = () => {
      setModalState({
        kind: "closed"
      });
    };
    $[1] = t1;
  } else {
    t1 = $[1];
  }
  const dismiss = t1;
  const minLength = (_props$schema$validat = (_props$schema$validat2 = props.schema.validation) === null || _props$schema$validat2 === void 0 || (_props$schema$validat2 = _props$schema$validat2.length) === null || _props$schema$validat2 === void 0 ? void 0 : _props$schema$validat2.min) !== null && _props$schema$validat !== void 0 ? _props$schema$validat : 0;
  const formId = (0, import_react2.useId)();
  const stringFormatter = $fca6afa0e843324b$export$f12b703ca79dfbb1(strings);
  const errorMessage = useArrayFieldValidationMessage(props);
  const t2 = !!errorMessage;
  let t3;
  if ($[2] !== props.schema.description || $[3] !== props.schema.label || $[4] !== errorMessage || $[5] !== t2) {
    t3 = {
      description: props.schema.description,
      errorMessage,
      isInvalid: t2,
      label: props.schema.label,
      labelElementType: "span"
    };
    $[2] = props.schema.description;
    $[3] = props.schema.label;
    $[4] = errorMessage;
    $[5] = t2;
    $[6] = t3;
  } else {
    t3 = $[6];
  }
  const {
    descriptionProps,
    errorMessageProps,
    fieldProps: groupProps,
    labelProps
  } = $2baaea4c71418dea$export$294aa081a6c6f55d(t3);
  const t4 = minLength > 0;
  let t5;
  if ($[7] !== t4 || $[8] !== labelProps || $[9] !== props.schema.label) {
    t5 = (0, import_jsx_runtime2.jsx)(FieldLabel, {
      elementType: "span",
      isRequired: t4,
      supplementRequiredState: true,
      ...labelProps,
      children: props.schema.label
    });
    $[7] = t4;
    $[8] = labelProps;
    $[9] = props.schema.label;
    $[10] = t5;
  } else {
    t5 = $[10];
  }
  let t6;
  if ($[11] !== props.schema.description || $[12] !== descriptionProps) {
    t6 = props.schema.description && (0, import_jsx_runtime2.jsx)(Text, {
      size: "small",
      color: "neutralSecondary",
      ...descriptionProps,
      children: props.schema.description
    });
    $[11] = props.schema.description;
    $[12] = descriptionProps;
    $[13] = t6;
  } else {
    t6 = $[13];
  }
  let t7;
  if ($[14] === Symbol.for("react.memo_cache_sentinel")) {
    t7 = (0, import_jsx_runtime2.jsx)(ActionButton, {
      alignSelf: "start",
      children: "Add"
    });
    $[14] = t7;
  } else {
    t7 = $[14];
  }
  let t8;
  if ($[15] !== props.schema.element.discriminant.options) {
    t8 = (discriminant) => {
      var _props$schema$element;
      const val = (_props$schema$element = props.schema.element.discriminant.options.find((x) => x.value.toString() === discriminant.toString())) === null || _props$schema$element === void 0 ? void 0 : _props$schema$element.value;
      if (val === void 0) {
        return;
      }
      setModalState({
        kind: "new",
        discriminant: val
      });
    };
    $[15] = props.schema.element.discriminant.options;
    $[16] = t8;
  } else {
    t8 = $[16];
  }
  let t9;
  if ($[17] === Symbol.for("react.memo_cache_sentinel")) {
    t9 = (item) => (0, import_jsx_runtime2.jsx)($c1d7fb2ec91bae71$export$6d08773d2e66f8f2, {
      children: item.label
    }, item.value.toString());
    $[17] = t9;
  } else {
    t9 = $[17];
  }
  let t10;
  if ($[18] !== props.schema.element.discriminant.options || $[19] !== t8) {
    t10 = (0, import_jsx_runtime2.jsxs)(MenuTrigger, {
      children: [t7, (0, import_jsx_runtime2.jsx)(_Menu, {
        items: props.schema.element.discriminant.options,
        onAction: t8,
        children: t9
      })]
    });
    $[18] = props.schema.element.discriminant.options;
    $[19] = t8;
    $[20] = t10;
  } else {
    t10 = $[20];
  }
  let t11;
  if ($[21] === Symbol.for("react.memo_cache_sentinel")) {
    t11 = (idx) => {
      setModalState({
        kind: "edit",
        idx
      });
    };
    $[21] = t11;
  } else {
    t11 = $[21];
  }
  let t12;
  if ($[22] !== props) {
    t12 = (0, import_jsx_runtime2.jsx)(ArrayFieldListView, {
      ...props,
      "aria-label": props.schema.label,
      onOpenItem: t11
    });
    $[22] = props;
    $[23] = t12;
  } else {
    t12 = $[23];
  }
  let t13;
  if ($[24] !== errorMessage || $[25] !== errorMessageProps) {
    t13 = errorMessage && (0, import_jsx_runtime2.jsx)(FieldMessage, {
      ...errorMessageProps,
      children: errorMessage
    });
    $[24] = errorMessage;
    $[25] = errorMessageProps;
    $[26] = t13;
  } else {
    t13 = $[26];
  }
  let t14;
  bb0: {
    if (modalState.kind === "closed") {
      t14 = null;
      break bb0;
    }
    if (modalState.kind === "edit") {
      const idx_0 = modalState.idx;
      const previewProps = props.elements[idx_0].value;
      const {
        discriminant: discriminant_0
      } = props.elements[idx_0];
      let t153;
      if ($[27] !== discriminant_0 || $[28] !== props.schema.element.discriminant.options) {
        var _props$schema$element2;
        t153 = (_props$schema$element2 = props.schema.element.discriminant.options.find((x_0) => x_0.value === discriminant_0)) === null || _props$schema$element2 === void 0 ? void 0 : _props$schema$element2.label;
        $[27] = discriminant_0;
        $[28] = props.schema.element.discriminant.options;
        $[29] = t153;
      } else {
        t153 = $[29];
      }
      let t163;
      if ($[30] !== t153) {
        t163 = (0, import_jsx_runtime2.jsxs)(Heading, {
          children: ["Edit", " ", t153]
        });
        $[30] = t153;
        $[31] = t163;
      } else {
        t163 = $[31];
      }
      let t172;
      if ($[32] !== formId || $[33] !== previewProps || $[34] !== idx_0) {
        t172 = (0, import_jsx_runtime2.jsx)(BlocksEditItemModalContent, {
          formId,
          onClose: dismiss,
          previewProps,
          modalStateIndex: idx_0
        });
        $[32] = formId;
        $[33] = previewProps;
        $[34] = idx_0;
        $[35] = t172;
      } else {
        t172 = $[35];
      }
      let t182;
      if ($[36] !== formId) {
        t182 = (0, import_jsx_runtime2.jsx)(ButtonGroup, {
          children: (0, import_jsx_runtime2.jsx)(Button, {
            form: formId,
            prominence: "high",
            type: "submit",
            children: "Done"
          })
        });
        $[36] = formId;
        $[37] = t182;
      } else {
        t182 = $[37];
      }
      let t192;
      if ($[38] !== t163 || $[39] !== t172 || $[40] !== t182) {
        t192 = (0, import_jsx_runtime2.jsxs)(Dialog, {
          children: [t163, t172, t182]
        });
        $[38] = t163;
        $[39] = t172;
        $[40] = t182;
        $[41] = t192;
      } else {
        t192 = $[41];
      }
      t14 = t192;
      break bb0;
    }
    const discriminant_1 = modalState.discriminant;
    let t152;
    if ($[42] !== discriminant_1 || $[43] !== props.schema.element.discriminant.options) {
      var _props$schema$element3;
      t152 = (_props$schema$element3 = props.schema.element.discriminant.options.find((x_1) => x_1.value === discriminant_1)) === null || _props$schema$element3 === void 0 ? void 0 : _props$schema$element3.label;
      $[42] = discriminant_1;
      $[43] = props.schema.element.discriminant.options;
      $[44] = t152;
    } else {
      t152 = $[44];
    }
    let t162;
    if ($[45] !== t152) {
      t162 = (0, import_jsx_runtime2.jsxs)(Heading, {
        children: ["Add", " ", t152]
      });
      $[45] = t152;
      $[46] = t162;
    } else {
      t162 = $[46];
    }
    let t17;
    if ($[47] !== discriminant_1 || $[48] !== formId || $[49] !== props) {
      t17 = (0, import_jsx_runtime2.jsx)(Content, {
        children: (0, import_jsx_runtime2.jsx)(BlocksAddItemModalContent, {
          discriminant: discriminant_1,
          formId,
          previewProps: props
        })
      });
      $[47] = discriminant_1;
      $[48] = formId;
      $[49] = props;
      $[50] = t17;
    } else {
      t17 = $[50];
    }
    let t18;
    if ($[51] !== stringFormatter) {
      t18 = stringFormatter.format("cancel");
      $[51] = stringFormatter;
      $[52] = t18;
    } else {
      t18 = $[52];
    }
    let t19;
    if ($[53] !== t18) {
      t19 = (0, import_jsx_runtime2.jsx)(Button, {
        onPress: dismiss,
        children: t18
      });
      $[53] = t18;
      $[54] = t19;
    } else {
      t19 = $[54];
    }
    let t20;
    if ($[55] !== stringFormatter) {
      t20 = stringFormatter.format("add");
      $[55] = stringFormatter;
      $[56] = t20;
    } else {
      t20 = $[56];
    }
    let t21;
    if ($[57] !== formId || $[58] !== t20) {
      t21 = (0, import_jsx_runtime2.jsx)(Button, {
        form: formId,
        prominence: "high",
        type: "submit",
        children: t20
      });
      $[57] = formId;
      $[58] = t20;
      $[59] = t21;
    } else {
      t21 = $[59];
    }
    let t22;
    if ($[60] !== t19 || $[61] !== t21) {
      t22 = (0, import_jsx_runtime2.jsxs)(ButtonGroup, {
        children: [t19, t21]
      });
      $[60] = t19;
      $[61] = t21;
      $[62] = t22;
    } else {
      t22 = $[62];
    }
    let t23;
    if ($[63] !== t162 || $[64] !== t17 || $[65] !== t22) {
      t23 = (0, import_jsx_runtime2.jsxs)(Dialog, {
        children: [t162, t17, t22]
      });
      $[63] = t162;
      $[64] = t17;
      $[65] = t22;
      $[66] = t23;
    } else {
      t23 = $[66];
    }
    t14 = t23;
  }
  let t15;
  if ($[67] !== t14) {
    t15 = (0, import_jsx_runtime2.jsx)(DialogContainer, {
      onDismiss: dismiss,
      children: t14
    });
    $[67] = t14;
    $[68] = t15;
  } else {
    t15 = $[68];
  }
  let t16;
  if ($[69] !== groupProps || $[70] !== t5 || $[71] !== t6 || $[72] !== t10 || $[73] !== t12 || $[74] !== t13 || $[75] !== t15) {
    t16 = (0, import_jsx_runtime2.jsxs)(VStack, {
      gap: "medium",
      role: "group",
      minWidth: 0,
      ...groupProps,
      children: [t5, t6, t10, t12, t13, t15]
    });
    $[69] = groupProps;
    $[70] = t5;
    $[71] = t6;
    $[72] = t10;
    $[73] = t12;
    $[74] = t13;
    $[75] = t15;
    $[76] = t16;
  } else {
    t16 = $[76];
  }
  return t16;
}
function BlocksEditItemModalContent(props) {
  const $ = c(8);
  let t0;
  if ($[0] !== props) {
    t0 = (event) => {
      if (event.target !== event.currentTarget) {
        return;
      }
      event.preventDefault();
      props.onClose();
    };
    $[0] = props;
    $[1] = t0;
  } else {
    t0 = $[1];
  }
  let t1;
  if ($[2] !== props.previewProps) {
    t1 = (0, import_jsx_runtime2.jsx)(FormValueContentFromPreviewProps, {
      autoFocus: true,
      ...props.previewProps
    });
    $[2] = props.previewProps;
    $[3] = t1;
  } else {
    t1 = $[3];
  }
  let t2;
  if ($[4] !== props.formId || $[5] !== t0 || $[6] !== t1) {
    t2 = (0, import_jsx_runtime2.jsx)(Content, {
      children: (0, import_jsx_runtime2.jsx)(VStack, {
        id: props.formId,
        elementType: "form",
        onSubmit: t0,
        gap: "xxlarge",
        children: t1
      })
    });
    $[4] = props.formId;
    $[5] = t0;
    $[6] = t1;
    $[7] = t2;
  } else {
    t2 = $[7];
  }
  return t2;
}
function BlocksAddItemModalContent(props) {
  const schema = props.previewProps.schema.element.values[props.discriminant.toString()];
  const [value, setValue] = (0, import_react2.useState)(() => getInitialPropsValue(schema));
  const [forceValidation, setForceValidation] = (0, import_react2.useState)(false);
  const previewProps = (0, import_react2.useMemo)(() => createGetPreviewProps(schema, setValue, () => void 0), [schema, setValue])(value);
  const {
    dismiss
  } = useDialogContainer();
  return (0, import_jsx_runtime2.jsx)(VStack, {
    id: props.formId,
    elementType: "form",
    onSubmit: (event) => {
      if (event.target !== event.currentTarget) return;
      event.preventDefault();
      if (!clientSideValidateProp(schema, value, void 0)) {
        setForceValidation(true);
        return;
      }
      props.previewProps.onChange([...props.previewProps.elements.map((x) => ({
        key: x.key
      })), {
        key: void 0,
        value: valueToUpdater({
          value,
          discriminant: props.discriminant
        }, props.previewProps.schema.element)
      }]);
      dismiss();
    },
    gap: "xxlarge",
    children: (0, import_jsx_runtime2.jsx)(FormValueContentFromPreviewProps, {
      forceValidation,
      autoFocus: true,
      ...previewProps
    })
  });
}
function blocks(blocks2, opts) {
  const entries = Object.entries(blocks2);
  if (!entries.length) {
    throw new Error("fields.blocks must have at least one entry");
  }
  const select$1 = select({
    label: "Kind",
    defaultValue: entries[0][0],
    options: Object.entries(blocks2).map(([key, {
      label
    }]) => ({
      label,
      value: key
    }))
  });
  const element = conditional(select$1, Object.fromEntries(entries.map(([key, {
    schema
  }]) => [key, schema])));
  return {
    ...array(element, {
      label: opts.label,
      description: opts.description,
      validation: opts.validation,
      itemLabel(props) {
        const kind = props.discriminant;
        const block = blocks2[kind];
        if (!block.itemLabel) return block.label;
        return block.itemLabel(props.value);
      }
    }),
    Input: BlocksFieldInput
  };
}
function CheckboxFieldInput(props) {
  const $ = c(10);
  let t0;
  if ($[0] !== props.label) {
    t0 = (0, import_jsx_runtime2.jsx)(Text, {
      children: props.label
    });
    $[0] = props.label;
    $[1] = t0;
  } else {
    t0 = $[1];
  }
  let t1;
  if ($[2] !== props.description) {
    t1 = props.description && (0, import_jsx_runtime2.jsx)(Text, {
      slot: "description",
      children: props.description
    });
    $[2] = props.description;
    $[3] = t1;
  } else {
    t1 = $[3];
  }
  let t2;
  if ($[4] !== props.value || $[5] !== props.onChange || $[6] !== props.autoFocus || $[7] !== t0 || $[8] !== t1) {
    t2 = (0, import_jsx_runtime2.jsxs)(Checkbox, {
      isSelected: props.value,
      onChange: props.onChange,
      autoFocus: props.autoFocus,
      children: [t0, t1]
    });
    $[4] = props.value;
    $[5] = props.onChange;
    $[6] = props.autoFocus;
    $[7] = t0;
    $[8] = t1;
    $[9] = t2;
  } else {
    t2 = $[9];
  }
  return t2;
}
function checkbox({
  label,
  defaultValue = false,
  description
}) {
  return basicFormFieldWithSimpleReaderParse({
    label,
    Input(props) {
      return (0, import_jsx_runtime2.jsx)(CheckboxFieldInput, {
        ...props,
        label,
        description
      });
    },
    defaultValue() {
      return defaultValue;
    },
    parse(value) {
      if (value === void 0) return defaultValue;
      if (typeof value !== "boolean") {
        throw new FieldDataError("Must be a boolean");
      }
      return value;
    },
    validate(value) {
      return value;
    },
    serialize(value) {
      return {
        value
      };
    }
  });
}
function child(options) {
  return {
    kind: "child",
    options: options.kind === "block" ? {
      ...options,
      dividers: options.dividers,
      formatting: options.formatting === "inherit" ? {
        blockTypes: "inherit",
        headingLevels: "inherit",
        inlineMarks: "inherit",
        listTypes: "inherit",
        alignment: "inherit",
        softBreaks: "inherit"
      } : options.formatting,
      links: options.links,
      images: options.images,
      tables: options.tables,
      componentBlocks: options.componentBlocks
    } : {
      kind: "inline",
      placeholder: options.placeholder,
      formatting: options.formatting === "inherit" ? {
        inlineMarks: "inherit",
        softBreaks: "inherit"
      } : options.formatting,
      links: options.links
    }
  };
}
function ImageField(props) {
  const $ = c(41);
  const {
    image: image2,
    onChange
  } = props;
  const [status, setStatus] = (0, import_react2.useState)(image2.src ? "good" : "");
  const imageLibraryURL = useImageLibraryURL();
  let t0;
  if ($[0] !== props) {
    t0 = (event) => {
      event.preventDefault();
      const text2 = event.clipboardData.getData("text/plain");
      const parsed = parseImageData(text2);
      props.onChange(parsed);
    };
    $[0] = props;
    $[1] = t0;
  } else {
    t0 = $[1];
  }
  const onPaste = t0;
  let t1;
  if ($[2] !== onChange) {
    t1 = (data) => {
      onChange(data);
      setStatus("good");
    };
    $[2] = onChange;
    $[3] = t1;
  } else {
    t1 = $[3];
  }
  const onLoad = useEventCallback(t1);
  const config2 = useConfig();
  const hasSetFields = !!(props.image.alt || props.image.width || props.image.height);
  let t2;
  let t3;
  if ($[4] !== props.image.src || $[5] !== hasSetFields || $[6] !== config2 || $[7] !== onLoad) {
    t2 = () => {
      if (!props.image.src) {
        setStatus("");
        return;
      }
      if (!isValidURL$1(props.image.src)) {
        return;
      }
      if (hasSetFields) {
        setStatus("good");
        return;
      }
      setStatus("loading");
      loadImageData(props.image.src, config2).then((newData) => {
        onLoad(newData);
      }).catch(() => {
        setStatus("error");
      });
    };
    t3 = [config2, hasSetFields, onLoad, props.image.src];
    $[4] = props.image.src;
    $[5] = hasSetFields;
    $[6] = config2;
    $[7] = onLoad;
    $[8] = t2;
    $[9] = t3;
  } else {
    t2 = $[8];
    t3 = $[9];
  }
  (0, import_react2.useEffect)(t2, t3);
  const [blurred, setBlurred] = (0, import_react2.useState)(false);
  const errorMessage = (blurred || props.forceValidation) && props.isRequired && !image2.src ? "Image URL is required." : void 0;
  let t4;
  if ($[10] !== props) {
    t4 = (e) => {
      if (e.code === "Backspace" || e.code === "Delete") {
        props.onChange(emptyImageData);
      }
    };
    $[10] = props;
    $[11] = t4;
  } else {
    t4 = $[11];
  }
  let t5;
  if ($[12] === Symbol.for("react.memo_cache_sentinel")) {
    t5 = () => setBlurred(true);
    $[12] = t5;
  } else {
    t5 = $[12];
  }
  let t6;
  if ($[13] !== imageLibraryURL) {
    t6 = (0, import_jsx_runtime2.jsxs)(Text, {
      children: ["Upload an image, or copy a URL from the", " ", (0, import_jsx_runtime2.jsx)(TextLink, {
        prominence: "high",
        href: imageLibraryURL,
        target: "_blank",
        rel: "noreferrer",
        children: "Image Library"
      }), " ", "and paste it into this field."]
    });
    $[13] = imageLibraryURL;
    $[14] = t6;
  } else {
    t6 = $[14];
  }
  let t7;
  if ($[15] !== status || $[16] !== image2 || $[17] !== props) {
    t7 = status === "loading" ? (0, import_jsx_runtime2.jsx)(Flex, {
      height: "element.regular",
      width: "element.regular",
      alignItems: "center",
      justifyContent: "center",
      children: (0, import_jsx_runtime2.jsx)(ProgressCircle, {
        size: "small",
        "aria-label": "Checking…",
        isIndeterminate: true
      })
    }) : image2.src ? (0, import_jsx_runtime2.jsx)(ClearButton, {
      onPress: () => {
        props.onChange(emptyImageData);
        setStatus("");
      },
      preventFocus: true
    }) : null;
    $[15] = status;
    $[16] = image2;
    $[17] = props;
    $[18] = t7;
  } else {
    t7 = $[18];
  }
  let t8;
  if ($[19] !== props.isRequired || $[20] !== props.autoFocus || $[21] !== errorMessage || $[22] !== onPaste || $[23] !== t4 || $[24] !== image2.src || $[25] !== t6 || $[26] !== t7) {
    t8 = (0, import_jsx_runtime2.jsx)(TextField, {
      label: "Image URL",
      isRequired: props.isRequired,
      errorMessage,
      autoFocus: props.autoFocus,
      onPaste,
      onKeyDown: t4,
      onBlur: t5,
      value: image2.src,
      description: t6,
      endElement: t7
    });
    $[19] = props.isRequired;
    $[20] = props.autoFocus;
    $[21] = errorMessage;
    $[22] = onPaste;
    $[23] = t4;
    $[24] = image2.src;
    $[25] = t6;
    $[26] = t7;
    $[27] = t8;
  } else {
    t8 = $[27];
  }
  let t9;
  if ($[28] !== onChange) {
    t9 = (0, import_jsx_runtime2.jsx)(UploadImageButton, {
      alignSelf: "start",
      onUploaded: (data_0) => {
        onChange(data_0);
      }
    });
    $[28] = onChange;
    $[29] = t9;
  } else {
    t9 = $[29];
  }
  let t10;
  if ($[30] !== t8 || $[31] !== t9) {
    t10 = (0, import_jsx_runtime2.jsxs)(VStack, {
      gap: "medium",
      children: [t8, t9]
    });
    $[30] = t8;
    $[31] = t9;
    $[32] = t10;
  } else {
    t10 = $[32];
  }
  let t11;
  if ($[33] !== status || $[34] !== image2 || $[35] !== props || $[36] !== onChange) {
    t11 = status === "good" ? (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, {
      children: [(0, import_jsx_runtime2.jsx)(Box, {
        alignSelf: "start",
        backgroundColor: "canvas",
        borderRadius: "regular",
        border: "neutral",
        padding: "regular",
        children: (0, import_jsx_runtime2.jsx)("img", {
          alt: image2.alt,
          src: image2.src,
          style: {
            display: "block",
            maxHeight: tokenSchema.size.alias.singleLineWidth,
            maxWidth: "100%"
          }
        })
      }), (0, import_jsx_runtime2.jsx)(TextArea, {
        label: "Alt text",
        value: image2.alt,
        onChange: (alt) => props.onChange({
          ...image2,
          alt
        })
      }), (0, import_jsx_runtime2.jsx)(ImageDimensionsInput, {
        src: image2.src,
        image: image2,
        onChange: (dimensions) => {
          onChange({
            ...props.image,
            ...dimensions
          });
        }
      })]
    }) : (0, import_jsx_runtime2.jsxs)(VStack, {
      "aria-hidden": true,
      alignItems: "center",
      backgroundColor: "surface",
      borderRadius: "regular",
      gap: "medium",
      paddingX: "large",
      paddingY: "xlarge",
      children: [(0, import_jsx_runtime2.jsx)(Icon, {
        src: imageIcon,
        color: "neutralSecondary",
        size: "medium"
      }), (0, import_jsx_runtime2.jsx)(Text, {
        align: "center",
        color: "neutralSecondary",
        size: "small",
        children: "Awaiting URL to display image preview and information…"
      })]
    });
    $[33] = status;
    $[34] = image2;
    $[35] = props;
    $[36] = onChange;
    $[37] = t11;
  } else {
    t11 = $[37];
  }
  let t12;
  if ($[38] !== t10 || $[39] !== t11) {
    t12 = (0, import_jsx_runtime2.jsxs)(VStack, {
      gap: "xlarge",
      padding: "large",
      children: [t10, t11]
    });
    $[38] = t10;
    $[39] = t11;
    $[40] = t12;
  } else {
    t12 = $[40];
  }
  return t12;
}
function CloudImageFieldInput(props) {
  var _props$fields$width$v, _props$fields$height$;
  const $ = c(27);
  const labelId = (0, import_react2.useId)();
  const descriptionId = (0, import_react2.useId)();
  const t0 = props.schema.description ? descriptionId : void 0;
  let t1;
  if ($[0] !== labelId || $[1] !== props.schema.label) {
    t1 = (0, import_jsx_runtime2.jsx)(Text, {
      color: "neutralEmphasis",
      size: "medium",
      weight: "medium",
      id: labelId,
      children: props.schema.label
    });
    $[0] = labelId;
    $[1] = props.schema.label;
    $[2] = t1;
  } else {
    t1 = $[2];
  }
  let t2;
  if ($[3] !== props.schema.description || $[4] !== descriptionId) {
    t2 = !!props.schema.description && (0, import_jsx_runtime2.jsx)(Text, {
      id: descriptionId,
      size: "regular",
      color: "neutralSecondary",
      children: props.schema.description
    });
    $[3] = props.schema.description;
    $[4] = descriptionId;
    $[5] = t2;
  } else {
    t2 = $[5];
  }
  let t3;
  if ($[6] !== t1 || $[7] !== t2) {
    t3 = (0, import_jsx_runtime2.jsxs)(VStack, {
      backgroundColor: "surface",
      borderBottom: "muted",
      borderTopStartRadius: "medium",
      borderTopEndRadius: "medium",
      gap: "medium",
      minWidth: 0,
      padding: "large",
      children: [t1, t2]
    });
    $[6] = t1;
    $[7] = t2;
    $[8] = t3;
  } else {
    t3 = $[8];
  }
  const t4 = (_props$fields$width$v = props.fields.width.value) !== null && _props$fields$width$v !== void 0 ? _props$fields$width$v : void 0;
  const t5 = (_props$fields$height$ = props.fields.height.value) !== null && _props$fields$height$ !== void 0 ? _props$fields$height$ : void 0;
  let t6;
  if ($[9] !== props.fields.src.value || $[10] !== props.fields.alt.value || $[11] !== t4 || $[12] !== t5) {
    t6 = {
      src: props.fields.src.value,
      alt: props.fields.alt.value,
      width: t4,
      height: t5
    };
    $[9] = props.fields.src.value;
    $[10] = props.fields.alt.value;
    $[11] = t4;
    $[12] = t5;
    $[13] = t6;
  } else {
    t6 = $[13];
  }
  let t7;
  if ($[14] !== props) {
    t7 = (data) => {
      var _data$width, _data$height;
      props.onChange({
        src: data.src,
        alt: data.alt,
        width: (_data$width = data.width) !== null && _data$width !== void 0 ? _data$width : null,
        height: (_data$height = data.height) !== null && _data$height !== void 0 ? _data$height : null
      });
    };
    $[14] = props;
    $[15] = t7;
  } else {
    t7 = $[15];
  }
  let t8;
  if ($[16] !== t6 || $[17] !== t7 || $[18] !== props.autoFocus || $[19] !== props.isRequired || $[20] !== props.forceValidation) {
    t8 = (0, import_jsx_runtime2.jsx)(ImageField, {
      image: t6,
      onChange: t7,
      autoFocus: props.autoFocus,
      isRequired: props.isRequired,
      forceValidation: props.forceValidation
    });
    $[16] = t6;
    $[17] = t7;
    $[18] = props.autoFocus;
    $[19] = props.isRequired;
    $[20] = props.forceValidation;
    $[21] = t8;
  } else {
    t8 = $[21];
  }
  let t9;
  if ($[22] !== labelId || $[23] !== t0 || $[24] !== t3 || $[25] !== t8) {
    t9 = (0, import_jsx_runtime2.jsxs)(VStack, {
      "aria-labelledby": labelId,
      "aria-describedby": t0,
      border: "muted",
      borderRadius: "medium",
      minWidth: 0,
      role: "group",
      children: [t3, t8]
    });
    $[22] = labelId;
    $[23] = t0;
    $[24] = t3;
    $[25] = t8;
    $[26] = t9;
  } else {
    t9 = $[26];
  }
  return t9;
}
function cloudImage({
  label,
  description,
  validation
}) {
  return {
    ...object({
      src: text({
        label: "URL",
        validation: {
          length: {
            min: validation !== null && validation !== void 0 && validation.isRequired ? 1 : 0
          }
        }
      }),
      alt: text({
        label: "Alt text"
      }),
      height: integer({
        label: "Height"
      }),
      width: integer({
        label: "Width"
      })
    }, {
      label,
      description
    }),
    Input(props) {
      return (0, import_jsx_runtime2.jsx)(CloudImageFieldInput, {
        ...props,
        isRequired: validation === null || validation === void 0 ? void 0 : validation.isRequired
      });
    }
  };
}
function conditional(discriminant, values) {
  return {
    kind: "conditional",
    discriminant,
    values
  };
}
function validateDate(validation, value, label) {
  if (value !== null && !/^\d{4}-\d{2}-\d{2}$/.test(value)) {
    return `${label} is not a valid date`;
  }
  if (validation !== null && validation !== void 0 && validation.isRequired && value === null) {
    return `${label} is required`;
  }
  if ((validation !== null && validation !== void 0 && validation.min || validation !== null && validation !== void 0 && validation.max) && value !== null) {
    const date2 = new Date(value);
    if ((validation === null || validation === void 0 ? void 0 : validation.min) !== void 0) {
      const min = new Date(validation.min);
      if (date2 < min) {
        return `${label} must be after ${min.toLocaleDateString()}`;
      }
    }
    if ((validation === null || validation === void 0 ? void 0 : validation.max) !== void 0) {
      const max = new Date(validation.max);
      if (date2 > max) {
        return `${label} must be no later than ${max.toLocaleDateString()}`;
      }
    }
  }
}
function DateFieldInput(props) {
  var _props$validation;
  const $ = c(15);
  let t0;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    t0 = () => true;
    $[0] = t0;
  } else {
    t0 = $[0];
  }
  const [blurred, onBlur] = (0, import_react2.useReducer)(t0, false);
  let t1;
  if ($[1] !== props) {
    t1 = (val) => {
      props.onChange(val === "" ? null : val);
    };
    $[1] = props;
    $[2] = t1;
  } else {
    t1 = $[2];
  }
  const t2 = props.value === null ? "" : props.value;
  const t3 = (_props$validation = props.validation) === null || _props$validation === void 0 ? void 0 : _props$validation.isRequired;
  let t4;
  if ($[3] !== blurred || $[4] !== props) {
    t4 = blurred || props.forceValidation ? validateDate(props.validation, props.value, props.label) : void 0;
    $[3] = blurred;
    $[4] = props;
    $[5] = t4;
  } else {
    t4 = $[5];
  }
  let t5;
  if ($[6] !== props.label || $[7] !== props.description || $[8] !== props.autoFocus || $[9] !== t1 || $[10] !== t2 || $[11] !== onBlur || $[12] !== t3 || $[13] !== t4) {
    t5 = (0, import_jsx_runtime2.jsx)(TextField, {
      label: props.label,
      description: props.description,
      type: "date",
      onChange: t1,
      autoFocus: props.autoFocus,
      value: t2,
      onBlur,
      isRequired: t3,
      errorMessage: t4
    });
    $[6] = props.label;
    $[7] = props.description;
    $[8] = props.autoFocus;
    $[9] = t1;
    $[10] = t2;
    $[11] = onBlur;
    $[12] = t3;
    $[13] = t4;
    $[14] = t5;
  } else {
    t5 = $[14];
  }
  return t5;
}
function date({
  label,
  defaultValue,
  validation,
  description
}) {
  return basicFormFieldWithSimpleReaderParse({
    label,
    Input(props) {
      return (0, import_jsx_runtime2.jsx)(DateFieldInput, {
        validation,
        label,
        description,
        ...props
      });
    },
    defaultValue() {
      if (defaultValue === void 0) {
        return null;
      }
      if (typeof defaultValue === "string") {
        return defaultValue;
      }
      const today = /* @__PURE__ */ new Date();
      const year = today.getFullYear();
      const month = String(today.getMonth() + 1).padStart(2, "0");
      const day = String(today.getDate()).padStart(2, "0");
      return `${year}-${month}-${day}`;
    },
    parse(value) {
      if (value === void 0) {
        return null;
      }
      if (value instanceof Date) {
        const year = value.getUTCFullYear();
        const month = String(value.getUTCMonth() + 1).padStart(2, "0");
        const day = String(value.getUTCDate()).padStart(2, "0");
        return `${year}-${month}-${day}`;
      }
      if (typeof value !== "string") {
        throw new FieldDataError("Must be a string");
      }
      return value;
    },
    serialize(value) {
      if (value === null) return {
        value: void 0
      };
      const date2 = new Date(value);
      date2.toISOString = () => value;
      date2.toString = () => value;
      return {
        value: date2
      };
    },
    validate(value) {
      const message = validateDate(validation, value, label);
      if (message !== void 0) {
        throw new FieldDataError(message);
      }
      assertRequired(value, validation, label);
      return value;
    }
  });
}
function validateDatetime(validation, value, label) {
  if (value !== null && !/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}$/.test(value)) {
    return `${label} is not a valid datetime`;
  }
  if (validation !== null && validation !== void 0 && validation.isRequired && value === null) {
    return `${label} is required`;
  }
  if ((validation !== null && validation !== void 0 && validation.min || validation !== null && validation !== void 0 && validation.max) && value !== null) {
    const datetime2 = new Date(value);
    if ((validation === null || validation === void 0 ? void 0 : validation.min) !== void 0) {
      const min = new Date(validation.min);
      if (datetime2 < min) {
        return `${label} must be after ${min.toISOString()}`;
      }
    }
    if ((validation === null || validation === void 0 ? void 0 : validation.max) !== void 0) {
      const max = new Date(validation.max);
      if (datetime2 > max) {
        return `${label} must be no later than ${max.toISOString()}`;
      }
    }
  }
}
function DatetimeFieldInput(props) {
  var _props$validation;
  const $ = c(15);
  let t0;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    t0 = () => true;
    $[0] = t0;
  } else {
    t0 = $[0];
  }
  const [blurred, onBlur] = (0, import_react2.useReducer)(t0, false);
  let t1;
  if ($[1] !== props) {
    t1 = (val) => {
      props.onChange(val === "" ? null : val);
    };
    $[1] = props;
    $[2] = t1;
  } else {
    t1 = $[2];
  }
  const t2 = props.value === null ? "" : props.value;
  const t3 = (_props$validation = props.validation) === null || _props$validation === void 0 ? void 0 : _props$validation.isRequired;
  let t4;
  if ($[3] !== blurred || $[4] !== props) {
    t4 = blurred || props.forceValidation ? validateDatetime(props.validation, props.value, props.label) : void 0;
    $[3] = blurred;
    $[4] = props;
    $[5] = t4;
  } else {
    t4 = $[5];
  }
  let t5;
  if ($[6] !== props.label || $[7] !== props.description || $[8] !== props.autoFocus || $[9] !== t1 || $[10] !== t2 || $[11] !== onBlur || $[12] !== t3 || $[13] !== t4) {
    t5 = (0, import_jsx_runtime2.jsx)(TextField, {
      label: props.label,
      description: props.description,
      type: "datetime-local",
      onChange: t1,
      autoFocus: props.autoFocus,
      value: t2,
      onBlur,
      isRequired: t3,
      errorMessage: t4
    });
    $[6] = props.label;
    $[7] = props.description;
    $[8] = props.autoFocus;
    $[9] = t1;
    $[10] = t2;
    $[11] = onBlur;
    $[12] = t3;
    $[13] = t4;
    $[14] = t5;
  } else {
    t5 = $[14];
  }
  return t5;
}
function datetime({
  label,
  defaultValue,
  validation,
  description
}) {
  return basicFormFieldWithSimpleReaderParse({
    label,
    Input(props) {
      return (0, import_jsx_runtime2.jsx)(DatetimeFieldInput, {
        validation,
        label,
        description,
        ...props
      });
    },
    defaultValue() {
      if (defaultValue === void 0) {
        return null;
      }
      if (typeof defaultValue === "string") {
        return defaultValue;
      }
      if (defaultValue.kind === "now") {
        const now = /* @__PURE__ */ new Date();
        return new Date(now.getTime() - now.getTimezoneOffset() * 60 * 1e3).toISOString().slice(0, -8);
      }
      return null;
    },
    parse(value) {
      if (value === void 0) {
        return null;
      }
      if (value instanceof Date) {
        return value.toISOString().slice(0, -8);
      }
      if (typeof value !== "string") {
        throw new FieldDataError("Must be a string or date");
      }
      return value;
    },
    serialize(value) {
      if (value === null) return {
        value: void 0
      };
      const date2 = /* @__PURE__ */ new Date(value + "Z");
      date2.toJSON = () => date2.toISOString().slice(0, -8);
      date2.toString = () => date2.toISOString().slice(0, -8);
      return {
        value: date2
      };
    },
    validate(value) {
      const message = validateDatetime(validation, value, label);
      if (message !== void 0) {
        throw new FieldDataError(message);
      }
      assertRequired(value, validation, label);
      return value;
    }
  });
}
function empty() {
  return basicFormFieldWithSimpleReaderParse({
    Input() {
      return null;
    },
    defaultValue() {
      return null;
    },
    parse() {
      return null;
    },
    serialize() {
      return {
        value: void 0
      };
    },
    validate(value) {
      return value;
    },
    label: "Empty"
  });
}
function emptyDocument() {
  return {
    kind: "form",
    formKind: "content",
    Input() {
      return null;
    },
    defaultValue() {
      return null;
    },
    parse() {
      return null;
    },
    contentExtension: ".mdoc",
    serialize() {
      return {
        value: void 0,
        content: new Uint8Array(),
        external: /* @__PURE__ */ new Map(),
        other: /* @__PURE__ */ new Map()
      };
    },
    validate(value) {
      return value;
    },
    reader: {
      parse() {
        return null;
      }
    }
  };
}
function emptyContent(opts) {
  return {
    kind: "form",
    formKind: "content",
    Input() {
      return null;
    },
    defaultValue() {
      return null;
    },
    parse() {
      return null;
    },
    contentExtension: `.${opts.extension}`,
    serialize() {
      return {
        value: void 0,
        content: new Uint8Array(),
        external: /* @__PURE__ */ new Map(),
        other: /* @__PURE__ */ new Map()
      };
    },
    validate(value) {
      return value;
    },
    reader: {
      parse() {
        return null;
      }
    }
  };
}
function FileFieldInput(props) {
  var _props$validation;
  const $ = c(34);
  const {
    value
  } = props;
  let t0;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    t0 = () => true;
    $[0] = t0;
  } else {
    t0 = $[0];
  }
  const [blurred, onBlur] = (0, import_react2.useReducer)(t0, false);
  const isInEditor = useIsInDocumentEditor();
  const objectUrl = useObjectURL(value === null ? null : value.data, void 0);
  const labelId = (0, import_react2.useId)();
  const descriptionId = (0, import_react2.useId)();
  const t1 = props.description ? descriptionId : void 0;
  const t2 = (_props$validation = props.validation) === null || _props$validation === void 0 ? void 0 : _props$validation.isRequired;
  let t3;
  if ($[1] !== labelId || $[2] !== t2 || $[3] !== props.label) {
    t3 = (0, import_jsx_runtime2.jsx)(FieldLabel, {
      id: labelId,
      elementType: "span",
      isRequired: t2,
      children: props.label
    });
    $[1] = labelId;
    $[2] = t2;
    $[3] = props.label;
    $[4] = t3;
  } else {
    t3 = $[4];
  }
  let t4;
  if ($[5] !== props.description || $[6] !== descriptionId) {
    t4 = props.description && (0, import_jsx_runtime2.jsx)(Text, {
      size: "small",
      color: "neutralSecondary",
      id: descriptionId,
      children: props.description
    });
    $[5] = props.description;
    $[6] = descriptionId;
    $[7] = t4;
  } else {
    t4 = $[7];
  }
  let t5;
  if ($[8] !== props) {
    t5 = (0, import_jsx_runtime2.jsx)(ActionButton, {
      onPress: async () => {
        const file2 = await getUploadedFile("");
        if (file2) {
          var _file$filename$match$, _file$filename$match;
          props.onChange({
            data: file2.content,
            filename: props.transformFilename ? props.transformFilename(file2.filename) : file2.filename,
            extension: (_file$filename$match$ = (_file$filename$match = file2.filename.match(/\.([^.]+$)/)) === null || _file$filename$match === void 0 ? void 0 : _file$filename$match[1]) !== null && _file$filename$match$ !== void 0 ? _file$filename$match$ : ""
          });
        }
      },
      children: "Choose file"
    });
    $[8] = props;
    $[9] = t5;
  } else {
    t5 = $[9];
  }
  let t6;
  if ($[10] !== value || $[11] !== props || $[12] !== onBlur || $[13] !== objectUrl) {
    t6 = value !== null && (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, {
      children: [(0, import_jsx_runtime2.jsx)(ActionButton, {
        prominence: "low",
        onPress: () => {
          props.onChange(null);
          onBlur();
        },
        children: "Remove"
      }), objectUrl && (0, import_jsx_runtime2.jsx)(Button, {
        href: objectUrl,
        download: value.filename,
        prominence: "low",
        children: "Download"
      })]
    });
    $[10] = value;
    $[11] = props;
    $[12] = onBlur;
    $[13] = objectUrl;
    $[14] = t6;
  } else {
    t6 = $[14];
  }
  let t7;
  if ($[15] !== t5 || $[16] !== t6) {
    t7 = (0, import_jsx_runtime2.jsxs)(ButtonGroup, {
      children: [t5, t6]
    });
    $[15] = t5;
    $[16] = t6;
    $[17] = t7;
  } else {
    t7 = $[17];
  }
  let t8;
  if ($[18] !== isInEditor || $[19] !== value || $[20] !== props) {
    t8 = isInEditor && value !== null && (0, import_jsx_runtime2.jsx)(TextField, {
      label: "Filename",
      onChange: (filename) => {
        props.onChange({
          ...value,
          filename
        });
      },
      value: value.filename
    });
    $[18] = isInEditor;
    $[19] = value;
    $[20] = props;
    $[21] = t8;
  } else {
    t8 = $[21];
  }
  let t9;
  if ($[22] !== props || $[23] !== blurred || $[24] !== value) {
    var _props$validation2;
    t9 = (props.forceValidation || blurred) && ((_props$validation2 = props.validation) === null || _props$validation2 === void 0 ? void 0 : _props$validation2.isRequired) && value === null && (0, import_jsx_runtime2.jsxs)(FieldMessage, {
      children: [props.label, " is required"]
    });
    $[22] = props;
    $[23] = blurred;
    $[24] = value;
    $[25] = t9;
  } else {
    t9 = $[25];
  }
  let t10;
  if ($[26] !== t1 || $[27] !== labelId || $[28] !== t3 || $[29] !== t4 || $[30] !== t7 || $[31] !== t8 || $[32] !== t9) {
    t10 = (0, import_jsx_runtime2.jsxs)(Flex, {
      "aria-describedby": t1,
      "aria-labelledby": labelId,
      direction: "column",
      gap: "medium",
      role: "group",
      children: [t3, t4, t7, t8, t9]
    });
    $[26] = t1;
    $[27] = labelId;
    $[28] = t3;
    $[29] = t4;
    $[30] = t7;
    $[31] = t8;
    $[32] = t9;
    $[33] = t10;
  } else {
    t10 = $[33];
  }
  return t10;
}
function file({
  label,
  directory,
  validation,
  description,
  publicPath,
  transformFilename
}) {
  return {
    kind: "form",
    formKind: "asset",
    label,
    Input(props) {
      return (0, import_jsx_runtime2.jsx)(FileFieldInput, {
        label,
        description,
        validation,
        transformFilename,
        ...props
      });
    },
    defaultValue() {
      return null;
    },
    filename(value, args) {
      if (typeof value === "string") {
        return value.slice(getSrcPrefix(publicPath, args.slug).length);
      }
      return void 0;
    },
    parse(value, args) {
      var _value$match$, _value$match;
      if (value === void 0) {
        return null;
      }
      if (typeof value !== "string") {
        throw new FieldDataError("Must be a string");
      }
      if (args.asset === void 0) {
        return null;
      }
      return {
        data: args.asset,
        filename: value.slice(getSrcPrefix(publicPath, args.slug).length),
        extension: (_value$match$ = (_value$match = value.match(/\.([^.]+$)/)) === null || _value$match === void 0 ? void 0 : _value$match[1]) !== null && _value$match$ !== void 0 ? _value$match$ : ""
      };
    },
    validate(value) {
      assertRequired(value, validation, label);
      return value;
    },
    serialize(value, args) {
      if (value === null) {
        return {
          value: void 0,
          asset: void 0
        };
      }
      const filename = args.suggestedFilenamePrefix ? args.suggestedFilenamePrefix + "." + value.extension : value.filename;
      return {
        value: `${getSrcPrefix(publicPath, args.slug)}${filename}`,
        asset: {
          filename,
          content: value.data
        }
      };
    },
    directory: directory ? fixPath(directory) : void 0,
    reader: {
      parse(value) {
        if (typeof value !== "string" && value !== void 0) {
          throw new FieldDataError("Must be a string");
        }
        const val = value === void 0 ? null : value;
        assertRequired(val, validation, label);
        return val;
      }
    }
  };
}
function image({
  label,
  directory,
  validation,
  description,
  publicPath,
  transformFilename
}) {
  return {
    kind: "form",
    formKind: "asset",
    label,
    Input(props) {
      return (0, import_jsx_runtime2.jsx)(ImageFieldInput, {
        label,
        description,
        validation,
        transformFilename,
        ...props
      });
    },
    defaultValue() {
      return null;
    },
    filename(value, args) {
      if (typeof value === "string") {
        return value.slice(getSrcPrefix(publicPath, args.slug).length);
      }
      return void 0;
    },
    parse(value, args) {
      var _value$match$, _value$match;
      if (value === void 0) {
        return null;
      }
      if (typeof value !== "string") {
        throw new FieldDataError("Must be a string");
      }
      if (args.asset === void 0) {
        return null;
      }
      return {
        data: args.asset,
        filename: value.slice(getSrcPrefix(publicPath, args.slug).length),
        extension: (_value$match$ = (_value$match = value.match(/\.([^.]+$)/)) === null || _value$match === void 0 ? void 0 : _value$match[1]) !== null && _value$match$ !== void 0 ? _value$match$ : ""
      };
    },
    validate(value) {
      assertRequired(value, validation, label);
      return value;
    },
    serialize(value, args) {
      if (value === null) {
        return {
          value: void 0,
          asset: void 0
        };
      }
      const filename = args.suggestedFilenamePrefix ? args.suggestedFilenamePrefix + "." + value.extension : value.filename;
      return {
        value: `${getSrcPrefix(publicPath, args.slug)}${filename}`,
        asset: {
          filename,
          content: value.data
        }
      };
    },
    directory: directory ? fixPath(directory) : void 0,
    reader: {
      parse(value) {
        if (typeof value !== "string" && value !== void 0) {
          throw new FieldDataError("Must be a string");
        }
        const val = value === void 0 ? null : value;
        assertRequired(val, validation, label);
        return val;
      }
    }
  };
}
function validateMultiRelationshipLength(validation, value) {
  var _validation$length$mi, _validation$length, _validation$length$ma, _validation$length2;
  const minLength = (_validation$length$mi = validation === null || validation === void 0 || (_validation$length = validation.length) === null || _validation$length === void 0 ? void 0 : _validation$length.min) !== null && _validation$length$mi !== void 0 ? _validation$length$mi : 0;
  if (value.length < minLength) {
    return `Must have at least ${pluralize(minLength, {
      singular: "item"
    })}.`;
  }
  const maxLength = (_validation$length$ma = validation === null || validation === void 0 || (_validation$length2 = validation.length) === null || _validation$length2 === void 0 ? void 0 : _validation$length2.max) !== null && _validation$length$ma !== void 0 ? _validation$length$ma : Infinity;
  if (value.length > maxLength) {
    return `Must have at most ${pluralize(maxLength, {
      singular: "item"
    })}.`;
  }
}
function MultiRelationshipInput(props) {
  var _props$validation;
  const valAsObjects = (0, import_react2.useMemo)(() => {
    return props.value.map((key) => ({
      key
    }));
  }, [props.value]);
  const [blurred, onBlur] = (0, import_react2.useReducer)(() => true, false);
  const slugs = useSlugsInCollection(props.collection);
  const options = (0, import_react2.useMemo)(() => {
    return slugs.map((slug2) => ({
      slug: slug2
    }));
  }, [slugs]);
  const _errorMessage = (props.forceValidation || blurred) && validateMultiRelationshipLength(props.validation, props.value);
  const [errorMessage, setErrorMessage] = (0, import_react2.useState)(_errorMessage);
  (0, import_react2.useEffect)(() => {
    setErrorMessage(_errorMessage);
  }, [_errorMessage]);
  const items = (0, import_react2.useMemo)(() => {
    const elementSet = new Set(props.value);
    return options.filter((option) => !elementSet.has(option.slug));
  }, [props.value, options]);
  return (0, import_jsx_runtime2.jsxs)(VStack, {
    gap: "medium",
    minWidth: 0,
    children: [(0, import_jsx_runtime2.jsx)(_Combobox, {
      label: props.label,
      description: props.description,
      selectedKey: null,
      placeholder: items.length === 0 ? "All selected" : void 0,
      onSelectionChange: (key_0) => {
        if (typeof key_0 === "string") {
          props.onChange([...props.value, key_0]);
        }
      },
      disabledKeys: ["No more items…"],
      onBlur,
      autoFocus: props.autoFocus,
      defaultItems: items.length ? items : [{
        slug: "No more items…"
      }],
      isReadOnly: items.length === 0,
      isRequired: ((_props$validation = props.validation) === null || _props$validation === void 0 || (_props$validation = _props$validation.length) === null || _props$validation === void 0 ? void 0 : _props$validation.min) !== void 0 && props.validation.length.min >= 1,
      errorMessage,
      width: "auto",
      children: (item) => (0, import_jsx_runtime2.jsx)($c1d7fb2ec91bae71$export$6d08773d2e66f8f2, {
        children: item.slug
      }, item.slug)
    }), (0, import_jsx_runtime2.jsx)(MultiRelationshipListView, {
      autoFocus: props.autoFocus,
      forceValidation: props.forceValidation,
      onChange: (value) => {
        props.onChange(value.map((x) => x.key));
      },
      elements: valAsObjects,
      "aria-label": props.label
    })]
  });
}
function MultiRelationshipListView(props) {
  const [selectedKeys, setSelectedKeys] = (0, import_react2.useState)(() => /* @__PURE__ */ new Set([]));
  let onMove = (keys, target) => {
    const targetIndex = props.elements.findIndex((x) => x.key === target.key);
    if (targetIndex === -1) return;
    const allKeys = props.elements.map((x_0) => ({
      key: x_0.key
    }));
    const indexToMoveTo = target.dropPosition === "before" ? targetIndex : targetIndex + 1;
    const indices = keys.map((key) => allKeys.findIndex((x_1) => x_1.key === key));
    props.onChange(move(allKeys, indices, indexToMoveTo));
  };
  const dragType = (0, import_react2.useMemo)(() => Math.random().toString(36), []);
  let {
    dragAndDropHooks
  } = useDragAndDrop({
    getItems(keys_0) {
      return [...keys_0].map((key_0) => {
        key_0 = JSON.stringify(key_0);
        return {
          [dragType]: key_0,
          "text/plain": key_0
        };
      });
    },
    getAllowedDropOperations() {
      return ["move", "cancel"];
    },
    async onDrop(e) {
      if (e.target.type !== "root" && e.target.dropPosition !== "on") {
        let keys_1 = [];
        for (let item of e.items) {
          if (item.kind === "text") {
            let key_1;
            if (item.types.has(dragType)) {
              key_1 = JSON.parse(await item.getText(dragType));
              keys_1.push(key_1);
            } else if (item.types.has("text/plain")) {
              key_1 = await item.getText("text/plain");
              keys_1 = key_1.split("\n").map((val) => val.replaceAll('"', ""));
            }
          }
        }
        onMove(keys_1, e.target);
      }
    },
    getDropOperation(target_0) {
      if (target_0.type === "root" || target_0.dropPosition === "on") {
        return "cancel";
      }
      return "move";
    }
  });
  return (0, import_jsx_runtime2.jsxs)(_ActionBarContainer, {
    maxHeight: "scale.3400",
    minHeight: "scale.1600",
    children: [(0, import_jsx_runtime2.jsx)(_ListView, {
      "aria-label": props["aria-label"],
      items: props.elements,
      dragAndDropHooks,
      selectionMode: "multiple",
      onSelectionChange: setSelectedKeys,
      selectedKeys,
      renderEmptyState: arrayFieldEmptyState,
      UNSAFE_className: css({
        borderRadius: tokenSchema.size.radius.regular
      }),
      children: (item_0) => {
        const label = item_0.key;
        return (0, import_jsx_runtime2.jsx)($c1d7fb2ec91bae71$export$6d08773d2e66f8f2, {
          textValue: label,
          children: label
        }, item_0.key);
      }
    }), (0, import_jsx_runtime2.jsx)(_ActionBar, {
      selectedItemCount: selectedKeys === "all" ? "all" : selectedKeys.size,
      onClearSelection: () => setSelectedKeys(/* @__PURE__ */ new Set()),
      onAction: (key_2) => {
        if (key_2 === "delete") {
          let newItems = props.elements;
          if (selectedKeys instanceof Set) {
            newItems = props.elements.filter((item_1) => !selectedKeys.has(item_1.key));
          } else if (selectedKeys === "all") {
            newItems = [];
          }
          props.onChange(newItems);
          setSelectedKeys(/* @__PURE__ */ new Set());
        }
      },
      children: (0, import_jsx_runtime2.jsxs)($c1d7fb2ec91bae71$export$6d08773d2e66f8f2, {
        textValue: "Remove",
        children: [(0, import_jsx_runtime2.jsx)(Icon, {
          src: trash2Icon
        }), (0, import_jsx_runtime2.jsx)(Text, {
          children: "Remove"
        })]
      }, "delete")
    })]
  });
}
function arrayFieldEmptyState() {
  return (0, import_jsx_runtime2.jsx)(VStack, {
    gap: "large",
    alignItems: "center",
    justifyContent: "center",
    height: "100%",
    padding: "regular",
    children: (0, import_jsx_runtime2.jsx)(Text, {
      align: "center",
      color: "neutralTertiary",
      children: "No items selected…"
    })
  });
}
function multiRelationship({
  label,
  collection: collection2,
  validation,
  description
}) {
  return basicFormFieldWithSimpleReaderParse({
    label,
    Input(props) {
      return (0, import_jsx_runtime2.jsx)(MultiRelationshipInput, {
        label,
        collection: collection2,
        description,
        validation,
        ...props
      });
    },
    defaultValue() {
      return [];
    },
    parse(value) {
      if (value === void 0) {
        return [];
      }
      if (!Array.isArray(value) || !value.every(isString)) {
        throw new FieldDataError("Must be an array of strings");
      }
      return value;
    },
    validate(value) {
      const error = validateMultiRelationshipLength(validation, value);
      if (error) {
        throw new FieldDataError(error);
      }
      return value;
    },
    serialize(value) {
      return {
        value
      };
    }
  });
}
function MultiselectFieldInput(props) {
  const $ = c(14);
  const labelId = (0, import_react2.useId)();
  const descriptionId = (0, import_react2.useId)();
  const t0 = props.description ? descriptionId : void 0;
  let t1;
  if ($[0] !== labelId || $[1] !== props.label) {
    t1 = (0, import_jsx_runtime2.jsx)(FieldLabel, {
      elementType: "span",
      id: labelId,
      children: props.label
    });
    $[0] = labelId;
    $[1] = props.label;
    $[2] = t1;
  } else {
    t1 = $[2];
  }
  let t2;
  if ($[3] !== props.description || $[4] !== descriptionId) {
    t2 = props.description && (0, import_jsx_runtime2.jsx)(Text, {
      id: descriptionId,
      size: "small",
      color: "neutralSecondary",
      children: props.description
    });
    $[3] = props.description;
    $[4] = descriptionId;
    $[5] = t2;
  } else {
    t2 = $[5];
  }
  let t3;
  if ($[6] !== props) {
    t3 = props.options.map((option) => (0, import_jsx_runtime2.jsx)(Checkbox, {
      isSelected: props.value.includes(option.value),
      onChange: () => {
        if (props.value.includes(option.value)) {
          props.onChange(props.value.filter((x) => x !== option.value));
        } else {
          props.onChange([...props.value, option.value]);
        }
      },
      children: option.label
    }, option.value));
    $[6] = props;
    $[7] = t3;
  } else {
    t3 = $[7];
  }
  let t4;
  if ($[8] !== labelId || $[9] !== t0 || $[10] !== t1 || $[11] !== t2 || $[12] !== t3) {
    t4 = (0, import_jsx_runtime2.jsxs)(Flex, {
      role: "group",
      "aria-labelledby": labelId,
      "aria-describedby": t0,
      direction: "column",
      gap: "medium",
      children: [t1, t2, t3]
    });
    $[8] = labelId;
    $[9] = t0;
    $[10] = t1;
    $[11] = t2;
    $[12] = t3;
    $[13] = t4;
  } else {
    t4 = $[13];
  }
  return t4;
}
function multiselect({
  label,
  options,
  defaultValue = [],
  description
}) {
  const valuesToOption = new Map(options.map((x) => [x.value, x]));
  const field = basicFormFieldWithSimpleReaderParse({
    label,
    Input(props) {
      return (0, import_jsx_runtime2.jsx)(MultiselectFieldInput, {
        label,
        description,
        options,
        ...props
      });
    },
    defaultValue() {
      return defaultValue;
    },
    parse(value) {
      if (value === void 0) {
        return [];
      }
      if (!Array.isArray(value)) {
        throw new FieldDataError("Must be an array of options");
      }
      if (!value.every((x) => typeof x === "string" && valuesToOption.has(x))) {
        throw new FieldDataError(`Must be an array with one of ${options.map((x) => x.value).join(", ")}`);
      }
      return value;
    },
    validate(value) {
      return value;
    },
    serialize(value) {
      return {
        value
      };
    }
  });
  return {
    ...field,
    options
  };
}
function validateNumber(validation, value, step, label) {
  if (value !== null && typeof value !== "number") {
    return `${label} must be a number`;
  }
  if (validation !== null && validation !== void 0 && validation.isRequired && value === null) {
    return `${label} is required`;
  }
  if (value !== null) {
    if ((validation === null || validation === void 0 ? void 0 : validation.min) !== void 0 && value < validation.min) {
      return `${label} must be at least ${validation.min}`;
    }
    if ((validation === null || validation === void 0 ? void 0 : validation.max) !== void 0 && value > validation.max) {
      return `${label} must be at most ${validation.max}`;
    }
    if (step !== void 0 && (validation === null || validation === void 0 ? void 0 : validation.validateStep) !== void 0 && !isAtStep(value, step)) {
      return `${label} must be a multiple of ${step}`;
    }
  }
}
function decimalPlaces(value) {
  const stringified = value.toString();
  const indexOfDecimal = stringified.indexOf(".");
  if (indexOfDecimal === -1) {
    const indexOfE = stringified.indexOf("e-");
    return indexOfE === -1 ? 0 : parseInt(stringified.slice(indexOfE + 2));
  }
  return stringified.length - indexOfDecimal - 1;
}
function isAtStep(value, step) {
  const dc = Math.max(decimalPlaces(step), decimalPlaces(value));
  const base = Math.pow(10, dc);
  return value * base % (step * base) === 0;
}
function NumberFieldInput(props) {
  var _props$validation;
  const $ = c(16);
  let t0;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    t0 = () => true;
    $[0] = t0;
  } else {
    t0 = $[0];
  }
  const [blurred, onBlur] = (0, import_react2.useReducer)(t0, false);
  const t1 = (_props$validation = props.validation) === null || _props$validation === void 0 ? void 0 : _props$validation.isRequired;
  let t2;
  if ($[1] !== props || $[2] !== blurred) {
    t2 = props.forceValidation || blurred ? validateNumber(props.validation, props.value, props.step, props.label) : void 0;
    $[1] = props;
    $[2] = blurred;
    $[3] = t2;
  } else {
    t2 = $[3];
  }
  const t3 = props.value === null ? void 0 : props.value;
  let t4;
  if ($[4] !== props) {
    t4 = (val) => {
      props.onChange(val === void 0 ? null : val);
    };
    $[4] = props;
    $[5] = t4;
  } else {
    t4 = $[5];
  }
  let t5;
  if ($[6] !== props.label || $[7] !== props.description || $[8] !== props.autoFocus || $[9] !== props.step || $[10] !== t1 || $[11] !== t2 || $[12] !== onBlur || $[13] !== t3 || $[14] !== t4) {
    t5 = (0, import_jsx_runtime2.jsx)(NumberField, {
      label: props.label,
      description: props.description,
      isRequired: t1,
      errorMessage: t2,
      onBlur,
      autoFocus: props.autoFocus,
      step: props.step,
      value: t3,
      onChange: t4
    });
    $[6] = props.label;
    $[7] = props.description;
    $[8] = props.autoFocus;
    $[9] = props.step;
    $[10] = t1;
    $[11] = t2;
    $[12] = onBlur;
    $[13] = t3;
    $[14] = t4;
    $[15] = t5;
  } else {
    t5 = $[15];
  }
  return t5;
}
function number({
  label,
  defaultValue,
  step,
  validation,
  description
}) {
  return basicFormFieldWithSimpleReaderParse({
    label,
    Input(props) {
      return (0, import_jsx_runtime2.jsx)(NumberFieldInput, {
        label,
        description,
        validation,
        step,
        ...props
      });
    },
    defaultValue() {
      return defaultValue !== null && defaultValue !== void 0 ? defaultValue : null;
    },
    parse(value) {
      if (value === void 0) {
        return null;
      }
      if (typeof value === "number") {
        return value;
      }
      throw new FieldDataError("Must be a number");
    },
    validate(value) {
      const message = validateNumber(validation, value, step, label);
      if (message !== void 0) {
        throw new FieldDataError(message);
      }
      assertRequired(value, validation, label);
      return value;
    },
    serialize(value) {
      return {
        value: value === null ? void 0 : value
      };
    }
  });
}
function PathReferenceInput(props) {
  var _props$validation, _props$validation2;
  const $ = c(24);
  let t0;
  let t1;
  if ($[0] !== props.pattern) {
    t1 = props.pattern ? filter(props.pattern) : () => true;
    $[0] = props.pattern;
    $[1] = t1;
  } else {
    t1 = $[1];
  }
  t0 = t1;
  const match = t0;
  let t2;
  if ($[2] === Symbol.for("react.memo_cache_sentinel")) {
    t2 = () => true;
    $[2] = t2;
  } else {
    t2 = $[2];
  }
  const [blurred, onBlur] = (0, import_react2.useReducer)(t2, false);
  const tree = useTree().current;
  let t3;
  let t4;
  if ($[3] !== tree || $[4] !== match) {
    const files = tree.kind === "loaded" ? [...tree.data.entries.values()] : [];
    let t52;
    if ($[6] !== match) {
      t52 = (val) => match(val.path);
      $[6] = match;
      $[7] = t52;
    } else {
      t52 = $[7];
    }
    t4 = files.filter(t52);
    $[3] = tree;
    $[4] = match;
    $[5] = t4;
  } else {
    t4 = $[5];
  }
  t3 = t4;
  const options = t3;
  const _errorMessage = (props.forceValidation || blurred) && (_props$validation = props.validation) !== null && _props$validation !== void 0 && _props$validation.isRequired && props.value === null ? `${props.label} is required` : void 0;
  const [errorMessage, setErrorMessage] = (0, import_react2.useState)(_errorMessage);
  let t5;
  let t6;
  if ($[8] !== _errorMessage) {
    t5 = () => {
      setErrorMessage(_errorMessage);
    };
    t6 = [_errorMessage];
    $[8] = _errorMessage;
    $[9] = t5;
    $[10] = t6;
  } else {
    t5 = $[9];
    t6 = $[10];
  }
  (0, import_react2.useEffect)(t5, t6);
  let t7;
  if ($[11] !== props) {
    t7 = (key) => {
      if (typeof key === "string" || key === null) {
        props.onChange(key);
      }
    };
    $[11] = props;
    $[12] = t7;
  } else {
    t7 = $[12];
  }
  const t8 = (_props$validation2 = props.validation) === null || _props$validation2 === void 0 ? void 0 : _props$validation2.isRequired;
  let t9;
  if ($[13] === Symbol.for("react.memo_cache_sentinel")) {
    t9 = (item) => (0, import_jsx_runtime2.jsx)($c1d7fb2ec91bae71$export$6d08773d2e66f8f2, {
      children: item.path
    }, item.path);
    $[13] = t9;
  } else {
    t9 = $[13];
  }
  let t10;
  if ($[14] !== props.label || $[15] !== props.description || $[16] !== props.value || $[17] !== props.autoFocus || $[18] !== t7 || $[19] !== onBlur || $[20] !== t8 || $[21] !== errorMessage || $[22] !== options) {
    t10 = (0, import_jsx_runtime2.jsx)(_Combobox, {
      label: props.label,
      description: props.description,
      selectedKey: props.value,
      onSelectionChange: t7,
      onBlur,
      isRequired: t8,
      errorMessage,
      autoFocus: props.autoFocus,
      defaultItems: options,
      width: "auto",
      children: t9
    });
    $[14] = props.label;
    $[15] = props.description;
    $[16] = props.value;
    $[17] = props.autoFocus;
    $[18] = t7;
    $[19] = onBlur;
    $[20] = t8;
    $[21] = errorMessage;
    $[22] = options;
    $[23] = t10;
  } else {
    t10 = $[23];
  }
  return t10;
}
function pathReference({
  label,
  pattern,
  validation,
  description
}) {
  return basicFormFieldWithSimpleReaderParse({
    label,
    Input(props) {
      return (0, import_jsx_runtime2.jsx)(PathReferenceInput, {
        label,
        pattern,
        description,
        validation,
        ...props
      });
    },
    defaultValue() {
      return null;
    },
    parse(value) {
      if (value === void 0) {
        return null;
      }
      if (typeof value !== "string") {
        throw new FieldDataError("Must be a string");
      }
      return value;
    },
    validate(value) {
      assertRequired(value, validation, label);
      return value;
    },
    serialize(value) {
      return {
        value: value === null ? void 0 : value
      };
    }
  });
}
function RelationshipInput(props) {
  var _props$validation, _props$validation2;
  const $ = c(20);
  let t0;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    t0 = () => true;
    $[0] = t0;
  } else {
    t0 = $[0];
  }
  const [blurred, onBlur] = (0, import_react2.useReducer)(t0, false);
  const slugs = useSlugsInCollection(props.collection);
  let t1;
  let t2;
  if ($[1] !== slugs) {
    let t32;
    if ($[3] === Symbol.for("react.memo_cache_sentinel")) {
      t32 = (slug2) => ({
        slug: slug2
      });
      $[3] = t32;
    } else {
      t32 = $[3];
    }
    t2 = slugs.map(t32);
    $[1] = slugs;
    $[2] = t2;
  } else {
    t2 = $[2];
  }
  t1 = t2;
  const options = t1;
  const _errorMessage = (props.forceValidation || blurred) && (_props$validation = props.validation) !== null && _props$validation !== void 0 && _props$validation.isRequired && props.value === null ? `${props.label} is required` : void 0;
  const [errorMessage, setErrorMessage] = (0, import_react2.useState)(_errorMessage);
  let t3;
  let t4;
  if ($[4] !== _errorMessage) {
    t3 = () => {
      setErrorMessage(_errorMessage);
    };
    t4 = [_errorMessage];
    $[4] = _errorMessage;
    $[5] = t3;
    $[6] = t4;
  } else {
    t3 = $[5];
    t4 = $[6];
  }
  (0, import_react2.useEffect)(t3, t4);
  let t5;
  if ($[7] !== props) {
    t5 = (key) => {
      if (typeof key === "string" || key === null) {
        props.onChange(key);
      }
    };
    $[7] = props;
    $[8] = t5;
  } else {
    t5 = $[8];
  }
  const t6 = (_props$validation2 = props.validation) === null || _props$validation2 === void 0 ? void 0 : _props$validation2.isRequired;
  let t7;
  if ($[9] === Symbol.for("react.memo_cache_sentinel")) {
    t7 = (item) => (0, import_jsx_runtime2.jsx)($c1d7fb2ec91bae71$export$6d08773d2e66f8f2, {
      children: item.slug
    }, item.slug);
    $[9] = t7;
  } else {
    t7 = $[9];
  }
  let t8;
  if ($[10] !== props.label || $[11] !== props.description || $[12] !== props.value || $[13] !== props.autoFocus || $[14] !== t5 || $[15] !== onBlur || $[16] !== options || $[17] !== t6 || $[18] !== errorMessage) {
    t8 = (0, import_jsx_runtime2.jsx)(_Combobox, {
      label: props.label,
      description: props.description,
      selectedKey: props.value,
      onSelectionChange: t5,
      onBlur,
      autoFocus: props.autoFocus,
      defaultItems: options,
      isRequired: t6,
      errorMessage,
      width: "auto",
      children: t7
    });
    $[10] = props.label;
    $[11] = props.description;
    $[12] = props.value;
    $[13] = props.autoFocus;
    $[14] = t5;
    $[15] = onBlur;
    $[16] = options;
    $[17] = t6;
    $[18] = errorMessage;
    $[19] = t8;
  } else {
    t8 = $[19];
  }
  return t8;
}
function relationship({
  label,
  collection: collection2,
  validation,
  description
}) {
  return basicFormFieldWithSimpleReaderParse({
    label,
    Input(props) {
      return (0, import_jsx_runtime2.jsx)(RelationshipInput, {
        label,
        collection: collection2,
        description,
        validation,
        ...props
      });
    },
    defaultValue() {
      return null;
    },
    parse(value) {
      if (value === void 0) {
        return null;
      }
      if (typeof value !== "string") {
        throw new FieldDataError("Must be a string");
      }
      return value;
    },
    validate(value) {
      assertRequired(value, validation, label);
      return value;
    },
    serialize(value) {
      return {
        value: value === null ? void 0 : value
      };
    }
  });
}
var emptySet = /* @__PURE__ */ new Set();
function SlugFieldInput(props) {
  var _props$args$slug$labe, _props$args$slug, _props$args$slug$vali, _props$args$slug2, _props$args$slug$vali2, _props$args$slug3, _props$args$slug4, _props$args$name$vali, _props$args$name$vali2, _props$args$name$vali3, _props$args$name$vali4, _props$args$name$vali5, _props$args$name$vali6, _props$args$slug5;
  const slugContext = (0, import_react2.useContext)(SlugFieldContext);
  const path = (0, import_react2.useContext)(PathContext);
  const slugInfo = path.length === 1 && path[0] === (slugContext === null || slugContext === void 0 ? void 0 : slugContext.field) ? slugContext : {
    slugs: emptySet,
    glob: "*"
  };
  const [blurredName, setBlurredName] = (0, import_react2.useState)(false);
  const [blurredSlug, setBlurredSlug] = (0, import_react2.useState)(false);
  const [shouldGenerateSlug, setShouldGenerateSlug] = (0, import_react2.useState)(props.value === props.defaultValue);
  const generateSlug = (name) => {
    const generated = props.naiveGenerateSlug(name);
    if (slugInfo.slugs.has(generated)) {
      let i = 1;
      while (slugInfo.slugs.has(`${generated}-${i}`)) {
        i++;
      }
      return `${generated}-${i}`;
    }
    return generated;
  };
  const slugFieldLabel = (_props$args$slug$labe = (_props$args$slug = props.args.slug) === null || _props$args$slug === void 0 ? void 0 : _props$args$slug.label) !== null && _props$args$slug$labe !== void 0 ? _props$args$slug$labe : "Slug";
  const slugErrorMessage = props.forceValidation || blurredSlug ? validateText(props.value.slug, (_props$args$slug$vali = (_props$args$slug2 = props.args.slug) === null || _props$args$slug2 === void 0 || (_props$args$slug2 = _props$args$slug2.validation) === null || _props$args$slug2 === void 0 || (_props$args$slug2 = _props$args$slug2.length) === null || _props$args$slug2 === void 0 ? void 0 : _props$args$slug2.min) !== null && _props$args$slug$vali !== void 0 ? _props$args$slug$vali : 1, (_props$args$slug$vali2 = (_props$args$slug3 = props.args.slug) === null || _props$args$slug3 === void 0 || (_props$args$slug3 = _props$args$slug3.validation) === null || _props$args$slug3 === void 0 || (_props$args$slug3 = _props$args$slug3.length) === null || _props$args$slug3 === void 0 ? void 0 : _props$args$slug3.max) !== null && _props$args$slug$vali2 !== void 0 ? _props$args$slug$vali2 : Infinity, slugFieldLabel, slugInfo, (_props$args$slug4 = props.args.slug) === null || _props$args$slug4 === void 0 || (_props$args$slug4 = _props$args$slug4.validation) === null || _props$args$slug4 === void 0 ? void 0 : _props$args$slug4.pattern) : void 0;
  return (0, import_jsx_runtime2.jsxs)(Flex, {
    gap: "xlarge",
    direction: "column",
    children: [(0, import_jsx_runtime2.jsx)(TextField, {
      label: props.args.name.label,
      description: props.args.name.description,
      autoFocus: props.autoFocus,
      value: props.value.name,
      isRequired: !!((_props$args$name$vali = props.args.name.validation) !== null && _props$args$name$vali !== void 0 && (_props$args$name$vali = _props$args$name$vali.length) !== null && _props$args$name$vali !== void 0 && _props$args$name$vali.min),
      onChange: (name_0) => {
        props.onChange({
          name: name_0,
          slug: shouldGenerateSlug ? generateSlug(name_0) : props.value.slug
        });
      },
      onBlur: () => setBlurredName(true),
      errorMessage: props.forceValidation || blurredName ? validateText(props.value.name, (_props$args$name$vali2 = (_props$args$name$vali3 = props.args.name.validation) === null || _props$args$name$vali3 === void 0 || (_props$args$name$vali3 = _props$args$name$vali3.length) === null || _props$args$name$vali3 === void 0 ? void 0 : _props$args$name$vali3.min) !== null && _props$args$name$vali2 !== void 0 ? _props$args$name$vali2 : 0, (_props$args$name$vali4 = (_props$args$name$vali5 = props.args.name.validation) === null || _props$args$name$vali5 === void 0 || (_props$args$name$vali5 = _props$args$name$vali5.length) === null || _props$args$name$vali5 === void 0 ? void 0 : _props$args$name$vali5.max) !== null && _props$args$name$vali4 !== void 0 ? _props$args$name$vali4 : Infinity, props.args.name.label, void 0, (_props$args$name$vali6 = props.args.name.validation) === null || _props$args$name$vali6 === void 0 ? void 0 : _props$args$name$vali6.pattern) : void 0
    }), (0, import_jsx_runtime2.jsxs)(Flex, {
      gap: "regular",
      alignItems: "end",
      children: [(0, import_jsx_runtime2.jsx)(TextField, {
        flex: 1,
        label: slugFieldLabel,
        description: (_props$args$slug5 = props.args.slug) === null || _props$args$slug5 === void 0 ? void 0 : _props$args$slug5.description,
        value: props.value.slug,
        onChange: (slug2) => {
          setShouldGenerateSlug(false);
          props.onChange({
            name: props.value.name,
            slug: slug2
          });
        },
        onBlur: () => setBlurredSlug(true),
        errorMessage: slugErrorMessage,
        isRequired: true
      }), (0, import_jsx_runtime2.jsxs)(Flex, {
        gap: "regular",
        direction: "column",
        children: [(0, import_jsx_runtime2.jsxs)(ActionButton, {
          "aria-label": "regenerate",
          onPress: () => {
            props.onChange({
              name: props.value.name,
              slug: generateSlug(props.value.name)
            });
          },
          children: [(0, import_jsx_runtime2.jsx)(Icon, {
            src: refreshCwIcon,
            UNSAFE_className: css({
              [containerQueries.above.mobile]: {
                display: "none"
              }
            })
          }), (0, import_jsx_runtime2.jsx)(Text, {
            UNSAFE_className: css({
              [containerQueries.below.tablet]: {
                display: "none"
              }
            }),
            children: "Regenerate"
          })]
        }), slugErrorMessage !== void 0 && (0, import_jsx_runtime2.jsx)(Box, {
          height: "element.xsmall"
        })]
      })]
    })]
  });
}
function parseSlugFieldAsNormalField(value) {
  if (value === void 0) {
    return {
      name: "",
      slug: ""
    };
  }
  if (typeof value !== "object") {
    throw new FieldDataError("Must be an object");
  }
  if (Object.keys(value).length !== 2) {
    throw new FieldDataError("Unexpected keys");
  }
  if (!("name" in value) || !("slug" in value)) {
    throw new FieldDataError("Missing name or slug");
  }
  if (typeof value.name !== "string") {
    throw new FieldDataError("name must be a string");
  }
  if (typeof value.slug !== "string") {
    throw new FieldDataError("slug must be a string");
  }
  return {
    name: value.name,
    slug: value.slug
  };
}
function parseAsSlugField(value, slug2) {
  if (value === void 0) {
    return {
      name: "",
      slug: slug2
    };
  }
  if (typeof value !== "string") {
    throw new FieldDataError("Must be a string");
  }
  return {
    name: value,
    slug: slug2
  };
}
function slug(_args) {
  var _args$name$validation, _args$name$validation2, _args$name$validation3, _args$name$validation4, _args$name$validation5, _args$slug;
  const args = {
    ..._args,
    name: {
      ..._args.name,
      validation: {
        pattern: (_args$name$validation = _args.name.validation) === null || _args$name$validation === void 0 ? void 0 : _args$name$validation.pattern,
        length: {
          min: Math.max((_args$name$validation2 = _args.name.validation) !== null && _args$name$validation2 !== void 0 && _args$name$validation2.isRequired ? 1 : 0, (_args$name$validation3 = (_args$name$validation4 = _args.name.validation) === null || _args$name$validation4 === void 0 || (_args$name$validation4 = _args$name$validation4.length) === null || _args$name$validation4 === void 0 ? void 0 : _args$name$validation4.min) !== null && _args$name$validation3 !== void 0 ? _args$name$validation3 : 0),
          max: (_args$name$validation5 = _args.name.validation) === null || _args$name$validation5 === void 0 || (_args$name$validation5 = _args$name$validation5.length) === null || _args$name$validation5 === void 0 ? void 0 : _args$name$validation5.max
        }
      }
    }
  };
  const naiveGenerateSlug = ((_args$slug = args.slug) === null || _args$slug === void 0 ? void 0 : _args$slug.generate) || import_slugify2.default;
  let _defaultValue;
  function defaultValue() {
    if (!_defaultValue) {
      var _args$name$defaultVal, _args$name$defaultVal2;
      _defaultValue = {
        name: (_args$name$defaultVal = args.name.defaultValue) !== null && _args$name$defaultVal !== void 0 ? _args$name$defaultVal : "",
        slug: naiveGenerateSlug((_args$name$defaultVal2 = args.name.defaultValue) !== null && _args$name$defaultVal2 !== void 0 ? _args$name$defaultVal2 : "")
      };
    }
    return _defaultValue;
  }
  function validate(value, {
    slugField
  } = {
    slugField: void 0
  }) {
    var _args$name$validation6, _args$name$validation7, _args$name$validation8, _args$name$validation9, _args$name$validation10, _args$slug$validation, _args$slug2, _args$slug$validation2, _args$slug3, _args$slug$label, _args$slug4, _args$slug5;
    const nameMessage = validateText(value.name, (_args$name$validation6 = (_args$name$validation7 = args.name.validation) === null || _args$name$validation7 === void 0 || (_args$name$validation7 = _args$name$validation7.length) === null || _args$name$validation7 === void 0 ? void 0 : _args$name$validation7.min) !== null && _args$name$validation6 !== void 0 ? _args$name$validation6 : 0, (_args$name$validation8 = (_args$name$validation9 = args.name.validation) === null || _args$name$validation9 === void 0 || (_args$name$validation9 = _args$name$validation9.length) === null || _args$name$validation9 === void 0 ? void 0 : _args$name$validation9.max) !== null && _args$name$validation8 !== void 0 ? _args$name$validation8 : Infinity, args.name.label, void 0, (_args$name$validation10 = args.name.validation) === null || _args$name$validation10 === void 0 ? void 0 : _args$name$validation10.pattern);
    if (nameMessage !== void 0) {
      throw new FieldDataError(nameMessage);
    }
    const slugMessage = validateText(value.slug, (_args$slug$validation = (_args$slug2 = args.slug) === null || _args$slug2 === void 0 || (_args$slug2 = _args$slug2.validation) === null || _args$slug2 === void 0 || (_args$slug2 = _args$slug2.length) === null || _args$slug2 === void 0 ? void 0 : _args$slug2.min) !== null && _args$slug$validation !== void 0 ? _args$slug$validation : 1, (_args$slug$validation2 = (_args$slug3 = args.slug) === null || _args$slug3 === void 0 || (_args$slug3 = _args$slug3.validation) === null || _args$slug3 === void 0 || (_args$slug3 = _args$slug3.length) === null || _args$slug3 === void 0 ? void 0 : _args$slug3.max) !== null && _args$slug$validation2 !== void 0 ? _args$slug$validation2 : Infinity, (_args$slug$label = (_args$slug4 = args.slug) === null || _args$slug4 === void 0 ? void 0 : _args$slug4.label) !== null && _args$slug$label !== void 0 ? _args$slug$label : "Slug", slugField ? slugField : {
      slugs: emptySet2,
      glob: "*"
    }, (_args$slug5 = args.slug) === null || _args$slug5 === void 0 || (_args$slug5 = _args$slug5.validation) === null || _args$slug5 === void 0 ? void 0 : _args$slug5.pattern);
    if (slugMessage !== void 0) {
      throw new FieldDataError(slugMessage);
    }
    return value;
  }
  const emptySet2 = /* @__PURE__ */ new Set();
  return {
    kind: "form",
    formKind: "slug",
    label: args.name.label,
    Input(props) {
      return (0, import_jsx_runtime2.jsx)(SlugFieldInput, {
        args,
        naiveGenerateSlug,
        defaultValue: defaultValue(),
        ...props
      });
    },
    defaultValue,
    parse(value, args2) {
      if ((args2 === null || args2 === void 0 ? void 0 : args2.slug) !== void 0) {
        return parseAsSlugField(value, args2.slug);
      }
      return parseSlugFieldAsNormalField(value);
    },
    validate,
    serialize(value) {
      return {
        value
      };
    },
    serializeWithSlug(value) {
      return {
        value: value.name,
        slug: value.slug
      };
    },
    reader: {
      parse(value) {
        const parsed = parseSlugFieldAsNormalField(value);
        return validate(parsed);
      },
      parseWithSlug(value, args2) {
        return validate(parseAsSlugField(value, args2.slug), {
          slugField: {
            glob: args2.glob,
            slugs: emptySet2
          }
        }).name;
      }
    }
  };
}
function validateUrl(validation, value, label) {
  if (value !== null && (typeof value !== "string" || !isValidURL$1(value))) {
    return `${label} is not a valid URL`;
  }
  if (validation !== null && validation !== void 0 && validation.isRequired && value === null) {
    return `${label} is required`;
  }
}
function UrlFieldInput(props) {
  var _props$validation;
  const $ = c(15);
  let t0;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    t0 = () => true;
    $[0] = t0;
  } else {
    t0 = $[0];
  }
  const [blurred, onBlur] = (0, import_react2.useReducer)(t0, false);
  const t1 = props.value === null ? "" : props.value;
  let t2;
  if ($[1] !== props) {
    t2 = (val) => {
      props.onChange(val === "" ? null : val);
    };
    $[1] = props;
    $[2] = t2;
  } else {
    t2 = $[2];
  }
  const t3 = (_props$validation = props.validation) === null || _props$validation === void 0 ? void 0 : _props$validation.isRequired;
  let t4;
  if ($[3] !== props || $[4] !== blurred) {
    t4 = props.forceValidation || blurred ? validateUrl(props.validation, props.value, props.label) : void 0;
    $[3] = props;
    $[4] = blurred;
    $[5] = t4;
  } else {
    t4 = $[5];
  }
  let t5;
  if ($[6] !== props.label || $[7] !== props.description || $[8] !== props.autoFocus || $[9] !== t1 || $[10] !== t2 || $[11] !== onBlur || $[12] !== t3 || $[13] !== t4) {
    t5 = (0, import_jsx_runtime2.jsx)(TextField, {
      inputMode: "url",
      width: "auto",
      maxWidth: "scale.6000",
      label: props.label,
      description: props.description,
      autoFocus: props.autoFocus,
      value: t1,
      onChange: t2,
      onBlur,
      isRequired: t3,
      errorMessage: t4
    });
    $[6] = props.label;
    $[7] = props.description;
    $[8] = props.autoFocus;
    $[9] = t1;
    $[10] = t2;
    $[11] = onBlur;
    $[12] = t3;
    $[13] = t4;
    $[14] = t5;
  } else {
    t5 = $[14];
  }
  return t5;
}
function url({
  label,
  defaultValue,
  validation,
  description
}) {
  return basicFormFieldWithSimpleReaderParse({
    label,
    Input(props) {
      return (0, import_jsx_runtime2.jsx)(UrlFieldInput, {
        label,
        description,
        validation,
        ...props
      });
    },
    defaultValue() {
      return defaultValue || null;
    },
    parse(value) {
      if (value === void 0) {
        return null;
      }
      if (typeof value !== "string") {
        throw new FieldDataError("Must be a string");
      }
      return value === "" ? null : value;
    },
    validate(value) {
      const message = validateUrl(validation, value, label);
      if (message !== void 0) {
        throw new FieldDataError(message);
      }
      assertRequired(value, validation, label);
      return value;
    },
    serialize(value) {
      return {
        value: value === null ? void 0 : value
      };
    }
  });
}
function ignored() {
  return {
    kind: "form",
    Input() {
      return null;
    },
    defaultValue() {
      return {
        value: void 0
      };
    },
    parse(value) {
      return {
        value
      };
    },
    serialize(value) {
      return value;
    },
    validate(value) {
      return value;
    },
    label: "Ignored",
    reader: {
      parse(value) {
        return value;
      }
    }
  };
}
var index = Object.freeze({
  __proto__: null,
  array,
  blocks,
  checkbox,
  child,
  cloudImage,
  conditional,
  date,
  datetime,
  document: document$1,
  empty,
  emptyDocument,
  emptyContent,
  file,
  image,
  integer,
  multiRelationship,
  multiselect,
  number,
  object,
  pathReference,
  relationship,
  select,
  slug,
  text,
  url,
  ignored,
  mdx,
  markdoc
});
export {
  BlockWrapper$1 as BlockWrapper,
  NotEditable,
  ToolbarSeparator,
  collection,
  component,
  config,
  index as fields,
  singleton
};
//# sourceMappingURL=@keystatic_core.js.map
