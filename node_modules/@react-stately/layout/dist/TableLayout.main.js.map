{"mappings":"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","sources":["packages/@react-stately/layout/src/TableLayout.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DropTarget, ItemDropTarget, Key} from '@react-types/shared';\nimport {getChildNodes} from '@react-stately/collections';\nimport {GridNode} from '@react-types/grid';\nimport {InvalidationContext, LayoutInfo, Point, Rect, Size} from '@react-stately/virtualizer';\nimport {LayoutNode, ListLayout, ListLayoutOptions} from './ListLayout';\nimport {TableCollection} from '@react-types/table';\nimport {TableColumnLayout} from '@react-stately/table';\n\nexport interface TableLayoutProps {\n  columnWidths?: Map<Key, number>\n}\n\nexport class TableLayout<T, O extends TableLayoutProps = TableLayoutProps> extends ListLayout<T, O> {\n  protected collection: TableCollection<T>;\n  private columnWidths: Map<Key, number>;\n  private stickyColumnIndices: number[];\n  private lastPersistedKeys: Set<Key> = null;\n  private persistedIndices: Map<Key, number[]> = new Map();\n\n  constructor(options: ListLayoutOptions) {\n    super(options);\n    this.stickyColumnIndices = [];\n  }\n\n  private columnsChanged(newCollection: TableCollection<T>, oldCollection: TableCollection<T> | null) {\n    return !oldCollection ||\n      newCollection.columns !== oldCollection.columns &&\n      newCollection.columns.length !== oldCollection.columns.length ||\n      newCollection.columns.some((c, i) =>\n        c.key !== oldCollection.columns[i].key ||\n        c.props.width !== oldCollection.columns[i].props.width ||\n        c.props.minWidth !== oldCollection.columns[i].props.minWidth ||\n        c.props.maxWidth !== oldCollection.columns[i].props.maxWidth\n      );\n  }\n\n  update(invalidationContext: InvalidationContext<O>): void {\n    let newCollection = this.virtualizer.collection as TableCollection<T>;\n\n    // If columnWidths were provided via layoutOptions, update those.\n    // Otherwise, calculate column widths ourselves.\n    if (invalidationContext.layoutOptions?.columnWidths) {\n      if (invalidationContext.layoutOptions.columnWidths !== this.columnWidths) {\n        this.columnWidths = invalidationContext.layoutOptions.columnWidths;\n        invalidationContext.sizeChanged = true;\n      }\n    } else if (invalidationContext.sizeChanged || this.columnsChanged(newCollection, this.collection)) {\n      let columnLayout = new TableColumnLayout({});\n      this.columnWidths = columnLayout.buildColumnWidths(this.virtualizer.visibleRect.width, newCollection, new Map());\n      invalidationContext.sizeChanged = true;\n    }\n\n    super.update(invalidationContext);\n  }\n\n  protected buildCollection(): LayoutNode[] {\n    this.stickyColumnIndices = [];\n\n    for (let column of this.collection.columns) {\n      // The selection cell and any other sticky columns always need to be visible.\n      // In addition, row headers need to be in the DOM for accessibility labeling.\n      if (this.isStickyColumn(column) || this.collection.rowHeaderColumnKeys.has(column.key)) {\n        this.stickyColumnIndices.push(column.index);\n      }\n    }\n\n    let header = this.buildTableHeader();\n    this.layoutNodes.set(header.layoutInfo.key, header);\n    let body = this.buildBody(header.layoutInfo.rect.height);\n    this.lastPersistedKeys = null;\n\n    body.layoutInfo.rect.width = Math.max(header.layoutInfo.rect.width, body.layoutInfo.rect.width);\n    this.contentSize = new Size(body.layoutInfo.rect.width, body.layoutInfo.rect.maxY);\n    return [\n      header,\n      body\n    ];\n  }\n\n  protected buildTableHeader(): LayoutNode {\n    let rect = new Rect(0, 0, 0, 0);\n    let layoutInfo = new LayoutInfo('header', this.collection.head?.key ?? 'header', rect);\n    layoutInfo.isSticky = true;\n    layoutInfo.zIndex = 1;\n\n    let y = 0;\n    let width = 0;\n    let children: LayoutNode[] = [];\n    for (let headerRow of this.collection.headerRows) {\n      let layoutNode = this.buildChild(headerRow, 0, y, layoutInfo.key);\n      layoutNode.layoutInfo.parentKey = layoutInfo.key;\n      y = layoutNode.layoutInfo.rect.maxY;\n      width = Math.max(width, layoutNode.layoutInfo.rect.width);\n      layoutNode.index = children.length;\n      children.push(layoutNode);\n    }\n\n    rect.width = width;\n    rect.height = y;\n\n    return {\n      layoutInfo,\n      children,\n      validRect: layoutInfo.rect,\n      node: this.collection.head\n    };\n  }\n\n  protected buildHeaderRow(headerRow: GridNode<T>, x: number, y: number): LayoutNode {\n    let rect = new Rect(0, y, 0, 0);\n    let row = new LayoutInfo('headerrow', headerRow.key, rect);\n\n    let height = 0;\n    let columns: LayoutNode[] = [];\n    for (let cell of getChildNodes(headerRow, this.collection)) {\n      let layoutNode = this.buildChild(cell, x, y, row.key);\n      layoutNode.layoutInfo.parentKey = row.key;\n      x = layoutNode.layoutInfo.rect.maxX;\n      height = Math.max(height, layoutNode.layoutInfo.rect.height);\n      layoutNode.index = columns.length;\n      columns.push(layoutNode);\n    }\n    for (let [i, layout] of columns.entries()) {\n      layout.layoutInfo.zIndex = columns.length - i + 1;\n    }\n\n    this.setChildHeights(columns, height);\n\n    rect.height = height;\n    rect.width = x;\n\n    return {\n      layoutInfo: row,\n      children: columns,\n      validRect: rect,\n      node: headerRow\n    };\n  }\n\n  private setChildHeights(children: LayoutNode[], height: number) {\n    for (let child of children) {\n      if (child.layoutInfo.rect.height !== height) {\n        // Need to copy the layout info before we mutate it.\n        child.layoutInfo = child.layoutInfo.copy();\n        child.layoutInfo.rect.height = height;\n      }\n    }\n  }\n\n  // used to get the column widths when rendering to the DOM\n  private getRenderedColumnWidth(node: GridNode<T>) {\n    let colspan = node.colspan ?? 1;\n    let colIndex = node.colIndex ?? node.index;\n    let width = 0;\n    for (let i = colIndex; i < colIndex + colspan; i++) {\n      let column = this.collection.columns[i];\n      if (column?.key != null) {\n        width += this.columnWidths.get(column.key);\n      }\n    }\n\n    return width;\n  }\n\n  private getEstimatedHeight(node: GridNode<T>, width: number, height: number, estimatedHeight: number) {\n    let isEstimated = false;\n\n    // If no explicit height is available, use an estimated height.\n    if (height == null) {\n      // If a previous version of this layout info exists, reuse its height.\n      // Mark as estimated if the size of the overall collection view changed,\n      // or the content of the item changed.\n      let previousLayoutNode = this.layoutNodes.get(node.key);\n      if (previousLayoutNode) {\n        height = previousLayoutNode.layoutInfo.rect.height;\n        isEstimated = node !== previousLayoutNode.node || width !== previousLayoutNode.layoutInfo.rect.width || previousLayoutNode.layoutInfo.estimatedSize;\n      } else {\n        height = estimatedHeight;\n        isEstimated = true;\n      }\n    }\n\n    return {height, isEstimated};\n  }\n\n  protected getEstimatedRowHeight(): number {\n    return this.rowHeight ?? this.estimatedRowHeight;\n  }\n\n  protected buildColumn(node: GridNode<T>, x: number, y: number): LayoutNode {\n    let width = this.getRenderedColumnWidth(node);\n    let {height, isEstimated} = this.getEstimatedHeight(node, width, this.headingHeight, this.estimatedHeadingHeight);\n    let rect = new Rect(x, y, width, height);\n    let layoutInfo = new LayoutInfo(node.type, node.key, rect);\n    layoutInfo.isSticky = this.isStickyColumn(node);\n    layoutInfo.zIndex = layoutInfo.isSticky ? 2 : 1;\n    layoutInfo.estimatedSize = isEstimated;\n\n    return {\n      layoutInfo,\n      children: [],\n      validRect: layoutInfo.rect,\n      node\n    };\n  }\n\n  // For subclasses.\n  // eslint-disable-next-line\n  protected isStickyColumn(node: GridNode<T>) {\n    return false;\n  }\n\n  protected buildBody(y: number): LayoutNode {\n    let rect = new Rect(0, y, 0, 0);\n    let layoutInfo = new LayoutInfo('rowgroup', this.collection.body.key, rect);\n\n    let startY = y;\n    let skipped = 0;\n    let width = 0;\n    let children: LayoutNode[] = [];\n    let rowHeight = this.getEstimatedRowHeight();\n    for (let node of getChildNodes(this.collection.body, this.collection)) {\n      // Skip rows before the valid rectangle unless they are already cached.\n      if (y + rowHeight < this.requestedRect.y && !this.isValid(node, y)) {\n        y += rowHeight;\n        skipped++;\n        continue;\n      }\n\n      let layoutNode = this.buildChild(node, 0, y, layoutInfo.key);\n      layoutNode.layoutInfo.parentKey = layoutInfo.key;\n      layoutNode.index = children.length;\n      y = layoutNode.layoutInfo.rect.maxY;\n      width = Math.max(width, layoutNode.layoutInfo.rect.width);\n      children.push(layoutNode);\n\n      if (y > this.requestedRect.maxY) {\n        // Estimate the remaining height for rows that we don't need to layout right now.\n        y += (this.collection.size - (skipped + children.length)) * rowHeight;\n        break;\n      }\n    }\n\n    if (children.length === 0) {\n      y = this.virtualizer.visibleRect.maxY;\n    }\n\n    rect.width = width;\n    rect.height = y - startY;\n\n    return {\n      layoutInfo,\n      children,\n      validRect: layoutInfo.rect.intersection(this.requestedRect),\n      node: this.collection.body\n    };\n  }\n\n  protected buildNode(node: GridNode<T>, x: number, y: number): LayoutNode {\n    switch (node.type) {\n      case 'headerrow':\n        return this.buildHeaderRow(node, x, y);\n      case 'item':\n        return this.buildRow(node, x, y);\n      case 'column':\n      case 'placeholder':\n        return this.buildColumn(node, x, y);\n      case 'cell':\n        return this.buildCell(node, x, y);\n      case 'loader':\n        return this.buildLoader(node, x, y);\n      default:\n        throw new Error('Unknown node type ' + node.type);\n    }\n  }\n\n  protected buildRow(node: GridNode<T>, x: number, y: number): LayoutNode {\n    let rect = new Rect(x, y, 0, 0);\n    let layoutInfo = new LayoutInfo('row', node.key, rect);\n\n    let children: LayoutNode[] = [];\n    let height = 0;\n    for (let child of getChildNodes(node, this.collection)) {\n      if (child.type === 'cell') {\n        if (x > this.requestedRect.maxX) {\n          // Adjust existing cached layoutInfo to ensure that it is out of view.\n          // This can happen due to column resizing.\n          let layoutNode = this.layoutNodes.get(child.key);\n          if (layoutNode) {\n            layoutNode.layoutInfo.rect.x = x;\n            x += layoutNode.layoutInfo.rect.width;\n          } else {\n            break;\n          }\n        } else {\n          let layoutNode = this.buildChild(child, x, y, layoutInfo.key);\n          x = layoutNode.layoutInfo.rect.maxX;\n          height = Math.max(height, layoutNode.layoutInfo.rect.height);\n          layoutNode.index = children.length;\n          children.push(layoutNode);\n        }\n      }\n    }\n\n    this.setChildHeights(children, height);\n\n    rect.width = this.layoutNodes.get(this.collection.head?.key ?? 'header').layoutInfo.rect.width;\n    rect.height = height;\n\n    return {\n      layoutInfo,\n      children,\n      validRect: rect.intersection(this.requestedRect),\n      node\n    };\n  }\n\n  protected buildCell(node: GridNode<T>, x: number, y: number): LayoutNode {\n    let width = this.getRenderedColumnWidth(node);\n    let {height, isEstimated} = this.getEstimatedHeight(node, width, this.rowHeight, this.estimatedRowHeight);\n    let rect = new Rect(x, y, width, height);\n    let layoutInfo = new LayoutInfo(node.type, node.key, rect);\n    layoutInfo.isSticky = this.isStickyColumn(node);\n    layoutInfo.zIndex = layoutInfo.isSticky ? 2 : 1;\n    layoutInfo.estimatedSize = isEstimated;\n\n    return {\n      layoutInfo,\n      children: [],\n      validRect: rect,\n      node\n    };\n  }\n\n  getVisibleLayoutInfos(rect: Rect) {\n    // Adjust rect to keep number of visible rows consistent.\n    // (only if height > 1 for getDropTargetFromPoint)\n    if (rect.height > 1) {\n      let rowHeight = this.getEstimatedRowHeight();\n      rect.y = Math.floor(rect.y / rowHeight) * rowHeight;\n      rect.height = Math.ceil(rect.height / rowHeight) * rowHeight;\n    }\n\n    // If layout hasn't yet been done for the requested rect, union the\n    // new rect with the existing valid rect, and recompute.\n    this.layoutIfNeeded(rect);\n\n    let res: LayoutInfo[] = [];\n\n    this.buildPersistedIndices();\n    for (let node of this.rootNodes) {\n      res.push(node.layoutInfo);\n      this.addVisibleLayoutInfos(res, node, rect);\n    }\n\n    return res;\n  }\n\n  private addVisibleLayoutInfos(res: LayoutInfo[], node: LayoutNode, rect: Rect) {\n    if (!node.children || node.children.length === 0) {\n      return;\n    }\n\n    switch (node.layoutInfo.type) {\n      case 'header': {\n        for (let child of node.children) {\n          res.push(child.layoutInfo);\n          this.addVisibleLayoutInfos(res, child, rect);\n        }\n        break;\n      }\n      case 'rowgroup': {\n        let firstVisibleRow = this.binarySearch(node.children, rect.topLeft, 'y');\n        let lastVisibleRow = this.binarySearch(node.children, rect.bottomRight, 'y');\n\n        // Add persisted rows before the visible rows.\n        let persistedRowIndices = this.persistedIndices.get(node.layoutInfo.key);\n        let persistIndex = 0;\n        while (\n          persistedRowIndices &&\n          persistIndex < persistedRowIndices.length &&\n          persistedRowIndices[persistIndex] < firstVisibleRow\n        ) {\n          let idx = persistedRowIndices[persistIndex];\n          if (idx < node.children.length) {\n            res.push(node.children[idx].layoutInfo);\n            this.addVisibleLayoutInfos(res, node.children[idx], rect);\n          }\n          persistIndex++;\n        }\n\n        for (let i = firstVisibleRow; i <= lastVisibleRow; i++) {\n          // Skip persisted rows that overlap with visible cells.\n          while (persistedRowIndices && persistIndex < persistedRowIndices.length && persistedRowIndices[persistIndex] < i) {\n            persistIndex++;\n          }\n\n          res.push(node.children[i].layoutInfo);\n          this.addVisibleLayoutInfos(res, node.children[i], rect);\n        }\n\n        // Add persisted rows after the visible rows.\n        while (persistedRowIndices && persistIndex < persistedRowIndices.length) {\n          let idx = persistedRowIndices[persistIndex++];\n          if (idx < node.children.length) {\n            res.push(node.children[idx].layoutInfo);\n            this.addVisibleLayoutInfos(res, node.children[idx], rect);\n          }\n        }\n        break;\n      }\n      case 'headerrow':\n      case 'row': {\n        let firstVisibleCell = this.binarySearch(node.children, rect.topLeft, 'x');\n        let lastVisibleCell = this.binarySearch(node.children, rect.topRight, 'x');\n        let stickyIndex = 0;\n\n        // Add persisted/sticky cells before the visible cells.\n        let persistedCellIndices = this.persistedIndices.get(node.layoutInfo.key) || this.stickyColumnIndices;\n        while (stickyIndex < persistedCellIndices.length && persistedCellIndices[stickyIndex] < firstVisibleCell) {\n          let idx = persistedCellIndices[stickyIndex];\n          if (idx < node.children.length) {\n            res.push(node.children[idx].layoutInfo);\n          }\n          stickyIndex++;\n        }\n\n        for (let i = firstVisibleCell; i <= lastVisibleCell; i++) {\n          // Skip sticky cells that overlap with visible cells.\n          while (stickyIndex < persistedCellIndices.length && persistedCellIndices[stickyIndex] < i) {\n            stickyIndex++;\n          }\n\n          res.push(node.children[i].layoutInfo);\n        }\n\n        // Add any remaining sticky cells after the visible cells.\n        while (stickyIndex < persistedCellIndices.length) {\n          let idx = persistedCellIndices[stickyIndex++];\n          if (idx < node.children.length) {\n            res.push(node.children[idx].layoutInfo);\n          }\n        }\n        break;\n      }\n      default:\n        throw new Error('Unknown node type ' + node.layoutInfo.type);\n    }\n  }\n\n  private binarySearch(items: LayoutNode[], point: Point, axis: 'x' | 'y') {\n    let low = 0;\n    let high = items.length - 1;\n    while (low <= high) {\n      let mid = (low + high) >> 1;\n      let item = items[mid];\n\n      if ((axis === 'x' && item.layoutInfo.rect.maxX <= point.x) || (axis === 'y' && item.layoutInfo.rect.maxY <= point.y)) {\n        low = mid + 1;\n      } else if ((axis === 'x' && item.layoutInfo.rect.x > point.x) || (axis === 'y' && item.layoutInfo.rect.y > point.y)) {\n        high = mid - 1;\n      } else {\n        return mid;\n      }\n    }\n\n    return Math.max(0, Math.min(items.length - 1, low));\n  }\n\n  private buildPersistedIndices() {\n    if (this.virtualizer.persistedKeys === this.lastPersistedKeys) {\n      return;\n    }\n\n    this.lastPersistedKeys = this.virtualizer.persistedKeys;\n    this.persistedIndices.clear();\n\n    // Build a map of parentKey => indices of children to persist.\n    for (let key of this.virtualizer.persistedKeys) {\n      let layoutInfo = this.layoutNodes.get(key)?.layoutInfo;\n\n      // Walk up ancestors so parents are also persisted if children are.\n      while (layoutInfo && layoutInfo.parentKey) {\n        let collectionNode = this.collection.getItem(layoutInfo.key);\n        let indices = this.persistedIndices.get(layoutInfo.parentKey);\n        if (!indices) {\n          // stickyColumnIndices are always persisted along with any cells from persistedKeys.\n          indices = collectionNode?.type === 'cell' || collectionNode?.type === 'column' ? [...this.stickyColumnIndices] : [];\n          this.persistedIndices.set(layoutInfo.parentKey, indices);\n        }\n\n        let index = this.layoutNodes.get(layoutInfo.key).index;\n\n        if (!indices.includes(index)) {\n          indices.push(index);\n        }\n\n        layoutInfo = this.layoutNodes.get(layoutInfo.parentKey)?.layoutInfo;\n      }\n    }\n\n    for (let indices of this.persistedIndices.values()) {\n      indices.sort((a, b) => a - b);\n    }\n  }\n\n  getDropTargetFromPoint(x: number, y: number, isValidDropTarget: (target: DropTarget) => boolean): DropTarget {\n    x += this.virtualizer.visibleRect.x;\n    y += this.virtualizer.visibleRect.y;\n\n    // Custom variation of this.virtualizer.keyAtPoint that ignores body\n    let key: Key;\n    let point = new Point(x, y);\n    let rectAtPoint = new Rect(point.x, point.y, 1, 1);\n    let layoutInfos = this.virtualizer.layout.getVisibleLayoutInfos(rectAtPoint).filter(info => info.type === 'row');\n\n    // Layout may return multiple layout infos in the case of\n    // persisted keys, so find the first one that actually intersects.\n    for (let layoutInfo of layoutInfos) {\n      if (layoutInfo.rect.intersects(rectAtPoint)) {\n        key = layoutInfo.key;\n      }\n    }\n\n    if (key == null || this.collection.size === 0) {\n      return {type: 'root'};\n    }\n\n    let layoutInfo = this.getLayoutInfo(key);\n    let rect = layoutInfo.rect;\n    let target: DropTarget = {\n      type: 'item',\n      key: layoutInfo.key,\n      dropPosition: 'on'\n    };\n\n    // If dropping on the item isn't accepted, try the target before or after depending on the y position.\n    // Otherwise, if dropping on the item is accepted, still try the before/after positions if within 10px\n    // of the top or bottom of the item.\n    if (!isValidDropTarget(target)) {\n      if (y <= rect.y + rect.height / 2 && isValidDropTarget({...target, dropPosition: 'before'})) {\n        target.dropPosition = 'before';\n      } else if (isValidDropTarget({...target, dropPosition: 'after'})) {\n        target.dropPosition = 'after';\n      }\n    } else if (y <= rect.y + 10 && isValidDropTarget({...target, dropPosition: 'before'})) {\n      target.dropPosition = 'before';\n    } else if (y >= rect.maxY - 10 && isValidDropTarget({...target, dropPosition: 'after'})) {\n      target.dropPosition = 'after';\n    }\n\n    return target;\n  }\n\n  getDropTargetLayoutInfo(target: ItemDropTarget): LayoutInfo {\n    let layoutInfo = super.getDropTargetLayoutInfo(target);\n    layoutInfo.parentKey = this.collection.body.key;\n    return layoutInfo;\n  }\n}\n"],"names":[],"version":3,"file":"TableLayout.main.js.map"}