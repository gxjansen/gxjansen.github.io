{"mappings":"AAAA;;;;;;;;;;CAUC,GAMD,IAAI,4BAAM;AAMH,MAAM;IA2BX;;GAEC,GACD,kBAAkB;QAChB,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,UAAU,GAAG;IACpB;IAEA,gBAAgB,SAAiB,EAAE;QACjC,4FAA4F;QAC5F,oGAAoG;QACpG,iGAAiG;QACjG,sEAAsE;QACtE,IAAI,WAAW,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC;QACtC,IAAI,OAAO,CAAA,qBAAA,+BAAA,SAAU,MAAM,IAAG,IAC1B,SAAS,KAAK,KACd,IAAI,0CAAmB,IAAI,CAAC,WAAW;QAE3C,KAAK,QAAQ,GAAG;QAChB,KAAK,MAAM,GAAG,IAAI;QAClB,OAAO;IACT;IAEA,WAAW,KAAyB,EAAE;QACpC,MAAM,eAAe;QACrB,IAAI,WAAW,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,MAAM,QAAQ;QACpD,IAAI,CAAC,UAAU;YACb,WAAW,EAAE;YACb,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,MAAM,QAAQ,EAAE;QACzC;QACA,SAAS,IAAI,CAAC;IAChB;IAxCA,YAAY,WAA8B,CAAE;QAC1C,IAAI,CAAC,WAAW,GAAG;QACnB,IAAI,CAAC,GAAG,GAAG,EAAE;QACb,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,QAAQ,GAAG,IAAI;QACpB,IAAI,CAAC,aAAa,GAAG,IAAI;IAC3B;AAmCF","sources":["packages/@react-stately/virtualizer/src/ReusableView.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from '@react-types/shared';\nimport {LayoutInfo} from './LayoutInfo';\nimport {Virtualizer} from './Virtualizer';\n\nlet KEY = 0;\n\n/**\n * [Virtualizer]{@link Virtualizer} creates instances of the [ReusableView]{@link ReusableView} class to\n * represent views currently being displayed.\n */\nexport class ReusableView<T extends object, V> {\n  /** The Virtualizer this view is a part of. */\n  virtualizer: Virtualizer<T, V>;\n\n  /** The LayoutInfo this view is currently representing. */\n  layoutInfo: LayoutInfo | null;\n\n  /** The content currently being displayed by this view, set by the virtualizer. */\n  content: T;\n\n  rendered: V;\n\n  viewType: string;\n  key: Key;\n\n  parent: ReusableView<T, V> | null;\n  children: Set<ReusableView<T, V>>;\n  reusableViews: Map<string, ReusableView<T, V>[]>;\n\n  constructor(virtualizer: Virtualizer<T, V>) {\n    this.virtualizer = virtualizer;\n    this.key = ++KEY;\n    this.parent = null;\n    this.children = new Set();\n    this.reusableViews = new Map();\n  }\n\n  /**\n   * Prepares the view for reuse. Called just before the view is removed from the DOM.\n   */\n  prepareForReuse() {\n    this.content = null;\n    this.rendered = null;\n    this.layoutInfo = null;\n  }\n\n  getReusableView(reuseType: string) {\n    // Reusable view queue should be FIFO so that DOM order remains consistent during scrolling.\n    // For example, cells within a row should remain in the same order even if the row changes contents.\n    // The cells within a row are removed from their parent in order. If the row is reused, the cells\n    // should be reused in the new row in the same order they were before.\n    let reusable = this.reusableViews.get(reuseType);\n    let view = reusable?.length > 0\n      ? reusable.shift()\n      : new ReusableView<T, V>(this.virtualizer);\n\n    view.viewType = reuseType;\n    view.parent = this;\n    return view;\n  }\n\n  reuseChild(child: ReusableView<T, V>) {\n    child.prepareForReuse();\n    let reusable = this.reusableViews.get(child.viewType);\n    if (!reusable) {\n      reusable = [];\n      this.reusableViews.set(child.viewType, reusable);\n    }\n    reusable.push(child);\n  }\n}\n"],"names":[],"version":3,"file":"ReusableView.module.js.map"}