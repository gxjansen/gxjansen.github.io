(function(d,r){typeof exports=="object"&&typeof module<"u"?r(exports,require("yjs")):typeof define=="function"&&define.amd?define(["exports","yjs"],r):(d=typeof globalThis<"u"?globalThis:d||self,r(d.ToEverythingIndexedDBProvider={},d.yjs))})(this,function(d,r){"use strict";async function T(t,n){const c=async a=>{const o=await n.queryDocState(a.guid);o&&r.applyUpdate(a,o.missing,"sync-doc-from-datasource"),await Promise.all([...a.subdocs].map(async p=>{await c(p)}))};await c(t)}async function V(t,n){const c=async a=>{await n.sendDocUpdate(a.guid,r.encodeStateAsUpdate(a)),await Promise.all([...a.subdocs].map(async o=>{await c(o)}))};await c(t)}async function $(t,n,c){const a=t();await Promise.all(a.map(o=>c.queryDocState(o).then(async p=>{const w=await(async()=>p?n.queryDocState(o,{stateVector:p.state}):n.queryDocState(o))();if(w){const y=w.missing;if(y.length===2&&y[0]===0&&y[1]===0)return;await c.sendDocUpdate(o,w.missing)}})))}function q(t,n="val does not exist"){if(t==null)throw n instanceof Error?n:new Error(n)}function L(t,n){if(t.guid===n)return t;for(const c of t.subdocs){const a=L(c,n);if(a)return a}}const z=(t,n,c={})=>{let a=!1;const o=new Map,p=new Map,w=new Set;let y=null;const{origin:D="lazy-provider"}=c;let b={type:"idle"},S=0;const v=new Set,f=e=>{e.type==="syncing"?S++:(e.type==="synced"||e.type==="error")&&S--,S<0&&console.error("syncingStatus < 0, this should not happen",c.origin),S===0&&(b=e),e.type!=="synced"&&(b=e),S===0&&(a?b={type:"synced"}:b={type:"idle"}),v.forEach(s=>s())};async function U(e){const s=e.guid;{const u=s.startsWith("space:")?s.slice(6):s,g=`${t.guid}:space:${u}`,h=`space:${u}`,l=await n.queryDocState(g),m=await n.queryDocState(h);let P=!1;l&&l.missing.length!==2&&l.missing[0]!==0&&l.missing[1]!==0&&(r.applyUpdate(e,l.missing,D),P=!0),m&&m.missing.length!==2&&m.missing[0]!==0&&m.missing[1]!==0&&(r.applyUpdate(e,m.missing,D),P=!0),P&&await n.sendDocUpdate(s,r.encodeStateAsUpdate(e,l?l.state:m?m.state:void 0))}if(!a)return;f({type:"syncing"});const i=await n.queryDocState(s,{stateVector:r.encodeStateVector(e)}).then(u=>(f({type:"synced"}),u)).catch(u=>{throw f({type:"error",error:u}),u});o.set(s,[]),i&&r.applyUpdate(e,i.missing,D),a&&(await n.sendDocUpdate(s,r.encodeStateAsUpdate(e,i?i.state:void 0)),e.emit("sync",[]))}function R(e){const s=new Set;p.set(e.guid,s);const i=async(g,h)=>{D!==h&&(f({type:"syncing"}),n.sendDocUpdate(e.guid,g).then(()=>{f({type:"synced"})}).catch(l=>{f({type:"error",error:l}),console.error(l)}))},u=g=>{g.loaded.forEach(h=>{E(h).catch(console.error)}),g.removed.forEach(h=>{M(h)})};e.on("update",i),e.on("subdocs",u),s.add(()=>{e.off("update",i),e.off("subdocs",u)})}function k(){var s;q(y,"abortController should be defined");const e=(s=n.onDocUpdate)==null?void 0:s.call(n,(i,u)=>{var h;f({type:"syncing"});const g=L(t,i);g?(r.applyUpdate(g,u,D),o.has(i)&&((h=o.get(i))==null||h.forEach(l=>r.applyUpdate(g,l,D)),o.delete(i))):(console.warn("doc not found",i),o.set(i,(o.get(i)??[]).concat(u))),f({type:"synced"})});y.signal.addEventListener("abort",()=>{e==null||e()})}async function E(e){w.has(e.guid)||(w.add(e.guid),R(e),await U(e),await Promise.all([...e.subdocs].filter(s=>s.shouldLoad).map(s=>E(s))))}function M(e){w.delete(e.guid);const s=p.get(e.guid);s&&(s.forEach(i=>i()),p.delete(e.guid)),e.subdocs.forEach(M)}function H(){p.forEach(e=>{e.forEach(s=>s())}),p.clear(),w.clear()}function I(){a=!0,y=new AbortController,f({type:"syncing"}),E(t).then(()=>{f({type:"synced"})}).catch(e=>{f({type:"error",error:e}),console.error(e)}),k()}async function x(){a=!1,H(),q(y,"abortController should be defined"),y.abort(),y=null}const F=async e=>{await U(e),await Promise.all([...e.subdocs.values()].map(s=>F(s)))};return{sync:async e=>{a=!0;try{e?await U(t):await F(t)}finally{a=!1}},get status(){return b},subscribeStatusChange(e){return v.add(e),()=>{v.delete(e)}},get connected(){return a},passive:!0,connect:I,disconnect:x,datasource:n}};function A(t,n){if(t.guid===n)return t;for(const c of t.subdocs){const a=A(c,n);if(a)return a}}const C=t=>(t.preventDefault(),t.returnValue="Data is not saved. Are you sure you want to leave?"),O=async t=>{window.addEventListener("beforeunload",C,{capture:!0}),await t,window.removeEventListener("beforeunload",C,{capture:!0})};d.createLazyProvider=z,d.getDoc=A,d.syncDataSource=$,d.syncDataSourceFromDoc=V,d.syncDocFromDataSource=T,d.writeOperation=O,Object.defineProperty(d,Symbol.toStringTag,{value:"Module"})});
//# sourceMappingURL=index.umd.cjs.map
