import type { Doc as YDoc } from 'yjs';
import type { DocState } from './types';
export interface DocDataSource {
    /**
     * request diff update from other clients
     */
    queryDocState: (guid: string, options?: {
        stateVector?: Uint8Array;
        targetClientId?: number;
    }) => Promise<DocState | false>;
    /**
     * send update to the datasource
     */
    sendDocUpdate: (guid: string, update: Uint8Array) => Promise<void>;
    /**
     * listen to update from the datasource. Returns a function to unsubscribe.
     * this is optional because some datasource might not support it
     */
    onDocUpdate?(callback: (guid: string, update: Uint8Array) => void): () => void;
}
export declare function syncDocFromDataSource(rootDoc: YDoc, datasource: DocDataSource): Promise<void>;
export declare function syncDataSourceFromDoc(rootDoc: YDoc, datasource: DocDataSource): Promise<void>;
/**
 * query the datasource from source, and save the latest update to target
 *
 * @example
 *  bindDataSource(socketIO, indexedDB)
 *  bindDataSource(socketIO, sqlite)
 */
export declare function syncDataSource(listDocGuids: () => string[], remoteDataSource: DocDataSource, localDataSource: DocDataSource): Promise<void>;
//# sourceMappingURL=data-source.d.ts.map