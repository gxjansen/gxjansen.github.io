import { Ast, format, parse, nodes } from '@markdoc/markdoc/dist/index.mjs';
import { c } from './react-compiler-runtime-0011f46e.js';
import { FieldLabel, FieldMessage, Field } from '@keystar/ui/field';
import React, { useState, useMemo, createContext, useContext, forwardRef, useReducer, useRef, useId, useEffect, useCallback, Fragment as Fragment$1, createElement, memo, useImperativeHandle, useLayoutEffect } from 'react';
import { Box, Flex, Grid, Divider, VStack, HStack, ScrollView as ScrollView$1 } from '@keystar/ui/layout';
import { Text, Heading, Kbd, Prose, useProseStyleProps } from '@keystar/ui/typography';
import { css, useMediaQuery, tokenSchema, breakpoints, useBreakpoint, transition, containerQueries, toDataAttributes, breakpointQueries, classNames, injectGlobal } from '@keystar/ui/style';
import { setBlockType, wrapIn, toggleMark, chainCommands, newlineInCode, createParagraphNear, liftEmptyBlock, splitBlock, deleteSelection, joinBackward, selectNodeBackward, joinForward, selectNodeForward, selectAll, selectTextblockStart, selectTextblockEnd, joinUp, joinDown } from 'prosemirror-commands';
import { NodeSelection, Selection, Plugin, PluginKey, TextSelection, AllSelection, EditorState } from 'prosemirror-state';
import { findWrapping, ReplaceAroundStep, canSplit, liftTarget, canJoin, dropPoint } from 'prosemirror-transform';
import { Button, ButtonGroup, ActionButton } from '@keystar/ui/button';
import { EditorPopover, EditorToolbar, EditorToolbarSeparator, EditorToolbarGroup, EditorToolbarItem, EditorToolbarButton } from '@keystar/ui/editor';
import { Icon } from '@keystar/ui/icon';
import { boldIcon } from '@keystar/ui/icon/icons/boldIcon';
import { chevronDownIcon } from '@keystar/ui/icon/icons/chevronDownIcon';
import { codeIcon } from '@keystar/ui/icon/icons/codeIcon';
import { italicIcon } from '@keystar/ui/icon/icons/italicIcon';
import { listIcon } from '@keystar/ui/icon/icons/listIcon';
import { listOrderedIcon } from '@keystar/ui/icon/icons/listOrderedIcon';
import { minusIcon } from '@keystar/ui/icon/icons/minusIcon';
import { plusIcon } from '@keystar/ui/icon/icons/plusIcon';
import { quoteIcon } from '@keystar/ui/icon/icons/quoteIcon';
import { removeFormattingIcon } from '@keystar/ui/icon/icons/removeFormattingIcon';
import { strikethroughIcon } from '@keystar/ui/icon/icons/strikethroughIcon';
import { tableIcon } from '@keystar/ui/icon/icons/tableIcon';
import { Menu, MenuTrigger, ActionMenu, Item as Item$4 } from '@keystar/ui/menu';
import { Picker, Item as Item$6 } from '@keystar/ui/picker';
import { TooltipTrigger, Tooltip } from '@keystar/ui/tooltip';
import { fileCodeIcon } from '@keystar/ui/icon/icons/fileCodeIcon';
import { heading1Icon } from '@keystar/ui/icon/icons/heading1Icon';
import { heading2Icon } from '@keystar/ui/icon/icons/heading2Icon';
import { heading3Icon } from '@keystar/ui/icon/icons/heading3Icon';
import { heading4Icon } from '@keystar/ui/icon/icons/heading4Icon';
import { heading5Icon } from '@keystar/ui/icon/icons/heading5Icon';
import { heading6Icon } from '@keystar/ui/icon/icons/heading6Icon';
import { imageIcon } from '@keystar/ui/icon/icons/imageIcon';
import { separatorHorizontalIcon } from '@keystar/ui/icon/icons/separatorHorizontalIcon';
import { NodeRange, Fragment as Fragment$2, Slice, Schema, Node as Node$1, MarkType, DOMSerializer, DOMParser as DOMParser$1 } from 'prosemirror-model';
import { css as css$1 } from '@emotion/css';
import { Dialog, DialogContainer, AlertDialog, useDialogContainer } from '@keystar/ui/dialog';
import { typedKeys, assertNever, assert } from 'emery';
import { ai as useAppState, z as useConfig, aj as useChanged, k as serializeRepoConfig, ak as Ref_base, c as useRepoInfo, a9 as useBranches, q as useCurrentBranch, X as getBranchPrefix, u as useRouter, al as blockElementSpacing$1, A as useCloudInfo, am as useImageLibraryURL, Y as getRepoUrl, a1 as useViewer, an as useRawCloudInfo, _ as isGitHubConfig, D as redirectToCloudAuth, ao as clearObjectCache, ap as clearDrafts, aq as getCloudAuth, K as KEYSTATIC_CLOUD_API_URL, n as KEYSTATIC_CLOUD_HEADERS, r as isLocalConfig, ar as FieldDataError, P as getSlugFromState, as as AddToPathProvider, W as useEventCallback$1, at as moveChildren, au as isBlock, av as nodeTypeMatcher, aw as getAncestorComponentChildFieldDocumentFeatures, ax as allMarks, ay as isElementActive, az as useContentPanelQuery, aA as PathContextProvider, aB as SlugFieldProvider, aC as useElementWithSetNodes, aD as useActiveBlockPopover, aE as BlockPopoverTrigger, aF as BlockPopover, aG as focusWithPreviousSelection, aH as cloneDescendent, aI as areArraysEqual, aJ as getSchemaAtPropPath, aK as NotEditable, aL as getDocumentFeaturesForChildField, aM as getAncestorSchemas, aN as normalizeTextBasedOnInlineMarksAndSoftBreaks, aO as normalizeElementBasedOnDocumentFeatures, aP as normalizeInlineBasedOnLinks, aQ as insertNodesButReplaceIfSelectionIsAtEmptyParagraphOrHeading, o as object, aR as clearFormatting, aS as EditorAfterButIgnoringingPointsWithNoContent, aT as isInlineContainer, aU as withDocumentFeaturesNormalization, aV as editorSchema, aW as useContentPanelSize, aX as ActiveBlockPopoverProvider, aY as getPlaceholderTextForPropPath, aZ as getWholeDocumentFeaturesForChildField, a_ as fixPath, a$ as basicFormFieldWithSimpleReaderParse, b0 as text, b1 as collectDirectoriesUsedInSchema } from './index-330df5ae.js';
import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { useDragAndDrop } from '@keystar/ui/drag-and-drop';
import { trash2Icon } from '@keystar/ui/icon/icons/trash2Icon';
import { ListView, Item as Item$2 } from '@keystar/ui/list-view';
import { Content, Footer, ClearSlots } from '@keystar/ui/slots';
import { useLocalizedStringFormatter, useLocale } from '@react-aria/i18n';
import { useField } from '@react-aria/label';
import { Range, Editor as Editor$1, Transforms, Node, Element as Element$1, Path, Text as Text$1, Point, createEditor } from 'slate';
import { useSlate, useSlateStatic, ReactEditor, useSelected, Slate, Editable, withReact } from 'slate-react';
import { isHotkey } from 'is-hotkey';
import { SplitPaneSecondary, SplitPanePrimary, SplitView } from '@keystar/ui/split-view';
import { panelLeftOpenIcon } from '@keystar/ui/icon/icons/panelLeftOpenIcon';
import { panelLeftCloseIcon } from '@keystar/ui/icon/icons/panelLeftCloseIcon';
import { panelRightOpenIcon } from '@keystar/ui/icon/icons/panelRightOpenIcon';
import { panelRightCloseIcon } from '@keystar/ui/icon/icons/panelRightCloseIcon';
import { useModalOverlay, DismissButton, useOverlayTrigger } from '@react-aria/overlays';
import { useUpdateEffect, chain } from '@react-aria/utils';
import { useOverlayTriggerState } from '@react-stately/overlays';
import { Badge } from '@keystar/ui/badge';
import { NavItem, NavList, NavGroup } from '@keystar/ui/nav-list';
import { Blanket, Popover } from '@keystar/ui/overlays';
import { StatusLight } from '@keystar/ui/status-light';
import { usePrevious } from '@keystar/ui/utils';
import { useProvider } from '@keystar/ui/core';
import { Item as Item$1, Section } from '@react-stately/collections';
import { gql } from '@ts-gql/tag/no-transform';
import { useMutation, useQuery } from 'urql';
import { Avatar } from '@keystar/ui/avatar';
import { logOutIcon } from '@keystar/ui/icon/icons/logOutIcon';
import { gitPullRequestIcon } from '@keystar/ui/icon/icons/gitPullRequestIcon';
import { gitBranchPlusIcon } from '@keystar/ui/icon/icons/gitBranchPlusIcon';
import { githubIcon } from '@keystar/ui/icon/icons/githubIcon';
import { gitForkIcon } from '@keystar/ui/icon/icons/gitForkIcon';
import { monitorIcon } from '@keystar/ui/icon/icons/monitorIcon';
import { moonIcon } from '@keystar/ui/icon/icons/moonIcon';
import { sunIcon } from '@keystar/ui/icon/icons/sunIcon';
import { userIcon } from '@keystar/ui/icon/icons/userIcon';
import { Combobox, Item } from '@keystar/ui/combobox';
import { gitBranchIcon } from '@keystar/ui/icon/icons/gitBranchIcon';
import { ProgressCircle } from '@keystar/ui/progress';
import { RadioGroup, Radio } from '@keystar/ui/radio';
import { TextField } from '@keystar/ui/text-field';
import { editIcon } from '@keystar/ui/icon/icons/editIcon';
import { externalLinkIcon } from '@keystar/ui/icon/icons/externalLinkIcon';
import { linkIcon } from '@keystar/ui/icon/icons/linkIcon';
import { unlinkIcon } from '@keystar/ui/icon/icons/unlinkIcon';
import { sanitizeUrl } from '@braintree/sanitize-url';
import { Item as Item$3, ActionGroup } from '@keystar/ui/action-group';
import { maximizeIcon } from '@keystar/ui/icon/icons/maximizeIcon';
import { minimizeIcon } from '@keystar/ui/icon/icons/minimizeIcon';
import { subscriptIcon } from '@keystar/ui/icon/icons/subscriptIcon';
import { superscriptIcon } from '@keystar/ui/icon/icons/superscriptIcon';
import { typeIcon } from '@keystar/ui/icon/icons/typeIcon';
import { underlineIcon } from '@keystar/ui/icon/icons/underlineIcon';
import { alignLeftIcon } from '@keystar/ui/icon/icons/alignLeftIcon';
import { alignRightIcon } from '@keystar/ui/icon/icons/alignRightIcon';
import { alignCenterIcon } from '@keystar/ui/icon/icons/alignCenterIcon';
import { matchSorter } from 'match-sorter';
import { assertNever as assertNever$1, assert as assert$1 } from 'emery/assertions';
import { trashIcon } from '@keystar/ui/icon/icons/trashIcon';
import weakMemoize$1 from '@emotion/weak-memoize';
import { columnsIcon } from '@keystar/ui/icon/icons/columnsIcon';
import { fileUpIcon } from '@keystar/ui/icon/icons/fileUpIcon';
import '@keystar/ui/checkbox';
import '@keystar/ui/number-field';
import '@keystar/ui/link';
import '@keystar/ui/action-bar';
import 'minimatch';
import '@keystar/ui/icon/icons/refreshCwIcon';
import '@sindresorhus/slugify';
import { ySyncPluginKey, yCursorPluginKey, undo, redo, yUndoPluginKey, ySyncPlugin, yCursorPlugin, yUndoPlugin, yXmlFragmentToProsemirror, prosemirrorToYXmlFragment } from 'y-prosemirror';
import { sheetIcon } from '@keystar/ui/icon/icons/sheetIcon';
import scrollIntoView from 'scroll-into-view-if-needed';
import { useListState } from '@react-stately/list';
import { Item as Item$5, useListBoxLayout, ListBoxBase, listStyles } from '@keystar/ui/listbox';
import { withHistory } from 'slate-history';
import { fromMarkdown } from 'mdast-util-from-markdown';
import { gfmAutolinkLiteralFromMarkdown, gfmAutolinkLiteralToMarkdown } from 'mdast-util-gfm-autolink-literal';
import { gfmAutolinkLiteral } from 'micromark-extension-gfm-autolink-literal';
import { gfmStrikethroughFromMarkdown, gfmStrikethroughToMarkdown } from 'mdast-util-gfm-strikethrough';
import { gfmStrikethrough } from 'micromark-extension-gfm-strikethrough';
import { a as base64UrlDecode, c as base64UrlEncode } from './base64-3538d789.js';
import { EditorView, Decoration, DecorationSet } from 'prosemirror-view';
import { ListKeyboardDelegate, useSelectableCollection } from '@react-aria/selection';
import { toggleHeader, deleteRow, deleteColumn, addRowAfter, addColumnAfter, tableEditing } from 'prosemirror-tables';
import { pencilIcon } from '@keystar/ui/icon/icons/pencilIcon';
import { createPortal } from 'react-dom';
import { undo as undo$1, redo as redo$1, closeHistory, history } from 'prosemirror-history';
import { keydownHandler as keydownHandler$1, keymap } from 'prosemirror-keymap';
import escape from 'escape-string-regexp';
import { toMarkdown } from 'mdast-util-to-markdown';
import { gfmTableToMarkdown, gfmTableFromMarkdown } from 'mdast-util-gfm-table';
import { mdxToMarkdown, mdxFromMarkdown } from 'mdast-util-mdx';
import { gfmTable } from 'micromark-extension-gfm-table';
import { mdxjs } from 'micromark-extension-mdxjs';
import { visit } from 'unist-util-visit';

const strings = {
  "ar-AE": {
    "add": `يضيف`,
    "basedOn": `مرتكز على`,
    "branchName": `اسم الفرع`,
    "branches": `الفروع`,
    "cancel": `يلغي`,
    "clear": `مسح`,
    "collection": `مجموعة`,
    "collections": `المجموعات`,
    "create": `يخلق`,
    "createPullRequest": `إنشاء طلب سحب`,
    "dashboard": `لوحة القيادة`,
    "currentBranch": `الفرع الحالي`,
    "defaultBranch": `الفرع الافتراضي`,
    "deleteBranch": `حذف الفرع`,
    "delete": `يمسح`,
    "edit": `يحرر`,
    "loading": `جارٍ التحميل`,
    "newBranch": `فرع جديد`,
    "otherBranches": `الفروع الأخرى`,
    "search": `بحث`,
    "pullRequests": `طلبات السحب`,
    "save": `يحفظ`,
    "singleton": `سينجلتون`,
    "singletons": `الفردي`,
    "theDefaultBranchInYourRepository": `الفرع الافتراضي في المستودع الخاص بك. اختر هذا لبدء شيء جديد لا يعتمد على فرعك الحالي.`,
    "theCurrentlyCheckedOutBranch": `الفرع المعاد حاليا. اختر هذا إذا كنت بحاجة إلى البناء على العمل الحالي من الفرع الحالي.`,
    "viewPullRequests": `عرض طلبات السحب`
  },
  "da-DK": {
    "add": `Tilføje`,
    "branchName": `Afdelingsnavn`,
    "basedOn": `Baseret på`,
    "branches": `Grene`,
    "cancel": `Afbestille`,
    "clear": `Ryd`,
    "collection": `Kollektion`,
    "collections": `Samlinger`,
    "createPullRequest": `Opret pull-anmodning`,
    "create": `skab`,
    "currentBranch": `Nuværende filial`,
    "defaultBranch": `Standard gren`,
    "dashboard": `Dashboard`,
    "delete": `Slet`,
    "deleteBranch": `Slet filial`,
    "edit": `Redigere`,
    "loading": `Indlæser`,
    "newBranch": `Ny filial`,
    "otherBranches": `Andre grene`,
    "pullRequests": `Træk anmodninger`,
    "save": `Gemme`,
    "search": `Søg`,
    "singletons": `Singletoner`,
    "theCurrentlyCheckedOutBranch": `Den aktuelt tjekkede filial. Vælg dette, hvis du skal bygge videre på eksisterende arbejde fra den nuværende filial.`,
    "singleton": `Singleton`,
    "theDefaultBranchInYourRepository": `Standardgrenen i dit lager. Vælg dette for at starte på noget nyt, der ikke er afhængigt af din nuværende filial.`,
    "viewPullRequests": `Se pull-anmodninger`
  },
  "cs-CZ": {
    "add": `Přidat`,
    "basedOn": `Na základě`,
    "branchName": `Jméno pobočky`,
    "cancel": `zrušení`,
    "branches": `Větve`,
    "clear": `Vymazat`,
    "collection": `Sbírka`,
    "create": `Vytvořit`,
    "collections": `Sbírky`,
    "createPullRequest": `Vytvořit požadavek na stažení`,
    "currentBranch": `Současná pobočka`,
    "dashboard": `Přístrojová deska`,
    "defaultBranch": `Výchozí větev`,
    "delete": `Vymazat`,
    "deleteBranch": `Smazat větev`,
    "edit": `Upravit`,
    "loading": `Načítání`,
    "otherBranches": `Ostatní pobočky`,
    "newBranch": `Nová pobočka`,
    "save": `Uložit`,
    "pullRequests": `Vytáhněte požadavky`,
    "search": `Hledat`,
    "singleton": `Jedináček`,
    "singletons": `Singletons`,
    "theCurrentlyCheckedOutBranch": `Aktuálně odhlášená pobočka. Tuto možnost vyberte, pokud potřebujete navázat na stávající práci z aktuální pobočky.`,
    "viewPullRequests": `Zobrazit žádosti o stažení`,
    "theDefaultBranchInYourRepository": `Výchozí větev ve vašem úložišti. Zvolte tuto možnost, chcete-li začít s něčím novým, co není závislé na vaší aktuální větvi.`
  },
  "el-GR": {
    "add": `Προσθήκη`,
    "basedOn": `Βασισμένο στο`,
    "branches": `Κλαδια δεντρου`,
    "branchName": `Όνομα υποκαταστήματος`,
    "cancel": `Ματαίωση`,
    "clear": `Καθαρισμός`,
    "collection": `Συλλογή`,
    "collections": `Συλλογές`,
    "create": `Δημιουργώ`,
    "currentBranch": `Τρέχον υποκατάστημα`,
    "dashboard": `Ταμπλό`,
    "createPullRequest": `Δημιουργία αιτήματος έλξης`,
    "defaultBranch": `Προεπιλεγμένος κλάδος`,
    "delete": `Διαγράφω`,
    "deleteBranch": `Διαγραφή υποκαταστήματος`,
    "edit": `Επεξεργασία`,
    "loading": `Φόρτωση`,
    "otherBranches": `Άλλα υποκαταστήματα`,
    "newBranch": `Νέο υποκατάστημα`,
    "pullRequests": `Τραβήξτε αιτήματα`,
    "singletons": `Singletons`,
    "save": `Αποθηκεύσετε`,
    "theCurrentlyCheckedOutBranch": `Το υποκατάστημα που ελέγχεται αυτήν τη στιγμή. Επιλέξτε αυτό εάν χρειάζεται να βασιστείτε σε υπάρχουσες εργασίες από τον τρέχοντα κλάδο.`,
    "singleton": `Μοναδικό χαρτί`,
    "search": `Αναζήτηση`,
    "viewPullRequests": `Προβολή αιτημάτων έλξης`,
    "theDefaultBranchInYourRepository": `Ο προεπιλεγμένος κλάδος στο αποθετήριο σας. Επιλέξτε αυτό για να ξεκινήσετε κάτι νέο που δεν εξαρτάται από το τρέχον υποκατάστημά σας.`
  },
  "de-DE": {
    "add": `Hinzufügen`,
    "basedOn": `Bezogen auf`,
    "branches": `Zweig`,
    "branchName": `Zweigname`,
    "cancel": `Abbrechen`,
    "clear": `Löschen`,
    "collections": `Sammlungen`,
    "collection": `Sammlung`,
    "create": `Erstellen`,
    "createPullRequest": `Pull-Request erstellen`,
    "currentBranch": `Aktueller Zweig`,
    "defaultBranch": `Standardzweig`,
    "dashboard": `Dashboard`,
    "edit": `Bearbeiten`,
    "delete": `Löschen`,
    "deleteBranch": `Zweig löschen`,
    "otherBranches": `Andere Zweige`,
    "newBranch": `Neuer Zweig`,
    "loading": `Wird geladen`,
    "save": `Speichern`,
    "pullRequests": `Pull-Requests`,
    "singleton": `Einzeln`,
    "search": `Suchen`,
    "theCurrentlyCheckedOutBranch": `Der aktuell ausgecheckte Zweig. Wählen Sie diese Option, wenn Sie auf vorhandener Arbeit aus dem aktuellen Zweig aufbauen müssen.`,
    "singletons": `Einzelne`,
    "theDefaultBranchInYourRepository": `Der Standard-Branch in Ihrem Repository. Wählen Sie dies, um etwas Neues zu starten, das nicht von Ihrem aktuellen Zweig abhängt.`,
    "viewPullRequests": `Pull-Requests anzeigen`
  },
  "en-US": {
    "basedOn": `Based on`,
    "add": `Add`,
    "branchName": `Branch name`,
    "branches": `Branches`,
    "clear": `Clear`,
    "cancel": `Cancel`,
    "collection": `Collection`,
    "collections": `Collections`,
    "createPullRequest": `Create pull request`,
    "create": `Create`,
    "currentBranch": `Current branch`,
    "delete": `Delete`,
    "defaultBranch": `Default branch`,
    "dashboard": `Dashboard`,
    "deleteBranch": `Delete branch`,
    "loading": `Loading`,
    "edit": `Edit`,
    "pullRequests": `Pull requests`,
    "newBranch": `New branch…`,
    "otherBranches": `Other branches`,
    "save": `Save`,
    "search": `Search`,
    "singleton": `Singleton`,
    "theCurrentlyCheckedOutBranch": `The currently checked out branch. Choose this if you need to build on existing work from the current branch.`,
    "singletons": `Singletons`,
    "viewPullRequests": `View pull requests`,
    "theDefaultBranchInYourRepository": `The default branch in your repository. Choose this to start something new that's not dependent on your current branch.`
  },
  "et-EE": {
    "add": `Lisama`,
    "basedOn": `Põhineb`,
    "branchName": `Filiaali nimi`,
    "branches": `Filiaalid`,
    "cancel": `Tühista`,
    "clear": `Puhasta`,
    "create": `Loo`,
    "collection": `Kollektsioon`,
    "createPullRequest": `Loo tõmbamistaotlus`,
    "dashboard": `Armatuurlaud`,
    "collections": `Kollektsioonid`,
    "currentBranch": `Praegune filiaal`,
    "defaultBranch": `Vaikeharu`,
    "delete": `Kustuta`,
    "edit": `Muuda`,
    "deleteBranch": `Kustuta haru`,
    "loading": `Laadimine`,
    "newBranch": `Uus filiaal`,
    "otherBranches": `Muud oksad`,
    "pullRequests": `Tõmbetaotlused`,
    "save": `Salvesta`,
    "singletons": `Üksikud`,
    "singleton": `üksikud`,
    "search": `Otsi`,
    "theCurrentlyCheckedOutBranch": `Praegu välja registreeritud filiaal. Valige see, kui peate kasutama praeguse haru olemasolevaid töid.`,
    "theDefaultBranchInYourRepository": `Vaikeharu teie hoidlas. Valige see, et alustada midagi uut, mis ei sõltu teie praegusest harust.`,
    "viewPullRequests": `Vaadake tõmbamistaotlusi`
  },
  "es-ES": {
    "add": `Agregar`,
    "basedOn": `Residencia en`,
    "branchName": `Nombre de la sucursal`,
    "branches": `Sucursales`,
    "cancel": `Cancelar`,
    "clear": `Borrar`,
    "collection": `Colección`,
    "collections": `Colecciones`,
    "create": `Crear`,
    "dashboard": `Panel`,
    "defaultBranch": `Rama predeterminada`,
    "createPullRequest": `Crear solicitud de extracción`,
    "delete": `Borrar`,
    "deleteBranch": `Eliminar rama`,
    "loading": `Cargando`,
    "edit": `Editar`,
    "otherBranches": `Otras sucursales`,
    "pullRequests": `Solicitudes de extracción`,
    "currentBranch": `Rama actual`,
    "save": `Ahorrar`,
    "singletons": `Solteros`,
    "singleton": `Semifallo`,
    "search": `Buscar`,
    "theCurrentlyCheckedOutBranch": `La sucursal actualmente desprotegida. Elija esto si necesita desarrollar el trabajo existente de la rama actual.`,
    "viewPullRequests": `Ver solicitudes de extracción`,
    "theDefaultBranchInYourRepository": `La rama predeterminada en su repositorio. Elija esto para comenzar algo nuevo que no dependa de su sucursal actual.`,
    "newBranch": `Nueva sucursal`
  },
  "fi-FI": {
    "add": `Lisätä`,
    "branchName": `Sivukonttorin nimi`,
    "basedOn": `Perustuen`,
    "branches": `Oksat`,
    "cancel": `Tühista`,
    "clear": `Kirkas`,
    "collection": `Kokoelma`,
    "collections": `Kokoelmat`,
    "createPullRequest": `Luo vetopyyntö`,
    "create": `Luoda`,
    "currentBranch": `Nykyinen haara`,
    "delete": `Poistaa`,
    "dashboard": `Kojelauta`,
    "defaultBranch": `Oletushaara`,
    "edit": `Muokata`,
    "newBranch": `Uusi haara`,
    "loading": `Ladataan`,
    "otherBranches": `Muut haarat`,
    "pullRequests": `Vedä pyyntöjä`,
    "deleteBranch": `Poista haara`,
    "search": `Hae`,
    "save": `Tallentaa`,
    "singletons": `Singletons`,
    "singleton": `Singleton`,
    "theCurrentlyCheckedOutBranch": `Tällä hetkellä uloskirjautunut sivuliike. Valitse tämä, jos haluat rakentaa nykyisen haaran olemassa olevaan työhön.`,
    "theDefaultBranchInYourRepository": `Oletushaara arkistossasi. Valitse tämä aloittaaksesi jotain uutta, joka ei ole riippuvainen nykyisestä haarastasi.`,
    "viewPullRequests": `Näytä vetopyynnöt`
  },
  "fr-FR": {
    "add": `Ajouter`,
    "basedOn": `Basé sur`,
    "branchName": `Nom de la filiale`,
    "cancel": `Annuler`,
    "branches": `Branches`,
    "clear": `Effacer`,
    "collections": `Collections`,
    "collection": `Collection`,
    "dashboard": `Tableau de bord`,
    "create": `Créer`,
    "createPullRequest": `Créer une demande d'extraction`,
    "currentBranch": `Succursale actuelle`,
    "delete": `Supprimer`,
    "deleteBranch": `Supprimer la branche`,
    "edit": `Modifier`,
    "defaultBranch": `Branche par défaut`,
    "newBranch": `Nouvelle branche`,
    "pullRequests": `Demandes d'extraction`,
    "otherBranches": `Autres succursales`,
    "loading": `Chargement en cours`,
    "save": `Sauvegarder`,
    "search": `Rechercher`,
    "singletons": `Singletons`,
    "singleton": `Singleton`,
    "theCurrentlyCheckedOutBranch": `La branche actuellement extraite. Choisissez cette option si vous devez vous appuyer sur le travail existant de la branche actuelle.`,
    "viewPullRequests": `Afficher les demandes d'extraction`,
    "theDefaultBranchInYourRepository": `La branche par défaut de votre référentiel. Choisissez ceci pour commencer quelque chose de nouveau qui ne dépend pas de votre branche actuelle.`
  },
  "bg-BG": {
    "add": `Добавете`,
    "basedOn": `Базиран на`,
    "branches": `Клонове`,
    "branchName": `Име на клон`,
    "cancel": `Отказ`,
    "clear": `Изчисти`,
    "collection": `колекция`,
    "collections": `Колекции`,
    "create": `Създавайте`,
    "currentBranch": `Текущ клон`,
    "createPullRequest": `Създайте заявка за изтегляне`,
    "dashboard": `Табло`,
    "defaultBranch": `Клон по подразбиране`,
    "deleteBranch": `Изтриване на клон`,
    "delete": `Изтрий`,
    "edit": `редактиране`,
    "otherBranches": `Други клонове`,
    "loading": `Зареждане`,
    "newBranch": `Нов клон`,
    "pullRequests": `Заявки за изтегляне`,
    "singleton": `Сингълтън`,
    "save": `Запазване`,
    "search": `Търсене`,
    "singletons": `Единични`,
    "viewPullRequests": `Преглед на заявките за изтегляне`,
    "theCurrentlyCheckedOutBranch": `Текущо провереният клон. Изберете това, ако трябва да надграждате върху съществуваща работа от текущия клон.`,
    "theDefaultBranchInYourRepository": `Клонът по подразбиране във вашето хранилище. Изберете това, за да започнете с нещо ново, което не зависи от текущия ви клон.`
  },
  "he-IL": {
    "add": `לְהוֹסִיף`,
    "basedOn": `מבוסס על`,
    "branches": `ענפים`,
    "branchName": `שם הסניף`,
    "clear": `נקי`,
    "collections": `אוספים`,
    "cancel": `לְבַטֵל`,
    "collection": `אוסף`,
    "create": `לִיצוֹר`,
    "currentBranch": `סניף נוכחי`,
    "createPullRequest": `צור בקשת משיכה`,
    "dashboard": `לוּחַ מַחווָנִים`,
    "defaultBranch": `סניף ברירת מחדל`,
    "delete": `לִמְחוֹק`,
    "deleteBranch": `מחק סניף`,
    "edit": `לַעֲרוֹך`,
    "newBranch": `סניף חדש`,
    "pullRequests": `משוך בקשות`,
    "loading": `טוען`,
    "otherBranches": `סניפים אחרים`,
    "search": `חפש`,
    "save": `להציל`,
    "singletons": `רווקים`,
    "singleton": `קְלָף בּוֹדֵד`,
    "theCurrentlyCheckedOutBranch": `הסניף שנקבע כעת. בחר באפשרות זו אם אתה צריך לבנות על עבודה קיימת מהסניף הנוכחי.`,
    "theDefaultBranchInYourRepository": `סניף ברירת המחדל במאגר שלך. בחר באפשרות זו כדי להתחיל משהו חדש שאינו תלוי בסניף הנוכחי שלך.`,
    "viewPullRequests": `הצג בקשות משיכה`
  },
  "hr-HR": {
    "basedOn": `Na temelju`,
    "branchName": `Naziv podružnice`,
    "add": `Dodati`,
    "cancel": `Otkazati`,
    "branches": `Podružnice`,
    "clear": `Izbriši`,
    "collection": `Kolekcija`,
    "createPullRequest": `Kreirajte zahtjev za povlačenjem`,
    "currentBranch": `Trenutna grana`,
    "create": `Stvoriti`,
    "collections": `Zbirke`,
    "dashboard": `Nadzorna ploča`,
    "defaultBranch": `Zadana grana`,
    "deleteBranch": `Izbriši granu`,
    "delete": `Izbrisati`,
    "loading": `Učitavam`,
    "edit": `Uredi`,
    "newBranch": `Nova grana`,
    "otherBranches": `Ostale grane`,
    "search": `Traži`,
    "pullRequests": `Zahtjevi za povlačenjem`,
    "save": `Uštedjeti`,
    "singletons": `Samci`,
    "theCurrentlyCheckedOutBranch": `Trenutno odjavljena poslovnica. Odaberite ovo ako trebate graditi na postojećem radu iz trenutne grane.`,
    "singleton": `samac`,
    "viewPullRequests": `Pregledajte zahtjeve za povlačenjem`,
    "theDefaultBranchInYourRepository": `Zadana grana u vašem spremištu. Odaberite ovo da započnete nešto novo što ne ovisi o vašoj trenutnoj grani.`
  },
  "hu-HU": {
    "basedOn": `Alapján`,
    "branchName": `Fiók neve`,
    "add": `Hozzáadás`,
    "branches": `Ágak`,
    "cancel": `Megszünteti`,
    "clear": `Törlés`,
    "collection": `Gyűjtemény`,
    "collections": `Gyűjtemények`,
    "create": `Teremt`,
    "dashboard": `Irányítópult`,
    "currentBranch": `Jelenlegi ág`,
    "createPullRequest": `Lehívási kérelem létrehozása`,
    "defaultBranch": `Alapértelmezett ág`,
    "delete": `Töröl`,
    "deleteBranch": `Elágazás törlése`,
    "loading": `Betöltés folyamatban`,
    "edit": `Szerkesztés`,
    "newBranch": `Új ág`,
    "otherBranches": `Egyéb ágak`,
    "pullRequests": `Lehívási kérések`,
    "search": `Keresés`,
    "save": `Megment`,
    "singletons": `Singletons`,
    "singleton": `szingli`,
    "theCurrentlyCheckedOutBranch": `A jelenleg kivett fiók. Válassza ezt, ha az aktuális ág meglévő munkájára kell építenie.`,
    "viewPullRequests": `Lehívási kérelmek megtekintése`,
    "theDefaultBranchInYourRepository": `Az alapértelmezett ág az adattárban. Válassza ezt, ha valami újat szeretne indítani, amely nem függ az aktuális ágtól.`
  },
  "it-IT": {
    "add": `Aggiungere`,
    "basedOn": `Basato su`,
    "branchName": `Nome ramo`,
    "branches": `Rami`,
    "clear": `Cancella`,
    "collection": `Collezione`,
    "cancel": `Annulla`,
    "create": `Creare`,
    "collections": `Collezioni`,
    "currentBranch": `Ramo attuale`,
    "createPullRequest": `Crea richiesta pull`,
    "defaultBranch": `Ramo predefinito`,
    "dashboard": `Pannello di controllo`,
    "delete": `Eliminare`,
    "deleteBranch": `Elimina ramo`,
    "loading": `Caricamento in corso`,
    "newBranch": `Nuova filiale`,
    "edit": `Modificare`,
    "otherBranches": `Altri rami`,
    "search": `Cerca`,
    "pullRequests": `Richieste pull`,
    "save": `Salva`,
    "singleton": `Singleton`,
    "theCurrentlyCheckedOutBranch": `La filiale attualmente verificata. Scegli questa opzione se devi basarti su un lavoro esistente dal ramo corrente.`,
    "singletons": `Singletons`,
    "theDefaultBranchInYourRepository": `Il ramo predefinito nel tuo repository. Scegli questa opzione per iniziare qualcosa di nuovo che non dipenda dal tuo ramo attuale.`,
    "viewPullRequests": `Visualizza le richieste pull`
  },
  "ja-JP": {
    "basedOn": `に基づく`,
    "add": `追加`,
    "branchName": `支店名`,
    "branches": `支店`,
    "cancel": `キャンセル`,
    "clear": `クリア`,
    "collection": `コレクション`,
    "create": `作成`,
    "createPullRequest": `プルリクエストを作成`,
    "collections": `コレクション`,
    "dashboard": `ダッシュボード`,
    "defaultBranch": `デフォルトのブランチ`,
    "currentBranch": `現在のブランチ`,
    "deleteBranch": `ブランチを削除`,
    "loading": `読み込み中`,
    "delete": `消去`,
    "edit": `編集`,
    "newBranch": `新しい支店`,
    "otherBranches": `その他の支店`,
    "pullRequests": `プルリクエスト`,
    "save": `保存`,
    "singletons": `シングルトン`,
    "singleton": `シングルトン`,
    "search": `検索`,
    "theCurrentlyCheckedOutBranch": `現在チェックアウトされているブランチ。 現在のブランチの既存の作業に基づいて構築する必要がある場合は、これを選択してください。`,
    "theDefaultBranchInYourRepository": `リポジトリのデフォルト ブランチ。 これを選択して、現在のブランチに依存しない新しい何かを開始します。`,
    "viewPullRequests": `プル リクエストを表示`
  },
  "ko-KR": {
    "add": `추가하다`,
    "basedOn": `기반으로`,
    "branchName": `지점명`,
    "cancel": `취소`,
    "branches": `가지`,
    "clear": `지우기`,
    "collection": `수집`,
    "collections": `컬렉션`,
    "create": `만들다`,
    "createPullRequest": `풀 요청 생성`,
    "currentBranch": `현재 지점`,
    "dashboard": `계기반`,
    "deleteBranch": `분기 삭제`,
    "defaultBranch": `기본 분기`,
    "delete": `삭제`,
    "edit": `편집하다`,
    "newBranch": `새 지점`,
    "loading": `로드 중`,
    "otherBranches": `기타 지점`,
    "pullRequests": `풀 리퀘스트`,
    "save": `구하다`,
    "singleton": `하나씩 일어나는 것`,
    "search": `검색`,
    "theCurrentlyCheckedOutBranch": `현재 체크아웃된 브랜치. 현재 브랜치의 기존 작업을 기반으로 빌드해야 하는 경우 이 옵션을 선택하세요.`,
    "singletons": `싱글톤`,
    "viewPullRequests": `풀 요청 보기`,
    "theDefaultBranchInYourRepository": `리포지토리의 기본 브랜치입니다. 현재 분기에 의존하지 않는 새로운 것을 시작하려면 이것을 선택하십시오.`
  },
  "lt-LT": {
    "basedOn": `Remiantis`,
    "add": `Papildyti`,
    "branchName": `Filialo pavadinimas`,
    "branches": `Filialai`,
    "cancel": `Atšaukti`,
    "collection": `Kolekcija`,
    "clear": `Skaidrus`,
    "collections": `Kolekcijos`,
    "createPullRequest": `Sukurti ištraukimo užklausą`,
    "create": `Sukurti`,
    "currentBranch": `Dabartinis filialas`,
    "delete": `Ištrinti`,
    "dashboard": `Prietaisų skydelis`,
    "deleteBranch": `Ištrinti šaką`,
    "defaultBranch": `Numatytoji šaka`,
    "edit": `Redaguoti`,
    "loading": `Įkeliama`,
    "pullRequests": `Ištraukti užklausas`,
    "newBranch": `Naujas filialas`,
    "otherBranches": `Kitos šakos`,
    "singleton": `vienvietis`,
    "search": `Ieškoti`,
    "save": `Sutaupyti`,
    "singletons": `Vienišiai`,
    "theCurrentlyCheckedOutBranch": `Šiuo metu išregistruotas filialas. Pasirinkite tai, jei reikia remtis esamu darbu iš dabartinės šakos.`,
    "theDefaultBranchInYourRepository": `Numatytoji šaka jūsų saugykloje. Pasirinkite tai, kad pradėtumėte ką nors naujo, nepriklausančio nuo dabartinės šakos.`,
    "viewPullRequests": `Peržiūrėkite ištraukimo užklausas`
  },
  "nb-NO": {
    "add": `Legg til`,
    "basedOn": `Basert på`,
    "branchName": `Filialnavn`,
    "cancel": `Avbryt`,
    "clear": `Tøm`,
    "branches": `Grener`,
    "collection": `Samling`,
    "collections": `Samlinger`,
    "create": `Skape`,
    "createPullRequest": `Opprett pull-forespørsel`,
    "currentBranch": `Nåværende gren`,
    "defaultBranch": `Standard gren`,
    "delete": `Slett`,
    "dashboard": `Dashbord`,
    "deleteBranch": `Slett filial`,
    "edit": `Redigere`,
    "loading": `Laster inn`,
    "otherBranches": `Andre grener`,
    "pullRequests": `Trekk forespørsler`,
    "newBranch": `Ny gren`,
    "save": `Lagre`,
    "search": `Søk`,
    "singletons": `Singletoner`,
    "singleton": `Singleton`,
    "theDefaultBranchInYourRepository": `Standardgrenen i depotet ditt. Velg dette for å starte noe nytt som ikke er avhengig av din nåværende filial.`,
    "viewPullRequests": `Se pull-forespørsler`,
    "theCurrentlyCheckedOutBranch": `Den utsjekkede grenen. Velg dette hvis du skal bygge på eksisterende arbeid fra gjeldende gren.`
  },
  "nl-NL": {
    "basedOn": `Gebaseerd op`,
    "branches": `Takken`,
    "cancel": `Annuleren`,
    "add": `Toevoegen`,
    "branchName": `Filiaal naam`,
    "clear": `Helder`,
    "collections": `Collecties`,
    "collection": `Verzameling`,
    "createPullRequest": `Pull-aanvraag maken`,
    "currentBranch": `Huidige tak`,
    "create": `Creëren`,
    "defaultBranch": `Standaard filiaal`,
    "dashboard": `Dashboard`,
    "delete": `Verwijderen`,
    "edit": `Bewerking`,
    "deleteBranch": `Filiaal verwijderen`,
    "newBranch": `Nieuwe tak`,
    "otherBranches": `Andere takken`,
    "loading": `Laden`,
    "pullRequests": `Trek verzoeken`,
    "save": `Redden`,
    "search": `Zoeken`,
    "singleton": `eenling`,
    "singletons": `Eenlingen`,
    "theCurrentlyCheckedOutBranch": `Het momenteel uitgecheckte filiaal. Kies dit als u moet voortbouwen op bestaand werk van de huidige branch.`,
    "theDefaultBranchInYourRepository": `De standaard branch in uw repository. Kies dit om iets nieuws te starten dat niet afhankelijk is van uw huidige branche.`,
    "viewPullRequests": `Bekijk pull-aanvragen`
  },
  "pl-PL": {
    "add": `Dodać`,
    "basedOn": `Oparte na`,
    "branchName": `Nazwa filii`,
    "cancel": `Anulować`,
    "clear": `Wyczyść`,
    "branches": `Gałęzie`,
    "collection": `Kolekcja`,
    "collections": `Kolekcje`,
    "create": `Tworzyć`,
    "createPullRequest": `Utwórz żądanie ściągnięcia`,
    "currentBranch": `Obecny oddział`,
    "dashboard": `Panel`,
    "defaultBranch": `Oddział domyślny`,
    "delete": `Usuwać`,
    "deleteBranch": `Usuń oddział`,
    "edit": `Edytować`,
    "loading": `Trwa ładowanie`,
    "newBranch": `Nowa gałąź`,
    "pullRequests": `Żądania ściągnięcia`,
    "otherBranches": `Inne gałęzie`,
    "search": `Szukaj`,
    "singleton": `singel`,
    "save": `Ratować`,
    "theCurrentlyCheckedOutBranch": `Aktualnie wyewidencjonowana gałąź. Wybierz tę opcję, jeśli chcesz oprzeć się na istniejącej pracy z bieżącej gałęzi.`,
    "singletons": `Singletony`,
    "theDefaultBranchInYourRepository": `Domyślna gałąź w twoim repozytorium. Wybierz tę opcję, aby rozpocząć coś nowego, co nie jest zależne od bieżącej gałęzi.`,
    "viewPullRequests": `Wyświetl żądania ściągnięcia`
  },
  "pt-BR": {
    "add": `Adicionar`,
    "basedOn": `Baseado em`,
    "branchName": `Nome da filial`,
    "branches": `Galhos`,
    "cancel": `Cancelar`,
    "collection": `Coleção`,
    "clear": `Limpar`,
    "create": `Criar`,
    "collections": `Coleções`,
    "createPullRequest": `Criar solicitação pull`,
    "defaultBranch": `ramo padrão`,
    "currentBranch": `filial atual`,
    "dashboard": `Painel`,
    "delete": `Excluir`,
    "deleteBranch": `Excluir ramificação`,
    "edit": `Editar`,
    "loading": `Carregando`,
    "newBranch": `Nova filial`,
    "otherBranches": `Outros ramos`,
    "save": `Guardar`,
    "pullRequests": `Requisições pull`,
    "search": `Pesquisar`,
    "singletons": `Solteiros`,
    "singleton": `solteiro`,
    "theCurrentlyCheckedOutBranch": `A ramificação atualmente com check-out. Escolha esta opção se precisar criar um trabalho existente na ramificação atual.`,
    "theDefaultBranchInYourRepository": `A ramificação padrão em seu repositório. Escolha isso para iniciar algo novo que não dependa de sua ramificação atual.`,
    "viewPullRequests": `Ver solicitações pull`
  },
  "pt-PT": {
    "basedOn": `Baseado em`,
    "branchName": `Nome da filial`,
    "add": `Adicionar`,
    "cancel": `Cancelar`,
    "branches": `Galhos`,
    "clear": `Limpar`,
    "collections": `Coleções`,
    "collection": `Coleção`,
    "create": `Criar`,
    "createPullRequest": `Criar solicitação pull`,
    "dashboard": `Painel`,
    "defaultBranch": `ramo padrão`,
    "currentBranch": `filial atual`,
    "delete": `Excluir`,
    "deleteBranch": `Excluir ramificação`,
    "loading": `A carregar`,
    "edit": `Editar`,
    "otherBranches": `Outros ramos`,
    "pullRequests": `Requisições pull`,
    "newBranch": `Nova filial`,
    "save": `Guardar`,
    "search": `Procurar`,
    "singleton": `solteiro`,
    "singletons": `Solteiros`,
    "theCurrentlyCheckedOutBranch": `A ramificação atualmente com check-out. Escolha esta opção se precisar criar um trabalho existente na ramificação atual.`,
    "theDefaultBranchInYourRepository": `A ramificação padrão em seu repositório. Escolha isso para iniciar algo novo que não dependa de sua ramificação atual.`,
    "viewPullRequests": `Ver solicitações pull`
  },
  "ro-RO": {
    "add": `Adăuga`,
    "branchName": `Numele sucursalei`,
    "basedOn": `Bazat pe`,
    "branches": `Ramuri`,
    "collection": `Colectie`,
    "cancel": `Anulare`,
    "clear": `Golire`,
    "create": `Crea`,
    "collections": `Colecții`,
    "createPullRequest": `Creați cerere de tragere`,
    "currentBranch": `Filiala actuală`,
    "dashboard": `Bord`,
    "defaultBranch": `Ramura implicită`,
    "delete": `Șterge`,
    "deleteBranch": `Ștergeți ramura`,
    "edit": `Editați`,
    "loading": `Se încarcă`,
    "newBranch": `Filiala noua`,
    "pullRequests": `Solicitări de tragere`,
    "save": `Salvați`,
    "otherBranches": `Alte ramuri`,
    "search": `Căutare`,
    "singleton": `Singleton`,
    "singletons": `Singletons`,
    "theCurrentlyCheckedOutBranch": `Sucursala verificată în prezent. Alegeți acest lucru dacă trebuie să vă bazați pe munca existentă din ramura curentă.`,
    "theDefaultBranchInYourRepository": `Ramura implicită din depozitul dvs. Alegeți acest lucru pentru a începe ceva nou, care nu depinde de ramura dvs. actuală.`,
    "viewPullRequests": `Vizualizați solicitările de extragere`
  },
  "ru-RU": {
    "basedOn": `На основе`,
    "add": `Добавлять`,
    "branchName": `Название филиала`,
    "branches": `Ветви`,
    "cancel": `Отмена`,
    "collection": `Коллекция`,
    "clear": `Очистить`,
    "collections": `Коллекции`,
    "currentBranch": `Текущая ветвь`,
    "create": `Создавать`,
    "createPullRequest": `Создать запрос на включение`,
    "dashboard": `Панель приборов`,
    "defaultBranch": `Ветка по умолчанию`,
    "delete": `Удалить`,
    "edit": `Редактировать`,
    "deleteBranch": `Удалить ветку`,
    "loading": `Загрузка`,
    "newBranch": `Новая ветка`,
    "otherBranches": `Другие филиалы`,
    "pullRequests": `Пулл-реквесты`,
    "save": `Сохранять`,
    "search": `Поиск`,
    "singletons": `Одиночки`,
    "theCurrentlyCheckedOutBranch": `Текущая проверенная ветвь. Выберите это, если вам нужно опираться на существующую работу из текущей ветки.`,
    "singleton": `Синглтон`,
    "theDefaultBranchInYourRepository": `Ветка по умолчанию в вашем репозитории. Выберите это, чтобы начать что-то новое, не зависящее от вашей текущей ветки.`,
    "viewPullRequests": `Посмотреть пул-реквесты`
  },
  "lv-LV": {
    "branchName": `Filiāles nosaukums`,
    "basedOn": `Balstoties uz`,
    "cancel": `Atcelt`,
    "clear": `Notīrīt`,
    "collection": `Kolekcija`,
    "branches": `Nozares`,
    "collections": `Kolekcijas`,
    "currentBranch": `Pašreizējā filiāle`,
    "create": `Izveidot`,
    "createPullRequest": `Izveidot izvilkšanas pieprasījumu`,
    "defaultBranch": `Noklusējuma filiāle`,
    "delete": `Dzēst`,
    "dashboard": `Mērinstrumentu panelis`,
    "deleteBranch": `Dzēst filiāli`,
    "edit": `Rediģēt`,
    "loading": `Notiek ielāde`,
    "newBranch": `Jauna filiāle`,
    "otherBranches": `Citas filiāles`,
    "save": `Saglabāt`,
    "pullRequests": `Izvilkšanas pieprasījumi`,
    "search": `Meklēt`,
    "singleton": `Singleton`,
    "theCurrentlyCheckedOutBranch": `Pašlaik izrakstītā filiāle. Izvēlieties šo, ja vēlaties izmantot esošo darbu no pašreizējās filiāles.`,
    "singletons": `Vientuļi`,
    "theDefaultBranchInYourRepository": `Noklusējuma filiāle jūsu repozitorijā. Izvēlieties šo, lai sāktu kaut ko jaunu, kas nav atkarīgs no jūsu pašreizējās filiāles.`,
    "viewPullRequests": `Skatīt izvilkšanas pieprasījumus`,
    "add": `Pievienot`
  },
  "sk-SK": {
    "add": `Pridať`,
    "basedOn": `Založené na`,
    "cancel": `Zrušiť`,
    "branches": `Pobočky`,
    "clear": `Vymazať`,
    "collection": `Zbierka`,
    "create": `Vytvorte`,
    "collections": `zbierky`,
    "createPullRequest": `Vytvorte požiadavku na stiahnutie`,
    "currentBranch": `Aktuálna pobočka`,
    "defaultBranch": `Predvolená vetva`,
    "dashboard": `Dashboard`,
    "delete": `Odstrániť`,
    "deleteBranch": `Odstrániť vetvu`,
    "edit": `Upraviť`,
    "loading": `Načítava sa`,
    "newBranch": `Nová pobočka`,
    "otherBranches": `Ostatné pobočky`,
    "pullRequests": `Vytiahnite žiadosti`,
    "save": `Uložiť`,
    "singleton": `Singleton`,
    "singletons": `Singletons`,
    "search": `Vyhľadávať`,
    "theDefaultBranchInYourRepository": `Predvolená vetva vo vašom úložisku. Zvoľte túto možnosť, ak chcete začať niečo nové, čo nezávisí od vašej aktuálnej pobočky.`,
    "theCurrentlyCheckedOutBranch": `Aktuálne odhlásená pobočka. Túto možnosť vyberte, ak potrebujete stavať na existujúcej práci z aktuálnej pobočky.`,
    "viewPullRequests": `Zobraziť požiadavky na stiahnutie`,
    "branchName": `Meno pobočky`
  },
  "sl-SI": {
    "basedOn": `Temelji na`,
    "add": `Dodaj`,
    "branchName": `Ime podružnice`,
    "cancel": `Prekliči`,
    "branches": `Podružnice`,
    "clear": `Jasen`,
    "collections": `Zbirke`,
    "collection": `Zbirka`,
    "create": `Ustvari`,
    "createPullRequest": `Ustvari zahtevo za vleko`,
    "currentBranch": `Trenutna veja`,
    "delete": `Izbriši`,
    "defaultBranch": `Privzeta veja`,
    "dashboard": `Nadzorna plošča`,
    "edit": `Uredi`,
    "loading": `Nalaganje`,
    "newBranch": `Nova podružnica`,
    "deleteBranch": `Izbriši vejo`,
    "otherBranches": `Druge veje`,
    "pullRequests": `Zahteve za vlečenje`,
    "save": `Shrani`,
    "singleton": `Singleton`,
    "search": `Iskanje`,
    "singletons": `Samski`,
    "theCurrentlyCheckedOutBranch": `Trenutno odjavljena podružnica. To izberite, če morate graditi na obstoječem delu iz trenutne veje.`,
    "theDefaultBranchInYourRepository": `Privzeta veja v vašem skladišču. Izberite to, da začnete nekaj novega, kar ni odvisno od vaše trenutne veje.`,
    "viewPullRequests": `Oglejte si zahteve za vlečenje`
  },
  "sr-SP": {
    "add": `Додати`,
    "basedOn": `На бази`,
    "branchName": `Назив огранка`,
    "branches": `Огранци`,
    "cancel": `Поништити, отказати`,
    "collection": `Цоллецтион`,
    "clear": `Izbriši`,
    "collections": `Збирке`,
    "create": `Креирај`,
    "createPullRequest": `Креирајте захтев за повлачење`,
    "currentBranch": `Тренутна грана`,
    "dashboard": `Командна табла`,
    "defaultBranch": `Подразумевана грана`,
    "delete": `Избриши`,
    "deleteBranch": `Обриши грану`,
    "edit": `Уредити`,
    "loading": `Učitavam`,
    "newBranch": `Нова грана`,
    "save": `сачувати`,
    "otherBranches": `Остале гране`,
    "pullRequests": `Захтеви за повлачење`,
    "search": `Pretraga`,
    "singleton": `Синглетон`,
    "singletons": `Синглетонс`,
    "theCurrentlyCheckedOutBranch": `Тренутно одјављена филијала. Изаберите ово ако треба да надоградите постојећи рад из тренутне гране.`,
    "theDefaultBranchInYourRepository": `Подразумевана грана у вашем спремишту. Изаберите ово да започнете нешто ново што не зависи од ваше тренутне гране.`,
    "viewPullRequests": `Прегледајте захтеве за повлачењем`
  },
  "tr-TR": {
    "add": `Avbryt`,
    "basedOn": `Dayalı`,
    "branchName": `şube adı`,
    "branches": `Şubeler`,
    "cancel": `iptal etmek`,
    "clear": `Temizle`,
    "collections": `Koleksiyonlar`,
    "collection": `Toplamak`,
    "createPullRequest": `Çekme isteği oluştur`,
    "create": `Yaratmak`,
    "currentBranch": `Mevcut şube`,
    "dashboard": `Gösterge Paneli`,
    "defaultBranch": `varsayılan dal`,
    "delete": `Silmek`,
    "edit": `Düzenlemek`,
    "deleteBranch": `Şubeyi sil`,
    "loading": `Yükleniyor`,
    "newBranch": `Yeni dal`,
    "otherBranches": `Diğer şubeler`,
    "pullRequests": `Çekme istekleri`,
    "save": `Kaydetmek`,
    "search": `Ara`,
    "singleton": `Tekil`,
    "singletons": `Singleton'lar`,
    "theCurrentlyCheckedOutBranch": `Şu anda kontrol edilen şube. Geçerli daldaki mevcut işi geliştirmeniz gerekiyorsa bunu seçin.`,
    "viewPullRequests": `Çekme isteklerini görüntüle`,
    "theDefaultBranchInYourRepository": `Deponuzdaki varsayılan şube. Mevcut şubenize bağlı olmayan yeni bir şey başlatmak için bunu seçin.`
  },
  "uk-UA": {
    "add": `Додати`,
    "branchName": `Назва гілки`,
    "basedOn": `На основі`,
    "clear": `Очистити`,
    "cancel": `Скасувати`,
    "branches": `Гілки`,
    "collection": `Колекція`,
    "create": `Створити`,
    "collections": `Колекції`,
    "currentBranch": `Поточна гілка`,
    "createPullRequest": `Створити запит на злиття змін`,
    "dashboard": `Дашборд`,
    "defaultBranch": `Типова гілка`,
    "delete": `Видалити`,
    "deleteBranch": `Видалити гілку`,
    "loading": `Завантаження`,
    "edit": `Редагувати`,
    "newBranch": `Нова гілка`,
    "otherBranches": `Інші гілки`,
    "pullRequests": `Запити на злиття`,
    "save": `Зберегти`,
    "search": `Пошук`,
    "singleton": `Одиночка`,
    "theDefaultBranchInYourRepository": `Типова гілка у вашому репозиторії. Виберіть це, щоб почати щось нове, що не залежить від вашої поточної гілки.`,
    "theCurrentlyCheckedOutBranch": `Поточна обрана гілка. Виберіть це, якщо вам потрібно продовжити роботу на основі поточної гілки.`,
    "singletons": `Одиночки`,
    "viewPullRequests": `Перегляд запитів на злиття`
  },
  "sv-SE": {
    "basedOn": `Baserat på`,
    "add": `Lägg till`,
    "branchName": `Filialens namn`,
    "branches": `Grenar`,
    "cancel": `Поништити, отказати`,
    "clear": `Rensa`,
    "collection": `Samling`,
    "collections": `Samlingar`,
    "createPullRequest": `Skapa pull-förfrågan`,
    "create": `Skapa`,
    "dashboard": `instrumentbräda`,
    "defaultBranch": `Standardgren`,
    "deleteBranch": `Ta bort gren`,
    "currentBranch": `Nuvarande gren`,
    "delete": `Radera`,
    "edit": `Redigera`,
    "newBranch": `Ny gren`,
    "loading": `Läser in`,
    "otherBranches": `Andra grenar`,
    "save": `Spara`,
    "pullRequests": `Dra förfrågningar`,
    "search": `Sök`,
    "singleton": `Singleton`,
    "singletons": `Singlar`,
    "theCurrentlyCheckedOutBranch": `Den utcheckade filialen. Välj detta om du behöver bygga på befintligt arbete från den aktuella grenen.`,
    "theDefaultBranchInYourRepository": `Standardgrenen i ditt arkiv. Välj detta för att starta något nytt som inte är beroende av din nuvarande filial.`,
    "viewPullRequests": `Visa pull-förfrågningar`
  },
  "zh-TW": {
    "basedOn": `基於`,
    "branchName": `分店名稱`,
    "add": `添加`,
    "cancel": `取消`,
    "branches": `分支機構`,
    "clear": `清除`,
    "collections": `收藏品`,
    "collection": `收藏`,
    "create": `創造`,
    "currentBranch": `當前分支`,
    "createPullRequest": `創建拉取請求`,
    "dashboard": `儀表板`,
    "delete": `刪除`,
    "defaultBranch": `默認分支`,
    "deleteBranch": `刪除分支`,
    "loading": `正在載入`,
    "edit": `編輯`,
    "newBranch": `新分行`,
    "otherBranches": `其他分行`,
    "pullRequests": `拉取請求`,
    "search": `搜尋`,
    "singleton": `單例`,
    "save": `節省`,
    "singletons": `單例`,
    "theCurrentlyCheckedOutBranch": `當前簽出的分支。 如果您需要在當前分支的現有工作的基礎上構建，請選擇此項。`,
    "theDefaultBranchInYourRepository": `存儲庫中的默認分支。 選擇此選項可開始一些不依賴於當前分支的新操作。`,
    "viewPullRequests": `查看拉取請求`
  },
  "zh-CN": {
    "add": `添加`,
    "basedOn": `基于`,
    "branchName": `分店名称`,
    "branches": `分支机构`,
    "cancel": `取消`,
    "clear": `透明`,
    "collection": `收藏`,
    "collections": `收藏品`,
    "createPullRequest": `创建拉取请求`,
    "create": `创造`,
    "defaultBranch": `默认分支`,
    "currentBranch": `当前分支`,
    "dashboard": `仪表板`,
    "edit": `编辑`,
    "delete": `删除`,
    "deleteBranch": `删除分支`,
    "newBranch": `新分行`,
    "loading": `正在加载`,
    "otherBranches": `其他分行`,
    "save": `节省`,
    "search": `搜索`,
    "pullRequests": `拉取请求`,
    "singleton": `单例`,
    "singletons": `单例`,
    "theCurrentlyCheckedOutBranch": `当前签出的分支。 如果您需要在当前分支的现有工作的基础上构建，请选择此项。`,
    "viewPullRequests": `查看拉取请求`,
    "theDefaultBranchInYourRepository": `存储库中的默认分支。 选择此选项可开始一些不依赖于当前分支的新操作。`
  }
};

const SIDE_PANEL_ID = 'keystatic-side-panel';
const MAIN_PANEL_ID = 'keystatic-main-panel';

const View = props => {
  const $ = c(2);
  let t0;
  if ($[0] !== props) {
    t0 = /*#__PURE__*/jsx(Box, {
      height: "100%",
      minHeight: 0,
      minWidth: 0,
      ...props
    });
    $[0] = props;
    $[1] = t0;
  } else {
    t0 = $[1];
  }
  return t0;
};
const ScrollView = props => {
  const $ = c(7);
  let isDisabled;
  let otherProps;
  if ($[0] !== props) {
    ({
      isDisabled,
      ...otherProps
    } = props);
    $[0] = props;
    $[1] = isDisabled;
    $[2] = otherProps;
  } else {
    isDisabled = $[1];
    otherProps = $[2];
  }
  const t0 = isDisabled ? undefined : true;
  let t1;
  if ($[3] === Symbol.for("react.memo_cache_sentinel")) {
    t1 = css({
      "&[data-scrollable]": {
        overflowY: "auto",
        WebkitOverflowScrolling: "touch"
      }
    });
    $[3] = t1;
  } else {
    t1 = $[3];
  }
  let t2;
  if ($[4] !== t0 || $[5] !== otherProps) {
    t2 = /*#__PURE__*/jsx(View, {
      "data-scrollable": t0,
      UNSAFE_className: t1,
      ...otherProps
    });
    $[4] = t0;
    $[5] = otherProps;
    $[6] = t2;
  } else {
    t2 = $[6];
  }
  return t2;
};

// Common
// ----------------------------------------------------------------------------

// Interface
// ----------------------------------------------------------------------------

const NAVIGATION_DIVIDER_KEY = '---';

// Storage
// ----------------------------------------------------------------------------

// ============================================================================
// Functions
// ============================================================================

function config(config) {
  return config;
}
function collection(collection) {
  return collection;
}
function singleton(collection) {
  return collection;
}

function useNavItems() {
  var _config$ui;
  let {
    basePath
  } = useAppState();
  let config = useConfig();
  let stringFormatter = useLocalizedStringFormatter(strings);
  let changeMap = useChanged();
  const collectionKeys = Object.keys(config.collections || {});
  const singletonKeys = Object.keys(config.singletons || {});
  const items = ((_config$ui = config.ui) === null || _config$ui === void 0 ? void 0 : _config$ui.navigation) || {
    ...(!!collectionKeys.length && {
      [stringFormatter.format('collections')]: collectionKeys
    }),
    ...(!!singletonKeys.length && {
      [stringFormatter.format('singletons')]: singletonKeys
    })
  };
  const options = {
    basePath,
    changeMap,
    config
  };
  if (Array.isArray(items)) {
    return items.map(key => populateItemData(key, options));
  }
  return Object.entries(items).map(([section, keys]) => ({
    title: section,
    children: keys.map(key_0 => populateItemData(key_0, options))
  }));
}
function populateItemData(key, options) {
  let {
    basePath,
    changeMap,
    config
  } = options;

  // divider
  if (key === NAVIGATION_DIVIDER_KEY) {
    return {
      isDivider: true
    };
  }

  // collection
  if (config.collections && key in config.collections) {
    const href = `${basePath}/collection/${encodeURIComponent(key)}`;
    const changes = changeMap.collections.get(key);
    const changed = changes ? changes.changed.size + changes.added.size + changes.removed.size : 0;
    const label = config.collections[key].label;
    return {
      key,
      href,
      label,
      changed,
      entryCount: changes === null || changes === void 0 ? void 0 : changes.totalCount
    };
  }

  // singleton
  if (config.singletons && key in config.singletons) {
    const href = `${basePath}/singleton/${encodeURIComponent(key)}`;
    const changed = changeMap.singletons.has(key);
    const label = config.singletons[key].label;
    return {
      key,
      href,
      label,
      changed
    };
  }
  throw new Error(`Unknown navigation key: "${key}".`);
}

function pluralize(count, options) {
  const {
    singular,
    plural = singular + 's',
    inclusive = true
  } = options;
  const variant = count === 1 ? singular : plural;
  return inclusive ? `${count} ${variant}` : variant;
}

function useBrand() {
  var _config$ui, _config$ui2;
  const $ = c(9);
  const {
    colorScheme
  } = useProvider();
  const config = useConfig();
  const prefersDark = useMediaQuery("(prefers-color-scheme: dark)");
  let t0;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    t0 = /*#__PURE__*/jsx(ZapLogo, {});
    $[0] = t0;
  } else {
    t0 = $[0];
  }
  let brandMark = t0;
  let brandName = "Keystatic";
  if ((_config$ui = config.ui) !== null && _config$ui !== void 0 && (_config$ui = _config$ui.brand) !== null && _config$ui !== void 0 && _config$ui.mark) {
    const BrandMark = config.ui.brand.mark;
    const resolvedColorScheme = colorScheme === "auto" ? prefersDark ? "dark" : "light" : colorScheme;
    let t1;
    if ($[1] !== BrandMark || $[2] !== resolvedColorScheme) {
      t1 = /*#__PURE__*/jsx(BrandMark, {
        colorScheme: resolvedColorScheme
      });
      $[1] = BrandMark;
      $[2] = resolvedColorScheme;
      $[3] = t1;
    } else {
      t1 = $[3];
    }
    brandMark = t1;
  }
  if ("repo" in config.storage) {
    let t1;
    if ($[4] !== config.storage.repo) {
      t1 = serializeRepoConfig(config.storage.repo);
      $[4] = config.storage.repo;
      $[5] = t1;
    } else {
      t1 = $[5];
    }
    brandName = t1;
  }
  if (config.cloud) {
    brandName = config.cloud.project;
  }
  if ((_config$ui2 = config.ui) !== null && _config$ui2 !== void 0 && (_config$ui2 = _config$ui2.brand) !== null && _config$ui2 !== void 0 && _config$ui2.name) {
    brandName = config.ui.brand.name;
  }
  let t1;
  if ($[6] !== brandMark || $[7] !== brandName) {
    t1 = {
      brandMark,
      brandName
    };
    $[6] = brandMark;
    $[7] = brandName;
    $[8] = t1;
  } else {
    t1 = $[8];
  }
  return t1;
}
function ZapLogo() {
  const $ = c(4);
  let t0;
  let t1;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    t0 = /*#__PURE__*/jsx("path", {
      d: "M18 8L14 24L12 32L30 14L18 8Z",
      fill: "currentColor"
    });
    t1 = /*#__PURE__*/jsx("path", {
      d: "M2 18L20 0L18 8L2 18Z",
      fill: "currentColor"
    });
    $[0] = t0;
    $[1] = t1;
  } else {
    t0 = $[0];
    t1 = $[1];
  }
  let t2;
  if ($[2] === Symbol.for("react.memo_cache_sentinel")) {
    t2 = /*#__PURE__*/jsx("path", {
      d: "M18 8L2 18L14 24L18 8Z",
      fill: `url(#${"brand-mark-gradient"})`
    });
    $[2] = t2;
  } else {
    t2 = $[2];
  }
  let t3;
  if ($[3] === Symbol.for("react.memo_cache_sentinel")) {
    t3 = /*#__PURE__*/jsxs("svg", {
      width: 24,
      height: 24,
      viewBox: "0 0 32 32",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      children: [t0, t1, t2, /*#__PURE__*/jsx("defs", {
        children: /*#__PURE__*/jsxs("linearGradient", {
          id: "brand-mark-gradient",
          x1: "2",
          y1: "18",
          x2: "20",
          y2: "14",
          gradientUnits: "userSpaceOnUse",
          children: [/*#__PURE__*/jsx("stop", {
            stopColor: "currentColor",
            stopOpacity: "0.2"
          }), /*#__PURE__*/jsx("stop", {
            offset: "1",
            stopColor: "currentColor"
          })]
        })
      })]
    });
    $[3] = t3;
  } else {
    t3 = $[3];
  }
  return t3;
}

function BranchPicker() {
  const branches = useBranches();
  const repoInfo = useRepoInfo();
  const currentBranch = useCurrentBranch();
  const stringFormatter = useLocalizedStringFormatter(strings);
  const router = useRouter();
  const config = useConfig();
  const branchPrefix = getBranchPrefix(config);
  const items = useMemo(() => {
    const allBranches = [];
    if (repoInfo) {
      allBranches.push({
        name: repoInfo.defaultBranch,
        description: stringFormatter.format('defaultBranch')
      });
      for (let branch of branches.keys()) {
        if (branch === repoInfo.defaultBranch) continue;
        allBranches.push({
          name: branch
        });
      }
    }
    return allBranches;
  }, [branches, repoInfo, stringFormatter]);
  const filteredBranches = useMemo(() => items.filter(item => item.name === (repoInfo === null || repoInfo === void 0 ? void 0 : repoInfo.defaultBranch) || !branchPrefix || item.name.startsWith(branchPrefix) || item.name === currentBranch), [items, repoInfo, branchPrefix, currentBranch]);
  return /*#__PURE__*/jsx(Combobox, {
    "aria-label": stringFormatter.format('currentBranch'),
    defaultItems: filteredBranches // use `defaultItems` so the component handles filtering
    ,
    loadingState: filteredBranches.length === 0 ? 'loading' : undefined,
    selectedKey: currentBranch,
    onSelectionChange: key => {
      if (typeof key === 'string') {
        router.push(router.href.replace(/\/branch\/[^/]+/, '/branch/' + encodeURIComponent(key)));
      }
    },
    menuTrigger: "focus",
    flex: true,
    children: item_0 => /*#__PURE__*/jsxs(Item, {
      textValue: item_0.name,
      children: [/*#__PURE__*/jsx(Icon, {
        src: gitBranchIcon
      }), /*#__PURE__*/jsx(Text, {
        truncate: true,
        children: item_0.name
      }), 'description' in item_0 && /*#__PURE__*/jsx(Text, {
        slot: "description",
        children: item_0.description
      })]
    }, item_0.name)
  });
}
function CreateBranchDialog(props) {
  const $ = c(51);
  const config = useConfig();
  const repoInfo = useRepoInfo();
  const branches = useBranches();
  const currentBranch = useCurrentBranch();
  const isDefaultBranch = (repoInfo === null || repoInfo === void 0 ? void 0 : repoInfo.defaultBranch) === currentBranch;
  const stringFormatter = useLocalizedStringFormatter(strings);
  const [t0, createBranch] = useCreateBranchMutation();
  const {
    error,
    fetching
  } = t0;
  const [branchName, setBranchName] = useState("");
  const [baseBranch, setBaseBranch] = useState(repoInfo.defaultBranch);
  let t1;
  if ($[0] !== config) {
    t1 = getBranchPrefix(config);
    $[0] = config;
    $[1] = t1;
  } else {
    t1 = $[1];
  }
  const branchPrefix = t1;
  let t2;
  if ($[2] !== branchPrefix) {
    t2 = branchPrefix ? {
      UNSAFE_className: css({
        "& input": {
          paddingInlineStart: tokenSchema.size.space.xsmall
        }
      }),
      startElement: /*#__PURE__*/jsx(Flex, {
        alignItems: "center",
        paddingStart: "regular",
        justifyContent: "center",
        pointerEvents: "none",
        children: /*#__PURE__*/jsx(Text, {
          color: "neutralSecondary",
          children: branchPrefix
        })
      })
    } : {};
    $[2] = branchPrefix;
    $[3] = t2;
  } else {
    t2 = $[3];
  }
  const propsForBranchPrefix = t2;
  let t3;
  if ($[4] === Symbol.for("react.memo_cache_sentinel")) {
    t3 = {
      display: "contents"
    };
    $[4] = t3;
  } else {
    t3 = $[4];
  }
  let t4;
  if ($[5] !== branchPrefix || $[6] !== branchName || $[7] !== createBranch || $[8] !== branches || $[9] !== baseBranch || $[10] !== repoInfo || $[11] !== props) {
    t4 = async event => {
      var _result$data;
      if (event.target !== event.currentTarget) {
        return;
      }
      event.preventDefault();
      const fullBranchName = (branchPrefix !== null && branchPrefix !== void 0 ? branchPrefix : "") + branchName;
      const name = `refs/heads/${fullBranchName}`;
      const result = await createBranch({
        input: {
          name,
          oid: branches.get(baseBranch).commitSha,
          repositoryId: repoInfo.id
        }
      });
      if ((_result$data = result.data) !== null && _result$data !== void 0 && (_result$data = _result$data.createRef) !== null && _result$data !== void 0 && _result$data.__typename) {
        props.onCreate(fullBranchName);
      }
    };
    $[5] = branchPrefix;
    $[6] = branchName;
    $[7] = createBranch;
    $[8] = branches;
    $[9] = baseBranch;
    $[10] = repoInfo;
    $[11] = props;
    $[12] = t4;
  } else {
    t4 = $[12];
  }
  let t5;
  if ($[13] !== stringFormatter) {
    t5 = stringFormatter.format("newBranch");
    $[13] = stringFormatter;
    $[14] = t5;
  } else {
    t5 = $[14];
  }
  let t6;
  if ($[15] !== t5) {
    t6 = /*#__PURE__*/jsx(Heading, {
      children: t5
    });
    $[15] = t5;
    $[16] = t6;
  } else {
    t6 = $[16];
  }
  let t7;
  if ($[17] !== isDefaultBranch || $[18] !== stringFormatter || $[19] !== error || $[20] !== branchName || $[21] !== propsForBranchPrefix || $[22] !== repoInfo || $[23] !== currentBranch || $[24] !== baseBranch) {
    t7 = /*#__PURE__*/jsx(Content, {
      children: isDefaultBranch ? /*#__PURE__*/jsx(TextField, {
        value: branchName,
        onChange: setBranchName,
        label: stringFormatter.format("branchName"),
        autoFocus: true,
        errorMessage: prettyErrorForCreateBranchMutation(error),
        ...propsForBranchPrefix
      }) : /*#__PURE__*/jsxs(Grid, {
        gap: "xlarge",
        children: [/*#__PURE__*/jsx(TextField, {
          label: stringFormatter.format("branchName"),
          value: branchName,
          onChange: setBranchName,
          autoFocus: true,
          errorMessage: prettyErrorForCreateBranchMutation(error),
          ...propsForBranchPrefix
        }), /*#__PURE__*/jsxs(RadioGroup, {
          label: stringFormatter.format("basedOn"),
          value: baseBranch,
          onChange: setBaseBranch,
          children: [/*#__PURE__*/jsxs(Radio, {
            value: repoInfo.defaultBranch,
            children: [/*#__PURE__*/jsxs(Text, {
              children: [repoInfo.defaultBranch, /*#__PURE__*/jsx(Text, {
                visuallyHidden: true,
                children: "."
              })]
            }), /*#__PURE__*/jsx(Text, {
              slot: "description",
              children: stringFormatter.format("theDefaultBranchInYourRepository")
            })]
          }), /*#__PURE__*/jsxs(Radio, {
            value: currentBranch,
            children: [/*#__PURE__*/jsxs(Text, {
              children: [currentBranch, /*#__PURE__*/jsx(Text, {
                visuallyHidden: true,
                children: "."
              })]
            }), /*#__PURE__*/jsx(Text, {
              slot: "description",
              children: stringFormatter.format("theCurrentlyCheckedOutBranch")
            })]
          })]
        })]
      })
    });
    $[17] = isDefaultBranch;
    $[18] = stringFormatter;
    $[19] = error;
    $[20] = branchName;
    $[21] = propsForBranchPrefix;
    $[22] = repoInfo;
    $[23] = currentBranch;
    $[24] = baseBranch;
    $[25] = t7;
  } else {
    t7 = $[25];
  }
  let t8;
  if ($[26] === Symbol.for("react.memo_cache_sentinel")) {
    t8 = {
      justifyContent: "flex-end"
    };
    $[26] = t8;
  } else {
    t8 = $[26];
  }
  let t9;
  if ($[27] !== fetching) {
    t9 = fetching && /*#__PURE__*/jsx(ProgressCircle, {
      "aria-labelledby": "create-branch-submit-button",
      isIndeterminate: true,
      size: "small"
    });
    $[27] = fetching;
    $[28] = t9;
  } else {
    t9 = $[28];
  }
  let t10;
  if ($[29] !== t9) {
    t10 = /*#__PURE__*/jsx(Footer, {
      UNSAFE_style: t8,
      children: t9
    });
    $[29] = t9;
    $[30] = t10;
  } else {
    t10 = $[30];
  }
  let t11;
  if ($[31] !== stringFormatter) {
    t11 = stringFormatter.format("cancel");
    $[31] = stringFormatter;
    $[32] = t11;
  } else {
    t11 = $[32];
  }
  let t12;
  if ($[33] !== props.onDismiss || $[34] !== fetching || $[35] !== t11) {
    t12 = /*#__PURE__*/jsx(Button, {
      onPress: props.onDismiss,
      isDisabled: fetching,
      children: t11
    });
    $[33] = props.onDismiss;
    $[34] = fetching;
    $[35] = t11;
    $[36] = t12;
  } else {
    t12 = $[36];
  }
  let t13;
  if ($[37] !== stringFormatter) {
    t13 = stringFormatter.format("create");
    $[37] = stringFormatter;
    $[38] = t13;
  } else {
    t13 = $[38];
  }
  let t14;
  if ($[39] !== fetching || $[40] !== t13) {
    t14 = /*#__PURE__*/jsx(Button, {
      isDisabled: fetching,
      prominence: "high",
      type: "submit",
      id: "create-branch-submit-button",
      children: t13
    });
    $[39] = fetching;
    $[40] = t13;
    $[41] = t14;
  } else {
    t14 = $[41];
  }
  let t15;
  if ($[42] !== t12 || $[43] !== t14) {
    t15 = /*#__PURE__*/jsxs(ButtonGroup, {
      children: [t12, t14]
    });
    $[42] = t12;
    $[43] = t14;
    $[44] = t15;
  } else {
    t15 = $[44];
  }
  let t16;
  if ($[45] !== t4 || $[46] !== t6 || $[47] !== t7 || $[48] !== t10 || $[49] !== t15) {
    t16 = /*#__PURE__*/jsx(Dialog, {
      size: "small",
      children: /*#__PURE__*/jsxs("form", {
        style: t3,
        onSubmit: t4,
        children: [t6, t7, t10, t15]
      })
    });
    $[45] = t4;
    $[46] = t6;
    $[47] = t7;
    $[48] = t10;
    $[49] = t15;
    $[50] = t16;
  } else {
    t16 = $[50];
  }
  return t16;
}

// Data
// -----------------------------------------------------------------------------

// https://git-scm.com/docs/git-check-ref-format
const invalidAnywhere = [' ', '~', '^', ':', '*', '?', '[', '..', '@{', '\\'];
const invalidStart = ['.', '/'];
const invalidEnd = ['.', '/', '.lock'];
function prettyErrorForCreateBranchMutation(error) {
  if (!error) {
    return undefined;
  }
  if (error.message.includes('is not a valid ref name')) {
    let refnameMatch = error.message.match(/"([^"]+)"/);
    let branchname = refnameMatch ? refnameMatch[1].replace('refs/heads/', '') : '';

    // start rules
    for (let char of invalidStart) {
      if (branchname.startsWith(char)) {
        return `Cannot start with "${char}"`;
      }
    }

    // end rules
    for (let char of invalidEnd) {
      if (branchname.endsWith(char)) {
        return `Cannot end with "${char}"`;
      }
    }

    // anywhere rules
    let invalidMatches = invalidAnywhere.filter(c => branchname.includes(c));
    if (invalidMatches.length > 0) {
      let options = {
        style: 'long',
        type: 'conjunction'
      };
      let formatter = new Intl.ListFormat('en-US', options);
      let list = invalidMatches.map(char => `"${char}"`);
      return `Some characters are not allowed: ${formatter.format(list)}`;
    }

    // unknown
    return 'Invalid branch name';
  }
  return error.message;
}
function useCreateBranchMutation() {
  return useMutation(gql`
      mutation CreateBranch($input: CreateRefInput!) {
        createRef(input: $input) {
          __typename
          ref {
            ...Ref_base
          }
        }
      }
      ${Ref_base}
    `);
}

const ThemeContext = /*#__PURE__*/createContext({
  theme: 'auto',
  setTheme: () => {
    throw new Error('ThemeContext was not initialized.');
  }
});
const ThemeProvider = ThemeContext.Provider;
const STORAGE_KEY = 'keystatic-color-scheme';

// only for initializing the provider, for consumption use `useThemeContext()`
function useTheme() {
  const $ = c(4);
  let t0;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    t0 = () => {
      const storedValue = localStorage.getItem(STORAGE_KEY);
      if (storedValue === "light" || storedValue === "dark") {
        return storedValue;
      }
      return "auto";
    };
    $[0] = t0;
  } else {
    t0 = $[0];
  }
  const [theme, setThemeValue] = useState(t0);
  let t1;
  if ($[1] === Symbol.for("react.memo_cache_sentinel")) {
    t1 = theme_0 => {
      localStorage.setItem(STORAGE_KEY, theme_0);
      setThemeValue(theme_0);
    };
    $[1] = t1;
  } else {
    t1 = $[1];
  }
  const setTheme = t1;
  let t2;
  if ($[2] !== theme) {
    t2 = {
      theme,
      setTheme
    };
    $[2] = theme;
    $[3] = t2;
  } else {
    t2 = $[3];
  }
  return t2;
}
function useThemeContext() {
  return useContext(ThemeContext);
}

const BlockWrapper$1 = props => {
  let {
    attributes,
    children,
    draggable = false
  } = props;
  return /*#__PURE__*/jsx("div", {
    draggable: draggable,
    className: blockElementSpacing$1,
    ...attributes,
    children: children
  });
};

const ToolbarSeparator = () => {
  return /*#__PURE__*/jsx(Divider, {
    orientation: "vertical",
    flexShrink: 0
  });
};

// Theme controls
// -----------------------------------------------------------------------------

const THEME_MODE = {
  light: {
    icon: sunIcon,
    label: 'Light'
  },
  dark: {
    icon: moonIcon,
    label: 'Dark'
  },
  auto: {
    icon: monitorIcon,
    label: 'System'
  }
};
const themeItems = Object.entries(THEME_MODE).map(([id, {
  icon,
  label
}]) => ({
  id,
  icon,
  label
}));
function ThemeMenu() {
  const $ = c(13);
  const {
    theme,
    setTheme
  } = useThemeContext();
  const matchesDark = useMediaQuery("(prefers-color-scheme: dark)");
  let icon = THEME_MODE[theme].icon;
  if (theme === "auto") {
    icon = matchesDark ? moonIcon : sunIcon;
  }
  let t0;
  if ($[0] !== icon) {
    t0 = /*#__PURE__*/jsx(ActionButton, {
      "aria-label": "theme",
      prominence: "low",
      children: /*#__PURE__*/jsx(Icon, {
        src: icon
      })
    });
    $[0] = icon;
    $[1] = t0;
  } else {
    t0 = $[1];
  }
  let t1;
  if ($[2] !== setTheme) {
    t1 = t2 => {
      const [key] = t2;
      return setTheme(key);
    };
    $[2] = setTheme;
    $[3] = t1;
  } else {
    t1 = $[3];
  }
  let t2;
  if ($[4] !== theme) {
    t2 = [theme];
    $[4] = theme;
    $[5] = t2;
  } else {
    t2 = $[5];
  }
  let t3;
  if ($[6] === Symbol.for("react.memo_cache_sentinel")) {
    t3 = item => /*#__PURE__*/jsxs(Item$1, {
      textValue: item.label,
      children: [/*#__PURE__*/jsx(Icon, {
        src: item.icon
      }), /*#__PURE__*/jsx(Text, {
        children: item.label
      })]
    });
    $[6] = t3;
  } else {
    t3 = $[6];
  }
  let t4;
  if ($[7] !== t1 || $[8] !== t2) {
    t4 = /*#__PURE__*/jsx(Menu, {
      items: themeItems,
      onSelectionChange: t1,
      disallowEmptySelection: true,
      selectedKeys: t2,
      selectionMode: "single",
      children: t3
    });
    $[7] = t1;
    $[8] = t2;
    $[9] = t4;
  } else {
    t4 = $[9];
  }
  let t5;
  if ($[10] !== t0 || $[11] !== t4) {
    t5 = /*#__PURE__*/jsxs(MenuTrigger, {
      align: "end",
      children: [t0, t4]
    });
    $[10] = t0;
    $[11] = t4;
    $[12] = t5;
  } else {
    t5 = $[12];
  }
  return t5;
}

// User controls
// -----------------------------------------------------------------------------

function UserActions() {
  const $ = c(5);
  const config = useConfig();
  const userData = useUserData();
  const router = useRouter();
  if (!userData) {
    return null;
  }
  if (userData === "unauthorized") {
    let t0;
    if ($[0] !== router.params || $[1] !== config) {
      t0 = /*#__PURE__*/jsx(ActionButton, {
        onPress: () => {
          redirectToCloudAuth(router.params.map(encodeURIComponent).join("/"), config);
        },
        flex: true,
        children: "Sign into Cloud"
      });
      $[0] = router.params;
      $[1] = config;
      $[2] = t0;
    } else {
      t0 = $[2];
    }
    return t0;
  }
  let t0;
  if ($[3] !== userData) {
    t0 = /*#__PURE__*/jsx(UserMenu, {
      ...userData
    });
    $[3] = userData;
    $[4] = t0;
  } else {
    t0 = $[4];
  }
  return t0;
}
function UserMenu(user) {
  const $ = c(16);
  const config = useConfig();
  const cloudInfo = useCloudInfo();
  const imageLibraryUrl = useImageLibraryURL();
  let t0;
  const t1 = config.storage.kind === "github" ? "/api/keystatic/github/logout" : undefined;
  let items;
  if ($[0] !== t1 || $[1] !== config.cloud || $[2] !== cloudInfo || $[3] !== imageLibraryUrl) {
    var _config$cloud;
    items = [{
      key: "logout",
      label: "Log out",
      href: t1,
      icon: logOutIcon
    }];
    if ((_config$cloud = config.cloud) !== null && _config$cloud !== void 0 && _config$cloud.project) {
      items.unshift({
        key: "manage",
        label: "Account",
        icon: userIcon,
        href: "https://keystatic.cloud/account",
        target: "_blank",
        rel: "noopener noreferrer"
      });
    }
    if (cloudInfo !== null && cloudInfo !== void 0 && cloudInfo.team.images) {
      items.unshift({
        key: "image-library",
        label: "Image library",
        icon: imageIcon,
        href: imageLibraryUrl,
        target: "_blank",
        rel: "noopener noreferrer"
      });
    }
    $[0] = t1;
    $[1] = config.cloud;
    $[2] = cloudInfo;
    $[3] = imageLibraryUrl;
    $[4] = items;
  } else {
    items = $[4];
  }
  t0 = items;
  const menuItems = t0;
  if (!user) {
    return null;
  }
  let t2;
  if ($[5] !== user) {
    t2 = /*#__PURE__*/jsx(UserDetailsButton, {
      ...user
    });
    $[5] = user;
    $[6] = t2;
  } else {
    t2 = $[6];
  }
  let t3;
  if ($[7] !== config) {
    t3 = async key => {
      await Promise.all([clearObjectCache(), clearDrafts()]);
      switch (key) {
        case "logout":
          {
            switch (config.storage.kind) {
              case "cloud":
              case "local":
                {
                  var _getCloudAuth;
                  const token = (_getCloudAuth = getCloudAuth(config)) === null || _getCloudAuth === void 0 ? void 0 : _getCloudAuth.accessToken;
                  if (token) {
                    await fetch(`${KEYSTATIC_CLOUD_API_URL}/oauth/revoke`, {
                      method: "POST",
                      body: new URLSearchParams({
                        token
                      }).toString(),
                      headers: {
                        "Content-Type": "application/x-www-form-urlencoded",
                        ...KEYSTATIC_CLOUD_HEADERS
                      }
                    });
                  }
                  localStorage.removeItem("keystatic-cloud-access-token");
                  window.location.reload();
                }
            }
          }
      }
    };
    $[7] = config;
    $[8] = t3;
  } else {
    t3 = $[8];
  }
  let t4;
  if ($[9] === Symbol.for("react.memo_cache_sentinel")) {
    t4 = item => /*#__PURE__*/jsxs(Item$1, {
      textValue: item.label,
      href: item.href,
      rel: item.rel,
      target: item.target,
      children: [/*#__PURE__*/jsx(Icon, {
        src: item.icon
      }), /*#__PURE__*/jsx(Text, {
        children: item.label
      })]
    }, item.key);
    $[9] = t4;
  } else {
    t4 = $[9];
  }
  let t5;
  if ($[10] !== menuItems || $[11] !== t3) {
    t5 = /*#__PURE__*/jsx(Fragment, {
      children: /*#__PURE__*/jsx(Menu, {
        items: menuItems,
        minWidth: "scale.2400",
        onAction: t3,
        children: t4
      })
    });
    $[10] = menuItems;
    $[11] = t3;
    $[12] = t5;
  } else {
    t5 = $[12];
  }
  let t6;
  if ($[13] !== t2 || $[14] !== t5) {
    t6 = /*#__PURE__*/jsxs(MenuTrigger, {
      children: [t2, t5]
    });
    $[13] = t2;
    $[14] = t5;
    $[15] = t6;
  } else {
    t6 = $[15];
  }
  return t6;
}
const UserDetailsButton = /*#__PURE__*/forwardRef(function UserDetailsButton(props, ref) {
  var _name;
  const $ = c(24);
  let name;
  let avatarUrl;
  let login;
  let otherProps;
  if ($[0] !== props) {
    ({
      avatarUrl,
      login,
      name,
      ...otherProps
    } = props);
    $[0] = props;
    $[1] = name;
    $[2] = avatarUrl;
    $[3] = login;
    $[4] = otherProps;
  } else {
    name = $[1];
    avatarUrl = $[2];
    login = $[3];
    otherProps = $[4];
  }
  let t0;
  if ($[5] === Symbol.for("react.memo_cache_sentinel")) {
    t0 = css({
      justifyContent: "start",
      textAlign: "start"
    });
    $[5] = t0;
  } else {
    t0 = $[5];
  }
  const t1 = (_name = name) !== null && _name !== void 0 ? _name : undefined;
  let t2;
  if ($[6] !== avatarUrl || $[7] !== t1) {
    t2 = /*#__PURE__*/jsx(Avatar, {
      src: avatarUrl,
      name: t1,
      size: "small"
    });
    $[6] = avatarUrl;
    $[7] = t1;
    $[8] = t2;
  } else {
    t2 = $[8];
  }
  let t3;
  if ($[9] !== name) {
    t3 = /*#__PURE__*/jsx(Text, {
      size: "small",
      weight: "semibold",
      color: "neutralEmphasis",
      children: name
    });
    $[9] = name;
    $[10] = t3;
  } else {
    t3 = $[10];
  }
  let t4;
  if ($[11] !== name || $[12] !== login) {
    t4 = name === login ? null : /*#__PURE__*/jsx(Text, {
      size: "small",
      color: "neutralTertiary",
      children: login
    });
    $[11] = name;
    $[12] = login;
    $[13] = t4;
  } else {
    t4 = $[13];
  }
  let t5;
  if ($[14] !== t3 || $[15] !== t4) {
    t5 = /*#__PURE__*/jsx(ClearSlots, {
      children: /*#__PURE__*/jsxs(Flex, {
        direction: "column",
        gap: "small",
        children: [t3, t4]
      })
    });
    $[14] = t3;
    $[15] = t4;
    $[16] = t5;
  } else {
    t5 = $[16];
  }
  let t6;
  if ($[17] !== t2 || $[18] !== t5) {
    t6 = /*#__PURE__*/jsxs(Flex, {
      alignItems: "center",
      gap: "regular",
      children: [t2, t5]
    });
    $[17] = t2;
    $[18] = t5;
    $[19] = t6;
  } else {
    t6 = $[19];
  }
  let t7;
  if ($[20] !== otherProps || $[21] !== ref || $[22] !== t6) {
    t7 = /*#__PURE__*/jsx(ActionButton, {
      ...otherProps,
      ref: ref,
      "aria-label": "User menu",
      prominence: "low",
      flexGrow: 1,
      UNSAFE_className: t0,
      children: t6
    });
    $[20] = otherProps;
    $[21] = ref;
    $[22] = t6;
    $[23] = t7;
  } else {
    t7 = $[23];
  }
  return t7;
});

// Git controls
// -----------------------------------------------------------------------------

function useAssociatedPullRequest() {
  var _prResult$data, _prResult$data$node$a, _prResult$data$node$a2;
  const $ = c(9);
  const branches = useBranches();
  const repoInfo = useRepoInfo();
  const currentBranch = useCurrentBranch();
  let t0;
  if ($[0] !== branches || $[1] !== currentBranch) {
    var _branches$get;
    t0 = (_branches$get = branches.get(currentBranch)) === null || _branches$get === void 0 ? void 0 : _branches$get.id;
    $[0] = branches;
    $[1] = currentBranch;
    $[2] = t0;
  } else {
    t0 = $[2];
  }
  const currentBranchId = t0;
  let t1;
  if ($[3] === Symbol.for("react.memo_cache_sentinel")) {
    t1 = gql`
      query PullRequestForBranch($refId: ID!) {
        node(id: $refId) {
          __typename
          id
          ... on Ref {
            associatedPullRequests(states: [OPEN], first: 1) {
              nodes {
                id
                number
              }
            }
          }
        }
      }
    `;
    $[3] = t1;
  } else {
    t1 = $[3];
  }
  const t2 = !currentBranchId || currentBranch === (repoInfo === null || repoInfo === void 0 ? void 0 : repoInfo.defaultBranch);
  let t3;
  if ($[4] !== currentBranchId) {
    t3 = {
      refId: currentBranchId
    };
    $[4] = currentBranchId;
    $[5] = t3;
  } else {
    t3 = $[5];
  }
  let t4;
  if ($[6] !== t2 || $[7] !== t3) {
    t4 = {
      query: t1,
      pause: t2,
      variables: t3
    };
    $[6] = t2;
    $[7] = t3;
    $[8] = t4;
  } else {
    t4 = $[8];
  }
  const [prResult] = useQuery(t4);
  return (_prResult$data = prResult.data) !== null && _prResult$data !== void 0 && _prResult$data.node && prResult.data.node.__typename === "Ref" ? (_prResult$data$node$a = (_prResult$data$node$a2 = prResult.data.node.associatedPullRequests) === null || _prResult$data$node$a2 === void 0 || (_prResult$data$node$a2 = _prResult$data$node$a2.nodes) === null || _prResult$data$node$a2 === void 0 || (_prResult$data$node$a2 = _prResult$data$node$a2[0]) === null || _prResult$data$node$a2 === void 0 ? void 0 : _prResult$data$node$a2.number) !== null && _prResult$data$node$a !== void 0 ? _prResult$data$node$a : false : undefined;
}
function GitMenu() {
  const $ = c(84);
  const branches = useBranches();
  const currentBranch = useCurrentBranch();
  const repoInfo = useRepoInfo();
  const prNumber = useAssociatedPullRequest();
  const stringFormatter = useLocalizedStringFormatter(strings);
  let t0;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    t0 = v => !v;
    $[0] = t0;
  } else {
    t0 = $[0];
  }
  const [newBranchDialogVisible, toggleNewBranchDialog] = useReducer(t0, false);
  let t1;
  if ($[1] === Symbol.for("react.memo_cache_sentinel")) {
    t1 = v_0 => !v_0;
    $[1] = t1;
  } else {
    t1 = $[1];
  }
  const [deleteBranchDialogVisible, toggleDeleteBranchDialog] = useReducer(t1, false);
  let t2;
  if ($[2] === Symbol.for("react.memo_cache_sentinel")) {
    t2 = gql`
      mutation DeleteBranch($refId: ID!) {
        deleteRef(input: { refId: $refId }) {
          __typename
        }
      }
    `;
    $[2] = t2;
  } else {
    t2 = $[2];
  }
  const [, deleteBranch] = useMutation(t2);
  let t3;
  let t4;
  if ($[3] !== repoInfo) {
    t4 = repoInfo ? getRepoUrl(repoInfo.upstream) : "";
    $[3] = repoInfo;
    $[4] = t4;
  } else {
    t4 = $[4];
  }
  const repoURL = t4;
  const isDefaultBranch = currentBranch === (repoInfo === null || repoInfo === void 0 ? void 0 : repoInfo.defaultBranch);
  let items;
  if ($[5] !== stringFormatter || $[6] !== repoURL || $[7] !== isDefaultBranch || $[8] !== prNumber || $[9] !== currentBranch || $[10] !== repoInfo) {
    items = [];
    let t5;
    if ($[12] !== stringFormatter) {
      t5 = stringFormatter.format("newBranch");
      $[12] = stringFormatter;
      $[13] = t5;
    } else {
      t5 = $[13];
    }
    let t6;
    if ($[14] !== t5) {
      t6 = {
        key: "new-branch",
        icon: gitBranchPlusIcon,
        label: t5
      };
      $[14] = t5;
      $[15] = t6;
    } else {
      t6 = $[15];
    }
    let branchSection;
    let prSection;
    let repoSection;
    if ($[16] !== t6 || $[17] !== repoURL || $[18] !== isDefaultBranch || $[19] !== prNumber || $[20] !== currentBranch || $[21] !== stringFormatter || $[22] !== repoInfo) {
      branchSection = [t6];
      prSection = [];
      let t7;
      if ($[26] !== repoURL) {
        t7 = {
          key: "repo",
          icon: githubIcon,
          href: repoURL,
          target: "_blank",
          rel: "noopener noreferrer",
          label: "Github repo"
        };
        $[26] = repoURL;
        $[27] = t7;
      } else {
        t7 = $[27];
      }
      repoSection = [t7];
      if (!isDefaultBranch && prNumber !== undefined) {
        if (prNumber === false) {
          const t8 = `${repoURL}/pull/new/${currentBranch}`;
          let t9;
          if ($[28] !== stringFormatter) {
            t9 = stringFormatter.format("createPullRequest");
            $[28] = stringFormatter;
            $[29] = t9;
          } else {
            t9 = $[29];
          }
          let t10;
          if ($[30] !== t8 || $[31] !== t9) {
            t10 = {
              key: "create-pull-request",
              icon: gitPullRequestIcon,
              href: t8,
              target: "_blank",
              rel: "noopener noreferrer",
              label: t9
            };
            $[30] = t8;
            $[31] = t9;
            $[32] = t10;
          } else {
            t10 = $[32];
          }
          prSection.push(t10);
          let t11;
          if ($[33] !== stringFormatter) {
            t11 = stringFormatter.format("deleteBranch");
            $[33] = stringFormatter;
            $[34] = t11;
          } else {
            t11 = $[34];
          }
          let t12;
          if ($[35] !== t11) {
            t12 = {
              key: "delete-branch",
              icon: trash2Icon,
              label: t11
            };
            $[35] = t11;
            $[36] = t12;
          } else {
            t12 = $[36];
          }
          branchSection.push(t12);
        } else {
          const t8 = `${repoURL}/pull/${prNumber}`;
          const t9 = `Pull Request #${prNumber}`;
          let t10;
          if ($[37] !== t8 || $[38] !== t9) {
            t10 = {
              key: "view-pull-request",
              icon: gitPullRequestIcon,
              href: t8,
              target: "_blank",
              rel: "noopener noreferrer",
              label: t9
            };
            $[37] = t8;
            $[38] = t9;
            $[39] = t10;
          } else {
            t10 = $[39];
          }
          prSection.push(t10);
        }
      }
      let t8;
      if ($[40] !== repoInfo) {
        t8 = repoInfo ? getRepoUrl(repoInfo) : "";
        $[40] = repoInfo;
        $[41] = t8;
      } else {
        t8 = $[41];
      }
      const forkRepoUrl = t8;
      if (forkRepoUrl !== repoURL) {
        let t9;
        if ($[42] !== forkRepoUrl) {
          t9 = {
            key: "fork",
            icon: gitForkIcon,
            href: forkRepoUrl,
            target: "_blank",
            rel: "noopener noreferrer",
            label: "View fork"
          };
          $[42] = forkRepoUrl;
          $[43] = t9;
        } else {
          t9 = $[43];
        }
        repoSection.push(t9);
      }
      $[16] = t6;
      $[17] = repoURL;
      $[18] = isDefaultBranch;
      $[19] = prNumber;
      $[20] = currentBranch;
      $[21] = stringFormatter;
      $[22] = repoInfo;
      $[23] = branchSection;
      $[24] = prSection;
      $[25] = repoSection;
    } else {
      branchSection = $[23];
      prSection = $[24];
      repoSection = $[25];
    }
    if (branchSection.length) {
      let t7;
      if ($[44] !== stringFormatter) {
        t7 = stringFormatter.format("branches");
        $[44] = stringFormatter;
        $[45] = t7;
      } else {
        t7 = $[45];
      }
      let t8;
      if ($[46] !== t7 || $[47] !== branchSection) {
        t8 = {
          key: "branch-section",
          label: t7,
          children: branchSection
        };
        $[46] = t7;
        $[47] = branchSection;
        $[48] = t8;
      } else {
        t8 = $[48];
      }
      items.push(t8);
    }
    if (prSection.length) {
      let t7;
      if ($[49] !== stringFormatter) {
        t7 = stringFormatter.format("pullRequests");
        $[49] = stringFormatter;
        $[50] = t7;
      } else {
        t7 = $[50];
      }
      let t8;
      if ($[51] !== t7 || $[52] !== prSection) {
        t8 = {
          key: "pr-section",
          label: t7,
          children: prSection
        };
        $[51] = t7;
        $[52] = prSection;
        $[53] = t8;
      } else {
        t8 = $[53];
      }
      items.push(t8);
    }
    if (repoSection.length) {
      let t7;
      if ($[54] !== repoSection) {
        t7 = {
          key: "repo-section",
          label: "Repository",
          children: repoSection
        };
        $[54] = repoSection;
        $[55] = t7;
      } else {
        t7 = $[55];
      }
      items.push(t7);
    }
    $[5] = stringFormatter;
    $[6] = repoURL;
    $[7] = isDefaultBranch;
    $[8] = prNumber;
    $[9] = currentBranch;
    $[10] = repoInfo;
    $[11] = items;
  } else {
    items = $[11];
  }
  t3 = items;
  const gitMenuItems = t3;
  const router = useRouter();
  let t5;
  if ($[56] !== toggleNewBranchDialog || $[57] !== toggleDeleteBranchDialog) {
    t5 = key => {
      bb37: switch (key) {
        case "new-branch":
          {
            toggleNewBranchDialog();
            break bb37;
          }
        case "delete-branch":
          {
            toggleDeleteBranchDialog();
          }
      }
    };
    $[56] = toggleNewBranchDialog;
    $[57] = toggleDeleteBranchDialog;
    $[58] = t5;
  } else {
    t5 = $[58];
  }
  let t6;
  if ($[59] === Symbol.for("react.memo_cache_sentinel")) {
    t6 = item => /*#__PURE__*/jsx(Section, {
      items: item.children,
      "aria-label": item.label,
      children: item_0 => /*#__PURE__*/jsxs(Item$1, {
        textValue: item_0.label,
        href: item_0.href,
        rel: item_0.rel,
        target: item_0.target,
        children: [/*#__PURE__*/jsx(Icon, {
          src: item_0.icon
        }), /*#__PURE__*/jsx(Text, {
          children: item_0.label
        })]
      }, item_0.key)
    }, item.key);
    $[59] = t6;
  } else {
    t6 = $[59];
  }
  let t7;
  if ($[60] !== gitMenuItems || $[61] !== t5) {
    t7 = /*#__PURE__*/jsx(ActionMenu, {
      "aria-label": "git actions",
      align: "end",
      items: gitMenuItems,
      onAction: t5,
      children: t6
    });
    $[60] = gitMenuItems;
    $[61] = t5;
    $[62] = t7;
  } else {
    t7 = $[62];
  }
  let t8;
  if ($[63] !== newBranchDialogVisible || $[64] !== toggleNewBranchDialog || $[65] !== router) {
    t8 = newBranchDialogVisible && /*#__PURE__*/jsx(CreateBranchDialog, {
      onDismiss: toggleNewBranchDialog,
      onCreate: branchName => {
        toggleNewBranchDialog();
        router.push(router.href.replace(/\/branch\/[^/]+/, "/branch/" + encodeURIComponent(branchName)));
      }
    });
    $[63] = newBranchDialogVisible;
    $[64] = toggleNewBranchDialog;
    $[65] = router;
    $[66] = t8;
  } else {
    t8 = $[66];
  }
  let t9;
  if ($[67] !== toggleNewBranchDialog || $[68] !== t8) {
    t9 = /*#__PURE__*/jsx(DialogContainer, {
      onDismiss: toggleNewBranchDialog,
      children: t8
    });
    $[67] = toggleNewBranchDialog;
    $[68] = t8;
    $[69] = t9;
  } else {
    t9 = $[69];
  }
  let t10;
  if ($[70] !== deleteBranchDialogVisible || $[71] !== repoInfo || $[72] !== deleteBranch || $[73] !== branches || $[74] !== currentBranch || $[75] !== router) {
    t10 = deleteBranchDialogVisible && /*#__PURE__*/jsxs(AlertDialog, {
      title: "Delete branch",
      tone: "critical",
      cancelLabel: "Cancel",
      primaryActionLabel: "Yes, delete",
      autoFocusButton: "cancel",
      onPrimaryAction: async () => {
        if (repoInfo) {
          await deleteBranch({
            refId: branches.get(currentBranch).id
          });
          router.push(router.href.replace(/\/branch\/[^/]+/, "/branch/" + encodeURIComponent(repoInfo.defaultBranch)));
        }
      },
      children: ["Are you sure you want to delete the \"", currentBranch, "\" branch? This cannot be undone."]
    });
    $[70] = deleteBranchDialogVisible;
    $[71] = repoInfo;
    $[72] = deleteBranch;
    $[73] = branches;
    $[74] = currentBranch;
    $[75] = router;
    $[76] = t10;
  } else {
    t10 = $[76];
  }
  let t11;
  if ($[77] !== toggleDeleteBranchDialog || $[78] !== t10) {
    t11 = /*#__PURE__*/jsx(DialogContainer, {
      onDismiss: toggleDeleteBranchDialog,
      children: t10
    });
    $[77] = toggleDeleteBranchDialog;
    $[78] = t10;
    $[79] = t11;
  } else {
    t11 = $[79];
  }
  let t12;
  if ($[80] !== t7 || $[81] !== t9 || $[82] !== t11) {
    t12 = /*#__PURE__*/jsxs(Fragment, {
      children: [t7, t9, t11]
    });
    $[80] = t7;
    $[81] = t9;
    $[82] = t11;
    $[83] = t12;
  } else {
    t12 = $[83];
  }
  return t12;
}

// Utils
// -----------------------------------------------------------------------------

function useUserData() {
  const $ = c(8);
  const config = useConfig();
  const user = useViewer();
  const rawCloudInfo = useRawCloudInfo();
  if (rawCloudInfo) {
    if (rawCloudInfo === "unauthorized") {
      return rawCloudInfo;
    }
    let t0;
    if ($[0] !== rawCloudInfo.user.avatarUrl || $[1] !== rawCloudInfo.user.email || $[2] !== rawCloudInfo.user.name) {
      t0 = {
        avatarUrl: rawCloudInfo.user.avatarUrl,
        login: rawCloudInfo.user.email,
        name: rawCloudInfo.user.name
      };
      $[0] = rawCloudInfo.user.avatarUrl;
      $[1] = rawCloudInfo.user.email;
      $[2] = rawCloudInfo.user.name;
      $[3] = t0;
    } else {
      t0 = $[3];
    }
    return t0;
  }
  if (isGitHubConfig(config) && user) {
    var _user$name;
    const t0 = (_user$name = user.name) !== null && _user$name !== void 0 ? _user$name : user.login;
    let t1;
    if ($[4] !== user.avatarUrl || $[5] !== user.login || $[6] !== t0) {
      t1 = {
        avatarUrl: user.avatarUrl,
        login: user.login,
        name: t0
      };
      $[4] = user.avatarUrl;
      $[5] = user.login;
      $[6] = t0;
      $[7] = t1;
    } else {
      t1 = $[7];
    }
    return t1;
  }
}

const SidebarContext = /*#__PURE__*/createContext(null);
function useSidebar() {
  const context = useContext(SidebarContext);
  if (!context) {
    throw new Error("useSidebar must be within a SidebarProvider");
  }
  return context;
}
const breakpointNames = typedKeys(breakpoints);
function SidebarProvider(props) {
  const $ = c(13);
  const matchedBreakpoints = useBreakpoint();
  let t0;
  if ($[0] !== matchedBreakpoints) {
    t0 = matchedBreakpoints.includes("desktop");
    $[0] = matchedBreakpoints;
    $[1] = t0;
  } else {
    t0 = $[1];
  }
  let t1;
  if ($[2] !== t0) {
    t1 = {
      defaultOpen: t0
    };
    $[2] = t0;
    $[3] = t1;
  } else {
    t1 = $[3];
  }
  const state = useOverlayTriggerState(t1);
  const breakpointIndex = breakpointNames.indexOf(matchedBreakpoints[0]);
  const previousIndex = usePrevious(breakpointIndex) || 0;
  let t2;
  if ($[4] !== previousIndex || $[5] !== breakpointIndex || $[6] !== state) {
    t2 = () => {
      const larger = previousIndex < breakpointIndex;
      if (larger && breakpointIndex >= 2) {
        state.open();
      } else {
        if (breakpointIndex < 2) {
          state.close();
        }
      }
    };
    $[4] = previousIndex;
    $[5] = breakpointIndex;
    $[6] = state;
    $[7] = t2;
  } else {
    t2 = $[7];
  }
  let t3;
  if ($[8] !== matchedBreakpoints) {
    t3 = [matchedBreakpoints];
    $[8] = matchedBreakpoints;
    $[9] = t3;
  } else {
    t3 = $[9];
  }
  useUpdateEffect(t2, t3);
  let t4;
  if ($[10] !== state || $[11] !== props.children) {
    t4 = /*#__PURE__*/jsx(SidebarContext.Provider, {
      value: state,
      children: props.children
    });
    $[10] = state;
    $[11] = props.children;
    $[12] = t4;
  } else {
    t4 = $[12];
  }
  return t4;
}
function SidebarPanel() {
  const $ = c(4);
  let t0;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    t0 = /*#__PURE__*/jsx(SidebarHeader, {});
    $[0] = t0;
  } else {
    t0 = $[0];
  }
  let t1;
  if ($[1] === Symbol.for("react.memo_cache_sentinel")) {
    t1 = /*#__PURE__*/jsx(SidebarGitActions, {});
    $[1] = t1;
  } else {
    t1 = $[1];
  }
  let t2;
  if ($[2] === Symbol.for("react.memo_cache_sentinel")) {
    t2 = /*#__PURE__*/jsx(SidebarNav, {});
    $[2] = t2;
  } else {
    t2 = $[2];
  }
  let t3;
  if ($[3] === Symbol.for("react.memo_cache_sentinel")) {
    t3 = /*#__PURE__*/jsxs(VStack, {
      backgroundColor: "surface",
      height: "100%",
      children: [t0, t1, t2, /*#__PURE__*/jsx(SidebarFooter, {})]
    });
    $[3] = t3;
  } else {
    t3 = $[3];
  }
  return t3;
}
function SidebarHeader() {
  const $ = c(12);
  const isLocalNoCloud = useIsLocalNoCloud();
  const {
    brandMark,
    brandName
  } = useBrand();
  let t0;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    t0 = {
      mobile: "element.large",
      tablet: "element.xlarge"
    };
    $[0] = t0;
  } else {
    t0 = $[0];
  }
  let t1;
  if ($[1] === Symbol.for("react.memo_cache_sentinel")) {
    t1 = css({
      color: tokenSchema.color.foreground.neutralEmphasis,
      "& :first-child": {
        flexShrink: 0
      }
    });
    $[1] = t1;
  } else {
    t1 = $[1];
  }
  let t2;
  if ($[2] !== brandName) {
    t2 = /*#__PURE__*/jsx(Text, {
      color: "inherit",
      weight: "medium",
      truncate: true,
      children: brandName
    });
    $[2] = brandName;
    $[3] = t2;
  } else {
    t2 = $[3];
  }
  let t3;
  if ($[4] !== brandMark || $[5] !== t2) {
    t3 = /*#__PURE__*/jsxs(HStack, {
      flex: true,
      alignItems: "center",
      gap: "regular",
      UNSAFE_className: t1,
      children: [brandMark, t2]
    });
    $[4] = brandMark;
    $[5] = t2;
    $[6] = t3;
  } else {
    t3 = $[6];
  }
  let t4;
  if ($[7] !== isLocalNoCloud) {
    t4 = isLocalNoCloud && /*#__PURE__*/jsx(ThemeMenu, {});
    $[7] = isLocalNoCloud;
    $[8] = t4;
  } else {
    t4 = $[8];
  }
  let t5;
  if ($[9] !== t3 || $[10] !== t4) {
    t5 = /*#__PURE__*/jsxs(HStack, {
      alignItems: "center",
      gap: "regular",
      paddingY: "regular",
      paddingX: "medium",
      height: t0,
      children: [t3, t4]
    });
    $[9] = t3;
    $[10] = t4;
    $[11] = t5;
  } else {
    t5 = $[11];
  }
  return t5;
}

// when local mode w/o cloud there's no user actions, so we hide the footer and
// move the theme menu to the header
function SidebarFooter() {
  const $ = c(2);
  const isLocalNoCloud = useIsLocalNoCloud();
  if (isLocalNoCloud) {
    return null;
  }
  let t0;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    t0 = /*#__PURE__*/jsx(UserActions, {});
    $[0] = t0;
  } else {
    t0 = $[0];
  }
  let t1;
  if ($[1] === Symbol.for("react.memo_cache_sentinel")) {
    t1 = /*#__PURE__*/jsxs(HStack, {
      alignItems: "center",
      paddingY: "regular",
      paddingX: "medium",
      gap: "regular",
      children: [t0, /*#__PURE__*/jsx(ThemeMenu, {})]
    });
    $[1] = t1;
  } else {
    t1 = $[1];
  }
  return t1;
}

// no git actions in local mode
function SidebarGitActions() {
  const $ = c(2);
  const config = useConfig();
  if (isLocalConfig(config)) {
    return null;
  }
  let t0;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    t0 = /*#__PURE__*/jsx(BranchPicker, {});
    $[0] = t0;
  } else {
    t0 = $[0];
  }
  let t1;
  if ($[1] === Symbol.for("react.memo_cache_sentinel")) {
    t1 = /*#__PURE__*/jsxs(HStack, {
      gap: "regular",
      paddingY: "regular",
      paddingX: "medium",
      children: [t0, /*#__PURE__*/jsx(GitMenu, {})]
    });
    $[1] = t1;
  } else {
    t1 = $[1];
  }
  return t1;
}
function SidebarDialog() {
  const $ = c(25);
  const state = useSidebar();
  const router = useRouter();
  let t0;
  if ($[0] !== state) {
    t0 = () => {
      state.close();
    };
    $[0] = state;
    $[1] = t0;
  } else {
    t0 = $[1];
  }
  let t1;
  if ($[2] !== router.href) {
    t1 = [router.href];
    $[2] = router.href;
    $[3] = t1;
  } else {
    t1 = $[3];
  }
  useUpdateEffect(t0, t1);
  const dialogRef = useRef(null);
  let t2;
  if ($[4] === Symbol.for("react.memo_cache_sentinel")) {
    t2 = {
      isDismissable: true
    };
    $[4] = t2;
  } else {
    t2 = $[4];
  }
  const {
    modalProps,
    underlayProps
  } = useModalOverlay(t2, state, dialogRef);
  let t3;
  if ($[5] !== underlayProps || $[6] !== state.isOpen) {
    t3 = /*#__PURE__*/jsx(Blanket, {
      ...underlayProps,
      isOpen: state.isOpen,
      zIndex: 10
    });
    $[5] = underlayProps;
    $[6] = state.isOpen;
    $[7] = t3;
  } else {
    t3 = $[7];
  }
  let t4;
  if ($[8] === Symbol.for("react.memo_cache_sentinel")) {
    t4 = transition("transform", {
      easing: "easeIn",
      duration: "short"
    });
    $[8] = t4;
  } else {
    t4 = $[8];
  }
  let t5;
  if ($[9] === Symbol.for("react.memo_cache_sentinel")) {
    t5 = [t4, transition("visibility", {
      delay: "regular",
      duration: 0,
      easing: "linear"
    })];
    $[9] = t5;
  } else {
    t5 = $[9];
  }
  let t6;
  if ($[10] === Symbol.for("react.memo_cache_sentinel")) {
    t6 = css({
      backgroundColor: tokenSchema.color.background.surface,
      boxShadow: `${tokenSchema.size.shadow.large} ${tokenSchema.color.shadow.regular}`,
      display: "flex",
      flexDirection: "column",
      inset: 0,
      insetInlineEnd: "auto",
      maxWidth: `calc(100% - ${tokenSchema.size.element.medium})`,
      minWidth: tokenSchema.size.scale[3000],
      outline: 0,
      pointerEvents: "none",
      position: "fixed",
      transform: "translateX(-100%)",
      visibility: "hidden",
      zIndex: 10,
      transition: t5.join(", "),
      "&[data-visible=true]": {
        transform: "translateX(0)",
        transition: transition("transform", {
          easing: "easeOut"
        }),
        pointerEvents: "auto",
        visibility: "visible"
      }
    });
    $[10] = t6;
  } else {
    t6 = $[10];
  }
  let t7;
  if ($[11] === Symbol.for("react.memo_cache_sentinel")) {
    t7 = /*#__PURE__*/jsx(SidebarHeader, {});
    $[11] = t7;
  } else {
    t7 = $[11];
  }
  let t8;
  if ($[12] === Symbol.for("react.memo_cache_sentinel")) {
    t8 = /*#__PURE__*/jsx(SidebarGitActions, {});
    $[12] = t8;
  } else {
    t8 = $[12];
  }
  let t9;
  if ($[13] === Symbol.for("react.memo_cache_sentinel")) {
    t9 = /*#__PURE__*/jsx(SidebarNav, {});
    $[13] = t9;
  } else {
    t9 = $[13];
  }
  let t10;
  if ($[14] === Symbol.for("react.memo_cache_sentinel")) {
    t10 = /*#__PURE__*/jsx(SidebarFooter, {});
    $[14] = t10;
  } else {
    t10 = $[14];
  }
  let t11;
  if ($[15] !== state.close) {
    t11 = /*#__PURE__*/jsx(DismissButton, {
      onDismiss: state.close
    });
    $[15] = state.close;
    $[16] = t11;
  } else {
    t11 = $[16];
  }
  let t12;
  if ($[17] !== state.isOpen || $[18] !== dialogRef || $[19] !== modalProps || $[20] !== t11) {
    t12 = /*#__PURE__*/jsxs("div", {
      "data-visible": state.isOpen,
      id: SIDE_PANEL_ID,
      ref: dialogRef,
      ...modalProps,
      className: t6,
      children: [t7, t8, t9, t10, t11]
    });
    $[17] = state.isOpen;
    $[18] = dialogRef;
    $[19] = modalProps;
    $[20] = t11;
    $[21] = t12;
  } else {
    t12 = $[21];
  }
  let t13;
  if ($[22] !== t3 || $[23] !== t12) {
    t13 = /*#__PURE__*/jsxs(Fragment, {
      children: [t3, t12]
    });
    $[22] = t3;
    $[23] = t12;
    $[24] = t13;
  } else {
    t13 = $[24];
  }
  return t13;
}
function SidebarNav() {
  const $ = c(15);
  const {
    basePath
  } = useAppState();
  const stringFormatter = useLocalizedStringFormatter(strings);
  const navItems = useNavItems();
  const isCurrent = useIsCurrent();
  let t0;
  if ($[0] !== isCurrent || $[1] !== basePath) {
    t0 = isCurrent(basePath, {
      exact: true
    });
    $[0] = isCurrent;
    $[1] = basePath;
    $[2] = t0;
  } else {
    t0 = $[2];
  }
  let t1;
  if ($[3] !== stringFormatter) {
    t1 = stringFormatter.format("dashboard");
    $[3] = stringFormatter;
    $[4] = t1;
  } else {
    t1 = $[4];
  }
  let t2;
  if ($[5] !== basePath || $[6] !== t0 || $[7] !== t1) {
    t2 = /*#__PURE__*/jsx(NavItem, {
      href: basePath,
      "aria-current": t0,
      children: t1
    });
    $[5] = basePath;
    $[6] = t0;
    $[7] = t1;
    $[8] = t2;
  } else {
    t2 = $[8];
  }
  let t3;
  if ($[9] !== navItems) {
    let t4;
    if ($[11] === Symbol.for("react.memo_cache_sentinel")) {
      t4 = (item, i) => /*#__PURE__*/jsx(NavItemOrGroup, {
        itemOrGroup: item
      }, i);
      $[11] = t4;
    } else {
      t4 = $[11];
    }
    t3 = navItems.map(t4);
    $[9] = navItems;
    $[10] = t3;
  } else {
    t3 = $[10];
  }
  let t4;
  if ($[12] !== t2 || $[13] !== t3) {
    t4 = /*#__PURE__*/jsx(ScrollView$1, {
      flex: true,
      paddingY: "large",
      paddingEnd: "medium",
      children: /*#__PURE__*/jsxs(NavList, {
        children: [t2, t3]
      })
    });
    $[12] = t2;
    $[13] = t3;
    $[14] = t4;
  } else {
    t4 = $[14];
  }
  return t4;
}

// Utils
// ----------------------------------------------------------------------------

function useIsLocalNoCloud() {
  const $ = c(2);
  const config = useConfig();
  let t0;
  if ($[0] !== config) {
    t0 = isLocalConfig(config) && !config.cloud;
    $[0] = config;
    $[1] = t0;
  } else {
    t0 = $[1];
  }
  return t0;
}
function useIsCurrent() {
  const $ = c(2);
  const router = useRouter();
  let t0;
  if ($[0] !== router.pathname) {
    t0 = (href, t1) => {
      const {
        exact: t2
      } = t1 === undefined ? {} : t1;
      const exact = t2 === undefined ? false : t2;
      if (exact) {
        return href === router.pathname ? "page" : undefined;
      }
      return href === router.pathname || router.pathname.startsWith(`${href}/`) ? "page" : undefined;
    };
    $[0] = router.pathname;
    $[1] = t0;
  } else {
    t0 = $[1];
  }
  return t0;
}

// Renderers
// ----------------------------------------------------------------------------
function NavItemOrGroup(t0) {
  const $ = c(19);
  const {
    itemOrGroup
  } = t0;
  const isCurrent = useIsCurrent();
  if (itemOrGroup.isDivider) {
    let t1;
    if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
      t1 = /*#__PURE__*/jsx(Divider, {});
      $[0] = t1;
    } else {
      t1 = $[0];
    }
    return t1;
  }
  if (itemOrGroup.children) {
    let t1;
    if ($[1] !== itemOrGroup.children) {
      let t2;
      if ($[3] === Symbol.for("react.memo_cache_sentinel")) {
        t2 = (child, i) => /*#__PURE__*/jsx(NavItemOrGroup, {
          itemOrGroup: child
        }, i);
        $[3] = t2;
      } else {
        t2 = $[3];
      }
      t1 = itemOrGroup.children.map(t2);
      $[1] = itemOrGroup.children;
      $[2] = t1;
    } else {
      t1 = $[2];
    }
    let t2;
    if ($[4] !== itemOrGroup.title || $[5] !== t1) {
      t2 = /*#__PURE__*/jsx(NavGroup, {
        title: itemOrGroup.title,
        children: t1
      });
      $[4] = itemOrGroup.title;
      $[5] = t1;
      $[6] = t2;
    } else {
      t2 = $[6];
    }
    return t2;
  }
  let t1;
  bb0: {
    if (!itemOrGroup.changed) {
      t1 = null;
      break bb0;
    }
    let t2;
    if ($[7] !== itemOrGroup.changed) {
      t2 = typeof itemOrGroup.changed === "number" ? /*#__PURE__*/jsxs(Badge, {
        tone: "accent",
        marginStart: "auto",
        children: [/*#__PURE__*/jsx(Text, {
          children: itemOrGroup.changed
        }), /*#__PURE__*/jsx(Text, {
          visuallyHidden: true,
          children: pluralize(itemOrGroup.changed, {
            singular: "change",
            plural: "changes",
            inclusive: false
          })
        })]
      }) : /*#__PURE__*/jsx(StatusLight, {
        tone: "accent",
        marginStart: "auto",
        "aria-label": "Changed",
        role: "status"
      });
      $[7] = itemOrGroup.changed;
      $[8] = t2;
    } else {
      t2 = $[8];
    }
    t1 = t2;
  }
  const changeElement = t1;
  let t2;
  if ($[9] !== isCurrent || $[10] !== itemOrGroup.href) {
    t2 = isCurrent(itemOrGroup.href);
    $[9] = isCurrent;
    $[10] = itemOrGroup.href;
    $[11] = t2;
  } else {
    t2 = $[11];
  }
  let t3;
  if ($[12] !== itemOrGroup.label) {
    t3 = /*#__PURE__*/jsx(Text, {
      truncate: true,
      title: itemOrGroup.label,
      children: itemOrGroup.label
    });
    $[12] = itemOrGroup.label;
    $[13] = t3;
  } else {
    t3 = $[13];
  }
  let t4;
  if ($[14] !== itemOrGroup.href || $[15] !== t2 || $[16] !== t3 || $[17] !== changeElement) {
    t4 = /*#__PURE__*/jsxs(NavItem, {
      href: itemOrGroup.href,
      "aria-current": t2,
      children: [t3, changeElement]
    });
    $[14] = itemOrGroup.href;
    $[15] = t2;
    $[16] = t3;
    $[17] = changeElement;
    $[18] = t4;
  } else {
    t4 = $[18];
  }
  return t4;
}

const PageContext = /*#__PURE__*/createContext({
  containerWidth: 'medium'
});
const PageRoot = t0 => {
  const $ = c(7);
  const {
    children,
    containerWidth: t1
  } = t0;
  const containerWidth = t1 === undefined ? "medium" : t1;
  let t2;
  if ($[0] !== containerWidth) {
    t2 = {
      containerWidth
    };
    $[0] = containerWidth;
    $[1] = t2;
  } else {
    t2 = $[1];
  }
  let t3;
  if ($[2] !== children) {
    t3 = /*#__PURE__*/jsx(Flex, {
      elementType: "main",
      direction: "column",
      id: MAIN_PANEL_ID,
      flex: true,
      height: "100%",
      minHeight: 0,
      minWidth: 0,
      children: children
    });
    $[2] = children;
    $[3] = t3;
  } else {
    t3 = $[3];
  }
  let t4;
  if ($[4] !== t2 || $[5] !== t3) {
    t4 = /*#__PURE__*/jsx(PageContext.Provider, {
      value: t2,
      children: t3
    });
    $[4] = t2;
    $[5] = t3;
    $[6] = t4;
  } else {
    t4 = $[6];
  }
  return t4;
};
const PageHeader = t0 => {
  const $ = c(17);
  const {
    children
  } = t0;
  const sidebarState = useSidebar();
  const menuButtonRef = useRef(null);
  const {
    direction
  } = useLocale();
  let icon = sidebarState.isOpen ? panelLeftCloseIcon : panelLeftOpenIcon;
  if (direction === "rtl") {
    icon = sidebarState.isOpen ? panelRightCloseIcon : panelRightOpenIcon;
  }
  let t1;
  let t2;
  let t3;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    t1 = {
      mobile: "small",
      tablet: "regular"
    };
    t2 = {
      mobile: "element.large",
      tablet: "element.xlarge"
    };
    t3 = {
      mobile: "medium",
      tablet: "xlarge",
      desktop: "xxlarge"
    };
    $[0] = t1;
    $[1] = t2;
    $[2] = t3;
  } else {
    t1 = $[0];
    t2 = $[1];
    t3 = $[2];
  }
  let t4;
  if ($[3] !== sidebarState.isOpen) {
    t4 = sidebarState.isOpen ? {
      above: "tablet"
    } : undefined;
    $[3] = sidebarState.isOpen;
    $[4] = t4;
  } else {
    t4 = $[4];
  }
  let t5;
  if ($[5] === Symbol.for("react.memo_cache_sentinel")) {
    t5 = css({
      marginInlineStart: `calc(${tokenSchema.size.space.regular} * -1)`
    });
    $[5] = t5;
  } else {
    t5 = $[5];
  }
  let t6;
  if ($[6] !== icon) {
    t6 = /*#__PURE__*/jsx(Icon, {
      src: icon
    });
    $[6] = icon;
    $[7] = t6;
  } else {
    t6 = $[7];
  }
  let t7;
  if ($[8] !== sidebarState.isOpen || $[9] !== sidebarState.toggle || $[10] !== t4 || $[11] !== menuButtonRef || $[12] !== t6) {
    t7 = /*#__PURE__*/jsx(ActionButton, {
      prominence: "low",
      "aria-label": "Open app navigation",
      "aria-pressed": sidebarState.isOpen,
      isHidden: t4,
      onPress: sidebarState.toggle,
      ref: menuButtonRef,
      UNSAFE_className: t5,
      children: t6
    });
    $[8] = sidebarState.isOpen;
    $[9] = sidebarState.toggle;
    $[10] = t4;
    $[11] = menuButtonRef;
    $[12] = t6;
    $[13] = t7;
  } else {
    t7 = $[13];
  }
  let t8;
  if ($[14] !== t7 || $[15] !== children) {
    t8 = /*#__PURE__*/jsx(Box, {
      borderBottom: "muted",
      elementType: "header",
      flexShrink: 0,
      children: /*#__PURE__*/jsxs(Flex, {
        alignItems: "center",
        gap: t1,
        height: t2,
        paddingX: t3,
        children: [t7, children]
      })
    });
    $[14] = t7;
    $[15] = children;
    $[16] = t8;
  } else {
    t8 = $[16];
  }
  return t8;
};
const PageBody = t0 => {
  const $ = c(5);
  const {
    children,
    isScrollable
  } = t0;
  const t1 = !isScrollable;
  let t2;
  if ($[0] !== children) {
    t2 = /*#__PURE__*/jsx(PageContainer, {
      paddingY: "xxlarge",
      children: children
    });
    $[0] = children;
    $[1] = t2;
  } else {
    t2 = $[1];
  }
  let t3;
  if ($[2] !== t1 || $[3] !== t2) {
    t3 = /*#__PURE__*/jsx(ScrollView, {
      isDisabled: t1,
      children: t2
    });
    $[2] = t1;
    $[3] = t2;
    $[4] = t3;
  } else {
    t3 = $[4];
  }
  return t3;
};
const PageContainer = props => {
  const $ = c(4);
  const {
    containerWidth
  } = useContext(PageContext);
  const maxWidth = containerWidth === "none" ? undefined : `container.${containerWidth}`;
  let t0;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    t0 = {
      mobile: "medium",
      tablet: "xlarge",
      desktop: "xxlarge"
    };
    $[0] = t0;
  } else {
    t0 = $[0];
  }
  let t1;
  if ($[1] !== maxWidth || $[2] !== props) {
    t1 = /*#__PURE__*/jsx(Box, {
      minHeight: 0,
      minWidth: 0,
      maxWidth: maxWidth,
      paddingX: t0,
      ...props
    });
    $[1] = maxWidth;
    $[2] = props;
    $[3] = t1;
  } else {
    t1 = $[3];
  }
  return t1;
};

const FIELD_GRID_COLUMNS = 12;
const FieldContext = /*#__PURE__*/createContext(FIELD_GRID_COLUMNS);
const useFieldSpan = () => {
  return useContext(FieldContext);
};
const FieldContextProvider = FieldContext.Provider;

function validateArrayLength(schema, val, path) {
  var _schema$validation, _schema$validation2;
  if (((_schema$validation = schema.validation) === null || _schema$validation === void 0 || (_schema$validation = _schema$validation.length) === null || _schema$validation === void 0 ? void 0 : _schema$validation.min) !== undefined && val.length < schema.validation.length.min) {
    return new PropValidationError(new FieldDataError(`Must have at least ${schema.validation.length.min} element${schema.validation.length.min === 1 ? '' : 's'}`), path, schema);
  }
  if (((_schema$validation2 = schema.validation) === null || _schema$validation2 === void 0 || (_schema$validation2 = _schema$validation2.length) === null || _schema$validation2 === void 0 ? void 0 : _schema$validation2.max) !== undefined && val.length > schema.validation.length.max) {
    return new PropValidationError(new FieldDataError(`Must have at most ${schema.validation.length.max} element${schema.validation.length.max === 1 ? '' : 's'}}`), path, schema);
  }
}

const arrayValuesToElementKeys = new WeakMap();
let counter = 0;
function getKeysForArrayValue(value) {
  if (!arrayValuesToElementKeys.has(value)) {
    arrayValuesToElementKeys.set(value, Array.from({
      length: value.length
    }, getNewArrayElementKey));
  }
  return arrayValuesToElementKeys.get(value);
}
function setKeysForArrayValue(value, elementIds) {
  arrayValuesToElementKeys.set(value, elementIds);
}
function getNewArrayElementKey() {
  return (counter++).toString();
}
const getInitialPropsValue = _getInitialPropsValue;
function _getInitialPropsValue(schema) {
  switch (schema.kind) {
    case 'form':
      return schema.defaultValue();
    case 'child':
      return schema.options.kind === 'block' ? [{
        type: 'paragraph',
        children: [{
          text: ''
        }]
      }] : null;
    case 'conditional':
      {
        const defaultValue = schema.discriminant.defaultValue();
        return {
          discriminant: defaultValue,
          value: getInitialPropsValue(schema.values[defaultValue.toString()])
        };
      }
    case 'object':
      {
        const obj = {};
        for (const key of Object.keys(schema.fields)) {
          obj[key] = getInitialPropsValue(schema.fields[key]);
        }
        return obj;
      }
    case 'array':
      {
        return [];
      }
  }
  assertNever(schema);
}
function getInitialPropsValueFromInitializer(schema, initializer) {
  switch (schema.kind) {
    case 'form':
      return initializer === undefined ? schema.defaultValue() : initializer;
    case 'child':
      return initializer !== null && initializer !== void 0 ? initializer : schema.options.kind === 'block' ? [{
        type: 'paragraph',
        children: [{
          text: ''
        }]
      }] : null;
    case 'conditional':
      {
        const defaultValue = initializer === undefined ? schema.discriminant.defaultValue() : initializer.discriminant;
        if (defaultValue === undefined) {
          debugger;
        }
        return {
          discriminant: defaultValue,
          value: getInitialPropsValueFromInitializer(schema.values[defaultValue.toString()], initializer === undefined ? undefined : initializer.value)
        };
      }
    case 'object':
      {
        const obj = {};
        for (const key of Object.keys(schema.fields)) {
          obj[key] = getInitialPropsValueFromInitializer(schema.fields[key], initializer === undefined ? undefined : initializer[key]);
        }
        return obj;
      }
    case 'array':
      {
        return (initializer !== null && initializer !== void 0 ? initializer : []).map(x => getInitialPropsValueFromInitializer(schema.element, x.value));
      }
  }
  assertNever(schema);
}
function updateValue(schema, currentValue, updater) {
  if (updater === undefined) return currentValue;
  switch (schema.kind) {
    case 'form':
      return updater;
    case 'child':
      return updater;
    case 'conditional':
      {
        return {
          discriminant: updater.discriminant,
          value: updater.discriminant === currentValue.discriminant ? updateValue(schema.values[updater.discriminant.toString()], currentValue.value, updater.value) : getInitialPropsValueFromInitializer(schema.values[updater.discriminant.toString()], updater.value)
        };
      }
    case 'object':
      {
        const obj = {};
        for (const key of Object.keys(schema.fields)) {
          obj[key] = updateValue(schema.fields[key], currentValue[key], updater[key]);
        }
        return obj;
      }
    case 'array':
      {
        const currentArrVal = currentValue;
        const newVal = updater;
        const uniqueKeys = new Set();
        for (const x of newVal) {
          if (x.key !== undefined) {
            if (uniqueKeys.has(x.key)) {
              throw new Error('Array elements must have unique keys');
            }
            uniqueKeys.add(x.key);
          }
        }
        const keys = newVal.map(x => {
          if (x.key !== undefined) return x.key;
          let elementKey = getNewArrayElementKey();
          // just in case someone gives a key that is above our counter
          while (uniqueKeys.has(elementKey)) {
            elementKey = getNewArrayElementKey();
          }
          uniqueKeys.add(elementKey);
          return elementKey;
        });
        const prevKeys = getKeysForArrayValue(currentArrVal);
        const prevValuesByKey = new Map(currentArrVal.map((value, i) => {
          return [prevKeys[i], value];
        }));
        const val = newVal.map((x, i) => {
          const id = keys[i];
          if (prevValuesByKey.has(id)) {
            return updateValue(schema.element, prevValuesByKey.get(id), x.value);
          }
          return getInitialPropsValueFromInitializer(schema.element, x.value);
        });
        setKeysForArrayValue(val, keys);
        return val;
      }
  }
  assertNever(schema);
}

class PropValidationError extends Error {
  constructor(cause, path, schema) {
    super(`field error at ${path.join('.')}`, {
      cause
    });
    this.path = path;
    this.schema = schema;
    this.cause = cause;
  }
}
function toFormFieldStoredValue(val) {
  if (val === null) {
    return undefined;
  }
  return val;
}
const isArray = Array.isArray;
function parseProps(schema, _value, path, pathWithArrayFieldSlugs, parseFormField, /** This should be true for the reader and false elsewhere */
validateArrayFieldLength) {
  let value = toFormFieldStoredValue(_value);
  if (schema.kind === 'form') {
    try {
      return parseFormField(schema, value, path, pathWithArrayFieldSlugs);
    } catch (err) {
      throw new PropValidationError(err, path, schema);
    }
  }
  if (schema.kind === 'child') {
    return null;
  }
  if (schema.kind === 'conditional') {
    if (value === undefined) {
      return getInitialPropsValue(schema);
    }
    try {
      if (typeof value !== 'object' || value === null || isArray(value) || value instanceof Date) {
        throw new FieldDataError('Must be an object');
      }
      for (const key of Object.keys(value)) {
        if (key !== 'discriminant' && key !== 'value') {
          throw new FieldDataError(`Must only contain keys "discriminant" and "value", not "${key}"`);
        }
      }
    } catch (err) {
      throw new PropValidationError(err, path, schema);
    }
    const parsedDiscriminant = parseProps(schema.discriminant, value.discriminant, path.concat('discriminant'), pathWithArrayFieldSlugs.concat('discriminant'), parseFormField, validateArrayFieldLength);
    return {
      discriminant: parsedDiscriminant,
      value: parseProps(schema.values[parsedDiscriminant], value.value, path.concat('value'), pathWithArrayFieldSlugs.concat('value'), parseFormField, validateArrayFieldLength)
    };
  }
  if (schema.kind === 'object') {
    if (value === undefined) {
      value = {};
    }
    try {
      if (typeof value !== 'object' || value === null || isArray(value) || value instanceof Date) {
        throw new FieldDataError('Must be an object');
      }
      const allowedKeysSet = new Set(Object.keys(schema.fields));
      for (const key of Object.keys(value)) {
        if (!allowedKeysSet.has(key)) {
          throw new FieldDataError(`Key on object value "${key}" is not allowed`);
        }
      }
    } catch (err) {
      throw new PropValidationError(err, path, schema);
    }
    const val = {};
    const errors = [];
    for (const key of Object.keys(schema.fields)) {
      let individualVal = value[key];
      try {
        const propVal = parseProps(schema.fields[key], individualVal, path.concat(key), pathWithArrayFieldSlugs.concat(key), parseFormField, validateArrayFieldLength);
        val[key] = propVal;
      } catch (err) {
        errors.push(err);
      }
    }
    if (errors.length) {
      throw new AggregateError(errors);
    }
    return val;
  }
  if (schema.kind === 'array') {
    if (value === undefined) {
      return [];
    }
    try {
      if (!isArray(value)) {
        throw new FieldDataError('Must be an array');
      }
    } catch (err) {
      throw new PropValidationError(err, path, schema);
    }
    const errors = [];
    try {
      if (validateArrayFieldLength) {
        const error = validateArrayLength(schema, value, path);
        if (error !== undefined) {
          errors.push(error);
        }
      }
      return value.map((innerVal, i) => {
        try {
          let slug = i.toString();
          if (schema.slugField && typeof innerVal === 'object' && innerVal !== null && !isArray(innerVal) && !(innerVal instanceof Date)) {
            if (schema.element.kind !== 'object') {
              throw new Error('slugField on array fields requires the an object field element');
            }
            const slugField = schema.element.fields[schema.slugField];
            if (!slugField) {
              throw new Error(`slugField "${schema.slugField}" does not exist on object field`);
            }
            if (slugField.kind !== 'form') {
              throw new Error(`slugField "${schema.slugField}" is not a form field`);
            }
            if (slugField.formKind !== 'slug') {
              throw new Error(`slugField "${schema.slugField}" is not a slug field`);
            }
            let parsedSlugFieldValue;
            try {
              parsedSlugFieldValue = slugField.parse(toFormFieldStoredValue(innerVal[schema.slugField]), undefined);
            } catch (err) {
              throw new AggregateError([err]);
            }
            slug = slugField.serializeWithSlug(parsedSlugFieldValue).slug;
          }
          return parseProps(schema.element, innerVal, path.concat(i), pathWithArrayFieldSlugs.concat(slug), parseFormField, validateArrayFieldLength);
        } catch (err) {
          errors.push(err);
        }
      });
    } finally {
      if (errors.length) {
        throw new AggregateError(errors);
      }
    }
  }
  assertNever(schema);
}

function flattenErrors(error) {
  if (error instanceof AggregateError) {
    return error.errors.flatMap(flattenErrors);
  }
  return [error];
}
function formatFormDataError(error) {
  const flatErrors = flattenErrors(error);
  return flatErrors.map(error => {
    if (error instanceof PropValidationError) {
      const path = error.path.join('.');
      return `${path}: ${error.cause instanceof FieldDataError ? error.cause.message : `Unexpected error: ${error.cause}`}`;
    }
    return `Unexpected error: ${error}`;
  }).join('\n');
}
function toFormattedFormDataError(error) {
  const formatted = formatFormDataError(error);
  return new Error(`Field validation failed:\n` + formatted);
}

function clientSideValidateProp(schema, value, slugField) {
  try {
    validateValueWithSchema(schema, value, slugField);
    return true;
  } catch (error) {
    console.warn(toFormattedFormDataError(error));
    return false;
  }
}
function validateValueWithSchema(schema, value, slugField, path = []) {
  switch (schema.kind) {
    case 'child':
      {
        return;
      }
    case 'form':
      {
        try {
          if (slugField && path[path.length - 1] === (slugField === null || slugField === void 0 ? void 0 : slugField.field)) {
            schema.validate(value, {
              slugField: {
                slugs: slugField.slugs,
                glob: slugField.glob
              }
            });
            return;
          }
          schema.validate(value, undefined);
        } catch (err) {
          throw new PropValidationError(err, path, schema);
        }
        return;
      }
    case 'conditional':
      {
        schema.discriminant.validate(value.discriminant);
        validateValueWithSchema(schema.values[value.discriminant], value.value, undefined, path.concat('value'));
        return;
      }
    case 'object':
      {
        const errors = [];
        for (const [key, childProp] of Object.entries(schema.fields)) {
          try {
            validateValueWithSchema(childProp, value[key], key === (slugField === null || slugField === void 0 ? void 0 : slugField.field) ? slugField : undefined, path.concat(key));
          } catch (err) {
            errors.push(err);
          }
        }
        if (errors.length > 0) {
          throw new AggregateError(errors);
        }
        return;
      }
    case 'array':
      {
        let slugInfo;
        if (schema.slugField !== undefined && schema.element.kind === 'object') {
          const innerSchema = schema.element.fields;
          const {
            slugField
          } = schema;
          slugInfo = {
            slugField,
            slugs: value.map(val => getSlugFromState({
              schema: innerSchema,
              slugField
            }, val))
          };
        }
        const errors = [];
        const val = value;
        const error = validateArrayLength(schema, value, path);
        if (error !== undefined) {
          errors.push(error);
        }
        for (const [idx, innerVal] of val.entries()) {
          try {
            validateValueWithSchema(schema.element, innerVal, slugInfo === undefined ? undefined : {
              field: slugInfo.slugField,
              slugs: new Set(slugInfo.slugs.filter((_, i) => idx !== i)),
              glob: '*'
            }, path.concat(idx));
          } catch (err) {
            errors.push(err);
          }
        }
        if (errors.length > 0) {
          throw new AggregateError(errors);
        }
        return;
      }
  }
}

const belowTablet = containerQueries.below.tablet;
function ObjectFieldInputEntry(t0) {
  const $ = c(16);
  const {
    field,
    fieldKey,
    span,
    forceValidation,
    firstFocusable,
    omitFieldAtPath
  } = t0;
  const t1 = `span ${span}`;
  let t2;
  if ($[0] !== t1) {
    t2 = css({
      gridColumn: t1,
      [belowTablet]: {
        gridColumn: `span ${FIELD_GRID_COLUMNS}`
      }
    });
    $[0] = t1;
    $[1] = t2;
  } else {
    t2 = $[1];
  }
  const t3 = fieldKey === firstFocusable;
  let t4;
  if ($[2] !== forceValidation || $[3] !== t3 || $[4] !== omitFieldAtPath || $[5] !== field) {
    t4 = /*#__PURE__*/jsx(InnerFormValueContentFromPreviewProps, {
      forceValidation: forceValidation,
      autoFocus: t3,
      omitFieldAtPath: omitFieldAtPath,
      ...field
    });
    $[2] = forceValidation;
    $[3] = t3;
    $[4] = omitFieldAtPath;
    $[5] = field;
    $[6] = t4;
  } else {
    t4 = $[6];
  }
  let t5;
  if ($[7] !== fieldKey || $[8] !== t4) {
    t5 = /*#__PURE__*/jsx(AddToPathProvider, {
      part: fieldKey,
      children: t4
    });
    $[7] = fieldKey;
    $[8] = t4;
    $[9] = t5;
  } else {
    t5 = $[9];
  }
  let t6;
  if ($[10] !== t2 || $[11] !== t5) {
    t6 = /*#__PURE__*/jsx("div", {
      className: t2,
      children: t5
    });
    $[10] = t2;
    $[11] = t5;
    $[12] = t6;
  } else {
    t6 = $[12];
  }
  let t7;
  if ($[13] !== span || $[14] !== t6) {
    t7 = /*#__PURE__*/jsx(FieldContextProvider, {
      value: span,
      children: t6
    });
    $[13] = span;
    $[14] = t6;
    $[15] = t7;
  } else {
    t7 = $[15];
  }
  return t7;
}
function ObjectFieldInput(t0) {
  const $ = c(33);
  const {
    schema,
    autoFocus,
    fields,
    forceValidation,
    omitFieldAtPath
  } = t0;
  validateLayout(schema);
  let t1;
  if ($[0] !== autoFocus || $[1] !== schema) {
    t1 = autoFocus ? findFocusableObjectFieldKey(schema) : undefined;
    $[0] = autoFocus;
    $[1] = schema;
    $[2] = t1;
  } else {
    t1 = $[2];
  }
  const firstFocusable = t1;
  let t2;
  bb0: {
    if (!omitFieldAtPath) {
      t2 = undefined;
      break bb0;
    }
    let t3;
    if ($[3] !== omitFieldAtPath) {
      t3 = omitFieldAtPath.slice(1);
      $[3] = omitFieldAtPath;
      $[4] = t3;
    } else {
      t3 = $[4];
    }
    t2 = t3;
  }
  const innerOmitFieldAtPath = t2;
  let t3;
  if ($[5] !== fields || $[6] !== schema.layout || $[7] !== forceValidation || $[8] !== firstFocusable || $[9] !== omitFieldAtPath || $[10] !== innerOmitFieldAtPath) {
    let t4;
    if ($[12] !== schema.layout || $[13] !== forceValidation || $[14] !== firstFocusable || $[15] !== omitFieldAtPath || $[16] !== innerOmitFieldAtPath) {
      t4 = (t5, index) => {
        var _schema$layout$index, _schema$layout;
        const [key, propVal] = t5;
        const span = (_schema$layout$index = (_schema$layout = schema.layout) === null || _schema$layout === void 0 ? void 0 : _schema$layout[index]) !== null && _schema$layout$index !== void 0 ? _schema$layout$index : FIELD_GRID_COLUMNS;
        return /*#__PURE__*/jsx(ObjectFieldInputEntry, {
          span: span,
          field: propVal,
          fieldKey: key,
          forceValidation: forceValidation,
          firstFocusable: firstFocusable,
          ...((omitFieldAtPath === null || omitFieldAtPath === void 0 ? void 0 : omitFieldAtPath[0]) === key ? {
            omitFieldAtPath: innerOmitFieldAtPath
          } : {})
        }, key);
      };
      $[12] = schema.layout;
      $[13] = forceValidation;
      $[14] = firstFocusable;
      $[15] = omitFieldAtPath;
      $[16] = innerOmitFieldAtPath;
      $[17] = t4;
    } else {
      t4 = $[17];
    }
    t3 = Object.entries(fields).map(t4);
    $[5] = fields;
    $[6] = schema.layout;
    $[7] = forceValidation;
    $[8] = firstFocusable;
    $[9] = omitFieldAtPath;
    $[10] = innerOmitFieldAtPath;
    $[11] = t3;
  } else {
    t3 = $[11];
  }
  let t4;
  if ($[18] !== t3) {
    t4 = /*#__PURE__*/jsx(Grid, {
      columns: `repeat(${FIELD_GRID_COLUMNS}, minmax(auto, 1fr))`,
      columnGap: "medium",
      rowGap: "xlarge",
      children: t3
    });
    $[18] = t3;
    $[19] = t4;
  } else {
    t4 = $[19];
  }
  const inner = t4;
  const id = useId();
  if (!schema.label) {
    return inner;
  }
  const labelId = `${id}-label`;
  const descriptionId = `${id}-description`;
  const t5 = schema.description ? descriptionId : undefined;
  let t6;
  if ($[20] !== labelId || $[21] !== schema.label) {
    t6 = /*#__PURE__*/jsx(Text, {
      color: "neutralEmphasis",
      size: "medium",
      weight: "semibold",
      id: labelId,
      children: schema.label
    });
    $[20] = labelId;
    $[21] = schema.label;
    $[22] = t6;
  } else {
    t6 = $[22];
  }
  let t7;
  if ($[23] !== schema.description || $[24] !== descriptionId) {
    t7 = !!schema.description && /*#__PURE__*/jsx(Text, {
      id: descriptionId,
      size: "regular",
      color: "neutralSecondary",
      children: schema.description
    });
    $[23] = schema.description;
    $[24] = descriptionId;
    $[25] = t7;
  } else {
    t7 = $[25];
  }
  let t8;
  if ($[26] === Symbol.for("react.memo_cache_sentinel")) {
    t8 = /*#__PURE__*/jsx("div", {});
    $[26] = t8;
  } else {
    t8 = $[26];
  }
  let t9;
  if ($[27] !== labelId || $[28] !== t5 || $[29] !== t6 || $[30] !== t7 || $[31] !== inner) {
    t9 = /*#__PURE__*/jsxs(Grid, {
      role: "group",
      gap: "medium",
      marginY: "xlarge",
      "aria-labelledby": labelId,
      "aria-describedby": t5,
      children: [t6, t7, t8, inner]
    });
    $[27] = labelId;
    $[28] = t5;
    $[29] = t6;
    $[30] = t7;
    $[31] = inner;
    $[32] = t9;
  } else {
    t9 = $[32];
  }
  return t9;
}
function validateLayout(schema) {
  if (!schema.layout) {
    return;
  }
  assert(schema.layout.length === Object.keys(schema.fields).length, 'A column "span" is required for every field in the layout');
  assert(schema.layout.every(span => span > 0), 'The layout must not contain empty columns');
  assert(schema.layout.every(span => span <= 12), 'Fields may not span more than 12 columns');
  assert(schema.layout.reduce((acc, cur) => acc + cur, 0) % 12 === 0, 'The layout must span exactly 12 columns');
}
function findFocusableObjectFieldKey(schema) {
  for (const [key, innerProp] of Object.entries(schema.fields)) {
    const childFocusable = canFieldBeFocused(innerProp);
    if (childFocusable) {
      return key;
    }
  }
  return undefined;
}
function canFieldBeFocused(schema) {
  if (schema.kind === 'array' || schema.kind === 'conditional' || schema.kind === 'form') {
    return true;
  }
  if (schema.kind === 'child') {
    return false;
  }
  if (schema.kind === 'object') {
    for (const innerProp of Object.values(schema.fields)) {
      if (canFieldBeFocused(innerProp)) {
        return true;
      }
    }
    return false;
  }
  assertNever(schema);
}

function ConditionalFieldInput(t0) {
  const $ = c(18);
  const {
    schema,
    autoFocus,
    discriminant,
    onChange,
    value,
    forceValidation,
    omitFieldAtPath
  } = t0;
  const schemaDiscriminant = schema.discriminant;
  let t1;
  bb0: {
    if (!omitFieldAtPath) {
      t1 = undefined;
      break bb0;
    }
    let t2;
    if ($[0] !== omitFieldAtPath) {
      t2 = omitFieldAtPath.slice(1);
      $[0] = omitFieldAtPath;
      $[1] = t2;
    } else {
      t2 = $[1];
    }
    t1 = t2;
  }
  const innerOmitFieldAtPath = t1;
  let t2;
  const t3 = !!autoFocus;
  let t4;
  if ($[2] !== schemaDiscriminant.Input || $[3] !== t3 || $[4] !== discriminant || $[5] !== onChange || $[6] !== forceValidation) {
    t4 = /*#__PURE__*/jsx(AddToPathProvider, {
      part: "discriminant",
      children: /*#__PURE__*/jsx(schemaDiscriminant.Input, {
        autoFocus: t3,
        value: discriminant,
        onChange: onChange,
        forceValidation: forceValidation
      })
    });
    $[2] = schemaDiscriminant.Input;
    $[3] = t3;
    $[4] = discriminant;
    $[5] = onChange;
    $[6] = forceValidation;
    $[7] = t4;
  } else {
    t4 = $[7];
  }
  t2 = t4;
  let t5;
  if ($[8] !== omitFieldAtPath || $[9] !== innerOmitFieldAtPath) {
    t5 = (omitFieldAtPath === null || omitFieldAtPath === void 0 ? void 0 : omitFieldAtPath[0]) === "value" ? {
      omitFieldAtPath: innerOmitFieldAtPath
    } : {};
    $[8] = omitFieldAtPath;
    $[9] = innerOmitFieldAtPath;
    $[10] = t5;
  } else {
    t5 = $[10];
  }
  let t6;
  if ($[11] !== forceValidation || $[12] !== value || $[13] !== t5) {
    t6 = /*#__PURE__*/jsx(AddToPathProvider, {
      part: "value",
      children: /*#__PURE__*/jsx(InnerFormValueContentFromPreviewProps, {
        forceValidation: forceValidation,
        ...value,
        ...t5
      })
    });
    $[11] = forceValidation;
    $[12] = value;
    $[13] = t5;
    $[14] = t6;
  } else {
    t6 = $[14];
  }
  let t7;
  if ($[15] !== t2 || $[16] !== t6) {
    t7 = /*#__PURE__*/jsxs(Flex, {
      gap: "xlarge",
      direction: "column",
      children: [t2, t6]
    });
    $[15] = t2;
    $[16] = t6;
    $[17] = t7;
  } else {
    t7 = $[17];
  }
  return t7;
}

function castToMemoizedInfoForSchema(val) {
  return val;
}
function getOrInsert(map, key, val) {
  if (!map.has(key)) {
    map.set(key, val(key));
  }
  return map.get(key);
}
const childFieldData = new WeakMap();
function storeChildFieldData(value) {
  let key = {};
  childFieldData.set(key, value);
  return key;
}
function getChildFieldData(props) {
  const val = childFieldData.get(props._);
  if (!val) {
    throw new Error('expected child field data to exist');
  }
  return val;
}
function createGetPreviewProps(rootSchema, rootOnChange, getChildFieldElement) {
  const memoizedInfoForSchema = castToMemoizedInfoForSchema({
    form(schema, onChange) {
      return newVal => onChange(() => newVal);
    },
    array(schema, onChange) {
      return {
        rawOnChange: onChange,
        inner: new Map(),
        onChange(updater) {
          onChange(value => updateValue(schema, value, updater));
        }
      };
    },
    child(schema, onChange) {
      return newVal => onChange(() => newVal);
    },
    conditional(schema, onChange) {
      return {
        onChange: (discriminant, value) => onChange(val => updateValue(schema, val, {
          discriminant,
          value
        })),
        onChangeForValue: cb => onChange(val => ({
          discriminant: val.discriminant,
          value: cb(val.value)
        }))
      };
    },
    object(schema, onChange) {
      return {
        onChange: updater => {
          onChange(value => updateValue(schema, value, updater));
        },
        innerOnChanges: Object.fromEntries(Object.keys(schema.fields).map(key => {
          return [key, newVal => {
            onChange(val => ({
              ...val,
              [key]: newVal(val[key])
            }));
          }];
        }))
      };
    }
  });
  const previewPropsFactories = {
    form(schema, value, onChange) {
      return {
        value: value,
        onChange,
        schema: schema
      };
    },
    child(schema, value, onChange, path) {
      return {
        element: getChildFieldElement(path),
        schema: schema,
        _: storeChildFieldData({
          value,
          onChange
        })
      };
    },
    object(schema, value, memoized, path, getInnerProp) {
      const fields = {};
      for (const key of Object.keys(schema.fields)) {
        fields[key] = getInnerProp(schema.fields[key], value[key], memoized.innerOnChanges[key], key);
      }
      const previewProps = {
        fields,
        onChange: memoized.onChange,
        schema: schema
      };
      return previewProps;
    },
    array(schema, value, memoized, path, getInnerProp) {
      const arrayValue = value;
      const keys = getKeysForArrayValue(arrayValue);
      const unusedKeys = new Set(getKeysForArrayValue(value));
      const props = {
        elements: arrayValue.map((val, i) => {
          const key = keys[i];
          unusedKeys.delete(key);
          const element = getOrInsert(memoized.inner, key, () => {
            const onChange = val => {
              memoized.rawOnChange(prev => {
                const keys = getKeysForArrayValue(prev);
                const index = keys.indexOf(key);
                const newValue = [...prev];
                newValue[index] = val(newValue[index]);
                setKeysForArrayValue(newValue, keys);
                return newValue;
              });
            };
            const element = getInnerProp(schema.element, val, onChange, key);
            return {
              element,
              elementWithKey: {
                ...element,
                key
              },
              onChange
            };
          });
          const currentInnerProp = getInnerProp(schema.element, val, element.onChange, key);
          if (element.element !== currentInnerProp) {
            element.element = currentInnerProp;
            element.elementWithKey = {
              ...currentInnerProp,
              key
            };
          }
          return element.elementWithKey;
        }),
        schema: schema,
        onChange: memoized.onChange
      };
      for (const key of unusedKeys) {
        memoized.inner.delete(key);
      }
      return props;
    },
    conditional(schema, value, memoized, path, getInnerProp) {
      const props = {
        discriminant: value.discriminant,
        onChange: memoized.onChange,
        value: getInnerProp(schema.values[value.discriminant.toString()], value.value, memoized.onChangeForValue, 'value'),
        schema: schema
      };
      return props;
    }
  };
  function getPreviewPropsForProp(schema, value, memoedThing, path, getInnerProp) {
    return previewPropsFactories[schema.kind](schema, value, memoedThing, path, getInnerProp);
  }
  function getInitialMemoState(schema, value, onChange, path) {
    const innerState = new Map();
    const memoizedInfo = memoizedInfoForSchema[schema.kind](schema, onChange);
    const state = {
      value,
      inner: innerState,
      props: getPreviewPropsForProp(schema, value, memoizedInfo, path, (schema, value, onChange, key) => {
        const state = getInitialMemoState(schema, value, onChange, path.concat(key));
        innerState.set(key, state);
        return state.props;
      }),
      schema: schema,
      cached: memoizedInfo
    };
    return state;
  }
  function getUpToDateProps(schema, value, onChange, memoState, path) {
    if (memoState.schema !== schema) {
      Object.assign(memoState, getInitialMemoState(schema, value, onChange, path));
      return memoState.props;
    }
    if (memoState.value === value) {
      return memoState.props;
    }
    memoState.value = value;
    const unusedKeys = new Set(memoState.inner.keys());
    memoState.props = getPreviewPropsForProp(schema, value, memoState.cached, path, (schema, value, onChange, innerMemoStateKey) => {
      unusedKeys.delete(innerMemoStateKey);
      if (!memoState.inner.has(innerMemoStateKey)) {
        const innerState = getInitialMemoState(schema, value, onChange, path.concat(innerMemoStateKey));
        memoState.inner.set(innerMemoStateKey, innerState);
        return innerState.props;
      }
      return getUpToDateProps(schema, value, onChange, memoState.inner.get(innerMemoStateKey), path.concat(innerMemoStateKey));
    });
    for (const key of unusedKeys) {
      memoState.inner.delete(key);
    }
    return memoState.props;
  }
  let memoState;
  return value => {
    if (memoState === undefined) {
      memoState = getInitialMemoState(rootSchema, value, rootOnChange, []);
      return memoState.props;
    }
    return getUpToDateProps(rootSchema, value, rootOnChange, memoState, []);
  };
}

const previewPropsToValueConverter = {
  child(props) {
    const childFieldData = getChildFieldData(props);
    return childFieldData.value;
  },
  form(props) {
    return props.value;
  },
  array(props) {
    const values = props.elements.map(x => previewPropsToValue(x));
    setKeysForArrayValue(values, props.elements.map(x => x.key));
    return values;
  },
  conditional(props) {
    return {
      discriminant: props.discriminant,
      value: previewPropsToValue(props.value)
    };
  },
  object(props) {
    return Object.fromEntries(Object.entries(props.fields).map(([key, val]) => [key, previewPropsToValue(val)]));
  }
};
function previewPropsToValue(props) {
  return previewPropsToValueConverter[props.schema.kind](props);
}
const valueToUpdaters = {
  child(value) {
    return value !== null && value !== void 0 ? value : undefined;
  },
  form(value) {
    return value;
  },
  array(value, schema) {
    const keys = getKeysForArrayValue(value);
    return value.map((x, i) => ({
      key: keys[i],
      value: valueToUpdater(x, schema.element)
    }));
  },
  conditional(value, schema) {
    return {
      discriminant: value.discriminant,
      value: valueToUpdater(value.value, schema.values[value.discriminant.toString()])
    };
  },
  object(value, schema) {
    return Object.fromEntries(Object.entries(schema.fields).map(([key, schema]) => [key, valueToUpdater(value[key], schema)]));
  }
};
function valueToUpdater(value, schema) {
  return valueToUpdaters[schema.kind](value, schema);
}
function setValueToPreviewProps(value, props) {
  if (isKind(props, 'child')) {
    const {
      onChange
    } = getChildFieldData(props);
    onChange(value);
    return;
  }
  if (isKind(props, 'form') || isKind(props, 'object') || isKind(props, 'array')) {
    props.onChange(valueToUpdater(value, props.schema));
    return;
  }
  if (isKind(props, 'conditional')) {
    const updater = valueToUpdater(value, props.schema);
    props.onChange(updater.discriminant, updater.value);
    return;
  }
  assertNever(props);
}

// this exists because for props.schema.kind === 'form', ts doesn't narrow props, only props.schema
function isKind(props, kind) {
  return props.schema.kind === kind;
}

// https://github.com/adobe/react-spectrum/blob/759ac41ae9683d053044c508d9ec0dccebd3b8dd/packages/%40react-stately/data/src/useListData.ts#L335
function move(items, indices, toIndex) {
  // Shift the target down by the number of items being moved from before the target
  toIndex -= indices.filter(index => index < toIndex).length;
  let moves = indices.map(from => ({
    from,
    to: toIndex++
  }));

  // Shift later from indices down if they have a larger index
  for (let i = 0; i < moves.length; i++) {
    let a = moves[i].from;
    for (let j = i; j < moves.length; j++) {
      let b = moves[j].from;
      if (b > a) {
        moves[j].from--;
      }
    }
  }

  // Interleave the moves so they can be applied one by one rather than all at once
  for (let i = 0; i < moves.length; i++) {
    let a = moves[i];
    for (let j = moves.length - 1; j > i; j--) {
      let b = moves[j];
      if (b.from < a.to) {
        a.to++;
      } else {
        b.from++;
      }
    }
  }
  let copy = items.slice();
  for (let move of moves) {
    let [item] = copy.splice(move.from, 1);
    copy.splice(move.to, 0, item);
  }
  return copy;
}

function ArrayFieldInput(props) {
  var _props$schema$validat, _props$schema$validat2;
  const $ = c(51);
  const minLength = (_props$schema$validat = (_props$schema$validat2 = props.schema.validation) === null || _props$schema$validat2 === void 0 || (_props$schema$validat2 = _props$schema$validat2.length) === null || _props$schema$validat2 === void 0 ? void 0 : _props$schema$validat2.min) !== null && _props$schema$validat !== void 0 ? _props$schema$validat : 0;
  const formId = useId();
  const stringFormatter = useLocalizedStringFormatter(strings);
  const errorMessage = useArrayFieldValidationMessage(props);
  const t0 = !!errorMessage;
  let t1;
  if ($[0] !== props.schema.description || $[1] !== props.schema.label || $[2] !== errorMessage || $[3] !== t0) {
    t1 = {
      description: props.schema.description,
      errorMessage,
      isInvalid: t0,
      label: props.schema.label,
      labelElementType: "span"
    };
    $[0] = props.schema.description;
    $[1] = props.schema.label;
    $[2] = errorMessage;
    $[3] = t0;
    $[4] = t1;
  } else {
    t1 = $[4];
  }
  const {
    descriptionProps,
    errorMessageProps,
    fieldProps: groupProps,
    labelProps
  } = useField(t1);
  let t2;
  if ($[5] === Symbol.for("react.memo_cache_sentinel")) {
    t2 = {
      state: "closed"
    };
    $[5] = t2;
  } else {
    t2 = $[5];
  }
  const [modalState, setModalState] = useState(t2);
  const t3 = minLength > 0;
  let t4;
  if ($[6] !== t3 || $[7] !== labelProps || $[8] !== props.schema.label) {
    t4 = /*#__PURE__*/jsx(FieldLabel, {
      elementType: "span",
      isRequired: t3,
      supplementRequiredState: true,
      ...labelProps,
      children: props.schema.label
    });
    $[6] = t3;
    $[7] = labelProps;
    $[8] = props.schema.label;
    $[9] = t4;
  } else {
    t4 = $[9];
  }
  let t5;
  if ($[10] !== props.schema.description || $[11] !== descriptionProps) {
    t5 = props.schema.description && /*#__PURE__*/jsx(Text, {
      size: "small",
      color: "neutralSecondary",
      ...descriptionProps,
      children: props.schema.description
    });
    $[10] = props.schema.description;
    $[11] = descriptionProps;
    $[12] = t5;
  } else {
    t5 = $[12];
  }
  let t6;
  if ($[13] === Symbol.for("react.memo_cache_sentinel")) {
    t6 = () => {
      setModalState({
        state: "new"
      });
    };
    $[13] = t6;
  } else {
    t6 = $[13];
  }
  let t7;
  if ($[14] !== stringFormatter) {
    t7 = stringFormatter.format("add");
    $[14] = stringFormatter;
    $[15] = t7;
  } else {
    t7 = $[15];
  }
  let t8;
  if ($[16] !== props.autoFocus || $[17] !== t7) {
    t8 = /*#__PURE__*/jsx(ActionButton, {
      autoFocus: props.autoFocus,
      onPress: t6,
      alignSelf: "start",
      children: t7
    });
    $[16] = props.autoFocus;
    $[17] = t7;
    $[18] = t8;
  } else {
    t8 = $[18];
  }
  let t9;
  if ($[19] === Symbol.for("react.memo_cache_sentinel")) {
    t9 = idx => {
      setModalState({
        state: "edit",
        index: idx
      });
    };
    $[19] = t9;
  } else {
    t9 = $[19];
  }
  let t10;
  if ($[20] !== props) {
    t10 = /*#__PURE__*/jsx(ArrayFieldListView, {
      ...props,
      "aria-label": props.schema.label,
      onOpenItem: t9
    });
    $[20] = props;
    $[21] = t10;
  } else {
    t10 = $[21];
  }
  let t11;
  if ($[22] !== errorMessage || $[23] !== errorMessageProps) {
    t11 = errorMessage && /*#__PURE__*/jsx(FieldMessage, {
      ...errorMessageProps,
      children: errorMessage
    });
    $[22] = errorMessage;
    $[23] = errorMessageProps;
    $[24] = t11;
  } else {
    t11 = $[24];
  }
  let t12;
  if ($[25] === Symbol.for("react.memo_cache_sentinel")) {
    t12 = () => {
      setModalState({
        state: "closed"
      });
    };
    $[25] = t12;
  } else {
    t12 = $[25];
  }
  let t13;
  bb0: {
    if (props.schema.element.kind === "child") {
      t13 = undefined;
      break bb0;
    }
    if (modalState.state === "new") {
      let t14;
      if ($[26] === Symbol.for("react.memo_cache_sentinel")) {
        t14 = () => {
          setModalState({
            state: "closed"
          });
        };
        $[26] = t14;
      } else {
        t14 = $[26];
      }
      let t15;
      if ($[27] !== formId || $[28] !== props) {
        t15 = /*#__PURE__*/jsx(ArrayFieldAddItemModalContent, {
          formId: formId,
          onClose: t14,
          previewProps: props
        });
        $[27] = formId;
        $[28] = props;
        $[29] = t15;
      } else {
        t15 = $[29];
      }
      t13 = t15;
      break bb0;
    }
    if (modalState.state !== "edit") {
      t13 = undefined;
      break bb0;
    }
    let t14;
    if ($[30] === Symbol.for("react.memo_cache_sentinel")) {
      t14 = /*#__PURE__*/jsx(Heading, {
        children: "Edit item"
      });
      $[30] = t14;
    } else {
      t14 = $[30];
    }
    let t15;
    if ($[31] === Symbol.for("react.memo_cache_sentinel")) {
      t15 = () => {
        setModalState({
          state: "closed"
        });
      };
      $[31] = t15;
    } else {
      t15 = $[31];
    }
    let t16;
    if ($[32] !== formId || $[33] !== modalState.index || $[34] !== props) {
      t16 = /*#__PURE__*/jsx(ArrayEditItemModalContent, {
        formId: formId,
        modalStateIndex: modalState.index,
        onClose: t15,
        previewProps: props
      });
      $[32] = formId;
      $[33] = modalState.index;
      $[34] = props;
      $[35] = t16;
    } else {
      t16 = $[35];
    }
    let t17;
    if ($[36] !== formId) {
      t17 = /*#__PURE__*/jsx(ButtonGroup, {
        children: /*#__PURE__*/jsx(Button, {
          form: formId,
          prominence: "high",
          type: "submit",
          children: "Done"
        })
      });
      $[36] = formId;
      $[37] = t17;
    } else {
      t17 = $[37];
    }
    let t18;
    if ($[38] !== t16 || $[39] !== t17) {
      t18 = /*#__PURE__*/jsxs(Dialog, {
        children: [t14, t16, t17]
      });
      $[38] = t16;
      $[39] = t17;
      $[40] = t18;
    } else {
      t18 = $[40];
    }
    t13 = t18;
  }
  let t14;
  if ($[41] !== t13) {
    t14 = /*#__PURE__*/jsx(DialogContainer, {
      onDismiss: t12,
      children: t13
    });
    $[41] = t13;
    $[42] = t14;
  } else {
    t14 = $[42];
  }
  let t15;
  if ($[43] !== groupProps || $[44] !== t4 || $[45] !== t5 || $[46] !== t8 || $[47] !== t10 || $[48] !== t11 || $[49] !== t14) {
    t15 = /*#__PURE__*/jsxs(VStack, {
      gap: "medium",
      role: "group",
      minWidth: 0,
      ...groupProps,
      children: [t4, t5, t8, t10, t11, t14]
    });
    $[43] = groupProps;
    $[44] = t4;
    $[45] = t5;
    $[46] = t8;
    $[47] = t10;
    $[48] = t11;
    $[49] = t14;
    $[50] = t15;
  } else {
    t15 = $[50];
  }
  return t15;
}
function ArrayFieldAddItemModalContent(props) {
  const [forceValidation, setForceValidation] = useState(false);
  const stringFormatter = useLocalizedStringFormatter(strings);
  const slugInfo = useMemo(() => {
    if (props.previewProps.schema.slugField === undefined || props.previewProps.schema.element.kind !== 'object') {
      return;
    }
    const val = previewPropsToValue(props.previewProps);
    const schema = props.previewProps.schema.element.fields;
    const slugField = props.previewProps.schema.slugField;
    const slugs = new Set(val.map(x => getSlugFromState({
      schema,
      slugField
    }, x)));
    return {
      slugs,
      field: slugField,
      glob: '*'
    };
  }, [props.previewProps]);
  const [value, setValue] = useState(() => getInitialPropsValue(props.previewProps.schema.element));
  const previewProps = useMemo(() => createGetPreviewProps(props.previewProps.schema.element, setValue, () => undefined), [props.previewProps.schema.element, setValue])(value);
  return /*#__PURE__*/jsxs(Dialog, {
    children: [/*#__PURE__*/jsx(Heading, {
      children: "Add item"
    }), /*#__PURE__*/jsx(Content, {
      children: /*#__PURE__*/jsx(VStack, {
        id: props.formId,
        elementType: "form",
        onSubmit: event => {
          if (event.target !== event.currentTarget) return;
          event.preventDefault();
          if (!clientSideValidateProp(props.previewProps.schema.element, value, undefined)) {
            setForceValidation(true);
            return;
          }
          props.previewProps.onChange([...props.previewProps.elements.map(x_0 => ({
            key: x_0.key
          })), {
            key: undefined,
            value: valueToUpdater(value, props.previewProps.schema.element)
          }]);
          props.onClose();
        },
        gap: "xxlarge",
        children: /*#__PURE__*/jsx(FormValueContentFromPreviewProps, {
          slugField: slugInfo,
          autoFocus: true,
          ...previewProps,
          forceValidation: forceValidation
        })
      })
    }), /*#__PURE__*/jsxs(ButtonGroup, {
      children: [/*#__PURE__*/jsx(Button, {
        onPress: () => {
          props.onClose();
        },
        children: stringFormatter.format('cancel')
      }), /*#__PURE__*/jsx(Button, {
        form: props.formId,
        prominence: "high",
        type: "submit",
        children: stringFormatter.format('add')
      })]
    })]
  });
}
function ArrayEditItemModalContent(props) {
  const $ = c(23);
  let t0;
  bb0: {
    if (props.previewProps.schema.slugField === undefined || props.previewProps.schema.element.kind !== "object") {
      t0 = undefined;
      break bb0;
    }
    const t1 = props.previewProps;
    let t2;
    let slugField;
    if ($[0] !== t1 || $[1] !== props.previewProps.schema.element.fields || $[2] !== props.previewProps.schema.slugField || $[3] !== props.modalStateIndex) {
      const val = previewPropsToValue(t1);
      const schema = props.previewProps.schema.element.fields;
      slugField = props.previewProps.schema.slugField;
      let t3;
      if ($[6] !== props.modalStateIndex) {
        t3 = (x, i) => i !== props.modalStateIndex;
        $[6] = props.modalStateIndex;
        $[7] = t3;
      } else {
        t3 = $[7];
      }
      let t4;
      if ($[8] !== schema || $[9] !== slugField) {
        t4 = x_0 => getSlugFromState({
          schema,
          slugField
        }, x_0);
        $[8] = schema;
        $[9] = slugField;
        $[10] = t4;
      } else {
        t4 = $[10];
      }
      t2 = new Set(val.filter(t3).map(t4));
      $[0] = t1;
      $[1] = props.previewProps.schema.element.fields;
      $[2] = props.previewProps.schema.slugField;
      $[3] = props.modalStateIndex;
      $[4] = t2;
      $[5] = slugField;
    } else {
      t2 = $[4];
      slugField = $[5];
    }
    const slugs = t2;
    let t3;
    if ($[11] !== slugs || $[12] !== slugField) {
      t3 = {
        slugs,
        field: slugField,
        glob: "*"
      };
      $[11] = slugs;
      $[12] = slugField;
      $[13] = t3;
    } else {
      t3 = $[13];
    }
    t0 = t3;
  }
  const slugInfo = t0;
  let t1;
  if ($[14] !== props) {
    t1 = event => {
      if (event.target !== event.currentTarget) {
        return;
      }
      event.preventDefault();
      props.onClose();
    };
    $[14] = props;
    $[15] = t1;
  } else {
    t1 = $[15];
  }
  const t2 = props.previewProps.elements[props.modalStateIndex];
  let t3;
  if ($[16] !== slugInfo || $[17] !== t2) {
    t3 = /*#__PURE__*/jsx(FormValueContentFromPreviewProps, {
      slugField: slugInfo,
      autoFocus: true,
      ...t2
    });
    $[16] = slugInfo;
    $[17] = t2;
    $[18] = t3;
  } else {
    t3 = $[18];
  }
  let t4;
  if ($[19] !== props.formId || $[20] !== t1 || $[21] !== t3) {
    t4 = /*#__PURE__*/jsx(Content, {
      children: /*#__PURE__*/jsx(VStack, {
        id: props.formId,
        elementType: "form",
        onSubmit: t1,
        gap: "xxlarge",
        children: t3
      })
    });
    $[19] = props.formId;
    $[20] = t1;
    $[21] = t3;
    $[22] = t4;
  } else {
    t4 = $[22];
  }
  return t4;
}

// TODO: l10n
function useArrayFieldValidationMessage(props) {
  var _schema$validation, _schema$validation2;
  const {
    elements,
    forceValidation,
    schema
  } = props;
  const minLength = (_schema$validation = schema.validation) === null || _schema$validation === void 0 || (_schema$validation = _schema$validation.length) === null || _schema$validation === void 0 ? void 0 : _schema$validation.min;
  const maxLength = (_schema$validation2 = schema.validation) === null || _schema$validation2 === void 0 || (_schema$validation2 = _schema$validation2.length) === null || _schema$validation2 === void 0 ? void 0 : _schema$validation2.max;
  let t0;
  bb0: {
    if (forceValidation) {
      if (minLength && elements.length < minLength) {
        t0 = `Must have at least ${pluralize(minLength, {
          singular: "item"
        })}.`;
        break bb0;
      } else {
        if (maxLength && elements.length > maxLength) {
          t0 = `Must have at most ${pluralize(maxLength, {
            singular: "item"
          })}.`;
          break bb0;
        }
      }
    }
    t0 = undefined;
  }
  return t0;
}
function ArrayFieldListView(props) {
  let onMove = (keys, target) => {
    const targetIndex = props.elements.findIndex(x => x.key === target.key);
    if (targetIndex === -1) return;
    const allKeys = props.elements.map(x_0 => ({
      key: x_0.key
    }));
    const indexToMoveTo = target.dropPosition === 'before' ? targetIndex : targetIndex + 1;
    const indices = keys.map(key => allKeys.findIndex(x_1 => x_1.key === key));
    props.onChange(move(allKeys, indices, indexToMoveTo));
  };
  const dragType = useMemo(() => Math.random().toString(36), []);
  let {
    dragAndDropHooks
  } = useDragAndDrop({
    getItems(keys_0) {
      // Use a drag type so the items can only be reordered within this list
      // and not dragged elsewhere.
      return [...keys_0].map(key_0 => {
        key_0 = JSON.stringify(key_0);
        return {
          [dragType]: key_0,
          'text/plain': key_0
        };
      });
    },
    getAllowedDropOperations() {
      return ['move', 'cancel'];
    },
    async onDrop(e) {
      if (e.target.type !== 'root' && e.target.dropPosition !== 'on') {
        let keys_1 = [];
        for (let item of e.items) {
          if (item.kind === 'text') {
            let key_1;
            if (item.types.has(dragType)) {
              key_1 = JSON.parse(await item.getText(dragType));
              keys_1.push(key_1);
            } else if (item.types.has('text/plain')) {
              // Fallback for Chrome Android case: https://bugs.chromium.org/p/chromium/issues/detail?id=1293803
              // Multiple drag items are contained in a single string so we need to split them out
              key_1 = await item.getText('text/plain');
              keys_1 = key_1.split('\n').map(val => val.replaceAll('"', ''));
            }
          }
        }
        onMove(keys_1, e.target);
      }
    },
    getDropOperation(target_0) {
      if (target_0.type === 'root' || target_0.dropPosition === 'on') {
        return 'cancel';
      }
      return 'move';
    }
  });
  const onRemoveKey = useEventCallback$1(key_2 => {
    props.onChange(props.elements.map(x_2 => ({
      key: x_2.key
    })).filter(val_0 => val_0.key !== key_2));
  });
  const stringFormatter = useLocalizedStringFormatter(strings);
  return /*#__PURE__*/jsx(ListView, {
    "aria-label": props['aria-label'],
    items: props.elements,
    dragAndDropHooks: dragAndDropHooks,
    height: props.elements.length ? undefined : 'scale.2000',
    selectionMode: "none",
    renderEmptyState: arrayFieldEmptyState,
    onAction: key_3 => {
      const idx = props.elements.findIndex(x_3 => x_3.key === key_3);
      if (idx === -1) return;
      props.onOpenItem(idx);
    },
    children: item_0 => {
      var _props$schema$itemLab, _props$schema;
      const label = ((_props$schema$itemLab = (_props$schema = props.schema).itemLabel) === null || _props$schema$itemLab === void 0 ? void 0 : _props$schema$itemLab.call(_props$schema, item_0)) || `Item ${props.elements.indexOf(item_0) + 1}`;
      return /*#__PURE__*/jsxs(Item$2, {
        textValue: label,
        children: [/*#__PURE__*/jsx(Text, {
          children: label
        }), /*#__PURE__*/jsxs(TooltipTrigger, {
          placement: "start",
          children: [/*#__PURE__*/jsx(ActionButton, {
            onPress: () => {
              onRemoveKey(item_0.key);
            },
            children: /*#__PURE__*/jsx(Icon, {
              src: trash2Icon
            })
          }), /*#__PURE__*/jsx(Tooltip, {
            children: stringFormatter.format('delete')
          })]
        })]
      }, item_0.key);
    }
  });
}
function arrayFieldEmptyState() {
  return /*#__PURE__*/jsxs(VStack, {
    gap: "large",
    alignItems: "center",
    justifyContent: "center",
    height: "100%",
    padding: "regular",
    children: [/*#__PURE__*/jsx(Text, {
      elementType: "h3",
      align: "center",
      color: "neutralSecondary",
      size: "large",
      weight: "medium",
      children: "Empty list"
    }), /*#__PURE__*/jsx(Text, {
      align: "center",
      color: "neutralTertiary",
      children: "Add the first item to see it here."
    })]
  });
}

const isListType = type => type === 'ordered-list' || type === 'unordered-list';
const isListNode = node => isListType(node.type);
function getAncestorList(editor) {
  if (editor.selection) {
    const listItem = Editor$1.above(editor, {
      match: nodeTypeMatcher('list-item')
    });
    const list = Editor$1.above(editor, {
      match: isListNode
    });
    if (listItem && list) {
      return {
        isInside: true,
        listItem,
        list
      };
    }
  }
  return {
    isInside: false
  };
}
function withList(editor) {
  const {
    insertBreak,
    normalizeNode,
    deleteBackward
  } = editor;
  editor.deleteBackward = unit => {
    if (editor.selection) {
      const ancestorList = getAncestorList(editor);
      if (ancestorList.isInside && Range.isCollapsed(editor.selection) && Editor$1.isStart(editor, editor.selection.anchor, ancestorList.list[1])) {
        Transforms.unwrapNodes(editor, {
          match: isListNode,
          split: true
        });
        return;
      }
    }
    deleteBackward(unit);
  };
  editor.insertBreak = () => {
    const [listItem] = Editor$1.nodes(editor, {
      match: node => node.type === 'list-item',
      mode: 'lowest'
    });
    if (listItem && Node.string(listItem[0]) === '') {
      Transforms.unwrapNodes(editor, {
        match: isListNode,
        split: true
      });
      return;
    }
    insertBreak();
  };
  editor.normalizeNode = entry => {
    const [node, path] = entry;
    if (Element$1.isElement(node) || Editor$1.isEditor(node)) {
      const isElementBeingNormalizedAList = isListNode(node);
      for (const [childNode, childPath] of Node.children(editor, path)) {
        const index = childPath[childPath.length - 1];
        // merge sibling lists
        if (isListNode(childNode)) {
          var _node$children;
          if (((_node$children = node.children[childPath[childPath.length - 1] + 1]) === null || _node$children === void 0 ? void 0 : _node$children.type) === childNode.type) {
            const siblingNodePath = Path.next(childPath);
            moveChildren(editor, siblingNodePath, [...childPath, childNode.children.length]);
            Transforms.removeNodes(editor, {
              at: siblingNodePath
            });
            return;
          }
          if (isElementBeingNormalizedAList) {
            const previousChild = node.children[index - 1];
            if (Element$1.isElement(previousChild)) {
              Transforms.moveNodes(editor, {
                at: childPath,
                to: [...Path.previous(childPath), previousChild.children.length - 1]
              });
            } else {
              Transforms.unwrapNodes(editor, {
                at: childPath
              });
            }
            return;
          }
        }
        if (node.type === 'list-item' && childNode.type !== 'list-item-content' && index === 0 && isBlock(childNode)) {
          if (path[path.length - 1] !== 0) {
            const previousChild = Node.get(editor, Path.previous(path));
            if (Element$1.isElement(previousChild)) {
              Transforms.moveNodes(editor, {
                at: path,
                to: [...Path.previous(path), previousChild.children.length]
              });
              return;
            }
          }
          Transforms.unwrapNodes(editor, {
            at: childPath
          });
          return;
        }
        if (node.type === 'list-item' && childNode.type === 'list-item-content' && index !== 0) {
          Transforms.splitNodes(editor, {
            at: childPath
          });
          return;
        }
      }
    }
    normalizeNode(entry);
  };
  return editor;
}

const ToolbarStateContext = /*#__PURE__*/React.createContext(null);
function useToolbarState() {
  const toolbarState = useContext(ToolbarStateContext);
  if (!toolbarState) {
    throw new Error('ToolbarStateProvider must be used to use useToolbarState');
  }
  return toolbarState;
}
const createToolbarState = (editor, componentBlocks, editorDocumentFeatures) => {
  const locationDocumentFeatures = getAncestorComponentChildFieldDocumentFeatures(editor, editorDocumentFeatures, componentBlocks) || {
    kind: 'block',
    inlineMarks: 'inherit',
    documentFeatures: {
      dividers: true,
      formatting: {
        alignment: {
          center: true,
          end: true
        },
        blockTypes: {
          blockquote: true,
          code: editorDocumentFeatures.formatting.blockTypes.code
        },
        headings: editorDocumentFeatures.formatting.headings,
        listTypes: {
          ordered: true,
          unordered: true
        }
      },
      layouts: editorDocumentFeatures.layouts,
      links: true,
      images: editorDocumentFeatures.images,
      tables: true
    },
    softBreaks: true,
    componentBlocks: true
  };
  let [maybeCodeBlockEntry] = Editor$1.nodes(editor, {
    match: node => node.type !== 'code' && isBlock(node)
  });
  const editorMarks = Editor$1.marks(editor) || {};
  const marks = Object.fromEntries(allMarks.map(mark => [mark, {
    isDisabled: locationDocumentFeatures.inlineMarks !== 'inherit' && !locationDocumentFeatures.inlineMarks[mark] || !maybeCodeBlockEntry,
    isSelected: !!editorMarks[mark]
  }]));

  // Editor.marks is "what are the marks that would be applied if text was inserted now"
  // that's not really the UX we want, if we have some a document like this
  // <paragraph>
  //   <text>
  //     <anchor />
  //     content
  //   </text>
  //   <text bold>bold</text>
  //   <text>
  //     content
  //     <focus />
  //   </text>
  // </paragraph>

  // we want bold to be shown as selected even though if you inserted text from that selection, it wouldn't be bold
  // so we look at all the text nodes in the selection to get their marks
  // but only if the selection is expanded because if you're in the middle of some text
  // with your selection collapsed with a mark but you've removed it(i.e. editor.removeMark)
  // the text nodes you're in will have the mark but the ui should show the mark as not being selected
  if (editor.selection && Range.isExpanded(editor.selection)) {
    for (const node of Editor$1.nodes(editor, {
      match: Text$1.isText
    })) {
      for (const key of Object.keys(node[0])) {
        if (key === 'insertMenu' || key === 'text') {
          continue;
        }
        if (key in marks) {
          marks[key].isSelected = true;
        }
      }
    }
  }
  let [headingEntry] = Editor$1.nodes(editor, {
    match: nodeTypeMatcher('heading')
  });
  let [listEntry] = Editor$1.nodes(editor, {
    match: isListNode
  });
  let [alignableEntry] = Editor$1.nodes(editor, {
    match: nodeTypeMatcher('paragraph', 'heading')
  });

  // (we're gonna use markdown here because the equivelant slate structure is quite large and doesn't add value here)
  // let's imagine a document that looks like this:
  // - thing
  //   1. something<cursor />
  // in the toolbar, you don't want to see that both ordered and unordered lists are selected
  // you want to see only ordered list selected, because
  // - you want to know what list you're actually in, you don't really care about the outer list
  // - when you want to change the list to a unordered list, the unordered list button should be inactive to show you can change to it
  const listTypeAbove = getListTypeAbove(editor);
  return {
    marks,
    textStyles: {
      selected: headingEntry ? headingEntry[0].level : 'normal',
      allowedHeadingLevels: locationDocumentFeatures.kind === 'block' && !listEntry ? locationDocumentFeatures.documentFeatures.formatting.headings.levels : []
    },
    code: {
      isSelected: isElementActive(editor, 'code'),
      isDisabled: !(locationDocumentFeatures.kind === 'block' && locationDocumentFeatures.documentFeatures.formatting.blockTypes.code)
    },
    lists: {
      ordered: {
        isSelected: isElementActive(editor, 'ordered-list') && (listTypeAbove === 'none' || listTypeAbove === 'ordered-list'),
        isDisabled: !(locationDocumentFeatures.kind === 'block' && locationDocumentFeatures.documentFeatures.formatting.listTypes.ordered && !headingEntry)
      },
      unordered: {
        isSelected: isElementActive(editor, 'unordered-list') && (listTypeAbove === 'none' || listTypeAbove === 'unordered-list'),
        isDisabled: !(locationDocumentFeatures.kind === 'block' && locationDocumentFeatures.documentFeatures.formatting.listTypes.unordered && !headingEntry)
      }
    },
    alignment: {
      isDisabled: !alignableEntry && !(locationDocumentFeatures.kind === 'block' && locationDocumentFeatures.documentFeatures.formatting.alignment),
      selected: (alignableEntry === null || alignableEntry === void 0 ? void 0 : alignableEntry[0].textAlign) || 'start'
    },
    blockquote: {
      isDisabled: !(locationDocumentFeatures.kind === 'block' && locationDocumentFeatures.documentFeatures.formatting.blockTypes.blockquote),
      isSelected: isElementActive(editor, 'blockquote')
    },
    layouts: {
      isSelected: isElementActive(editor, 'layout')
    },
    links: {
      isDisabled: !editor.selection || Range.isCollapsed(editor.selection) || !locationDocumentFeatures.documentFeatures.links,
      isSelected: isElementActive(editor, 'link')
    },
    editor,
    dividers: {
      isDisabled: locationDocumentFeatures.kind === 'inline' || !locationDocumentFeatures.documentFeatures.dividers
    },
    clearFormatting: {
      isDisabled: !(Object.values(marks).some(x => x.isSelected) || !!hasBlockThatClearsOnClearFormatting(editor))
    },
    editorDocumentFeatures
  };
};
function hasBlockThatClearsOnClearFormatting(editor) {
  const [node] = Editor$1.nodes(editor, {
    match: node => node.type === 'heading' || node.type === 'code' || node.type === 'blockquote'
  });
  return !!node;
}
function getListTypeAbove(editor) {
  const listAbove = Editor$1.above(editor, {
    match: isListNode
  });
  if (!listAbove) {
    return 'none';
  }
  return listAbove[0].type;
}
const DocumentEditorConfigContext = /*#__PURE__*/createContext(null);
function useDocumentEditorConfig() {
  const context = useContext(DocumentEditorConfigContext);
  if (!context) {
    throw new Error('useDocumentEditorConfig must be used within a DocumentEditorConfigContext.Provider');
  }
  return context;
}
const ToolbarStateProvider = ({
  children,
  componentBlocks,
  editorDocumentFeatures
}) => {
  const editor = useSlate();
  return /*#__PURE__*/jsx(DocumentEditorConfigContext.Provider, {
    value: useMemo(() => ({
      componentBlocks,
      documentFeatures: editorDocumentFeatures
    }), [componentBlocks, editorDocumentFeatures]),
    children: /*#__PURE__*/jsx(ToolbarStateContext.Provider, {
      value: createToolbarState(editor, componentBlocks, editorDocumentFeatures),
      children: children
    })
  });
};

/* eslint-disable */
globalThis.Prism = {
  manual: true
};

/* **********************************************
     Begin prism-core.js
********************************************** */

/// <reference lib="WebWorker"/>

var _self = globalThis;

/**
 * Prism: Lightweight, robust, elegant syntax highlighting
 *
 * @license MIT <https://opensource.org/licenses/MIT>
 * @author Lea Verou <https://lea.verou.me>
 * @namespace
 * @public
 */
var Prism = function (_self) {
  // Private helper vars
  var lang = /(?:^|\s)lang(?:uage)?-([\w-]+)(?=\s|$)/i;
  var uniqueId = 0;

  // The grammar object for plaintext
  var plainTextGrammar = {};
  var _ = {
    /**
     * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the
     * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load
     * additional languages or plugins yourself.
     *
     * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.
     *
     * You obviously have to change this value before the automatic highlighting started. To do this, you can add an
     * empty Prism object into the global scope before loading the Prism script like this:
     *
     * ```js
     * window.Prism = window.Prism || {};
     * Prism.manual = true;
     * // add a new <script> to load Prism's script
     * ```
     *
     * @default false
     * @type {boolean}
     * @memberof Prism
     * @public
     */
    manual: _self.Prism && _self.Prism.manual,
    /**
     * By default, if Prism is in a web worker, it assumes that it is in a worker it created itself, so it uses
     * `addEventListener` to communicate with its parent instance. However, if you're using Prism manually in your
     * own worker, you don't want it to do this.
     *
     * By setting this value to `true`, Prism will not add its own listeners to the worker.
     *
     * You obviously have to change this value before Prism executes. To do this, you can add an
     * empty Prism object into the global scope before loading the Prism script like this:
     *
     * ```js
     * window.Prism = window.Prism || {};
     * Prism.disableWorkerMessageHandler = true;
     * // Load Prism's script
     * ```
     *
     * @default false
     * @type {boolean}
     * @memberof Prism
     * @public
     */
    disableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,
    /**
     * A namespace for utility methods.
     *
     * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may
     * change or disappear at any time.
     *
     * @namespace
     * @memberof Prism
     */
    util: {
      encode: function encode(tokens) {
        if (tokens instanceof Token) {
          return new Token(tokens.type, encode(tokens.content), tokens.alias);
        } else if (Array.isArray(tokens)) {
          return tokens.map(encode);
        } else {
          return tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\u00a0/g, ' ');
        }
      },
      /**
       * Returns the name of the type of the given value.
       *
       * @param {any} o
       * @returns {string}
       * @example
       * type(null)      === 'Null'
       * type(undefined) === 'Undefined'
       * type(123)       === 'Number'
       * type('foo')     === 'String'
       * type(true)      === 'Boolean'
       * type([1, 2])    === 'Array'
       * type({})        === 'Object'
       * type(String)    === 'Function'
       * type(/abc+/)    === 'RegExp'
       */
      type: function (o) {
        return Object.prototype.toString.call(o).slice(8, -1);
      },
      /**
       * Returns a unique number for the given object. Later calls will still return the same number.
       *
       * @param {Object} obj
       * @returns {number}
       */
      objId: function (obj) {
        if (!obj['__id']) {
          Object.defineProperty(obj, '__id', {
            value: ++uniqueId
          });
        }
        return obj['__id'];
      },
      /**
       * Creates a deep clone of the given object.
       *
       * The main intended use of this function is to clone language definitions.
       *
       * @param {T} o
       * @param {Record<number, any>} [visited]
       * @returns {T}
       * @template T
       */
      clone: function deepClone(o, visited) {
        visited = visited || {};
        var clone;
        var id;
        switch (_.util.type(o)) {
          case 'Object':
            id = _.util.objId(o);
            if (visited[id]) {
              return visited[id];
            }
            clone = /** @type {Record<string, any>} */{};
            visited[id] = clone;
            for (var key in o) {
              if (o.hasOwnProperty(key)) {
                clone[key] = deepClone(o[key], visited);
              }
            }
            return /** @type {any} */clone;
          case 'Array':
            id = _.util.objId(o);
            if (visited[id]) {
              return visited[id];
            }
            clone = [];
            visited[id] = clone;
            ( /** @type {Array} */ /** @type {any} */o).forEach(function (v, i) {
              clone[i] = deepClone(v, visited);
            });
            return /** @type {any} */clone;
          default:
            return o;
        }
      },
      /**
       * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.
       *
       * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.
       *
       * @param {Element} element
       * @returns {string}
       */
      getLanguage: function (element) {
        while (element) {
          var m = lang.exec(element.className);
          if (m) {
            return m[1].toLowerCase();
          }
          element = element.parentElement;
        }
        return 'none';
      },
      /**
       * Sets the Prism `language-xxxx` class of the given element.
       *
       * @param {Element} element
       * @param {string} language
       * @returns {void}
       */
      setLanguage: function (element, language) {
        // remove all `language-xxxx` classes
        // (this might leave behind a leading space)
        element.className = element.className.replace(RegExp(lang, 'gi'), '');

        // add the new `language-xxxx` class
        // (using `classList` will automatically clean up spaces for us)
        element.classList.add('language-' + language);
      },
      /**
       * Returns the script element that is currently executing.
       *
       * This does __not__ work for line script element.
       *
       * @returns {HTMLScriptElement | null}
       */
      currentScript: function () {
        if (typeof document === 'undefined') {
          return null;
        }
        if ('currentScript' in document && 1 < 2 /* hack to trip TS' flow analysis */) {
          return /** @type {any} */document.currentScript;
        }

        // IE11 workaround
        // we'll get the src of the current script by parsing IE11's error stack trace
        // this will not work for inline scripts

        try {
          throw new Error();
        } catch (err) {
          // Get file src url from stack. Specifically works with the format of stack traces in IE.
          // A stack will look like this:
          //
          // Error
          //    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)
          //    at Global code (http://localhost/components/prism-core.js:606:1)

          var src = (/at [^(\r\n]*\((.*):[^:]+:[^:]+\)$/i.exec(err.stack) || [])[1];
          if (src) {
            var scripts = document.getElementsByTagName('script');
            for (var i in scripts) {
              if (scripts[i].src == src) {
                return scripts[i];
              }
            }
          }
          return null;
        }
      },
      /**
       * Returns whether a given class is active for `element`.
       *
       * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated
       * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the
       * given class is just the given class with a `no-` prefix.
       *
       * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is
       * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its
       * ancestors have the given class or the negated version of it, then the default activation will be returned.
       *
       * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated
       * version of it, the class is considered active.
       *
       * @param {Element} element
       * @param {string} className
       * @param {boolean} [defaultActivation=false]
       * @returns {boolean}
       */
      isActive: function (element, className, defaultActivation) {
        var no = 'no-' + className;
        while (element) {
          var classList = element.classList;
          if (classList.contains(className)) {
            return true;
          }
          if (classList.contains(no)) {
            return false;
          }
          element = element.parentElement;
        }
        return !!defaultActivation;
      }
    },
    /**
     * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.
     *
     * @namespace
     * @memberof Prism
     * @public
     */
    languages: {
      /**
       * The grammar for plain, unformatted text.
       */
      plain: plainTextGrammar,
      plaintext: plainTextGrammar,
      text: plainTextGrammar,
      txt: plainTextGrammar,
      /**
       * Creates a deep copy of the language with the given id and appends the given tokens.
       *
       * If a token in `redef` also appears in the copied language, then the existing token in the copied language
       * will be overwritten at its original position.
       *
       * ## Best practices
       *
       * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)
       * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to
       * understand the language definition because, normally, the order of tokens matters in Prism grammars.
       *
       * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.
       * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.
       *
       * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.
       * @param {Grammar} redef The new tokens to append.
       * @returns {Grammar} The new language created.
       * @public
       * @example
       * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {
       *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token
       *     // at its original position
       *     'comment': { ... },
       *     // CSS doesn't have a 'color' token, so this token will be appended
       *     'color': /\b(?:red|green|blue)\b/
       * });
       */
      extend: function (id, redef) {
        var lang = _.util.clone(_.languages[id]);
        for (var key in redef) {
          lang[key] = redef[key];
        }
        return lang;
      },
      /**
       * Inserts tokens _before_ another token in a language definition or any other grammar.
       *
       * ## Usage
       *
       * This helper method makes it easy to modify existing languages. For example, the CSS language definition
       * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded
       * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the
       * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do
       * this:
       *
       * ```js
       * Prism.languages.markup.style = {
       *     // token
       * };
       * ```
       *
       * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens
       * before existing tokens. For the CSS example above, you would use it like this:
       *
       * ```js
       * Prism.languages.insertBefore('markup', 'cdata', {
       *     'style': {
       *         // token
       *     }
       * });
       * ```
       *
       * ## Special cases
       *
       * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar
       * will be ignored.
       *
       * This behavior can be used to insert tokens after `before`:
       *
       * ```js
       * Prism.languages.insertBefore('markup', 'comment', {
       *     'comment': Prism.languages.markup.comment,
       *     // tokens after 'comment'
       * });
       * ```
       *
       * ## Limitations
       *
       * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object
       * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave
       * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily
       * deleting properties which is necessary to insert at arbitrary positions.
       *
       * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.
       * Instead, it will create a new object and replace all references to the target object with the new one. This
       * can be done without temporarily deleting properties, so the iteration order is well-defined.
       *
       * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if
       * you hold the target object in a variable, then the value of the variable will not change.
       *
       * ```js
       * var oldMarkup = Prism.languages.markup;
       * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });
       *
       * assert(oldMarkup !== Prism.languages.markup);
       * assert(newMarkup === Prism.languages.markup);
       * ```
       *
       * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the
       * object to be modified.
       * @param {string} before The key to insert before.
       * @param {Grammar} insert An object containing the key-value pairs to be inserted.
       * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the
       * object to be modified.
       *
       * Defaults to `Prism.languages`.
       * @returns {Grammar} The new grammar object.
       * @public
       */
      insertBefore: function (inside, before, insert, root) {
        root = root || ( /** @type {any} */_.languages);
        var grammar = root[inside];
        /** @type {Grammar} */
        var ret = {};
        for (var token in grammar) {
          if (grammar.hasOwnProperty(token)) {
            if (token == before) {
              for (var newToken in insert) {
                if (insert.hasOwnProperty(newToken)) {
                  ret[newToken] = insert[newToken];
                }
              }
            }

            // Do not insert token which also occur in insert. See #1525
            if (!insert.hasOwnProperty(token)) {
              ret[token] = grammar[token];
            }
          }
        }
        var old = root[inside];
        root[inside] = ret;

        // Update references in other language definitions
        _.languages.DFS(_.languages, function (key, value) {
          if (value === old && key != inside) {
            this[key] = ret;
          }
        });
        return ret;
      },
      // Traverse a language definition with Depth First Search
      DFS: function DFS(o, callback, type, visited) {
        visited = visited || {};
        var objId = _.util.objId;
        for (var i in o) {
          if (o.hasOwnProperty(i)) {
            callback.call(o, i, o[i], type || i);
            var property = o[i];
            var propertyType = _.util.type(property);
            if (propertyType === 'Object' && !visited[objId(property)]) {
              visited[objId(property)] = true;
              DFS(property, callback, null, visited);
            } else if (propertyType === 'Array' && !visited[objId(property)]) {
              visited[objId(property)] = true;
              DFS(property, callback, i, visited);
            }
          }
        }
      }
    },
    plugins: {},
    /**
     * This is the most high-level function in Prism’s API.
     * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on
     * each one of them.
     *
     * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.
     *
     * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.
     * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.
     * @memberof Prism
     * @public
     */
    highlightAll: function (async, callback) {
      _.highlightAllUnder(document, async, callback);
    },
    /**
     * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls
     * {@link Prism.highlightElement} on each one of them.
     *
     * The following hooks will be run:
     * 1. `before-highlightall`
     * 2. `before-all-elements-highlight`
     * 3. All hooks of {@link Prism.highlightElement} for each element.
     *
     * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.
     * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.
     * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.
     * @memberof Prism
     * @public
     */
    highlightAllUnder: function (container, async, callback) {
      var env = {
        callback: callback,
        container: container,
        selector: 'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'
      };
      _.hooks.run('before-highlightall', env);
      env.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));
      _.hooks.run('before-all-elements-highlight', env);
      for (var i = 0, element; element = env.elements[i++];) {
        _.highlightElement(element, async === true, env.callback);
      }
    },
    /**
     * Highlights the code inside a single element.
     *
     * The following hooks will be run:
     * 1. `before-sanity-check`
     * 2. `before-highlight`
     * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.
     * 4. `before-insert`
     * 5. `after-highlight`
     * 6. `complete`
     *
     * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for
     * the element's language.
     *
     * @param {Element} element The element containing the code.
     * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.
     * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers
     * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is
     * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).
     *
     * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for
     * asynchronous highlighting to work. You can build your own bundle on the
     * [Download page](https://prismjs.com/download.html).
     * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.
     * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.
     * @memberof Prism
     * @public
     */
    highlightElement: function (element, async, callback) {
      // Find language
      var language = _.util.getLanguage(element);
      var grammar = _.languages[language];

      // Set language on the element, if not present
      _.util.setLanguage(element, language);

      // Set language on the parent, for styling
      var parent = element.parentElement;
      if (parent && parent.nodeName.toLowerCase() === 'pre') {
        _.util.setLanguage(parent, language);
      }
      var code = element.textContent;
      var env = {
        element: element,
        language: language,
        grammar: grammar,
        code: code
      };
      function insertHighlightedCode(highlightedCode) {
        env.highlightedCode = highlightedCode;
        _.hooks.run('before-insert', env);
        env.element.innerHTML = env.highlightedCode;
        _.hooks.run('after-highlight', env);
        _.hooks.run('complete', env);
        callback && callback.call(env.element);
      }
      _.hooks.run('before-sanity-check', env);

      // plugins may change/add the parent/element
      parent = env.element.parentElement;
      if (parent && parent.nodeName.toLowerCase() === 'pre' && !parent.hasAttribute('tabindex')) {
        parent.setAttribute('tabindex', '0');
      }
      if (!env.code) {
        _.hooks.run('complete', env);
        callback && callback.call(env.element);
        return;
      }
      _.hooks.run('before-highlight', env);
      if (!env.grammar) {
        insertHighlightedCode(_.util.encode(env.code));
        return;
      }
      if (async && _self.Worker) {
        var worker = new Worker(_.filename);
        worker.onmessage = function (evt) {
          insertHighlightedCode(evt.data);
        };
        worker.postMessage(JSON.stringify({
          language: env.language,
          code: env.code,
          immediateClose: true
        }));
      } else {
        insertHighlightedCode(_.highlight(env.code, env.grammar, env.language));
      }
    },
    /**
     * Low-level function, only use if you know what you’re doing. It accepts a string of text as input
     * and the language definitions to use, and returns a string with the HTML produced.
     *
     * The following hooks will be run:
     * 1. `before-tokenize`
     * 2. `after-tokenize`
     * 3. `wrap`: On each {@link Token}.
     *
     * @param {string} text A string with the code to be highlighted.
     * @param {Grammar} grammar An object containing the tokens to use.
     *
     * Usually a language definition like `Prism.languages.markup`.
     * @param {string} language The name of the language definition passed to `grammar`.
     * @returns {string} The highlighted HTML.
     * @memberof Prism
     * @public
     * @example
     * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');
     */
    highlight: function (text, grammar, language) {
      var env = {
        code: text,
        grammar: grammar,
        language: language
      };
      _.hooks.run('before-tokenize', env);
      if (!env.grammar) {
        throw new Error('The language "' + env.language + '" has no grammar.');
      }
      env.tokens = _.tokenize(env.code, env.grammar);
      _.hooks.run('after-tokenize', env);
      return Token.stringify(_.util.encode(env.tokens), env.language);
    },
    /**
     * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input
     * and the language definitions to use, and returns an array with the tokenized code.
     *
     * When the language definition includes nested tokens, the function is called recursively on each of these tokens.
     *
     * This method could be useful in other contexts as well, as a very crude parser.
     *
     * @param {string} text A string with the code to be highlighted.
     * @param {Grammar} grammar An object containing the tokens to use.
     *
     * Usually a language definition like `Prism.languages.markup`.
     * @returns {TokenStream} An array of strings and tokens, a token stream.
     * @memberof Prism
     * @public
     * @example
     * let code = `var foo = 0;`;
     * let tokens = Prism.tokenize(code, Prism.languages.javascript);
     * tokens.forEach(token => {
     *     if (token instanceof Prism.Token && token.type === 'number') {
     *         console.log(`Found numeric literal: ${token.content}`);
     *     }
     * });
     */
    tokenize: function (text, grammar) {
      var rest = grammar.rest;
      if (rest) {
        for (var token in rest) {
          grammar[token] = rest[token];
        }
        delete grammar.rest;
      }
      var tokenList = new LinkedList();
      addAfter(tokenList, tokenList.head, text);
      matchGrammar(text, tokenList, grammar, tokenList.head, 0);
      return toArray(tokenList);
    },
    /**
     * @namespace
     * @memberof Prism
     * @public
     */
    hooks: {
      all: {},
      /**
       * Adds the given callback to the list of callbacks for the given hook.
       *
       * The callback will be invoked when the hook it is registered for is run.
       * Hooks are usually directly run by a highlight function but you can also run hooks yourself.
       *
       * One callback function can be registered to multiple hooks and the same hook multiple times.
       *
       * @param {string} name The name of the hook.
       * @param {HookCallback} callback The callback function which is given environment variables.
       * @public
       */
      add: function (name, callback) {
        var hooks = _.hooks.all;
        hooks[name] = hooks[name] || [];
        hooks[name].push(callback);
      },
      /**
       * Runs a hook invoking all registered callbacks with the given environment variables.
       *
       * Callbacks will be invoked synchronously and in the order in which they were registered.
       *
       * @param {string} name The name of the hook.
       * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.
       * @public
       */
      run: function (name, env) {
        var callbacks = _.hooks.all[name];
        if (!callbacks || !callbacks.length) {
          return;
        }
        for (var i = 0, callback; callback = callbacks[i++];) {
          callback(env);
        }
      }
    },
    Token: Token
  };
  _self.Prism = _;

  // Typescript note:
  // The following can be used to import the Token type in JSDoc:
  //
  //   @typedef {InstanceType<import("./prism-core")["Token"]>} Token

  /**
   * Creates a new token.
   *
   * @param {string} type See {@link Token#type type}
   * @param {string | TokenStream} content See {@link Token#content content}
   * @param {string|string[]} [alias] The alias(es) of the token.
   * @param {string} [matchedStr=""] A copy of the full string this token was created from.
   * @class
   * @global
   * @public
   */
  function Token(type, content, alias, matchedStr) {
    /**
     * The type of the token.
     *
     * This is usually the key of a pattern in a {@link Grammar}.
     *
     * @type {string}
     * @see GrammarToken
     * @public
     */
    this.type = type;
    /**
     * The strings or tokens contained by this token.
     *
     * This will be a token stream if the pattern matched also defined an `inside` grammar.
     *
     * @type {string | TokenStream}
     * @public
     */
    this.content = content;
    /**
     * The alias(es) of the token.
     *
     * @type {string|string[]}
     * @see GrammarToken
     * @public
     */
    this.alias = alias;
    // Copy of the full string this token was created from
    this.length = (matchedStr || '').length | 0;
  }

  /**
   * A token stream is an array of strings and {@link Token Token} objects.
   *
   * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process
   * them.
   *
   * 1. No adjacent strings.
   * 2. No empty strings.
   *
   *    The only exception here is the token stream that only contains the empty string and nothing else.
   *
   * @typedef {Array<string | Token>} TokenStream
   * @global
   * @public
   */

  /**
   * Converts the given token or token stream to an HTML representation.
   *
   * The following hooks will be run:
   * 1. `wrap`: On each {@link Token}.
   *
   * @param {string | Token | TokenStream} o The token or token stream to be converted.
   * @param {string} language The name of current language.
   * @returns {string} The HTML representation of the token or token stream.
   * @memberof Token
   * @static
   */
  Token.stringify = function stringify(o, language) {
    if (typeof o == 'string') {
      return o;
    }
    if (Array.isArray(o)) {
      var s = '';
      o.forEach(function (e) {
        s += stringify(e, language);
      });
      return s;
    }
    var env = {
      type: o.type,
      content: stringify(o.content, language),
      tag: 'span',
      classes: ['token', o.type],
      attributes: {},
      language: language
    };
    var aliases = o.alias;
    if (aliases) {
      if (Array.isArray(aliases)) {
        Array.prototype.push.apply(env.classes, aliases);
      } else {
        env.classes.push(aliases);
      }
    }
    _.hooks.run('wrap', env);
    var attributes = '';
    for (var name in env.attributes) {
      attributes += ' ' + name + '="' + (env.attributes[name] || '').replace(/"/g, '&quot;') + '"';
    }
    return '<' + env.tag + ' class="' + env.classes.join(' ') + '"' + attributes + '>' + env.content + '</' + env.tag + '>';
  };

  /**
   * @param {RegExp} pattern
   * @param {number} pos
   * @param {string} text
   * @param {boolean} lookbehind
   * @returns {RegExpExecArray | null}
   */
  function matchPattern(pattern, pos, text, lookbehind) {
    pattern.lastIndex = pos;
    var match = pattern.exec(text);
    if (match && lookbehind && match[1]) {
      // change the match to remove the text matched by the Prism lookbehind group
      var lookbehindLength = match[1].length;
      match.index += lookbehindLength;
      match[0] = match[0].slice(lookbehindLength);
    }
    return match;
  }

  /**
   * @param {string} text
   * @param {LinkedList<string | Token>} tokenList
   * @param {any} grammar
   * @param {LinkedListNode<string | Token>} startNode
   * @param {number} startPos
   * @param {RematchOptions} [rematch]
   * @returns {void}
   * @private
   *
   * @typedef RematchOptions
   * @property {string} cause
   * @property {number} reach
   */
  function matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {
    for (var token in grammar) {
      if (!grammar.hasOwnProperty(token) || !grammar[token]) {
        continue;
      }
      var patterns = grammar[token];
      patterns = Array.isArray(patterns) ? patterns : [patterns];
      for (var j = 0; j < patterns.length; ++j) {
        if (rematch && rematch.cause == token + ',' + j) {
          return;
        }
        var patternObj = patterns[j];
        var inside = patternObj.inside;
        var lookbehind = !!patternObj.lookbehind;
        var greedy = !!patternObj.greedy;
        var alias = patternObj.alias;
        if (greedy && !patternObj.pattern.global) {
          // Without the global flag, lastIndex won't work
          var flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];
          patternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');
        }

        /** @type {RegExp} */
        var pattern = patternObj.pattern || patternObj;
        for (
        // iterate the token list and keep track of the current token/string position
        var currentNode = startNode.next, pos = startPos; currentNode !== tokenList.tail; pos += currentNode.value.length, currentNode = currentNode.next) {
          if (rematch && pos >= rematch.reach) {
            break;
          }
          var str = currentNode.value;
          if (tokenList.length > text.length) {
            // Something went terribly wrong, ABORT, ABORT!
            return;
          }
          if (str instanceof Token) {
            continue;
          }
          var removeCount = 1; // this is the to parameter of removeBetween
          var match;
          if (greedy) {
            match = matchPattern(pattern, pos, text, lookbehind);
            if (!match || match.index >= text.length) {
              break;
            }
            var from = match.index;
            var to = match.index + match[0].length;
            var p = pos;

            // find the node that contains the match
            p += currentNode.value.length;
            while (from >= p) {
              currentNode = currentNode.next;
              p += currentNode.value.length;
            }
            // adjust pos (and p)
            p -= currentNode.value.length;
            pos = p;

            // the current node is a Token, then the match starts inside another Token, which is invalid
            if (currentNode.value instanceof Token) {
              continue;
            }

            // find the last node which is affected by this match
            for (var k = currentNode; k !== tokenList.tail && (p < to || typeof k.value === 'string'); k = k.next) {
              removeCount++;
              p += k.value.length;
            }
            removeCount--;

            // replace with the new match
            str = text.slice(pos, p);
            match.index -= pos;
          } else {
            match = matchPattern(pattern, 0, str, lookbehind);
            if (!match) {
              continue;
            }
          }

          // eslint-disable-next-line no-redeclare
          var from = match.index;
          var matchStr = match[0];
          var before = str.slice(0, from);
          var after = str.slice(from + matchStr.length);
          var reach = pos + str.length;
          if (rematch && reach > rematch.reach) {
            rematch.reach = reach;
          }
          var removeFrom = currentNode.prev;
          if (before) {
            removeFrom = addAfter(tokenList, removeFrom, before);
            pos += before.length;
          }
          removeRange(tokenList, removeFrom, removeCount);
          var wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);
          currentNode = addAfter(tokenList, removeFrom, wrapped);
          if (after) {
            addAfter(tokenList, currentNode, after);
          }
          if (removeCount > 1) {
            // at least one Token object was removed, so we have to do some rematching
            // this can only happen if the current pattern is greedy

            /** @type {RematchOptions} */
            var nestedRematch = {
              cause: token + ',' + j,
              reach: reach
            };
            matchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);

            // the reach might have been extended because of the rematching
            if (rematch && nestedRematch.reach > rematch.reach) {
              rematch.reach = nestedRematch.reach;
            }
          }
        }
      }
    }
  }

  /**
   * @typedef LinkedListNode
   * @property {T} value
   * @property {LinkedListNode<T> | null} prev The previous node.
   * @property {LinkedListNode<T> | null} next The next node.
   * @template T
   * @private
   */

  /**
   * @template T
   * @private
   */
  function LinkedList() {
    /** @type {LinkedListNode<T>} */
    var head = {
      value: null,
      prev: null,
      next: null
    };
    /** @type {LinkedListNode<T>} */
    var tail = {
      value: null,
      prev: head,
      next: null
    };
    head.next = tail;

    /** @type {LinkedListNode<T>} */
    this.head = head;
    /** @type {LinkedListNode<T>} */
    this.tail = tail;
    this.length = 0;
  }

  /**
   * Adds a new node with the given value to the list.
   *
   * @param {LinkedList<T>} list
   * @param {LinkedListNode<T>} node
   * @param {T} value
   * @returns {LinkedListNode<T>} The added node.
   * @template T
   */
  function addAfter(list, node, value) {
    // assumes that node != list.tail && values.length >= 0
    var next = node.next;
    var newNode = {
      value: value,
      prev: node,
      next: next
    };
    node.next = newNode;
    next.prev = newNode;
    list.length++;
    return newNode;
  }
  /**
   * Removes `count` nodes after the given node. The given node will not be removed.
   *
   * @param {LinkedList<T>} list
   * @param {LinkedListNode<T>} node
   * @param {number} count
   * @template T
   */
  function removeRange(list, node, count) {
    var next = node.next;
    for (var i = 0; i < count && next !== list.tail; i++) {
      next = next.next;
    }
    node.next = next;
    next.prev = node;
    list.length -= i;
  }
  /**
   * @param {LinkedList<T>} list
   * @returns {T[]}
   * @template T
   */
  function toArray(list) {
    var array = [];
    var node = list.head.next;
    while (node !== list.tail) {
      array.push(node.value);
      node = node.next;
    }
    return array;
  }
  if (!_self.document) {
    if (!_self.addEventListener) {
      // in Node.js
      return _;
    }
    if (!_.disableWorkerMessageHandler) {
      // In worker
      _self.addEventListener('message', function (evt) {
        var message = JSON.parse(evt.data);
        var lang = message.language;
        var code = message.code;
        var immediateClose = message.immediateClose;
        _self.postMessage(_.highlight(code, _.languages[lang], lang));
        if (immediateClose) {
          _self.close();
        }
      }, false);
    }
    return _;
  }

  // Get current script and highlight
  var script = _.util.currentScript();
  if (script) {
    _.filename = script.src;
    if (script.hasAttribute('data-manual')) {
      _.manual = true;
    }
  }
  function highlightAutomaticallyCallback() {
    if (!_.manual) {
      _.highlightAll();
    }
  }
  if (!_.manual) {
    // If the document state is "loading", then we'll use DOMContentLoaded.
    // If the document state is "interactive" and the prism.js script is deferred, then we'll also use the
    // DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they
    // might take longer one animation frame to execute which can create a race condition where only some plugins have
    // been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.
    // See https://github.com/PrismJS/prism/issues/2102
    var readyState = document.readyState;
    if (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {
      document.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);
    } else {
      if (window.requestAnimationFrame) {
        window.requestAnimationFrame(highlightAutomaticallyCallback);
      } else {
        window.setTimeout(highlightAutomaticallyCallback, 16);
      }
    }
  }
  return _;
}(_self);

// some additional documentation/types

/**
 * The expansion of a simple `RegExp` literal to support additional properties.
 *
 * @typedef GrammarToken
 * @property {RegExp} pattern The regular expression of the token.
 * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)
 * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.
 * @property {boolean} [greedy=false] Whether the token is greedy.
 * @property {string|string[]} [alias] An optional alias or list of aliases.
 * @property {Grammar} [inside] The nested grammar of this token.
 *
 * The `inside` grammar will be used to tokenize the text value of each token of this kind.
 *
 * This can be used to make nested and even recursive language definitions.
 *
 * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into
 * each another.
 * @global
 * @public
 */

/**
 * @typedef Grammar
 * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}
 * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.
 * @global
 * @public
 */

/**
 * A function which will invoked after an element was successfully highlighted.
 *
 * @callback HighlightCallback
 * @param {Element} element The element successfully highlighted.
 * @returns {void}
 * @global
 * @public
 */

/**
 * @callback HookCallback
 * @param {Object<string, any>} env The environment variables of the hook.
 * @returns {void}
 * @global
 * @public
 */

/* **********************************************
     Begin prism-markup.js
********************************************** */

Prism.languages.markup = {
  'comment': {
    pattern: /<!--(?:(?!<!--)[\s\S])*?-->/,
    greedy: true
  },
  'prolog': {
    pattern: /<\?[\s\S]+?\?>/,
    greedy: true
  },
  'doctype': {
    // https://www.w3.org/TR/xml/#NT-doctypedecl
    pattern: /<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,
    greedy: true,
    inside: {
      'internal-subset': {
        pattern: /(^[^\[]*\[)[\s\S]+(?=\]>$)/,
        lookbehind: true,
        greedy: true,
        inside: null // see below
      },
      'string': {
        pattern: /"[^"]*"|'[^']*'/,
        greedy: true
      },
      'punctuation': /^<!|>$|[[\]]/,
      'doctype-tag': /^DOCTYPE/i,
      'name': /[^\s<>'"]+/
    }
  },
  'cdata': {
    pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
    greedy: true
  },
  'tag': {
    pattern: /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,
    greedy: true,
    inside: {
      'tag': {
        pattern: /^<\/?[^\s>\/]+/,
        inside: {
          'punctuation': /^<\/?/,
          'namespace': /^[^\s>\/:]+:/
        }
      },
      'special-attr': [],
      'attr-value': {
        pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,
        inside: {
          'punctuation': [{
            pattern: /^=/,
            alias: 'attr-equals'
          }, {
            pattern: /^(\s*)["']|["']$/,
            lookbehind: true
          }]
        }
      },
      'punctuation': /\/?>/,
      'attr-name': {
        pattern: /[^\s>\/]+/,
        inside: {
          'namespace': /^[^\s>\/:]+:/
        }
      }
    }
  },
  'entity': [{
    pattern: /&[\da-z]{1,8};/i,
    alias: 'named-entity'
  }, /&#x?[\da-f]{1,8};/i]
};
Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] = Prism.languages.markup['entity'];
Prism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;

// Plugin to make entity title show the real entity, idea by Roman Komarov
Prism.hooks.add('wrap', function (env) {
  if (env.type === 'entity') {
    env.attributes['title'] = env.content.replace(/&amp;/, '&');
  }
});
Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {
  /**
   * Adds an inlined language to markup.
   *
   * An example of an inlined language is CSS with `<style>` tags.
   *
   * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as
   * case insensitive.
   * @param {string} lang The language key.
   * @example
   * addInlined('style', 'css');
   */
  value: function addInlined(tagName, lang) {
    var includedCdataInside = {};
    includedCdataInside['language-' + lang] = {
      pattern: /(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,
      lookbehind: true,
      inside: Prism.languages[lang]
    };
    includedCdataInside['cdata'] = /^<!\[CDATA\[|\]\]>$/i;
    var inside = {
      'included-cdata': {
        pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
        inside: includedCdataInside
      }
    };
    inside['language-' + lang] = {
      pattern: /[\s\S]+/,
      inside: Prism.languages[lang]
    };
    var def = {};
    def[tagName] = {
      pattern: RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g, function () {
        return tagName;
      }), 'i'),
      lookbehind: true,
      greedy: true,
      inside: inside
    };
    Prism.languages.insertBefore('markup', 'cdata', def);
  }
});
Object.defineProperty(Prism.languages.markup.tag, 'addAttribute', {
  /**
   * Adds an pattern to highlight languages embedded in HTML attributes.
   *
   * An example of an inlined language is CSS with `style` attributes.
   *
   * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as
   * case insensitive.
   * @param {string} lang The language key.
   * @example
   * addAttribute('style', 'css');
   */
  value: function (attrName, lang) {
    Prism.languages.markup.tag.inside['special-attr'].push({
      pattern: RegExp(/(^|["'\s])/.source + '(?:' + attrName + ')' + /\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source, 'i'),
      lookbehind: true,
      inside: {
        'attr-name': /^[^\s=]+/,
        'attr-value': {
          pattern: /=[\s\S]+/,
          inside: {
            'value': {
              pattern: /(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,
              lookbehind: true,
              alias: [lang, 'language-' + lang],
              inside: Prism.languages[lang]
            },
            'punctuation': [{
              pattern: /^=/,
              alias: 'attr-equals'
            }, /"|'/]
          }
        }
      }
    });
  }
});
Prism.languages.html = Prism.languages.markup;
Prism.languages.mathml = Prism.languages.markup;
Prism.languages.svg = Prism.languages.markup;
Prism.languages.xml = Prism.languages.extend('markup', {});
Prism.languages.ssml = Prism.languages.xml;
Prism.languages.atom = Prism.languages.xml;
Prism.languages.rss = Prism.languages.xml;

/* **********************************************
     Begin prism-css.js
********************************************** */

(function (Prism) {
  var string = /(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;
  Prism.languages.css = {
    'comment': /\/\*[\s\S]*?\*\//,
    'atrule': {
      pattern: RegExp('@[\\w-](?:' + /[^;{\s"']|\s+(?!\s)/.source + '|' + string.source + ')*?' + /(?:;|(?=\s*\{))/.source),
      inside: {
        'rule': /^@[\w-]+/,
        'selector-function-argument': {
          pattern: /(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,
          lookbehind: true,
          alias: 'selector'
        },
        'keyword': {
          pattern: /(^|[^\w-])(?:and|not|only|or)(?![\w-])/,
          lookbehind: true
        }
        // See rest below
      }
    },
    'url': {
      // https://drafts.csswg.org/css-values-3/#urls
      pattern: RegExp('\\burl\\((?:' + string.source + '|' + /(?:[^\\\r\n()"']|\\[\s\S])*/.source + ')\\)', 'i'),
      greedy: true,
      inside: {
        'function': /^url/i,
        'punctuation': /^\(|\)$/,
        'string': {
          pattern: RegExp('^' + string.source + '$'),
          alias: 'url'
        }
      }
    },
    'selector': {
      pattern: RegExp('(^|[{}\\s])[^{}\\s](?:[^{};"\'\\s]|\\s+(?![\\s{])|' + string.source + ')*(?=\\s*\\{)'),
      lookbehind: true
    },
    'string': {
      pattern: string,
      greedy: true
    },
    'property': {
      pattern: /(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,
      lookbehind: true
    },
    'important': /!important\b/i,
    'function': {
      pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i,
      lookbehind: true
    },
    'punctuation': /[(){};:,]/
  };
  Prism.languages.css['atrule'].inside.rest = Prism.languages.css;
  var markup = Prism.languages.markup;
  if (markup) {
    markup.tag.addInlined('style', 'css');
    markup.tag.addAttribute('style', 'css');
  }
})(Prism);

/* **********************************************
     Begin prism-clike.js
********************************************** */

Prism.languages.clike = {
  'comment': [{
    pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
    lookbehind: true,
    greedy: true
  }, {
    pattern: /(^|[^\\:])\/\/.*/,
    lookbehind: true,
    greedy: true
  }],
  'string': {
    pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
    greedy: true
  },
  'class-name': {
    pattern: /(\b(?:class|extends|implements|instanceof|interface|new|trait)\s+|\bcatch\s+\()[\w.\\]+/i,
    lookbehind: true,
    inside: {
      'punctuation': /[.\\]/
    }
  },
  'keyword': /\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\b/,
  'boolean': /\b(?:false|true)\b/,
  'function': /\b\w+(?=\()/,
  'number': /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,
  'operator': /[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,
  'punctuation': /[{}[\];(),.:]/
};

/* **********************************************
     Begin prism-javascript.js
********************************************** */

Prism.languages.javascript = Prism.languages.extend('clike', {
  'class-name': [Prism.languages.clike['class-name'], {
    pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:constructor|prototype))/,
    lookbehind: true
  }],
  'keyword': [{
    pattern: /((?:^|\})\s*)catch\b/,
    lookbehind: true
  }, {
    pattern: /(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,
    lookbehind: true
  }],
  // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)
  'function': /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,
  'number': {
    pattern: RegExp(/(^|[^\w$])/.source + '(?:' + (
    // constant
    /NaN|Infinity/.source + '|' +
    // binary integer
    /0[bB][01]+(?:_[01]+)*n?/.source + '|' +
    // octal integer
    /0[oO][0-7]+(?:_[0-7]+)*n?/.source + '|' +
    // hexadecimal integer
    /0[xX][\dA-Fa-f]+(?:_[\dA-Fa-f]+)*n?/.source + '|' +
    // decimal bigint
    /\d+(?:_\d+)*n/.source + '|' +
    // decimal number (integer or float) but no bigint
    /(?:\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[Ee][+-]?\d+(?:_\d+)*)?/.source) + ')' + /(?![\w$])/.source),
    lookbehind: true
  },
  'operator': /--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/
});
Prism.languages.javascript['class-name'][0].pattern = /(\b(?:class|extends|implements|instanceof|interface|new)\s+)[\w.\\]+/;
Prism.languages.insertBefore('javascript', 'keyword', {
  'regex': {
    pattern: RegExp(
    // lookbehind
    // eslint-disable-next-line regexp/no-dupe-characters-character-class
    /((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)/.source +
    // Regex pattern:
    // There are 2 regex patterns here. The RegExp set notation proposal added support for nested character
    // classes if the `v` flag is present. Unfortunately, nested CCs are both context-free and incompatible
    // with the only syntax, so we have to define 2 different regex patterns.
    /\//.source + '(?:' + /(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}/.source + '|' +
    // `v` flag syntax. This supports 3 levels of nested character classes.
    /(?:\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.)*\])*\])*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}v[dgimyus]{0,7}/.source + ')' +
    // lookahead
    /(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/.source),
    lookbehind: true,
    greedy: true,
    inside: {
      'regex-source': {
        pattern: /^(\/)[\s\S]+(?=\/[a-z]*$)/,
        lookbehind: true,
        alias: 'language-regex',
        inside: Prism.languages.regex
      },
      'regex-delimiter': /^\/|\/$/,
      'regex-flags': /^[a-z]+$/
    }
  },
  // This must be declared before keyword because we use "function" inside the look-forward
  'function-variable': {
    pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,
    alias: 'function'
  },
  'parameter': [{
    pattern: /(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,
    lookbehind: true,
    inside: Prism.languages.javascript
  }, {
    pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,
    lookbehind: true,
    inside: Prism.languages.javascript
  }, {
    pattern: /(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,
    lookbehind: true,
    inside: Prism.languages.javascript
  }, {
    pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,
    lookbehind: true,
    inside: Prism.languages.javascript
  }],
  'constant': /\b[A-Z](?:[A-Z_]|\dx?)*\b/
});
Prism.languages.insertBefore('javascript', 'string', {
  'hashbang': {
    pattern: /^#!.*/,
    greedy: true,
    alias: 'comment'
  },
  'template-string': {
    pattern: /`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,
    greedy: true,
    inside: {
      'template-punctuation': {
        pattern: /^`|`$/,
        alias: 'string'
      },
      'interpolation': {
        pattern: /((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,
        lookbehind: true,
        inside: {
          'interpolation-punctuation': {
            pattern: /^\$\{|\}$/,
            alias: 'punctuation'
          },
          rest: Prism.languages.javascript
        }
      },
      'string': /[\s\S]+/
    }
  },
  'string-property': {
    pattern: /((?:^|[,{])[ \t]*)(["'])(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2(?=\s*:)/m,
    lookbehind: true,
    greedy: true,
    alias: 'property'
  }
});
Prism.languages.insertBefore('javascript', 'operator', {
  'literal-property': {
    pattern: /((?:^|[,{])[ \t]*)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/m,
    lookbehind: true,
    alias: 'property'
  }
});
if (Prism.languages.markup) {
  Prism.languages.markup.tag.addInlined('script', 'javascript');

  // add attribute support for all DOM events.
  // https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events
  Prism.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source, 'javascript');
}
Prism.languages.js = Prism.languages.javascript;

/* **********************************************
     Begin prism-file-highlight.js
********************************************** */

(function () {
  if (typeof Prism === 'undefined' || typeof document === 'undefined') {
    return;
  }

  // https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill
  if (!Element.prototype.matches) {
    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
  }
  var LOADING_MESSAGE = 'Loading…';
  var FAILURE_MESSAGE = function (status, message) {
    return '✖ Error ' + status + ' while fetching file: ' + message;
  };
  var FAILURE_EMPTY_MESSAGE = '✖ Error: File does not exist or is empty';
  var EXTENSIONS = {
    'js': 'javascript',
    'py': 'python',
    'rb': 'ruby',
    'ps1': 'powershell',
    'psm1': 'powershell',
    'sh': 'bash',
    'bat': 'batch',
    'h': 'c',
    'tex': 'latex'
  };
  var STATUS_ATTR = 'data-src-status';
  var STATUS_LOADING = 'loading';
  var STATUS_LOADED = 'loaded';
  var STATUS_FAILED = 'failed';
  var SELECTOR = 'pre[data-src]:not([' + STATUS_ATTR + '="' + STATUS_LOADED + '"])' + ':not([' + STATUS_ATTR + '="' + STATUS_LOADING + '"])';

  /**
   * Loads the given file.
   *
   * @param {string} src The URL or path of the source file to load.
   * @param {(result: string) => void} success
   * @param {(reason: string) => void} error
   */
  function loadFile(src, success, error) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', src, true);
    xhr.onreadystatechange = function () {
      if (xhr.readyState == 4) {
        if (xhr.status < 400 && xhr.responseText) {
          success(xhr.responseText);
        } else {
          if (xhr.status >= 400) {
            error(FAILURE_MESSAGE(xhr.status, xhr.statusText));
          } else {
            error(FAILURE_EMPTY_MESSAGE);
          }
        }
      }
    };
    xhr.send(null);
  }

  /**
   * Parses the given range.
   *
   * This returns a range with inclusive ends.
   *
   * @param {string | null | undefined} range
   * @returns {[number, number | undefined] | undefined}
   */
  function parseRange(range) {
    var m = /^\s*(\d+)\s*(?:(,)\s*(?:(\d+)\s*)?)?$/.exec(range || '');
    if (m) {
      var start = Number(m[1]);
      var comma = m[2];
      var end = m[3];
      if (!comma) {
        return [start, start];
      }
      if (!end) {
        return [start, undefined];
      }
      return [start, Number(end)];
    }
    return undefined;
  }
  Prism.hooks.add('before-highlightall', function (env) {
    env.selector += ', ' + SELECTOR;
  });
  Prism.hooks.add('before-sanity-check', function (env) {
    var pre = /** @type {HTMLPreElement} */env.element;
    if (pre.matches(SELECTOR)) {
      env.code = ''; // fast-path the whole thing and go to complete

      pre.setAttribute(STATUS_ATTR, STATUS_LOADING); // mark as loading

      // add code element with loading message
      var code = pre.appendChild(document.createElement('CODE'));
      code.textContent = LOADING_MESSAGE;
      var src = pre.getAttribute('data-src');
      var language = env.language;
      if (language === 'none') {
        // the language might be 'none' because there is no language set;
        // in this case, we want to use the extension as the language
        var extension = (/\.(\w+)$/.exec(src) || [, 'none'])[1];
        language = EXTENSIONS[extension] || extension;
      }

      // set language classes
      Prism.util.setLanguage(code, language);
      Prism.util.setLanguage(pre, language);

      // preload the language
      var autoloader = Prism.plugins.autoloader;
      if (autoloader) {
        autoloader.loadLanguages(language);
      }

      // load file
      loadFile(src, function (text) {
        // mark as loaded
        pre.setAttribute(STATUS_ATTR, STATUS_LOADED);

        // handle data-range
        var range = parseRange(pre.getAttribute('data-range'));
        if (range) {
          var lines = text.split(/\r\n?|\n/g);

          // the range is one-based and inclusive on both ends
          var start = range[0];
          var end = range[1] == null ? lines.length : range[1];
          if (start < 0) {
            start += lines.length;
          }
          start = Math.max(0, Math.min(start - 1, lines.length));
          if (end < 0) {
            end += lines.length;
          }
          end = Math.max(0, Math.min(end, lines.length));
          text = lines.slice(start, end).join('\n');

          // add data-start for line numbers
          if (!pre.hasAttribute('data-start')) {
            pre.setAttribute('data-start', String(start + 1));
          }
        }

        // highlight code
        code.textContent = text;
        Prism.highlightElement(code);
      }, function (error) {
        // mark as failed
        pre.setAttribute(STATUS_ATTR, STATUS_FAILED);
        code.textContent = error;
      });
    }
  });
  Prism.plugins.fileHighlight = {
    /**
     * Executes the File Highlight plugin for all matching `pre` elements under the given container.
     *
     * Note: Elements which are already loaded or currently loading will not be touched by this method.
     *
     * @param {ParentNode} [container=document]
     */
    highlight: function highlight(container) {
      var elements = (container || document).querySelectorAll(SELECTOR);
      for (var i = 0, element; element = elements[i++];) {
        Prism.highlightElement(element);
      }
    }
  };
  var logged = false;
  /** @deprecated Use `Prism.plugins.fileHighlight.highlight` instead. */
  Prism.fileHighlight = function () {
    if (!logged) {
      console.warn('Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead.');
      logged = true;
    }
    Prism.plugins.fileHighlight.highlight.apply(this, arguments);
  };
})();
Prism.languages.clike = {
  'comment': [{
    pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
    lookbehind: true,
    greedy: true
  }, {
    pattern: /(^|[^\\:])\/\/.*/,
    lookbehind: true,
    greedy: true
  }],
  'string': {
    pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
    greedy: true
  },
  'class-name': {
    pattern: /(\b(?:class|extends|implements|instanceof|interface|new|trait)\s+|\bcatch\s+\()[\w.\\]+/i,
    lookbehind: true,
    inside: {
      'punctuation': /[.\\]/
    }
  },
  'keyword': /\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\b/,
  'boolean': /\b(?:false|true)\b/,
  'function': /\b\w+(?=\()/,
  'number': /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,
  'operator': /[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,
  'punctuation': /[{}[\];(),.:]/
};
Prism.languages.c = Prism.languages.extend('clike', {
  'comment': {
    pattern: /\/\/(?:[^\r\n\\]|\\(?:\r\n?|\n|(?![\r\n])))*|\/\*[\s\S]*?(?:\*\/|$)/,
    greedy: true
  },
  'string': {
    // https://en.cppreference.com/w/c/language/string_literal
    pattern: /"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"/,
    greedy: true
  },
  'class-name': {
    pattern: /(\b(?:enum|struct)\s+(?:__attribute__\s*\(\([\s\S]*?\)\)\s*)?)\w+|\b[a-z]\w*_t\b/,
    lookbehind: true
  },
  'keyword': /\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\b/,
  'function': /\b[a-z_]\w*(?=\s*\()/i,
  'number': /(?:\b0x(?:[\da-f]+(?:\.[\da-f]*)?|\.[\da-f]+)(?:p[+-]?\d+)?|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?)[ful]{0,4}/i,
  'operator': />>=?|<<=?|->|([-+&|:])\1|[?:~]|[-+*/%&|^!=<>]=?/
});
Prism.languages.insertBefore('c', 'string', {
  'char': {
    // https://en.cppreference.com/w/c/language/character_constant
    pattern: /'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n]){0,32}'/,
    greedy: true
  }
});
Prism.languages.insertBefore('c', 'string', {
  'macro': {
    // allow for multiline macro definitions
    // spaces after the # character compile fine with gcc
    pattern: /(^[\t ]*)#\s*[a-z](?:[^\r\n\\/]|\/(?!\*)|\/\*(?:[^*]|\*(?!\/))*\*\/|\\(?:\r\n|[\s\S]))*/im,
    lookbehind: true,
    greedy: true,
    alias: 'property',
    inside: {
      'string': [{
        // highlight the path of the include statement as a string
        pattern: /^(#\s*include\s*)<[^>]+>/,
        lookbehind: true
      }, Prism.languages.c['string']],
      'char': Prism.languages.c['char'],
      'comment': Prism.languages.c['comment'],
      'macro-name': [{
        pattern: /(^#\s*define\s+)\w+\b(?!\()/i,
        lookbehind: true
      }, {
        pattern: /(^#\s*define\s+)\w+\b(?=\()/i,
        lookbehind: true,
        alias: 'function'
      }],
      // highlight macro directives as keywords
      'directive': {
        pattern: /^(#\s*)[a-z]+/,
        lookbehind: true,
        alias: 'keyword'
      },
      'directive-hash': /^#/,
      'punctuation': /##|\\(?=[\r\n])/,
      'expression': {
        pattern: /\S[\s\S]*/,
        inside: Prism.languages.c
      }
    }
  }
});
Prism.languages.insertBefore('c', 'function', {
  // highlight predefined macros as constants
  'constant': /\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\b/
});
delete Prism.languages.c['boolean'];
(function (Prism) {
  var keyword = /\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\b/;
  var modName = /\b(?!<keyword>)\w+(?:\s*\.\s*\w+)*\b/.source.replace(/<keyword>/g, function () {
    return keyword.source;
  });
  Prism.languages.cpp = Prism.languages.extend('c', {
    'class-name': [{
      pattern: RegExp(/(\b(?:class|concept|enum|struct|typename)\s+)(?!<keyword>)\w+/.source.replace(/<keyword>/g, function () {
        return keyword.source;
      })),
      lookbehind: true
    },
    // This is intended to capture the class name of method implementations like:
    //   void foo::bar() const {}
    // However! The `foo` in the above example could also be a namespace, so we only capture the class name if
    // it starts with an uppercase letter. This approximation should give decent results.
    /\b[A-Z]\w*(?=\s*::\s*\w+\s*\()/,
    // This will capture the class name before destructors like:
    //   Foo::~Foo() {}
    /\b[A-Z_]\w*(?=\s*::\s*~\w+\s*\()/i,
    // This also intends to capture the class name of method implementations but here the class has template
    // parameters, so it can't be a namespace (until C++ adds generic namespaces).
    /\b\w+(?=\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\s*::\s*\w+\s*\()/],
    'keyword': keyword,
    'number': {
      pattern: /(?:\b0b[01']+|\b0x(?:[\da-f']+(?:\.[\da-f']*)?|\.[\da-f']+)(?:p[+-]?[\d']+)?|(?:\b[\d']+(?:\.[\d']*)?|\B\.[\d']+)(?:e[+-]?[\d']+)?)[ful]{0,4}/i,
      greedy: true
    },
    'operator': />>=?|<<=?|->|--|\+\+|&&|\|\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\b/,
    'boolean': /\b(?:false|true)\b/
  });
  Prism.languages.insertBefore('cpp', 'string', {
    'module': {
      // https://en.cppreference.com/w/cpp/language/modules
      pattern: RegExp(/(\b(?:import|module)\s+)/.source + '(?:' +
      // header-name
      /"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|<[^<>\r\n]*>/.source + '|' +
      // module name or partition or both
      /<mod-name>(?:\s*:\s*<mod-name>)?|:\s*<mod-name>/.source.replace(/<mod-name>/g, function () {
        return modName;
      }) + ')'),
      lookbehind: true,
      greedy: true,
      inside: {
        'string': /^[<"][\s\S]+/,
        'operator': /:/,
        'punctuation': /\./
      }
    },
    'raw-string': {
      pattern: /R"([^()\\ ]{0,16})\([\s\S]*?\)\1"/,
      alias: 'string',
      greedy: true
    }
  });
  Prism.languages.insertBefore('cpp', 'keyword', {
    'generic-function': {
      pattern: /\b(?!operator\b)[a-z_]\w*\s*<(?:[^<>]|<[^<>]*>)*>(?=\s*\()/i,
      inside: {
        'function': /^\w+/,
        'generic': {
          pattern: /<[\s\S]+/,
          alias: 'class-name',
          inside: Prism.languages.cpp
        }
      }
    }
  });
  Prism.languages.insertBefore('cpp', 'operator', {
    'double-colon': {
      pattern: /::/,
      alias: 'punctuation'
    }
  });
  Prism.languages.insertBefore('cpp', 'class-name', {
    // the base clause is an optional list of parent classes
    // https://en.cppreference.com/w/cpp/language/class
    'base-clause': {
      pattern: /(\b(?:class|struct)\s+\w+\s*:\s*)[^;{}"'\s]+(?:\s+[^;{}"'\s]+)*(?=\s*[;{])/,
      lookbehind: true,
      greedy: true,
      inside: Prism.languages.extend('cpp', {})
    }
  });
  Prism.languages.insertBefore('inside', 'double-colon', {
    // All untokenized words that are not namespaces should be class names
    'class-name': /\b[a-z_]\w*\b(?!\s*::)/i
  }, Prism.languages.cpp['base-clause']);
})(Prism);
Prism.languages.arduino = Prism.languages.extend('cpp', {
  'keyword': /\b(?:String|array|bool|boolean|break|byte|case|catch|continue|default|do|double|else|finally|for|function|goto|if|in|instanceof|int|integer|long|loop|new|null|return|setup|string|switch|throw|try|void|while|word)\b/,
  'constant': /\b(?:ANALOG_MESSAGE|DEFAULT|DIGITAL_MESSAGE|EXTERNAL|FIRMATA_STRING|HIGH|INPUT|INPUT_PULLUP|INTERNAL|INTERNAL1V1|INTERNAL2V56|LED_BUILTIN|LOW|OUTPUT|REPORT_ANALOG|REPORT_DIGITAL|SET_PIN_MODE|SYSEX_START|SYSTEM_RESET)\b/,
  'builtin': /\b(?:Audio|BSSID|Bridge|Client|Console|EEPROM|Esplora|EsploraTFT|Ethernet|EthernetClient|EthernetServer|EthernetUDP|File|FileIO|FileSystem|Firmata|GPRS|GSM|GSMBand|GSMClient|GSMModem|GSMPIN|GSMScanner|GSMServer|GSMVoiceCall|GSM_SMS|HttpClient|IPAddress|IRread|Keyboard|KeyboardController|LiquidCrystal|LiquidCrystal_I2C|Mailbox|Mouse|MouseController|PImage|Process|RSSI|RobotControl|RobotMotor|SD|SPI|SSID|Scheduler|Serial|Server|Servo|SoftwareSerial|Stepper|Stream|TFT|Task|USBHost|WiFi|WiFiClient|WiFiServer|WiFiUDP|Wire|YunClient|YunServer|abs|addParameter|analogRead|analogReadResolution|analogReference|analogWrite|analogWriteResolution|answerCall|attach|attachGPRS|attachInterrupt|attached|autoscroll|available|background|beep|begin|beginPacket|beginSD|beginSMS|beginSpeaker|beginTFT|beginTransmission|beginWrite|bit|bitClear|bitRead|bitSet|bitWrite|blink|blinkVersion|buffer|changePIN|checkPIN|checkPUK|checkReg|circle|cityNameRead|cityNameWrite|clear|clearScreen|click|close|compassRead|config|connect|connected|constrain|cos|countryNameRead|countryNameWrite|createChar|cursor|debugPrint|delay|delayMicroseconds|detach|detachInterrupt|digitalRead|digitalWrite|disconnect|display|displayLogos|drawBMP|drawCompass|encryptionType|end|endPacket|endSMS|endTransmission|endWrite|exists|exitValue|fill|find|findUntil|flush|gatewayIP|get|getAsynchronously|getBand|getButton|getCurrentCarrier|getIMEI|getKey|getModifiers|getOemKey|getPINUsed|getResult|getSignalStrength|getSocket|getVoiceCallStatus|getXChange|getYChange|hangCall|height|highByte|home|image|interrupts|isActionDone|isDirectory|isListening|isPIN|isPressed|isValid|keyPressed|keyReleased|keyboardRead|knobRead|leftToRight|line|lineFollowConfig|listen|listenOnLocalhost|loadImage|localIP|lowByte|macAddress|maintain|map|max|messageAvailable|micros|millis|min|mkdir|motorsStop|motorsWrite|mouseDragged|mouseMoved|mousePressed|mouseReleased|move|noAutoscroll|noBlink|noBuffer|noCursor|noDisplay|noFill|noInterrupts|noListenOnLocalhost|noStroke|noTone|onReceive|onRequest|open|openNextFile|overflow|parseCommand|parseFloat|parseInt|parsePacket|pauseMode|peek|pinMode|playFile|playMelody|point|pointTo|position|pow|prepare|press|print|printFirmwareVersion|printVersion|println|process|processInput|pulseIn|put|random|randomSeed|read|readAccelerometer|readBlue|readButton|readBytes|readBytesUntil|readGreen|readJoystickButton|readJoystickSwitch|readJoystickX|readJoystickY|readLightSensor|readMessage|readMicrophone|readNetworks|readRed|readSlider|readString|readStringUntil|readTemperature|ready|rect|release|releaseAll|remoteIP|remoteNumber|remotePort|remove|requestFrom|retrieveCallingNumber|rewindDirectory|rightToLeft|rmdir|robotNameRead|robotNameWrite|run|runAsynchronously|runShellCommand|runShellCommandAsynchronously|running|scanNetworks|scrollDisplayLeft|scrollDisplayRight|seek|sendAnalog|sendDigitalPortPair|sendDigitalPorts|sendString|sendSysex|serialEvent|setBand|setBitOrder|setClockDivider|setCursor|setDNS|setDataMode|setFirmwareVersion|setMode|setPINUsed|setSpeed|setTextSize|setTimeout|shiftIn|shiftOut|shutdown|sin|size|sqrt|startLoop|step|stop|stroke|subnetMask|switchPIN|tan|tempoWrite|text|tone|transfer|tuneWrite|turn|updateIR|userNameRead|userNameWrite|voiceCall|waitContinue|width|write|writeBlue|writeGreen|writeJSON|writeMessage|writeMicroseconds|writeRGB|writeRed|yield)\b/
});
Prism.languages.ino = Prism.languages.arduino;
(function (Prism) {
  // $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\n' '|'
  // + LC_ALL, RANDOM, REPLY, SECONDS.
  // + make sure PS1..4 are here as they are not always set,
  // - some useless things.
  var envVars = '\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\b';
  var commandAfterHeredoc = {
    pattern: /(^(["']?)\w+\2)[ \t]+\S.*/,
    lookbehind: true,
    alias: 'punctuation',
    // this looks reasonably well in all themes
    inside: null // see below
  };
  var insideString = {
    'bash': commandAfterHeredoc,
    'environment': {
      pattern: RegExp('\\$' + envVars),
      alias: 'constant'
    },
    'variable': [
    // [0]: Arithmetic Environment
    {
      pattern: /\$?\(\([\s\S]+?\)\)/,
      greedy: true,
      inside: {
        // If there is a $ sign at the beginning highlight $(( and )) as variable
        'variable': [{
          pattern: /(^\$\(\([\s\S]+)\)\)/,
          lookbehind: true
        }, /^\$\(\(/],
        'number': /\b0x[\dA-Fa-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee]-?\d+)?/,
        // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic
        'operator': /--|\+\+|\*\*=?|<<=?|>>=?|&&|\|\||[=!+\-*/%<>^&|]=?|[?~:]/,
        // If there is no $ sign at the beginning highlight (( and )) as punctuation
        'punctuation': /\(\(?|\)\)?|,|;/
      }
    },
    // [1]: Command Substitution
    {
      pattern: /\$\((?:\([^)]+\)|[^()])+\)|`[^`]+`/,
      greedy: true,
      inside: {
        'variable': /^\$\(|^`|\)$|`$/
      }
    },
    // [2]: Brace expansion
    {
      pattern: /\$\{[^}]+\}/,
      greedy: true,
      inside: {
        'operator': /:[-=?+]?|[!\/]|##?|%%?|\^\^?|,,?/,
        'punctuation': /[\[\]]/,
        'environment': {
          pattern: RegExp('(\\{)' + envVars),
          lookbehind: true,
          alias: 'constant'
        }
      }
    }, /\$(?:\w+|[#?*!@$])/],
    // Escape sequences from echo and printf's manuals, and escaped quotes.
    'entity': /\\(?:[abceEfnrtv\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/
  };
  Prism.languages.bash = {
    'shebang': {
      pattern: /^#!\s*\/.*/,
      alias: 'important'
    },
    'comment': {
      pattern: /(^|[^"{\\$])#.*/,
      lookbehind: true
    },
    'function-name': [
    // a) function foo {
    // b) foo() {
    // c) function foo() {
    // but not “foo {”
    {
      // a) and c)
      pattern: /(\bfunction\s+)[\w-]+(?=(?:\s*\(?:\s*\))?\s*\{)/,
      lookbehind: true,
      alias: 'function'
    }, {
      // b)
      pattern: /\b[\w-]+(?=\s*\(\s*\)\s*\{)/,
      alias: 'function'
    }],
    // Highlight variable names as variables in for and select beginnings.
    'for-or-select': {
      pattern: /(\b(?:for|select)\s+)\w+(?=\s+in\s)/,
      alias: 'variable',
      lookbehind: true
    },
    // Highlight variable names as variables in the left-hand part
    // of assignments (“=” and “+=”).
    'assign-left': {
      pattern: /(^|[\s;|&]|[<>]\()\w+(?:\.\w+)*(?=\+?=)/,
      inside: {
        'environment': {
          pattern: RegExp('(^|[\\s;|&]|[<>]\\()' + envVars),
          lookbehind: true,
          alias: 'constant'
        }
      },
      alias: 'variable',
      lookbehind: true
    },
    // Highlight parameter names as variables
    'parameter': {
      pattern: /(^|\s)-{1,2}(?:\w+:[+-]?)?\w+(?:\.\w+)*(?=[=\s]|$)/,
      alias: 'variable',
      lookbehind: true
    },
    'string': [
    // Support for Here-documents https://en.wikipedia.org/wiki/Here_document
    {
      pattern: /((?:^|[^<])<<-?\s*)(\w+)\s[\s\S]*?(?:\r?\n|\r)\2/,
      lookbehind: true,
      greedy: true,
      inside: insideString
    },
    // Here-document with quotes around the tag
    // → No expansion (so no “inside”).
    {
      pattern: /((?:^|[^<])<<-?\s*)(["'])(\w+)\2\s[\s\S]*?(?:\r?\n|\r)\3/,
      lookbehind: true,
      greedy: true,
      inside: {
        'bash': commandAfterHeredoc
      }
    },
    // “Normal” string
    {
      // https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html
      pattern: /(^|[^\\](?:\\\\)*)"(?:\\[\s\S]|\$\([^)]+\)|\$(?!\()|`[^`]+`|[^"\\`$])*"/,
      lookbehind: true,
      greedy: true,
      inside: insideString
    }, {
      // https://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html
      pattern: /(^|[^$\\])'[^']*'/,
      lookbehind: true,
      greedy: true
    }, {
      // https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html
      pattern: /\$'(?:[^'\\]|\\[\s\S])*'/,
      greedy: true,
      inside: {
        'entity': insideString.entity
      }
    }],
    'environment': {
      pattern: RegExp('\\$?' + envVars),
      alias: 'constant'
    },
    'variable': insideString.variable,
    'function': {
      pattern: /(^|[\s;|&]|[<>]\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cargo|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|java|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|sysctl|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\s;|&])/,
      lookbehind: true
    },
    'keyword': {
      pattern: /(^|[\s;|&]|[<>]\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\s;|&])/,
      lookbehind: true
    },
    // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html
    'builtin': {
      pattern: /(^|[\s;|&]|[<>]\()(?:\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\s;|&])/,
      lookbehind: true,
      // Alias added to make those easier to distinguish from strings.
      alias: 'class-name'
    },
    'boolean': {
      pattern: /(^|[\s;|&]|[<>]\()(?:false|true)(?=$|[)\s;|&])/,
      lookbehind: true
    },
    'file-descriptor': {
      pattern: /\B&\d\b/,
      alias: 'important'
    },
    'operator': {
      // Lots of redirections here, but not just that.
      pattern: /\d?<>|>\||\+=|=[=~]?|!=?|<<[<-]?|[&\d]?>>|\d[<>]&?|[<>][&=]?|&[>&]?|\|[&|]?/,
      inside: {
        'file-descriptor': {
          pattern: /^\d/,
          alias: 'important'
        }
      }
    },
    'punctuation': /\$?\(\(?|\)\)?|\.\.|[{}[\];\\]/,
    'number': {
      pattern: /(^|\s)(?:[1-9]\d*|0)(?:[.,]\d+)?\b/,
      lookbehind: true
    }
  };
  commandAfterHeredoc.inside = Prism.languages.bash;

  /* Patterns in command substitution. */
  var toBeCopied = ['comment', 'function-name', 'for-or-select', 'assign-left', 'parameter', 'string', 'environment', 'function', 'keyword', 'builtin', 'boolean', 'file-descriptor', 'operator', 'punctuation', 'number'];
  var inside = insideString.variable[1].inside;
  for (var i = 0; i < toBeCopied.length; i++) {
    inside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];
  }
  Prism.languages.sh = Prism.languages.bash;
  Prism.languages.shell = Prism.languages.bash;
})(Prism);
(function (Prism) {
  /**
   * Replaces all placeholders "<<n>>" of given pattern with the n-th replacement (zero based).
   *
   * Note: This is a simple text based replacement. Be careful when using backreferences!
   *
   * @param {string} pattern the given pattern.
   * @param {string[]} replacements a list of replacement which can be inserted into the given pattern.
   * @returns {string} the pattern with all placeholders replaced with their corresponding replacements.
   * @example replace(/a<<0>>a/.source, [/b+/.source]) === /a(?:b+)a/.source
   */
  function replace(pattern, replacements) {
    return pattern.replace(/<<(\d+)>>/g, function (m, index) {
      return '(?:' + replacements[+index] + ')';
    });
  }
  /**
   * @param {string} pattern
   * @param {string[]} replacements
   * @param {string} [flags]
   * @returns {RegExp}
   */
  function re(pattern, replacements, flags) {
    return RegExp(replace(pattern, replacements), flags || '');
  }

  /**
   * Creates a nested pattern where all occurrences of the string `<<self>>` are replaced with the pattern itself.
   *
   * @param {string} pattern
   * @param {number} depthLog2
   * @returns {string}
   */
  function nested(pattern, depthLog2) {
    for (var i = 0; i < depthLog2; i++) {
      pattern = pattern.replace(/<<self>>/g, function () {
        return '(?:' + pattern + ')';
      });
    }
    return pattern.replace(/<<self>>/g, '[^\\s\\S]');
  }

  // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/
  var keywordKinds = {
    // keywords which represent a return or variable type
    type: 'bool byte char decimal double dynamic float int long object sbyte short string uint ulong ushort var void',
    // keywords which are used to declare a type
    typeDeclaration: 'class enum interface record struct',
    // contextual keywords
    // ("var" and "dynamic" are missing because they are used like types)
    contextual: 'add alias and ascending async await by descending from(?=\\s*(?:\\w|$)) get global group into init(?=\\s*;) join let nameof not notnull on or orderby partial remove select set unmanaged value when where with(?=\\s*{)',
    // all other keywords
    other: 'abstract as base break case catch checked const continue default delegate do else event explicit extern finally fixed for foreach goto if implicit in internal is lock namespace new null operator out override params private protected public readonly ref return sealed sizeof stackalloc static switch this throw try typeof unchecked unsafe using virtual volatile while yield'
  };

  // keywords
  function keywordsToPattern(words) {
    return '\\b(?:' + words.trim().replace(/ /g, '|') + ')\\b';
  }
  var typeDeclarationKeywords = keywordsToPattern(keywordKinds.typeDeclaration);
  var keywords = RegExp(keywordsToPattern(keywordKinds.type + ' ' + keywordKinds.typeDeclaration + ' ' + keywordKinds.contextual + ' ' + keywordKinds.other));
  var nonTypeKeywords = keywordsToPattern(keywordKinds.typeDeclaration + ' ' + keywordKinds.contextual + ' ' + keywordKinds.other);
  var nonContextualKeywords = keywordsToPattern(keywordKinds.type + ' ' + keywordKinds.typeDeclaration + ' ' + keywordKinds.other);

  // types
  var generic = nested(/<(?:[^<>;=+\-*/%&|^]|<<self>>)*>/.source, 2); // the idea behind the other forbidden characters is to prevent false positives. Same for tupleElement.
  var nestedRound = nested(/\((?:[^()]|<<self>>)*\)/.source, 2);
  var name = /@?\b[A-Za-z_]\w*\b/.source;
  var genericName = replace(/<<0>>(?:\s*<<1>>)?/.source, [name, generic]);
  var identifier = replace(/(?!<<0>>)<<1>>(?:\s*\.\s*<<1>>)*/.source, [nonTypeKeywords, genericName]);
  var array = /\[\s*(?:,\s*)*\]/.source;
  var typeExpressionWithoutTuple = replace(/<<0>>(?:\s*(?:\?\s*)?<<1>>)*(?:\s*\?)?/.source, [identifier, array]);
  var tupleElement = replace(/[^,()<>[\];=+\-*/%&|^]|<<0>>|<<1>>|<<2>>/.source, [generic, nestedRound, array]);
  var tuple = replace(/\(<<0>>+(?:,<<0>>+)+\)/.source, [tupleElement]);
  var typeExpression = replace(/(?:<<0>>|<<1>>)(?:\s*(?:\?\s*)?<<2>>)*(?:\s*\?)?/.source, [tuple, identifier, array]);
  var typeInside = {
    'keyword': keywords,
    'punctuation': /[<>()?,.:[\]]/
  };

  // strings & characters
  // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#character-literals
  // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#string-literals
  var character = /'(?:[^\r\n'\\]|\\.|\\[Uux][\da-fA-F]{1,8})'/.source; // simplified pattern
  var regularString = /"(?:\\.|[^\\"\r\n])*"/.source;
  var verbatimString = /@"(?:""|\\[\s\S]|[^\\"])*"(?!")/.source;
  Prism.languages.csharp = Prism.languages.extend('clike', {
    'string': [{
      pattern: re(/(^|[^$\\])<<0>>/.source, [verbatimString]),
      lookbehind: true,
      greedy: true
    }, {
      pattern: re(/(^|[^@$\\])<<0>>/.source, [regularString]),
      lookbehind: true,
      greedy: true
    }],
    'class-name': [{
      // Using static
      // using static System.Math;
      pattern: re(/(\busing\s+static\s+)<<0>>(?=\s*;)/.source, [identifier]),
      lookbehind: true,
      inside: typeInside
    }, {
      // Using alias (type)
      // using Project = PC.MyCompany.Project;
      pattern: re(/(\busing\s+<<0>>\s*=\s*)<<1>>(?=\s*;)/.source, [name, typeExpression]),
      lookbehind: true,
      inside: typeInside
    }, {
      // Using alias (alias)
      // using Project = PC.MyCompany.Project;
      pattern: re(/(\busing\s+)<<0>>(?=\s*=)/.source, [name]),
      lookbehind: true
    }, {
      // Type declarations
      // class Foo<A, B>
      // interface Foo<out A, B>
      pattern: re(/(\b<<0>>\s+)<<1>>/.source, [typeDeclarationKeywords, genericName]),
      lookbehind: true,
      inside: typeInside
    }, {
      // Single catch exception declaration
      // catch(Foo)
      // (things like catch(Foo e) is covered by variable declaration)
      pattern: re(/(\bcatch\s*\(\s*)<<0>>/.source, [identifier]),
      lookbehind: true,
      inside: typeInside
    }, {
      // Name of the type parameter of generic constraints
      // where Foo : class
      pattern: re(/(\bwhere\s+)<<0>>/.source, [name]),
      lookbehind: true
    }, {
      // Casts and checks via as and is.
      // as Foo<A>, is Bar<B>
      // (things like if(a is Foo b) is covered by variable declaration)
      pattern: re(/(\b(?:is(?:\s+not)?|as)\s+)<<0>>/.source, [typeExpressionWithoutTuple]),
      lookbehind: true,
      inside: typeInside
    }, {
      // Variable, field and parameter declaration
      // (Foo bar, Bar baz, Foo[,,] bay, Foo<Bar, FooBar<Bar>> bax)
      pattern: re(/\b<<0>>(?=\s+(?!<<1>>|with\s*\{)<<2>>(?:\s*[=,;:{)\]]|\s+(?:in|when)\b))/.source, [typeExpression, nonContextualKeywords, name]),
      inside: typeInside
    }],
    'keyword': keywords,
    // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#literals
    'number': /(?:\b0(?:x[\da-f_]*[\da-f]|b[01_]*[01])|(?:\B\.\d+(?:_+\d+)*|\b\d+(?:_+\d+)*(?:\.\d+(?:_+\d+)*)?)(?:e[-+]?\d+(?:_+\d+)*)?)(?:[dflmu]|lu|ul)?\b/i,
    'operator': />>=?|<<=?|[-=]>|([-+&|])\1|~|\?\?=?|[-+*/%&|^!=<>]=?/,
    'punctuation': /\?\.?|::|[{}[\];(),.:]/
  });
  Prism.languages.insertBefore('csharp', 'number', {
    'range': {
      pattern: /\.\./,
      alias: 'operator'
    }
  });
  Prism.languages.insertBefore('csharp', 'punctuation', {
    'named-parameter': {
      pattern: re(/([(,]\s*)<<0>>(?=\s*:)/.source, [name]),
      lookbehind: true,
      alias: 'punctuation'
    }
  });
  Prism.languages.insertBefore('csharp', 'class-name', {
    'namespace': {
      // namespace Foo.Bar {}
      // using Foo.Bar;
      pattern: re(/(\b(?:namespace|using)\s+)<<0>>(?:\s*\.\s*<<0>>)*(?=\s*[;{])/.source, [name]),
      lookbehind: true,
      inside: {
        'punctuation': /\./
      }
    },
    'type-expression': {
      // default(Foo), typeof(Foo<Bar>), sizeof(int)
      pattern: re(/(\b(?:default|sizeof|typeof)\s*\(\s*(?!\s))(?:[^()\s]|\s(?!\s)|<<0>>)*(?=\s*\))/.source, [nestedRound]),
      lookbehind: true,
      alias: 'class-name',
      inside: typeInside
    },
    'return-type': {
      // Foo<Bar> ForBar(); Foo IFoo.Bar() => 0
      // int this[int index] => 0; T IReadOnlyList<T>.this[int index] => this[index];
      // int Foo => 0; int Foo { get; set } = 0;
      pattern: re(/<<0>>(?=\s+(?:<<1>>\s*(?:=>|[({]|\.\s*this\s*\[)|this\s*\[))/.source, [typeExpression, identifier]),
      inside: typeInside,
      alias: 'class-name'
    },
    'constructor-invocation': {
      // new List<Foo<Bar[]>> { }
      pattern: re(/(\bnew\s+)<<0>>(?=\s*[[({])/.source, [typeExpression]),
      lookbehind: true,
      inside: typeInside,
      alias: 'class-name'
    },
    /*'explicit-implementation': {
    	// int IFoo<Foo>.Bar => 0; void IFoo<Foo<Foo>>.Foo<T>();
    	pattern: replace(/\b<<0>>(?=\.<<1>>)/, className, methodOrPropertyDeclaration),
    	inside: classNameInside,
    	alias: 'class-name'
    },*/
    'generic-method': {
      // foo<Bar>()
      pattern: re(/<<0>>\s*<<1>>(?=\s*\()/.source, [name, generic]),
      inside: {
        'function': re(/^<<0>>/.source, [name]),
        'generic': {
          pattern: RegExp(generic),
          alias: 'class-name',
          inside: typeInside
        }
      }
    },
    'type-list': {
      // The list of types inherited or of generic constraints
      // class Foo<F> : Bar, IList<FooBar>
      // where F : Bar, IList<int>
      pattern: re(/\b((?:<<0>>\s+<<1>>|record\s+<<1>>\s*<<5>>|where\s+<<2>>)\s*:\s*)(?:<<3>>|<<4>>|<<1>>\s*<<5>>|<<6>>)(?:\s*,\s*(?:<<3>>|<<4>>|<<6>>))*(?=\s*(?:where|[{;]|=>|$))/.source, [typeDeclarationKeywords, genericName, name, typeExpression, keywords.source, nestedRound, /\bnew\s*\(\s*\)/.source]),
      lookbehind: true,
      inside: {
        'record-arguments': {
          pattern: re(/(^(?!new\s*\()<<0>>\s*)<<1>>/.source, [genericName, nestedRound]),
          lookbehind: true,
          greedy: true,
          inside: Prism.languages.csharp
        },
        'keyword': keywords,
        'class-name': {
          pattern: RegExp(typeExpression),
          greedy: true,
          inside: typeInside
        },
        'punctuation': /[,()]/
      }
    },
    'preprocessor': {
      pattern: /(^[\t ]*)#.*/m,
      lookbehind: true,
      alias: 'property',
      inside: {
        // highlight preprocessor directives as keywords
        'directive': {
          pattern: /(#)\b(?:define|elif|else|endif|endregion|error|if|line|nullable|pragma|region|undef|warning)\b/,
          lookbehind: true,
          alias: 'keyword'
        }
      }
    }
  });

  // attributes
  var regularStringOrCharacter = regularString + '|' + character;
  var regularStringCharacterOrComment = replace(/\/(?![*/])|\/\/[^\r\n]*[\r\n]|\/\*(?:[^*]|\*(?!\/))*\*\/|<<0>>/.source, [regularStringOrCharacter]);
  var roundExpression = nested(replace(/[^"'/()]|<<0>>|\(<<self>>*\)/.source, [regularStringCharacterOrComment]), 2);

  // https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/#attribute-targets
  var attrTarget = /\b(?:assembly|event|field|method|module|param|property|return|type)\b/.source;
  var attr = replace(/<<0>>(?:\s*\(<<1>>*\))?/.source, [identifier, roundExpression]);
  Prism.languages.insertBefore('csharp', 'class-name', {
    'attribute': {
      // Attributes
      // [Foo], [Foo(1), Bar(2, Prop = "foo")], [return: Foo(1), Bar(2)], [assembly: Foo(Bar)]
      pattern: re(/((?:^|[^\s\w>)?])\s*\[\s*)(?:<<0>>\s*:\s*)?<<1>>(?:\s*,\s*<<1>>)*(?=\s*\])/.source, [attrTarget, attr]),
      lookbehind: true,
      greedy: true,
      inside: {
        'target': {
          pattern: re(/^<<0>>(?=\s*:)/.source, [attrTarget]),
          alias: 'keyword'
        },
        'attribute-arguments': {
          pattern: re(/\(<<0>>*\)/.source, [roundExpression]),
          inside: Prism.languages.csharp
        },
        'class-name': {
          pattern: RegExp(identifier),
          inside: {
            'punctuation': /\./
          }
        },
        'punctuation': /[:,]/
      }
    }
  });

  // string interpolation
  var formatString = /:[^}\r\n]+/.source;
  // multi line
  var mInterpolationRound = nested(replace(/[^"'/()]|<<0>>|\(<<self>>*\)/.source, [regularStringCharacterOrComment]), 2);
  var mInterpolation = replace(/\{(?!\{)(?:(?![}:])<<0>>)*<<1>>?\}/.source, [mInterpolationRound, formatString]);
  // single line
  var sInterpolationRound = nested(replace(/[^"'/()]|\/(?!\*)|\/\*(?:[^*]|\*(?!\/))*\*\/|<<0>>|\(<<self>>*\)/.source, [regularStringOrCharacter]), 2);
  var sInterpolation = replace(/\{(?!\{)(?:(?![}:])<<0>>)*<<1>>?\}/.source, [sInterpolationRound, formatString]);
  function createInterpolationInside(interpolation, interpolationRound) {
    return {
      'interpolation': {
        pattern: re(/((?:^|[^{])(?:\{\{)*)<<0>>/.source, [interpolation]),
        lookbehind: true,
        inside: {
          'format-string': {
            pattern: re(/(^\{(?:(?![}:])<<0>>)*)<<1>>(?=\}$)/.source, [interpolationRound, formatString]),
            lookbehind: true,
            inside: {
              'punctuation': /^:/
            }
          },
          'punctuation': /^\{|\}$/,
          'expression': {
            pattern: /[\s\S]+/,
            alias: 'language-csharp',
            inside: Prism.languages.csharp
          }
        }
      },
      'string': /[\s\S]+/
    };
  }
  Prism.languages.insertBefore('csharp', 'string', {
    'interpolation-string': [{
      pattern: re(/(^|[^\\])(?:\$@|@\$)"(?:""|\\[\s\S]|\{\{|<<0>>|[^\\{"])*"/.source, [mInterpolation]),
      lookbehind: true,
      greedy: true,
      inside: createInterpolationInside(mInterpolation, mInterpolationRound)
    }, {
      pattern: re(/(^|[^@\\])\$"(?:\\.|\{\{|<<0>>|[^\\"{])*"/.source, [sInterpolation]),
      lookbehind: true,
      greedy: true,
      inside: createInterpolationInside(sInterpolation, sInterpolationRound)
    }],
    'char': {
      pattern: RegExp(character),
      greedy: true
    }
  });
  Prism.languages.dotnet = Prism.languages.cs = Prism.languages.csharp;
})(Prism);
Prism.languages.markup = {
  'comment': {
    pattern: /<!--(?:(?!<!--)[\s\S])*?-->/,
    greedy: true
  },
  'prolog': {
    pattern: /<\?[\s\S]+?\?>/,
    greedy: true
  },
  'doctype': {
    // https://www.w3.org/TR/xml/#NT-doctypedecl
    pattern: /<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,
    greedy: true,
    inside: {
      'internal-subset': {
        pattern: /(^[^\[]*\[)[\s\S]+(?=\]>$)/,
        lookbehind: true,
        greedy: true,
        inside: null // see below
      },
      'string': {
        pattern: /"[^"]*"|'[^']*'/,
        greedy: true
      },
      'punctuation': /^<!|>$|[[\]]/,
      'doctype-tag': /^DOCTYPE/i,
      'name': /[^\s<>'"]+/
    }
  },
  'cdata': {
    pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
    greedy: true
  },
  'tag': {
    pattern: /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,
    greedy: true,
    inside: {
      'tag': {
        pattern: /^<\/?[^\s>\/]+/,
        inside: {
          'punctuation': /^<\/?/,
          'namespace': /^[^\s>\/:]+:/
        }
      },
      'special-attr': [],
      'attr-value': {
        pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,
        inside: {
          'punctuation': [{
            pattern: /^=/,
            alias: 'attr-equals'
          }, {
            pattern: /^(\s*)["']|["']$/,
            lookbehind: true
          }]
        }
      },
      'punctuation': /\/?>/,
      'attr-name': {
        pattern: /[^\s>\/]+/,
        inside: {
          'namespace': /^[^\s>\/:]+:/
        }
      }
    }
  },
  'entity': [{
    pattern: /&[\da-z]{1,8};/i,
    alias: 'named-entity'
  }, /&#x?[\da-f]{1,8};/i]
};
Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] = Prism.languages.markup['entity'];
Prism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;

// Plugin to make entity title show the real entity, idea by Roman Komarov
Prism.hooks.add('wrap', function (env) {
  if (env.type === 'entity') {
    env.attributes['title'] = env.content.replace(/&amp;/, '&');
  }
});
Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {
  /**
   * Adds an inlined language to markup.
   *
   * An example of an inlined language is CSS with `<style>` tags.
   *
   * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as
   * case insensitive.
   * @param {string} lang The language key.
   * @example
   * addInlined('style', 'css');
   */
  value: function addInlined(tagName, lang) {
    var includedCdataInside = {};
    includedCdataInside['language-' + lang] = {
      pattern: /(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,
      lookbehind: true,
      inside: Prism.languages[lang]
    };
    includedCdataInside['cdata'] = /^<!\[CDATA\[|\]\]>$/i;
    var inside = {
      'included-cdata': {
        pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
        inside: includedCdataInside
      }
    };
    inside['language-' + lang] = {
      pattern: /[\s\S]+/,
      inside: Prism.languages[lang]
    };
    var def = {};
    def[tagName] = {
      pattern: RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g, function () {
        return tagName;
      }), 'i'),
      lookbehind: true,
      greedy: true,
      inside: inside
    };
    Prism.languages.insertBefore('markup', 'cdata', def);
  }
});
Object.defineProperty(Prism.languages.markup.tag, 'addAttribute', {
  /**
   * Adds an pattern to highlight languages embedded in HTML attributes.
   *
   * An example of an inlined language is CSS with `style` attributes.
   *
   * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as
   * case insensitive.
   * @param {string} lang The language key.
   * @example
   * addAttribute('style', 'css');
   */
  value: function (attrName, lang) {
    Prism.languages.markup.tag.inside['special-attr'].push({
      pattern: RegExp(/(^|["'\s])/.source + '(?:' + attrName + ')' + /\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source, 'i'),
      lookbehind: true,
      inside: {
        'attr-name': /^[^\s=]+/,
        'attr-value': {
          pattern: /=[\s\S]+/,
          inside: {
            'value': {
              pattern: /(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,
              lookbehind: true,
              alias: [lang, 'language-' + lang],
              inside: Prism.languages[lang]
            },
            'punctuation': [{
              pattern: /^=/,
              alias: 'attr-equals'
            }, /"|'/]
          }
        }
      }
    });
  }
});
Prism.languages.html = Prism.languages.markup;
Prism.languages.mathml = Prism.languages.markup;
Prism.languages.svg = Prism.languages.markup;
Prism.languages.xml = Prism.languages.extend('markup', {});
Prism.languages.ssml = Prism.languages.xml;
Prism.languages.atom = Prism.languages.xml;
Prism.languages.rss = Prism.languages.xml;
(function (Prism) {
  var string = /(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;
  Prism.languages.css = {
    'comment': /\/\*[\s\S]*?\*\//,
    'atrule': {
      pattern: RegExp('@[\\w-](?:' + /[^;{\s"']|\s+(?!\s)/.source + '|' + string.source + ')*?' + /(?:;|(?=\s*\{))/.source),
      inside: {
        'rule': /^@[\w-]+/,
        'selector-function-argument': {
          pattern: /(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,
          lookbehind: true,
          alias: 'selector'
        },
        'keyword': {
          pattern: /(^|[^\w-])(?:and|not|only|or)(?![\w-])/,
          lookbehind: true
        }
        // See rest below
      }
    },
    'url': {
      // https://drafts.csswg.org/css-values-3/#urls
      pattern: RegExp('\\burl\\((?:' + string.source + '|' + /(?:[^\\\r\n()"']|\\[\s\S])*/.source + ')\\)', 'i'),
      greedy: true,
      inside: {
        'function': /^url/i,
        'punctuation': /^\(|\)$/,
        'string': {
          pattern: RegExp('^' + string.source + '$'),
          alias: 'url'
        }
      }
    },
    'selector': {
      pattern: RegExp('(^|[{}\\s])[^{}\\s](?:[^{};"\'\\s]|\\s+(?![\\s{])|' + string.source + ')*(?=\\s*\\{)'),
      lookbehind: true
    },
    'string': {
      pattern: string,
      greedy: true
    },
    'property': {
      pattern: /(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,
      lookbehind: true
    },
    'important': /!important\b/i,
    'function': {
      pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i,
      lookbehind: true
    },
    'punctuation': /[(){};:,]/
  };
  Prism.languages.css['atrule'].inside.rest = Prism.languages.css;
  var markup = Prism.languages.markup;
  if (markup) {
    markup.tag.addInlined('style', 'css');
    markup.tag.addAttribute('style', 'css');
  }
})(Prism);
(function (Prism) {
  Prism.languages.diff = {
    'coord': [
    // Match all kinds of coord lines (prefixed by "+++", "---" or "***").
    /^(?:\*{3}|-{3}|\+{3}).*$/m,
    // Match "@@ ... @@" coord lines in unified diff.
    /^@@.*@@$/m,
    // Match coord lines in normal diff (starts with a number).
    /^\d.*$/m]

    // deleted, inserted, unchanged, diff
  };

  /**
   * A map from the name of a block to its line prefix.
   *
   * @type {Object<string, string>}
   */
  var PREFIXES = {
    'deleted-sign': '-',
    'deleted-arrow': '<',
    'inserted-sign': '+',
    'inserted-arrow': '>',
    'unchanged': ' ',
    'diff': '!'
  };

  // add a token for each prefix
  Object.keys(PREFIXES).forEach(function (name) {
    var prefix = PREFIXES[name];
    var alias = [];
    if (!/^\w+$/.test(name)) {
      // "deleted-sign" -> "deleted"
      alias.push(/\w+/.exec(name)[0]);
    }
    if (name === 'diff') {
      alias.push('bold');
    }
    Prism.languages.diff[name] = {
      pattern: RegExp('^(?:[' + prefix + '].*(?:\r\n?|\n|(?![\\s\\S])))+', 'm'),
      alias: alias,
      inside: {
        'line': {
          pattern: /(.)(?=[\s\S]).*(?:\r\n?|\n)?/,
          lookbehind: true
        },
        'prefix': {
          pattern: /[\s\S]/,
          alias: /\w+/.exec(name)[0]
        }
      }
    };
  });

  // make prefixes available to Diff plugin
  Object.defineProperty(Prism.languages.diff, 'PREFIXES', {
    value: PREFIXES
  });
})(Prism);
Prism.languages.go = Prism.languages.extend('clike', {
  'string': {
    pattern: /(^|[^\\])"(?:\\.|[^"\\\r\n])*"|`[^`]*`/,
    lookbehind: true,
    greedy: true
  },
  'keyword': /\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\b/,
  'boolean': /\b(?:_|false|iota|nil|true)\b/,
  'number': [
  // binary and octal integers
  /\b0(?:b[01_]+|o[0-7_]+)i?\b/i,
  // hexadecimal integers and floats
  /\b0x(?:[a-f\d_]+(?:\.[a-f\d_]*)?|\.[a-f\d_]+)(?:p[+-]?\d+(?:_\d+)*)?i?(?!\w)/i,
  // decimal integers and floats
  /(?:\b\d[\d_]*(?:\.[\d_]*)?|\B\.\d[\d_]*)(?:e[+-]?[\d_]+)?i?(?!\w)/i],
  'operator': /[*\/%^!=]=?|\+[=+]?|-[=-]?|\|[=|]?|&(?:=|&|\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\.\.\./,
  'builtin': /\b(?:append|bool|byte|cap|close|complex|complex(?:64|128)|copy|delete|error|float(?:32|64)|u?int(?:8|16|32|64)?|imag|len|make|new|panic|print(?:ln)?|real|recover|rune|string|uintptr)\b/
});
Prism.languages.insertBefore('go', 'string', {
  'char': {
    pattern: /'(?:\\.|[^'\\\r\n]){0,10}'/,
    greedy: true
  }
});
delete Prism.languages.go['class-name'];
Prism.languages.ini = {
  /**
   * The component mimics the behavior of the Win32 API parser.
   *
   * @see {@link https://github.com/PrismJS/prism/issues/2775#issuecomment-787477723}
   */

  'comment': {
    pattern: /(^[ \f\t\v]*)[#;][^\n\r]*/m,
    lookbehind: true
  },
  'section': {
    pattern: /(^[ \f\t\v]*)\[[^\n\r\]]*\]?/m,
    lookbehind: true,
    inside: {
      'section-name': {
        pattern: /(^\[[ \f\t\v]*)[^ \f\t\v\]]+(?:[ \f\t\v]+[^ \f\t\v\]]+)*/,
        lookbehind: true,
        alias: 'selector'
      },
      'punctuation': /\[|\]/
    }
  },
  'key': {
    pattern: /(^[ \f\t\v]*)[^ \f\n\r\t\v=]+(?:[ \f\t\v]+[^ \f\n\r\t\v=]+)*(?=[ \f\t\v]*=)/m,
    lookbehind: true,
    alias: 'attr-name'
  },
  'value': {
    pattern: /(=[ \f\t\v]*)[^ \f\n\r\t\v]+(?:[ \f\t\v]+[^ \f\n\r\t\v]+)*/,
    lookbehind: true,
    alias: 'attr-value',
    inside: {
      'inner-value': {
        pattern: /^("|').+(?=\1$)/,
        lookbehind: true
      }
    }
  },
  'punctuation': /=/
};
(function (Prism) {
  var keywords = /\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record(?!\s*[(){}[\]<>=%~.:,;?+\-*/&|^])|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\b/;

  // full package (optional) + parent classes (optional)
  var classNamePrefix = /(?:[a-z]\w*\s*\.\s*)*(?:[A-Z]\w*\s*\.\s*)*/.source;

  // based on the java naming conventions
  var className = {
    pattern: RegExp(/(^|[^\w.])/.source + classNamePrefix + /[A-Z](?:[\d_A-Z]*[a-z]\w*)?\b/.source),
    lookbehind: true,
    inside: {
      'namespace': {
        pattern: /^[a-z]\w*(?:\s*\.\s*[a-z]\w*)*(?:\s*\.)?/,
        inside: {
          'punctuation': /\./
        }
      },
      'punctuation': /\./
    }
  };
  Prism.languages.java = Prism.languages.extend('clike', {
    'string': {
      pattern: /(^|[^\\])"(?:\\.|[^"\\\r\n])*"/,
      lookbehind: true,
      greedy: true
    },
    'class-name': [className, {
      // variables, parameters, and constructor references
      // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)
      pattern: RegExp(/(^|[^\w.])/.source + classNamePrefix + /[A-Z]\w*(?=\s+\w+\s*[;,=()]|\s*(?:\[[\s,]*\]\s*)?::\s*new\b)/.source),
      lookbehind: true,
      inside: className.inside
    }, {
      // class names based on keyword
      // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)
      pattern: RegExp(/(\b(?:class|enum|extends|implements|instanceof|interface|new|record|throws)\s+)/.source + classNamePrefix + /[A-Z]\w*\b/.source),
      lookbehind: true,
      inside: className.inside
    }],
    'keyword': keywords,
    'function': [Prism.languages.clike.function, {
      pattern: /(::\s*)[a-z_]\w*/,
      lookbehind: true
    }],
    'number': /\b0b[01][01_]*L?\b|\b0x(?:\.[\da-f_p+-]+|[\da-f_]+(?:\.[\da-f_p+-]+)?)\b|(?:\b\d[\d_]*(?:\.[\d_]*)?|\B\.\d[\d_]*)(?:e[+-]?\d[\d_]*)?[dfl]?/i,
    'operator': {
      pattern: /(^|[^.])(?:<<=?|>>>?=?|->|--|\+\+|&&|\|\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,
      lookbehind: true
    },
    'constant': /\b[A-Z][A-Z_\d]+\b/
  });
  Prism.languages.insertBefore('java', 'string', {
    'triple-quoted-string': {
      // http://openjdk.java.net/jeps/355#Description
      pattern: /"""[ \t]*[\r\n](?:(?:"|"")?(?:\\.|[^"\\]))*"""/,
      greedy: true,
      alias: 'string'
    },
    'char': {
      pattern: /'(?:\\.|[^'\\\r\n]){1,6}'/,
      greedy: true
    }
  });
  Prism.languages.insertBefore('java', 'class-name', {
    'annotation': {
      pattern: /(^|[^.])@\w+(?:\s*\.\s*\w+)*/,
      lookbehind: true,
      alias: 'punctuation'
    },
    'generics': {
      pattern: /<(?:[\w\s,.?]|&(?!&)|<(?:[\w\s,.?]|&(?!&)|<(?:[\w\s,.?]|&(?!&)|<(?:[\w\s,.?]|&(?!&))*>)*>)*>)*>/,
      inside: {
        'class-name': className,
        'keyword': keywords,
        'punctuation': /[<>(),.:]/,
        'operator': /[?&|]/
      }
    },
    'import': [{
      pattern: RegExp(/(\bimport\s+)/.source + classNamePrefix + /(?:[A-Z]\w*|\*)(?=\s*;)/.source),
      lookbehind: true,
      inside: {
        'namespace': className.inside.namespace,
        'punctuation': /\./,
        'operator': /\*/,
        'class-name': /\w+/
      }
    }, {
      pattern: RegExp(/(\bimport\s+static\s+)/.source + classNamePrefix + /(?:\w+|\*)(?=\s*;)/.source),
      lookbehind: true,
      alias: 'static',
      inside: {
        'namespace': className.inside.namespace,
        'static': /\b\w+$/,
        'punctuation': /\./,
        'operator': /\*/,
        'class-name': /\w+/
      }
    }],
    'namespace': {
      pattern: RegExp(/(\b(?:exports|import(?:\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\s+)(?!<keyword>)[a-z]\w*(?:\.[a-z]\w*)*\.?/.source.replace(/<keyword>/g, function () {
        return keywords.source;
      })),
      lookbehind: true,
      inside: {
        'punctuation': /\./
      }
    }
  });
})(Prism);
(function (Prism) {
  var specialEscape = {
    pattern: /\\[\\(){}[\]^$+*?|.]/,
    alias: 'escape'
  };
  var escape = /\\(?:x[\da-fA-F]{2}|u[\da-fA-F]{4}|u\{[\da-fA-F]+\}|0[0-7]{0,2}|[123][0-7]{2}|c[a-zA-Z]|.)/;
  var charSet = {
    pattern: /\.|\\[wsd]|\\p\{[^{}]+\}/i,
    alias: 'class-name'
  };
  var charSetWithoutDot = {
    pattern: /\\[wsd]|\\p\{[^{}]+\}/i,
    alias: 'class-name'
  };
  var rangeChar = '(?:[^\\\\-]|' + escape.source + ')';
  var range = RegExp(rangeChar + '-' + rangeChar);

  // the name of a capturing group
  var groupName = {
    pattern: /(<|')[^<>']+(?=[>']$)/,
    lookbehind: true,
    alias: 'variable'
  };
  Prism.languages.regex = {
    'char-class': {
      pattern: /((?:^|[^\\])(?:\\\\)*)\[(?:[^\\\]]|\\[\s\S])*\]/,
      lookbehind: true,
      inside: {
        'char-class-negation': {
          pattern: /(^\[)\^/,
          lookbehind: true,
          alias: 'operator'
        },
        'char-class-punctuation': {
          pattern: /^\[|\]$/,
          alias: 'punctuation'
        },
        'range': {
          pattern: range,
          inside: {
            'escape': escape,
            'range-punctuation': {
              pattern: /-/,
              alias: 'operator'
            }
          }
        },
        'special-escape': specialEscape,
        'char-set': charSetWithoutDot,
        'escape': escape
      }
    },
    'special-escape': specialEscape,
    'char-set': charSet,
    'backreference': [{
      // a backreference which is not an octal escape
      pattern: /\\(?![123][0-7]{2})[1-9]/,
      alias: 'keyword'
    }, {
      pattern: /\\k<[^<>']+>/,
      alias: 'keyword',
      inside: {
        'group-name': groupName
      }
    }],
    'anchor': {
      pattern: /[$^]|\\[ABbGZz]/,
      alias: 'function'
    },
    'escape': escape,
    'group': [{
      // https://docs.oracle.com/javase/10/docs/api/java/util/regex/Pattern.html
      // https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?view=netframework-4.7.2#grouping-constructs

      // (), (?<name>), (?'name'), (?>), (?:), (?=), (?!), (?<=), (?<!), (?is-m), (?i-m:)
      pattern: /\((?:\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,
      alias: 'punctuation',
      inside: {
        'group-name': groupName
      }
    }, {
      pattern: /\)/,
      alias: 'punctuation'
    }],
    'quantifier': {
      pattern: /(?:[+*?]|\{\d+(?:,\d*)?\})[?+]?/,
      alias: 'number'
    },
    'alternation': {
      pattern: /\|/,
      alias: 'keyword'
    }
  };
})(Prism);
Prism.languages.javascript = Prism.languages.extend('clike', {
  'class-name': [Prism.languages.clike['class-name'], {
    pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:constructor|prototype))/,
    lookbehind: true
  }],
  'keyword': [{
    pattern: /((?:^|\})\s*)catch\b/,
    lookbehind: true
  }, {
    pattern: /(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,
    lookbehind: true
  }],
  // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)
  'function': /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,
  'number': {
    pattern: RegExp(/(^|[^\w$])/.source + '(?:' + (
    // constant
    /NaN|Infinity/.source + '|' +
    // binary integer
    /0[bB][01]+(?:_[01]+)*n?/.source + '|' +
    // octal integer
    /0[oO][0-7]+(?:_[0-7]+)*n?/.source + '|' +
    // hexadecimal integer
    /0[xX][\dA-Fa-f]+(?:_[\dA-Fa-f]+)*n?/.source + '|' +
    // decimal bigint
    /\d+(?:_\d+)*n/.source + '|' +
    // decimal number (integer or float) but no bigint
    /(?:\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[Ee][+-]?\d+(?:_\d+)*)?/.source) + ')' + /(?![\w$])/.source),
    lookbehind: true
  },
  'operator': /--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/
});
Prism.languages.javascript['class-name'][0].pattern = /(\b(?:class|extends|implements|instanceof|interface|new)\s+)[\w.\\]+/;
Prism.languages.insertBefore('javascript', 'keyword', {
  'regex': {
    pattern: RegExp(
    // lookbehind
    // eslint-disable-next-line regexp/no-dupe-characters-character-class
    /((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)/.source +
    // Regex pattern:
    // There are 2 regex patterns here. The RegExp set notation proposal added support for nested character
    // classes if the `v` flag is present. Unfortunately, nested CCs are both context-free and incompatible
    // with the only syntax, so we have to define 2 different regex patterns.
    /\//.source + '(?:' + /(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}/.source + '|' +
    // `v` flag syntax. This supports 3 levels of nested character classes.
    /(?:\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.)*\])*\])*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}v[dgimyus]{0,7}/.source + ')' +
    // lookahead
    /(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/.source),
    lookbehind: true,
    greedy: true,
    inside: {
      'regex-source': {
        pattern: /^(\/)[\s\S]+(?=\/[a-z]*$)/,
        lookbehind: true,
        alias: 'language-regex',
        inside: Prism.languages.regex
      },
      'regex-delimiter': /^\/|\/$/,
      'regex-flags': /^[a-z]+$/
    }
  },
  // This must be declared before keyword because we use "function" inside the look-forward
  'function-variable': {
    pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,
    alias: 'function'
  },
  'parameter': [{
    pattern: /(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,
    lookbehind: true,
    inside: Prism.languages.javascript
  }, {
    pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,
    lookbehind: true,
    inside: Prism.languages.javascript
  }, {
    pattern: /(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,
    lookbehind: true,
    inside: Prism.languages.javascript
  }, {
    pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,
    lookbehind: true,
    inside: Prism.languages.javascript
  }],
  'constant': /\b[A-Z](?:[A-Z_]|\dx?)*\b/
});
Prism.languages.insertBefore('javascript', 'string', {
  'hashbang': {
    pattern: /^#!.*/,
    greedy: true,
    alias: 'comment'
  },
  'template-string': {
    pattern: /`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,
    greedy: true,
    inside: {
      'template-punctuation': {
        pattern: /^`|`$/,
        alias: 'string'
      },
      'interpolation': {
        pattern: /((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,
        lookbehind: true,
        inside: {
          'interpolation-punctuation': {
            pattern: /^\$\{|\}$/,
            alias: 'punctuation'
          },
          rest: Prism.languages.javascript
        }
      },
      'string': /[\s\S]+/
    }
  },
  'string-property': {
    pattern: /((?:^|[,{])[ \t]*)(["'])(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2(?=\s*:)/m,
    lookbehind: true,
    greedy: true,
    alias: 'property'
  }
});
Prism.languages.insertBefore('javascript', 'operator', {
  'literal-property': {
    pattern: /((?:^|[,{])[ \t]*)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/m,
    lookbehind: true,
    alias: 'property'
  }
});
if (Prism.languages.markup) {
  Prism.languages.markup.tag.addInlined('script', 'javascript');

  // add attribute support for all DOM events.
  // https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events
  Prism.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source, 'javascript');
}
Prism.languages.js = Prism.languages.javascript;
(function (Prism) {
  var javascript = Prism.util.clone(Prism.languages.javascript);
  var space = /(?:\s|\/\/.*(?!.)|\/\*(?:[^*]|\*(?!\/))\*\/)/.source;
  var braces = /(?:\{(?:\{(?:\{[^{}]*\}|[^{}])*\}|[^{}])*\})/.source;
  var spread = /(?:\{<S>*\.{3}(?:[^{}]|<BRACES>)*\})/.source;

  /**
   * @param {string} source
   * @param {string} [flags]
   */
  function re(source, flags) {
    source = source.replace(/<S>/g, function () {
      return space;
    }).replace(/<BRACES>/g, function () {
      return braces;
    }).replace(/<SPREAD>/g, function () {
      return spread;
    });
    return RegExp(source, flags);
  }
  spread = re(spread).source;
  Prism.languages.jsx = Prism.languages.extend('markup', javascript);
  Prism.languages.jsx.tag.pattern = re(/<\/?(?:[\w.:-]+(?:<S>+(?:[\w.:$-]+(?:=(?:"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*'|[^\s{'"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\/?)?>/.source);
  Prism.languages.jsx.tag.inside['tag'].pattern = /^<\/?[^\s>\/]*/;
  Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\{)(?:"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*'|[^\s'">]+)/;
  Prism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\w*(?:\.[A-Z]\w*)*$/;
  Prism.languages.jsx.tag.inside['comment'] = javascript['comment'];
  Prism.languages.insertBefore('inside', 'attr-name', {
    'spread': {
      pattern: re(/<SPREAD>/.source),
      inside: Prism.languages.jsx
    }
  }, Prism.languages.jsx.tag);
  Prism.languages.insertBefore('inside', 'special-attr', {
    'script': {
      // Allow for two levels of nesting
      pattern: re(/=<BRACES>/.source),
      alias: 'language-javascript',
      inside: {
        'script-punctuation': {
          pattern: /^=(?=\{)/,
          alias: 'punctuation'
        },
        rest: Prism.languages.jsx
      }
    }
  }, Prism.languages.jsx.tag);

  // The following will handle plain text inside tags
  var stringifyToken = function (token) {
    if (!token) {
      return '';
    }
    if (typeof token === 'string') {
      return token;
    }
    if (typeof token.content === 'string') {
      return token.content;
    }
    return token.content.map(stringifyToken).join('');
  };
  var walkTokens = function (tokens) {
    var openedTags = [];
    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];
      var notTagNorBrace = false;
      if (typeof token !== 'string') {
        if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {
          // We found a tag, now find its kind

          if (token.content[0].content[0].content === '</') {
            // Closing tag
            if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {
              // Pop matching opening tag
              openedTags.pop();
            }
          } else {
            if (token.content[token.content.length - 1].content === '/>') ; else {
              // Opening tag
              openedTags.push({
                tagName: stringifyToken(token.content[0].content[1]),
                openedBraces: 0
              });
            }
          }
        } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {
          // Here we might have entered a JSX context inside a tag
          openedTags[openedTags.length - 1].openedBraces++;
        } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {
          // Here we might have left a JSX context inside a tag
          openedTags[openedTags.length - 1].openedBraces--;
        } else {
          notTagNorBrace = true;
        }
      }
      if (notTagNorBrace || typeof token === 'string') {
        if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {
          // Here we are inside a tag, and not inside a JSX context.
          // That's plain text: drop any tokens matched.
          var plainText = stringifyToken(token);

          // And merge text with adjacent text
          if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {
            plainText += stringifyToken(tokens[i + 1]);
            tokens.splice(i + 1, 1);
          }
          if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {
            plainText = stringifyToken(tokens[i - 1]) + plainText;
            tokens.splice(i - 1, 1);
            i--;
          }
          tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);
        }
      }
      if (token.content && typeof token.content !== 'string') {
        walkTokens(token.content);
      }
    }
  };
  Prism.hooks.add('after-tokenize', function (env) {
    if (env.language !== 'jsx' && env.language !== 'tsx') {
      return;
    }
    walkTokens(env.tokens);
  });
})(Prism);

// https://www.json.org/json-en.html
Prism.languages.json = {
  'property': {
    pattern: /(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?=\s*:)/,
    lookbehind: true,
    greedy: true
  },
  'string': {
    pattern: /(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?!\s*:)/,
    lookbehind: true,
    greedy: true
  },
  'comment': {
    pattern: /\/\/.*|\/\*[\s\S]*?(?:\*\/|$)/,
    greedy: true
  },
  'number': /-?\b\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,
  'punctuation': /[{}[\],]/,
  'operator': /:/,
  'boolean': /\b(?:false|true)\b/,
  'null': {
    pattern: /\bnull\b/,
    alias: 'keyword'
  }
};
Prism.languages.webmanifest = Prism.languages.json;
(function (Prism) {
  Prism.languages.kotlin = Prism.languages.extend('clike', {
    'keyword': {
      // The lookbehind prevents wrong highlighting of e.g. kotlin.properties.get
      pattern: /(^|[^.])\b(?:abstract|actual|annotation|as|break|by|catch|class|companion|const|constructor|continue|crossinline|data|do|dynamic|else|enum|expect|external|final|finally|for|fun|get|if|import|in|infix|init|inline|inner|interface|internal|is|lateinit|noinline|null|object|open|operator|out|override|package|private|protected|public|reified|return|sealed|set|super|suspend|tailrec|this|throw|to|try|typealias|val|var|vararg|when|where|while)\b/,
      lookbehind: true
    },
    'function': [{
      pattern: /(?:`[^\r\n`]+`|\b\w+)(?=\s*\()/,
      greedy: true
    }, {
      pattern: /(\.)(?:`[^\r\n`]+`|\w+)(?=\s*\{)/,
      lookbehind: true,
      greedy: true
    }],
    'number': /\b(?:0[xX][\da-fA-F]+(?:_[\da-fA-F]+)*|0[bB][01]+(?:_[01]+)*|\d+(?:_\d+)*(?:\.\d+(?:_\d+)*)?(?:[eE][+-]?\d+(?:_\d+)*)?[fFL]?)\b/,
    'operator': /\+[+=]?|-[-=>]?|==?=?|!(?:!|==?)?|[\/*%<>]=?|[?:]:?|\.\.|&&|\|\||\b(?:and|inv|or|shl|shr|ushr|xor)\b/
  });
  delete Prism.languages.kotlin['class-name'];
  var interpolationInside = {
    'interpolation-punctuation': {
      pattern: /^\$\{?|\}$/,
      alias: 'punctuation'
    },
    'expression': {
      pattern: /[\s\S]+/,
      inside: Prism.languages.kotlin
    }
  };
  Prism.languages.insertBefore('kotlin', 'string', {
    // https://kotlinlang.org/spec/expressions.html#string-interpolation-expressions
    'string-literal': [{
      pattern: /"""(?:[^$]|\$(?:(?!\{)|\{[^{}]*\}))*?"""/,
      alias: 'multiline',
      inside: {
        'interpolation': {
          pattern: /\$(?:[a-z_]\w*|\{[^{}]*\})/i,
          inside: interpolationInside
        },
        'string': /[\s\S]+/
      }
    }, {
      pattern: /"(?:[^"\\\r\n$]|\\.|\$(?:(?!\{)|\{[^{}]*\}))*"/,
      alias: 'singleline',
      inside: {
        'interpolation': {
          pattern: /((?:^|[^\\])(?:\\{2})*)\$(?:[a-z_]\w*|\{[^{}]*\})/i,
          lookbehind: true,
          inside: interpolationInside
        },
        'string': /[\s\S]+/
      }
    }],
    'char': {
      // https://kotlinlang.org/spec/expressions.html#character-literals
      pattern: /'(?:[^'\\\r\n]|\\(?:.|u[a-fA-F0-9]{0,4}))'/,
      greedy: true
    }
  });
  delete Prism.languages.kotlin['string'];
  Prism.languages.insertBefore('kotlin', 'keyword', {
    'annotation': {
      pattern: /\B@(?:\w+:)?(?:[A-Z]\w*|\[[^\]]+\])/,
      alias: 'builtin'
    }
  });
  Prism.languages.insertBefore('kotlin', 'function', {
    'label': {
      pattern: /\b\w+@|@\w+\b/,
      alias: 'symbol'
    }
  });
  Prism.languages.kt = Prism.languages.kotlin;
  Prism.languages.kts = Prism.languages.kotlin;
})(Prism);

/* FIXME :
 :extend() is not handled specifically : its highlighting is buggy.
 Mixin usage must be inside a ruleset to be highlighted.
 At-rules (e.g. import) containing interpolations are buggy.
 Detached rulesets are highlighted as at-rules.
 A comment before a mixin usage prevents the latter to be properly highlighted.
 */

Prism.languages.less = Prism.languages.extend('css', {
  'comment': [/\/\*[\s\S]*?\*\//, {
    pattern: /(^|[^\\])\/\/.*/,
    lookbehind: true
  }],
  'atrule': {
    pattern: /@[\w-](?:\((?:[^(){}]|\([^(){}]*\))*\)|[^(){};\s]|\s+(?!\s))*?(?=\s*\{)/,
    inside: {
      'punctuation': /[:()]/
    }
  },
  // selectors and mixins are considered the same
  'selector': {
    pattern: /(?:@\{[\w-]+\}|[^{};\s@])(?:@\{[\w-]+\}|\((?:[^(){}]|\([^(){}]*\))*\)|[^(){};@\s]|\s+(?!\s))*?(?=\s*\{)/,
    inside: {
      // mixin parameters
      'variable': /@+[\w-]+/
    }
  },
  'property': /(?:@\{[\w-]+\}|[\w-])+(?:\+_?)?(?=\s*:)/,
  'operator': /[+\-*\/]/
});
Prism.languages.insertBefore('less', 'property', {
  'variable': [
  // Variable declaration (the colon must be consumed!)
  {
    pattern: /@[\w-]+\s*:/,
    inside: {
      'punctuation': /:/
    }
  },
  // Variable usage
  /@@?[\w-]+/],
  'mixin-usage': {
    pattern: /([{;]\s*)[.#](?!\d)[\w-].*?(?=[(;])/,
    lookbehind: true,
    alias: 'function'
  }
});
Prism.languages.lua = {
  'comment': /^#!.+|--(?:\[(=*)\[[\s\S]*?\]\1\]|.*)/m,
  // \z may be used to skip the following space
  'string': {
    pattern: /(["'])(?:(?!\1)[^\\\r\n]|\\z(?:\r\n|\s)|\\(?:\r\n|[^z]))*\1|\[(=*)\[[\s\S]*?\]\2\]/,
    greedy: true
  },
  'number': /\b0x[a-f\d]+(?:\.[a-f\d]*)?(?:p[+-]?\d+)?\b|\b\d+(?:\.\B|(?:\.\d*)?(?:e[+-]?\d+)?\b)|\B\.\d+(?:e[+-]?\d+)?\b/i,
  'keyword': /\b(?:and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|return|then|true|until|while)\b/,
  'function': /(?!\d)\w+(?=\s*(?:[({]))/,
  'operator': [/[-+*%^&|#]|\/\/?|<[<=]?|>[>=]?|[=~]=?/, {
    // Match ".." but don't break "..."
    pattern: /(^|[^.])\.\.(?!\.)/,
    lookbehind: true
  }],
  'punctuation': /[\[\](){},;]|\.+|:+/
};
Prism.languages.makefile = {
  'comment': {
    pattern: /(^|[^\\])#(?:\\(?:\r\n|[\s\S])|[^\\\r\n])*/,
    lookbehind: true
  },
  'string': {
    pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
    greedy: true
  },
  'builtin-target': {
    pattern: /\.[A-Z][^:#=\s]+(?=\s*:(?!=))/,
    alias: 'builtin'
  },
  'target': {
    pattern: /^(?:[^:=\s]|[ \t]+(?![\s:]))+(?=\s*:(?!=))/m,
    alias: 'symbol',
    inside: {
      'variable': /\$+(?:(?!\$)[^(){}:#=\s]+|(?=[({]))/
    }
  },
  'variable': /\$+(?:(?!\$)[^(){}:#=\s]+|\([@*%<^+?][DF]\)|(?=[({]))/,
  // Directives
  'keyword': /-include\b|\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\b/,
  'function': {
    pattern: /(\()(?:abspath|addsuffix|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:list|s)?)(?=[ \t])/,
    lookbehind: true
  },
  'operator': /(?:::|[?:+!])?=|[|@]/,
  'punctuation': /[:;(){}]/
};
(function (Prism) {
  // https://yaml.org/spec/1.2/spec.html#c-ns-anchor-property
  // https://yaml.org/spec/1.2/spec.html#c-ns-alias-node
  var anchorOrAlias = /[*&][^\s[\]{},]+/;
  // https://yaml.org/spec/1.2/spec.html#c-ns-tag-property
  var tag = /!(?:<[\w\-%#;/?:@&=+$,.!~*'()[\]]+>|(?:[a-zA-Z\d-]*!)?[\w\-%#;/?:@&=+$.~*'()]+)?/;
  // https://yaml.org/spec/1.2/spec.html#c-ns-properties(n,c)
  var properties = '(?:' + tag.source + '(?:[ \t]+' + anchorOrAlias.source + ')?|' + anchorOrAlias.source + '(?:[ \t]+' + tag.source + ')?)';
  // https://yaml.org/spec/1.2/spec.html#ns-plain(n,c)
  // This is a simplified version that doesn't support "#" and multiline keys
  // All these long scarry character classes are simplified versions of YAML's characters
  var plainKey = /(?:[^\s\x00-\x08\x0e-\x1f!"#%&'*,\-:>?@[\]`{|}\x7f-\x84\x86-\x9f\ud800-\udfff\ufffe\uffff]|[?:-]<PLAIN>)(?:[ \t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(/<PLAIN>/g, function () {
    return /[^\s\x00-\x08\x0e-\x1f,[\]{}\x7f-\x84\x86-\x9f\ud800-\udfff\ufffe\uffff]/.source;
  });
  var string = /"(?:[^"\\\r\n]|\\.)*"|'(?:[^'\\\r\n]|\\.)*'/.source;

  /**
   *
   * @param {string} value
   * @param {string} [flags]
   * @returns {RegExp}
   */
  function createValuePattern(value, flags) {
    flags = (flags || '').replace(/m/g, '') + 'm'; // add m flag
    var pattern = /([:\-,[{]\s*(?:\s<<prop>>[ \t]+)?)(?:<<value>>)(?=[ \t]*(?:$|,|\]|\}|(?:[\r\n]\s*)?#))/.source.replace(/<<prop>>/g, function () {
      return properties;
    }).replace(/<<value>>/g, function () {
      return value;
    });
    return RegExp(pattern, flags);
  }
  Prism.languages.yaml = {
    'scalar': {
      pattern: RegExp(/([\-:]\s*(?:\s<<prop>>[ \t]+)?[|>])[ \t]*(?:((?:\r?\n|\r)[ \t]+)\S[^\r\n]*(?:\2[^\r\n]+)*)/.source.replace(/<<prop>>/g, function () {
        return properties;
      })),
      lookbehind: true,
      alias: 'string'
    },
    'comment': /#.*/,
    'key': {
      pattern: RegExp(/((?:^|[:\-,[{\r\n?])[ \t]*(?:<<prop>>[ \t]+)?)<<key>>(?=\s*:\s)/.source.replace(/<<prop>>/g, function () {
        return properties;
      }).replace(/<<key>>/g, function () {
        return '(?:' + plainKey + '|' + string + ')';
      })),
      lookbehind: true,
      greedy: true,
      alias: 'atrule'
    },
    'directive': {
      pattern: /(^[ \t]*)%.+/m,
      lookbehind: true,
      alias: 'important'
    },
    'datetime': {
      pattern: createValuePattern(/\d{4}-\d\d?-\d\d?(?:[tT]|[ \t]+)\d\d?:\d{2}:\d{2}(?:\.\d*)?(?:[ \t]*(?:Z|[-+]\d\d?(?::\d{2})?))?|\d{4}-\d{2}-\d{2}|\d\d?:\d{2}(?::\d{2}(?:\.\d*)?)?/.source),
      lookbehind: true,
      alias: 'number'
    },
    'boolean': {
      pattern: createValuePattern(/false|true/.source, 'i'),
      lookbehind: true,
      alias: 'important'
    },
    'null': {
      pattern: createValuePattern(/null|~/.source, 'i'),
      lookbehind: true,
      alias: 'important'
    },
    'string': {
      pattern: createValuePattern(string),
      lookbehind: true,
      greedy: true
    },
    'number': {
      pattern: createValuePattern(/[+-]?(?:0x[\da-f]+|0o[0-7]+|(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?|\.inf|\.nan)/.source, 'i'),
      lookbehind: true
    },
    'tag': tag,
    'important': anchorOrAlias,
    'punctuation': /---|[:[\]{}\-,|>?]|\.\.\./
  };
  Prism.languages.yml = Prism.languages.yaml;
})(Prism);
(function (Prism) {
  // Allow only one line break
  var inner = /(?:\\.|[^\\\n\r]|(?:\n|\r\n?)(?![\r\n]))/.source;

  /**
   * This function is intended for the creation of the bold or italic pattern.
   *
   * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.
   *
   * _Note:_ Keep in mind that this adds a capturing group.
   *
   * @param {string} pattern
   * @returns {RegExp}
   */
  function createInline(pattern) {
    pattern = pattern.replace(/<inner>/g, function () {
      return inner;
    });
    return RegExp(/((?:^|[^\\])(?:\\{2})*)/.source + '(?:' + pattern + ')');
  }
  var tableCell = /(?:\\.|``(?:[^`\r\n]|`(?!`))+``|`[^`\r\n]+`|[^\\|\r\n`])+/.source;
  var tableRow = /\|?__(?:\|__)+\|?(?:(?:\n|\r\n?)|(?![\s\S]))/.source.replace(/__/g, function () {
    return tableCell;
  });
  var tableLine = /\|?[ \t]*:?-{3,}:?[ \t]*(?:\|[ \t]*:?-{3,}:?[ \t]*)+\|?(?:\n|\r\n?)/.source;
  Prism.languages.markdown = Prism.languages.extend('markup', {});
  Prism.languages.insertBefore('markdown', 'prolog', {
    'front-matter-block': {
      pattern: /(^(?:\s*[\r\n])?)---(?!.)[\s\S]*?[\r\n]---(?!.)/,
      lookbehind: true,
      greedy: true,
      inside: {
        'punctuation': /^---|---$/,
        'front-matter': {
          pattern: /\S+(?:\s+\S+)*/,
          alias: ['yaml', 'language-yaml'],
          inside: Prism.languages.yaml
        }
      }
    },
    'blockquote': {
      // > ...
      pattern: /^>(?:[\t ]*>)*/m,
      alias: 'punctuation'
    },
    'table': {
      pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),
      inside: {
        'table-data-rows': {
          pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),
          lookbehind: true,
          inside: {
            'table-data': {
              pattern: RegExp(tableCell),
              inside: Prism.languages.markdown
            },
            'punctuation': /\|/
          }
        },
        'table-line': {
          pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),
          lookbehind: true,
          inside: {
            'punctuation': /\||:?-{3,}:?/
          }
        },
        'table-header-row': {
          pattern: RegExp('^' + tableRow + '$'),
          inside: {
            'table-header': {
              pattern: RegExp(tableCell),
              alias: 'important',
              inside: Prism.languages.markdown
            },
            'punctuation': /\|/
          }
        }
      }
    },
    'code': [{
      // Prefixed by 4 spaces or 1 tab and preceded by an empty line
      pattern: /((?:^|\n)[ \t]*\n|(?:^|\r\n?)[ \t]*\r\n?)(?: {4}|\t).+(?:(?:\n|\r\n?)(?: {4}|\t).+)*/,
      lookbehind: true,
      alias: 'keyword'
    }, {
      // ```optional language
      // code block
      // ```
      pattern: /^```[\s\S]*?^```$/m,
      greedy: true,
      inside: {
        'code-block': {
          pattern: /^(```.*(?:\n|\r\n?))[\s\S]+?(?=(?:\n|\r\n?)^```$)/m,
          lookbehind: true
        },
        'code-language': {
          pattern: /^(```).+/,
          lookbehind: true
        },
        'punctuation': /```/
      }
    }],
    'title': [{
      // title 1
      // =======

      // title 2
      // -------
      pattern: /\S.*(?:\n|\r\n?)(?:==+|--+)(?=[ \t]*$)/m,
      alias: 'important',
      inside: {
        punctuation: /==+$|--+$/
      }
    }, {
      // # title 1
      // ###### title 6
      pattern: /(^\s*)#.+/m,
      lookbehind: true,
      alias: 'important',
      inside: {
        punctuation: /^#+|#+$/
      }
    }],
    'hr': {
      // ***
      // ---
      // * * *
      // -----------
      pattern: /(^\s*)([*-])(?:[\t ]*\2){2,}(?=\s*$)/m,
      lookbehind: true,
      alias: 'punctuation'
    },
    'list': {
      // * item
      // + item
      // - item
      // 1. item
      pattern: /(^\s*)(?:[*+-]|\d+\.)(?=[\t ].)/m,
      lookbehind: true,
      alias: 'punctuation'
    },
    'url-reference': {
      // [id]: http://example.com "Optional title"
      // [id]: http://example.com 'Optional title'
      // [id]: http://example.com (Optional title)
      // [id]: <http://example.com> "Optional title"
      pattern: /!?\[[^\]]+\]:[\t ]+(?:\S+|<(?:\\.|[^>\\])+>)(?:[\t ]+(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\)))?/,
      inside: {
        'variable': {
          pattern: /^(!?\[)[^\]]+/,
          lookbehind: true
        },
        'string': /(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\))$/,
        'punctuation': /^[\[\]!:]|[<>]/
      },
      alias: 'url'
    },
    'bold': {
      // **strong**
      // __strong__

      // allow one nested instance of italic text using the same delimiter
      pattern: createInline(/\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\b|\*\*(?:(?!\*)<inner>|\*(?:(?!\*)<inner>)+\*)+\*\*/.source),
      lookbehind: true,
      greedy: true,
      inside: {
        'content': {
          pattern: /(^..)[\s\S]+(?=..$)/,
          lookbehind: true,
          inside: {} // see below
        },
        'punctuation': /\*\*|__/
      }
    },
    'italic': {
      // *em*
      // _em_

      // allow one nested instance of bold text using the same delimiter
      pattern: createInline(/\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\b|\*(?:(?!\*)<inner>|\*\*(?:(?!\*)<inner>)+\*\*)+\*/.source),
      lookbehind: true,
      greedy: true,
      inside: {
        'content': {
          pattern: /(^.)[\s\S]+(?=.$)/,
          lookbehind: true,
          inside: {} // see below
        },
        'punctuation': /[*_]/
      }
    },
    'strike': {
      // ~~strike through~~
      // ~strike~
      // eslint-disable-next-line regexp/strict
      pattern: createInline(/(~~?)(?:(?!~)<inner>)+\2/.source),
      lookbehind: true,
      greedy: true,
      inside: {
        'content': {
          pattern: /(^~~?)[\s\S]+(?=\1$)/,
          lookbehind: true,
          inside: {} // see below
        },
        'punctuation': /~~?/
      }
    },
    'code-snippet': {
      // `code`
      // ``code``
      pattern: /(^|[^\\`])(?:``[^`\r\n]+(?:`[^`\r\n]+)*``(?!`)|`[^`\r\n]+`(?!`))/,
      lookbehind: true,
      greedy: true,
      alias: ['code', 'keyword']
    },
    'url': {
      // [example](http://example.com "Optional title")
      // [example][id]
      // [example] [id]
      pattern: createInline(/!?\[(?:(?!\])<inner>)+\](?:\([^\s)]+(?:[\t ]+"(?:\\.|[^"\\])*")?\)|[ \t]?\[(?:(?!\])<inner>)+\])/.source),
      lookbehind: true,
      greedy: true,
      inside: {
        'operator': /^!/,
        'content': {
          pattern: /(^\[)[^\]]+(?=\])/,
          lookbehind: true,
          inside: {} // see below
        },
        'variable': {
          pattern: /(^\][ \t]?\[)[^\]]+(?=\]$)/,
          lookbehind: true
        },
        'url': {
          pattern: /(^\]\()[^\s)]+/,
          lookbehind: true
        },
        'string': {
          pattern: /(^[ \t]+)"(?:\\.|[^"\\])*"(?=\)$)/,
          lookbehind: true
        }
      }
    }
  });
  ['url', 'bold', 'italic', 'strike'].forEach(function (token) {
    ['url', 'bold', 'italic', 'strike', 'code-snippet'].forEach(function (inside) {
      if (token !== inside) {
        Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];
      }
    });
  });
  Prism.hooks.add('after-tokenize', function (env) {
    if (env.language !== 'markdown' && env.language !== 'md') {
      return;
    }
    function walkTokens(tokens) {
      if (!tokens || typeof tokens === 'string') {
        return;
      }
      for (var i = 0, l = tokens.length; i < l; i++) {
        var token = tokens[i];
        if (token.type !== 'code') {
          walkTokens(token.content);
          continue;
        }

        /*
         * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token
         * is optional. But the grammar is defined so that there is only one case we have to handle:
         *
         * token.content = [
         *     <span class="punctuation">```</span>,
         *     <span class="code-language">xxxx</span>,
         *     '\n', // exactly one new lines (\r or \n or \r\n)
         *     <span class="code-block">...</span>,
         *     '\n', // exactly one new lines again
         *     <span class="punctuation">```</span>
         * ];
         */

        var codeLang = token.content[1];
        var codeBlock = token.content[3];
        if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {
          // this might be a language that Prism does not support

          // do some replacements to support C++, C#, and F#
          var lang = codeLang.content.replace(/\b#/g, 'sharp').replace(/\b\+\+/g, 'pp');
          // only use the first word
          lang = (/[a-z][\w-]*/i.exec(lang) || [''])[0].toLowerCase();
          var alias = 'language-' + lang;

          // add alias
          if (!codeBlock.alias) {
            codeBlock.alias = [alias];
          } else if (typeof codeBlock.alias === 'string') {
            codeBlock.alias = [codeBlock.alias, alias];
          } else {
            codeBlock.alias.push(alias);
          }
        }
      }
    }
    walkTokens(env.tokens);
  });
  Prism.hooks.add('wrap', function (env) {
    if (env.type !== 'code-block') {
      return;
    }
    var codeLang = '';
    for (var i = 0, l = env.classes.length; i < l; i++) {
      var cls = env.classes[i];
      var match = /language-(.+)/.exec(cls);
      if (match) {
        codeLang = match[1];
        break;
      }
    }
    var grammar = Prism.languages[codeLang];
    if (!grammar) {
      if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {
        var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);
        env.attributes['id'] = id;
        Prism.plugins.autoloader.loadLanguages(codeLang, function () {
          var ele = document.getElementById(id);
          if (ele) {
            ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);
          }
        });
      }
    } else {
      env.content = Prism.highlight(textContent(env.content), grammar, codeLang);
    }
  });
  var tagPattern = RegExp(Prism.languages.markup.tag.pattern.source, 'gi');

  /**
   * A list of known entity names.
   *
   * This will always be incomplete to save space. The current list is the one used by lowdash's unescape function.
   *
   * @see {@link https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/unescape.js#L2}
   */
  var KNOWN_ENTITY_NAMES = {
    'amp': '&',
    'lt': '<',
    'gt': '>',
    'quot': '"'
  };

  // IE 11 doesn't support `String.fromCodePoint`
  var fromCodePoint = String.fromCodePoint || String.fromCharCode;

  /**
   * Returns the text content of a given HTML source code string.
   *
   * @param {string} html
   * @returns {string}
   */
  function textContent(html) {
    // remove all tags
    var text = html.replace(tagPattern, '');

    // decode known entities
    text = text.replace(/&(\w{1,8}|#x?[\da-f]{1,8});/gi, function (m, code) {
      code = code.toLowerCase();
      if (code[0] === '#') {
        var value;
        if (code[1] === 'x') {
          value = parseInt(code.slice(2), 16);
        } else {
          value = Number(code.slice(1));
        }
        return fromCodePoint(value);
      } else {
        var known = KNOWN_ENTITY_NAMES[code];
        if (known) {
          return known;
        }

        // unable to decode
        return m;
      }
    });
    return text;
  }
  Prism.languages.md = Prism.languages.markdown;
})(Prism);
Prism.languages.objectivec = Prism.languages.extend('c', {
  'string': {
    pattern: /@?"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"/,
    greedy: true
  },
  'keyword': /\b(?:asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|in|inline|int|long|register|return|self|short|signed|sizeof|static|struct|super|switch|typedef|typeof|union|unsigned|void|volatile|while)\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\b/,
  'operator': /-[->]?|\+\+?|!=?|<<?=?|>>?=?|==?|&&?|\|\|?|[~^%?*\/@]/
});
delete Prism.languages.objectivec['class-name'];
Prism.languages.objc = Prism.languages.objectivec;
(function (Prism) {
  var brackets = /(?:\((?:[^()\\]|\\[\s\S])*\)|\{(?:[^{}\\]|\\[\s\S])*\}|\[(?:[^[\]\\]|\\[\s\S])*\]|<(?:[^<>\\]|\\[\s\S])*>)/.source;
  Prism.languages.perl = {
    'comment': [{
      // POD
      pattern: /(^\s*)=\w[\s\S]*?=cut.*/m,
      lookbehind: true,
      greedy: true
    }, {
      pattern: /(^|[^\\$])#.*/,
      lookbehind: true,
      greedy: true
    }],
    // TODO Could be nice to handle Heredoc too.
    'string': [{
      pattern: RegExp(/\b(?:q|qq|qw|qx)(?![a-zA-Z0-9])\s*/.source + '(?:' + [
      // q/.../
      /([^a-zA-Z0-9\s{(\[<])(?:(?!\1)[^\\]|\\[\s\S])*\1/.source,
      // q a...a
      // eslint-disable-next-line regexp/strict
      /([a-zA-Z0-9])(?:(?!\2)[^\\]|\\[\s\S])*\2/.source,
      // q(...)
      // q{...}
      // q[...]
      // q<...>
      brackets].join('|') + ')'),
      greedy: true
    },
    // "...", `...`
    {
      pattern: /("|`)(?:(?!\1)[^\\]|\\[\s\S])*\1/,
      greedy: true
    },
    // '...'
    // FIXME Multi-line single-quoted strings are not supported as they would break variables containing '
    {
      pattern: /'(?:[^'\\\r\n]|\\.)*'/,
      greedy: true
    }],
    'regex': [{
      pattern: RegExp(/\b(?:m|qr)(?![a-zA-Z0-9])\s*/.source + '(?:' + [
      // m/.../
      /([^a-zA-Z0-9\s{(\[<])(?:(?!\1)[^\\]|\\[\s\S])*\1/.source,
      // m a...a
      // eslint-disable-next-line regexp/strict
      /([a-zA-Z0-9])(?:(?!\2)[^\\]|\\[\s\S])*\2/.source,
      // m(...)
      // m{...}
      // m[...]
      // m<...>
      brackets].join('|') + ')' + /[msixpodualngc]*/.source),
      greedy: true
    },
    // The lookbehinds prevent -s from breaking
    {
      pattern: RegExp(/(^|[^-])\b(?:s|tr|y)(?![a-zA-Z0-9])\s*/.source + '(?:' + [
      // s/.../.../
      // eslint-disable-next-line regexp/strict
      /([^a-zA-Z0-9\s{(\[<])(?:(?!\2)[^\\]|\\[\s\S])*\2(?:(?!\2)[^\\]|\\[\s\S])*\2/.source,
      // s a...a...a
      // eslint-disable-next-line regexp/strict
      /([a-zA-Z0-9])(?:(?!\3)[^\\]|\\[\s\S])*\3(?:(?!\3)[^\\]|\\[\s\S])*\3/.source,
      // s(...)(...)
      // s{...}{...}
      // s[...][...]
      // s<...><...>
      // s(...)[...]
      brackets + /\s*/.source + brackets].join('|') + ')' + /[msixpodualngcer]*/.source),
      lookbehind: true,
      greedy: true
    },
    // /.../
    // The look-ahead tries to prevent two divisions on
    // the same line from being highlighted as regex.
    // This does not support multi-line regex.
    {
      pattern: /\/(?:[^\/\\\r\n]|\\.)*\/[msixpodualngc]*(?=\s*(?:$|[\r\n,.;})&|\-+*~<>!?^]|(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|x|xor)\b))/,
      greedy: true
    }],
    // FIXME Not sure about the handling of ::, ', and #
    'variable': [
    // ${^POSTMATCH}
    /[&*$@%]\{\^[A-Z]+\}/,
    // $^V
    /[&*$@%]\^[A-Z_]/,
    // ${...}
    /[&*$@%]#?(?=\{)/,
    // $foo
    /[&*$@%]#?(?:(?:::)*'?(?!\d)[\w$]+(?![\w$]))+(?:::)*/,
    // $1
    /[&*$@%]\d+/,
    // $_, @_, %!
    // The negative lookahead prevents from breaking the %= operator
    /(?!%=)[$@%][!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~]/],
    'filehandle': {
      // <>, <FOO>, _
      pattern: /<(?![<=])\S*?>|\b_\b/,
      alias: 'symbol'
    },
    'v-string': {
      // v1.2, 1.2.3
      pattern: /v\d+(?:\.\d+)*|\d+(?:\.\d+){2,}/,
      alias: 'string'
    },
    'function': {
      pattern: /(\bsub[ \t]+)\w+/,
      lookbehind: true
    },
    'keyword': /\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|return|say|state|sub|switch|undef|unless|until|use|when|while)\b/,
    'number': /\b(?:0x[\dA-Fa-f](?:_?[\dA-Fa-f])*|0b[01](?:_?[01])*|(?:(?:\d(?:_?\d)*)?\.)?\d(?:_?\d)*(?:[Ee][+-]?\d+)?)\b/,
    'operator': /-[rwxoRWXOezsfdlpSbctugkTBMAC]\b|\+[+=]?|-[-=>]?|\*\*?=?|\/\/?=?|=[=~>]?|~[~=]?|\|\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\.(?:=|\.\.?)?|[\\?]|\bx(?:=|\b)|\b(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|xor)\b/,
    'punctuation': /[{}[\];(),:]/
  };
})(Prism);
(function (Prism) {
  /**
   * Returns the placeholder for the given language id and index.
   *
   * @param {string} language
   * @param {string|number} index
   * @returns {string}
   */
  function getPlaceholder(language, index) {
    return '___' + language.toUpperCase() + index + '___';
  }
  Object.defineProperties(Prism.languages['markup-templating'] = {}, {
    buildPlaceholders: {
      /**
       * Tokenize all inline templating expressions matching `placeholderPattern`.
       *
       * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns
       * `true` will be replaced.
       *
       * @param {object} env The environment of the `before-tokenize` hook.
       * @param {string} language The language id.
       * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.
       * @param {(match: string) => boolean} [replaceFilter]
       */
      value: function (env, language, placeholderPattern, replaceFilter) {
        if (env.language !== language) {
          return;
        }
        var tokenStack = env.tokenStack = [];
        env.code = env.code.replace(placeholderPattern, function (match) {
          if (typeof replaceFilter === 'function' && !replaceFilter(match)) {
            return match;
          }
          var i = tokenStack.length;
          var placeholder;

          // Check for existing strings
          while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {
            ++i;
          }

          // Create a sparse array
          tokenStack[i] = match;
          return placeholder;
        });

        // Switch the grammar to markup
        env.grammar = Prism.languages.markup;
      }
    },
    tokenizePlaceholders: {
      /**
       * Replace placeholders with proper tokens after tokenizing.
       *
       * @param {object} env The environment of the `after-tokenize` hook.
       * @param {string} language The language id.
       */
      value: function (env, language) {
        if (env.language !== language || !env.tokenStack) {
          return;
        }

        // Switch the grammar back
        env.grammar = Prism.languages[language];
        var j = 0;
        var keys = Object.keys(env.tokenStack);
        function walkTokens(tokens) {
          for (var i = 0; i < tokens.length; i++) {
            // all placeholders are replaced already
            if (j >= keys.length) {
              break;
            }
            var token = tokens[i];
            if (typeof token === 'string' || token.content && typeof token.content === 'string') {
              var k = keys[j];
              var t = env.tokenStack[k];
              var s = typeof token === 'string' ? token : token.content;
              var placeholder = getPlaceholder(language, k);
              var index = s.indexOf(placeholder);
              if (index > -1) {
                ++j;
                var before = s.substring(0, index);
                var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);
                var after = s.substring(index + placeholder.length);
                var replacement = [];
                if (before) {
                  replacement.push.apply(replacement, walkTokens([before]));
                }
                replacement.push(middle);
                if (after) {
                  replacement.push.apply(replacement, walkTokens([after]));
                }
                if (typeof token === 'string') {
                  tokens.splice.apply(tokens, [i, 1].concat(replacement));
                } else {
                  token.content = replacement;
                }
              }
            } else if (token.content /* && typeof token.content !== 'string' */) {
              walkTokens(token.content);
            }
          }
          return tokens;
        }
        walkTokens(env.tokens);
      }
    }
  });
})(Prism);

/**
 * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/
 * Modified by Miles Johnson: http://milesj.me
 * Rewritten by Tom Pavelec
 *
 * Supports PHP 5.3 - 8.0
 */
(function (Prism) {
  var comment = /\/\*[\s\S]*?\*\/|\/\/.*|#(?!\[).*/;
  var constant = [{
    pattern: /\b(?:false|true)\b/i,
    alias: 'boolean'
  }, {
    pattern: /(::\s*)\b[a-z_]\w*\b(?!\s*\()/i,
    greedy: true,
    lookbehind: true
  }, {
    pattern: /(\b(?:case|const)\s+)\b[a-z_]\w*(?=\s*[;=])/i,
    greedy: true,
    lookbehind: true
  }, /\b(?:null)\b/i, /\b[A-Z_][A-Z0-9_]*\b(?!\s*\()/];
  var number = /\b0b[01]+(?:_[01]+)*\b|\b0o[0-7]+(?:_[0-7]+)*\b|\b0x[\da-f]+(?:_[\da-f]+)*\b|(?:\b\d+(?:_\d+)*\.?(?:\d+(?:_\d+)*)?|\B\.\d+)(?:e[+-]?\d+)?/i;
  var operator = /<?=>|\?\?=?|\.{3}|\??->|[!=]=?=?|::|\*\*=?|--|\+\+|&&|\|\||<<|>>|[?~]|[/^|%*&<>.+-]=?/;
  var punctuation = /[{}\[\](),:;]/;
  Prism.languages.php = {
    'delimiter': {
      pattern: /\?>$|^<\?(?:php(?=\s)|=)?/i,
      alias: 'important'
    },
    'comment': comment,
    'variable': /\$+(?:\w+\b|(?=\{))/,
    'package': {
      pattern: /(namespace\s+|use\s+(?:function\s+)?)(?:\\?\b[a-z_]\w*)+\b(?!\\)/i,
      lookbehind: true,
      inside: {
        'punctuation': /\\/
      }
    },
    'class-name-definition': {
      pattern: /(\b(?:class|enum|interface|trait)\s+)\b[a-z_]\w*(?!\\)\b/i,
      lookbehind: true,
      alias: 'class-name'
    },
    'function-definition': {
      pattern: /(\bfunction\s+)[a-z_]\w*(?=\s*\()/i,
      lookbehind: true,
      alias: 'function'
    },
    'keyword': [{
      pattern: /(\(\s*)\b(?:array|bool|boolean|float|int|integer|object|string)\b(?=\s*\))/i,
      alias: 'type-casting',
      greedy: true,
      lookbehind: true
    }, {
      pattern: /([(,?]\s*)\b(?:array(?!\s*\()|bool|callable|(?:false|null)(?=\s*\|)|float|int|iterable|mixed|object|self|static|string)\b(?=\s*\$)/i,
      alias: 'type-hint',
      greedy: true,
      lookbehind: true
    }, {
      pattern: /(\)\s*:\s*(?:\?\s*)?)\b(?:array(?!\s*\()|bool|callable|(?:false|null)(?=\s*\|)|float|int|iterable|mixed|never|object|self|static|string|void)\b/i,
      alias: 'return-type',
      greedy: true,
      lookbehind: true
    }, {
      pattern: /\b(?:array(?!\s*\()|bool|float|int|iterable|mixed|object|string|void)\b/i,
      alias: 'type-declaration',
      greedy: true
    }, {
      pattern: /(\|\s*)(?:false|null)\b|\b(?:false|null)(?=\s*\|)/i,
      alias: 'type-declaration',
      greedy: true,
      lookbehind: true
    }, {
      pattern: /\b(?:parent|self|static)(?=\s*::)/i,
      alias: 'static-context',
      greedy: true
    }, {
      // yield from
      pattern: /(\byield\s+)from\b/i,
      lookbehind: true
    },
    // `class` is always a keyword unlike other keywords
    /\bclass\b/i, {
      // https://www.php.net/manual/en/reserved.keywords.php
      //
      // keywords cannot be preceded by "->"
      // the complex lookbehind means `(?<!(?:->|::)\s*)`
      pattern: /((?:^|[^\s>:]|(?:^|[^-])>|(?:^|[^:]):)\s*)\b(?:abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|match|namespace|never|new|or|parent|print|private|protected|public|readonly|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield|__halt_compiler)\b/i,
      lookbehind: true
    }],
    'argument-name': {
      pattern: /([(,]\s*)\b[a-z_]\w*(?=\s*:(?!:))/i,
      lookbehind: true
    },
    'class-name': [{
      pattern: /(\b(?:extends|implements|instanceof|new(?!\s+self|\s+static))\s+|\bcatch\s*\()\b[a-z_]\w*(?!\\)\b/i,
      greedy: true,
      lookbehind: true
    }, {
      pattern: /(\|\s*)\b[a-z_]\w*(?!\\)\b/i,
      greedy: true,
      lookbehind: true
    }, {
      pattern: /\b[a-z_]\w*(?!\\)\b(?=\s*\|)/i,
      greedy: true
    }, {
      pattern: /(\|\s*)(?:\\?\b[a-z_]\w*)+\b/i,
      alias: 'class-name-fully-qualified',
      greedy: true,
      lookbehind: true,
      inside: {
        'punctuation': /\\/
      }
    }, {
      pattern: /(?:\\?\b[a-z_]\w*)+\b(?=\s*\|)/i,
      alias: 'class-name-fully-qualified',
      greedy: true,
      inside: {
        'punctuation': /\\/
      }
    }, {
      pattern: /(\b(?:extends|implements|instanceof|new(?!\s+self\b|\s+static\b))\s+|\bcatch\s*\()(?:\\?\b[a-z_]\w*)+\b(?!\\)/i,
      alias: 'class-name-fully-qualified',
      greedy: true,
      lookbehind: true,
      inside: {
        'punctuation': /\\/
      }
    }, {
      pattern: /\b[a-z_]\w*(?=\s*\$)/i,
      alias: 'type-declaration',
      greedy: true
    }, {
      pattern: /(?:\\?\b[a-z_]\w*)+(?=\s*\$)/i,
      alias: ['class-name-fully-qualified', 'type-declaration'],
      greedy: true,
      inside: {
        'punctuation': /\\/
      }
    }, {
      pattern: /\b[a-z_]\w*(?=\s*::)/i,
      alias: 'static-context',
      greedy: true
    }, {
      pattern: /(?:\\?\b[a-z_]\w*)+(?=\s*::)/i,
      alias: ['class-name-fully-qualified', 'static-context'],
      greedy: true,
      inside: {
        'punctuation': /\\/
      }
    }, {
      pattern: /([(,?]\s*)[a-z_]\w*(?=\s*\$)/i,
      alias: 'type-hint',
      greedy: true,
      lookbehind: true
    }, {
      pattern: /([(,?]\s*)(?:\\?\b[a-z_]\w*)+(?=\s*\$)/i,
      alias: ['class-name-fully-qualified', 'type-hint'],
      greedy: true,
      lookbehind: true,
      inside: {
        'punctuation': /\\/
      }
    }, {
      pattern: /(\)\s*:\s*(?:\?\s*)?)\b[a-z_]\w*(?!\\)\b/i,
      alias: 'return-type',
      greedy: true,
      lookbehind: true
    }, {
      pattern: /(\)\s*:\s*(?:\?\s*)?)(?:\\?\b[a-z_]\w*)+\b(?!\\)/i,
      alias: ['class-name-fully-qualified', 'return-type'],
      greedy: true,
      lookbehind: true,
      inside: {
        'punctuation': /\\/
      }
    }],
    'constant': constant,
    'function': {
      pattern: /(^|[^\\\w])\\?[a-z_](?:[\w\\]*\w)?(?=\s*\()/i,
      lookbehind: true,
      inside: {
        'punctuation': /\\/
      }
    },
    'property': {
      pattern: /(->\s*)\w+/,
      lookbehind: true
    },
    'number': number,
    'operator': operator,
    'punctuation': punctuation
  };
  var string_interpolation = {
    pattern: /\{\$(?:\{(?:\{[^{}]+\}|[^{}]+)\}|[^{}])+\}|(^|[^\\{])\$+(?:\w+(?:\[[^\r\n\[\]]+\]|->\w+)?)/,
    lookbehind: true,
    inside: Prism.languages.php
  };
  var string = [{
    pattern: /<<<'([^']+)'[\r\n](?:.*[\r\n])*?\1;/,
    alias: 'nowdoc-string',
    greedy: true,
    inside: {
      'delimiter': {
        pattern: /^<<<'[^']+'|[a-z_]\w*;$/i,
        alias: 'symbol',
        inside: {
          'punctuation': /^<<<'?|[';]$/
        }
      }
    }
  }, {
    pattern: /<<<(?:"([^"]+)"[\r\n](?:.*[\r\n])*?\1;|([a-z_]\w*)[\r\n](?:.*[\r\n])*?\2;)/i,
    alias: 'heredoc-string',
    greedy: true,
    inside: {
      'delimiter': {
        pattern: /^<<<(?:"[^"]+"|[a-z_]\w*)|[a-z_]\w*;$/i,
        alias: 'symbol',
        inside: {
          'punctuation': /^<<<"?|[";]$/
        }
      },
      'interpolation': string_interpolation
    }
  }, {
    pattern: /`(?:\\[\s\S]|[^\\`])*`/,
    alias: 'backtick-quoted-string',
    greedy: true
  }, {
    pattern: /'(?:\\[\s\S]|[^\\'])*'/,
    alias: 'single-quoted-string',
    greedy: true
  }, {
    pattern: /"(?:\\[\s\S]|[^\\"])*"/,
    alias: 'double-quoted-string',
    greedy: true,
    inside: {
      'interpolation': string_interpolation
    }
  }];
  Prism.languages.insertBefore('php', 'variable', {
    'string': string,
    'attribute': {
      pattern: /#\[(?:[^"'\/#]|\/(?![*/])|\/\/.*$|#(?!\[).*$|\/\*(?:[^*]|\*(?!\/))*\*\/|"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*')+\](?=\s*[a-z$#])/im,
      greedy: true,
      inside: {
        'attribute-content': {
          pattern: /^(#\[)[\s\S]+(?=\]$)/,
          lookbehind: true,
          // inside can appear subset of php
          inside: {
            'comment': comment,
            'string': string,
            'attribute-class-name': [{
              pattern: /([^:]|^)\b[a-z_]\w*(?!\\)\b/i,
              alias: 'class-name',
              greedy: true,
              lookbehind: true
            }, {
              pattern: /([^:]|^)(?:\\?\b[a-z_]\w*)+/i,
              alias: ['class-name', 'class-name-fully-qualified'],
              greedy: true,
              lookbehind: true,
              inside: {
                'punctuation': /\\/
              }
            }],
            'constant': constant,
            'number': number,
            'operator': operator,
            'punctuation': punctuation
          }
        },
        'delimiter': {
          pattern: /^#\[|\]$/,
          alias: 'punctuation'
        }
      }
    }
  });
  Prism.hooks.add('before-tokenize', function (env) {
    if (!/<\?/.test(env.code)) {
      return;
    }
    var phpPattern = /<\?(?:[^"'/#]|\/(?![*/])|("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|(?:\/\/|#(?!\[))(?:[^?\n\r]|\?(?!>))*(?=$|\?>|[\r\n])|#\[|\/\*(?:[^*]|\*(?!\/))*(?:\*\/|$))*?(?:\?>|$)/g;
    Prism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);
  });
  Prism.hooks.add('after-tokenize', function (env) {
    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php');
  });
})(Prism);
Prism.languages.python = {
  'comment': {
    pattern: /(^|[^\\])#.*/,
    lookbehind: true,
    greedy: true
  },
  'string-interpolation': {
    pattern: /(?:f|fr|rf)(?:("""|''')[\s\S]*?\1|("|')(?:\\.|(?!\2)[^\\\r\n])*\2)/i,
    greedy: true,
    inside: {
      'interpolation': {
        // "{" <expression> <optional "!s", "!r", or "!a"> <optional ":" format specifier> "}"
        pattern: /((?:^|[^{])(?:\{\{)*)\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}])+\})+\})+\}/,
        lookbehind: true,
        inside: {
          'format-spec': {
            pattern: /(:)[^:(){}]+(?=\}$)/,
            lookbehind: true
          },
          'conversion-option': {
            pattern: /![sra](?=[:}]$)/,
            alias: 'punctuation'
          },
          rest: null
        }
      },
      'string': /[\s\S]+/
    }
  },
  'triple-quoted-string': {
    pattern: /(?:[rub]|br|rb)?("""|''')[\s\S]*?\1/i,
    greedy: true,
    alias: 'string'
  },
  'string': {
    pattern: /(?:[rub]|br|rb)?("|')(?:\\.|(?!\1)[^\\\r\n])*\1/i,
    greedy: true
  },
  'function': {
    pattern: /((?:^|\s)def[ \t]+)[a-zA-Z_]\w*(?=\s*\()/g,
    lookbehind: true
  },
  'class-name': {
    pattern: /(\bclass\s+)\w+/i,
    lookbehind: true
  },
  'decorator': {
    pattern: /(^[\t ]*)@\w+(?:\.\w+)*/m,
    lookbehind: true,
    alias: ['annotation', 'punctuation'],
    inside: {
      'punctuation': /\./
    }
  },
  'keyword': /\b(?:_(?=\s*:)|and|as|assert|async|await|break|case|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|match|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\b/,
  'builtin': /\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\b/,
  'boolean': /\b(?:False|None|True)\b/,
  'number': /\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\b|(?:\b\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\B\.\d+(?:_\d+)*)(?:e[+-]?\d+(?:_\d+)*)?j?(?!\w)/i,
  'operator': /[-+%=]=?|!=|:=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]/,
  'punctuation': /[{}[\];(),.:]/
};
Prism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = Prism.languages.python;
Prism.languages.py = Prism.languages.python;
Prism.languages.r = {
  'comment': /#.*/,
  'string': {
    pattern: /(['"])(?:\\.|(?!\1)[^\\\r\n])*\1/,
    greedy: true
  },
  'percent-operator': {
    // Includes user-defined operators
    // and %%, %*%, %/%, %in%, %o%, %x%
    pattern: /%[^%\s]*%/,
    alias: 'operator'
  },
  'boolean': /\b(?:FALSE|TRUE)\b/,
  'ellipsis': /\.\.(?:\.|\d+)/,
  'number': [/\b(?:Inf|NaN)\b/, /(?:\b0x[\dA-Fa-f]+(?:\.\d*)?|\b\d+(?:\.\d*)?|\B\.\d+)(?:[EePp][+-]?\d+)?[iL]?/],
  'keyword': /\b(?:NA|NA_character_|NA_complex_|NA_integer_|NA_real_|NULL|break|else|for|function|if|in|next|repeat|while)\b/,
  'operator': /->?>?|<(?:=|<?-)?|[>=!]=?|::?|&&?|\|\|?|[+*\/^$@~]/,
  'punctuation': /[(){}\[\],;]/
};

/**
 * Original by Samuel Flores
 *
 * Adds the following new token classes:
 *     constant, builtin, variable, symbol, regex
 */
(function (Prism) {
  Prism.languages.ruby = Prism.languages.extend('clike', {
    'comment': {
      pattern: /#.*|^=begin\s[\s\S]*?^=end/m,
      greedy: true
    },
    'class-name': {
      pattern: /(\b(?:class|module)\s+|\bcatch\s+\()[\w.\\]+|\b[A-Z_]\w*(?=\s*\.\s*new\b)/,
      lookbehind: true,
      inside: {
        'punctuation': /[.\\]/
      }
    },
    'keyword': /\b(?:BEGIN|END|alias|and|begin|break|case|class|def|define_method|defined|do|each|else|elsif|end|ensure|extend|for|if|in|include|module|new|next|nil|not|or|prepend|private|protected|public|raise|redo|require|rescue|retry|return|self|super|then|throw|undef|unless|until|when|while|yield)\b/,
    'operator': /\.{2,3}|&\.|===|<?=>|[!=]?~|(?:&&|\|\||<<|>>|\*\*|[+\-*/%<>!^&|=])=?|[?:]/,
    'punctuation': /[(){}[\].,;]/
  });
  Prism.languages.insertBefore('ruby', 'operator', {
    'double-colon': {
      pattern: /::/,
      alias: 'punctuation'
    }
  });
  var interpolation = {
    pattern: /((?:^|[^\\])(?:\\{2})*)#\{(?:[^{}]|\{[^{}]*\})*\}/,
    lookbehind: true,
    inside: {
      'content': {
        pattern: /^(#\{)[\s\S]+(?=\}$)/,
        lookbehind: true,
        inside: Prism.languages.ruby
      },
      'delimiter': {
        pattern: /^#\{|\}$/,
        alias: 'punctuation'
      }
    }
  };
  delete Prism.languages.ruby.function;
  var percentExpression = '(?:' + [/([^a-zA-Z0-9\s{(\[<=])(?:(?!\1)[^\\]|\\[\s\S])*\1/.source, /\((?:[^()\\]|\\[\s\S]|\((?:[^()\\]|\\[\s\S])*\))*\)/.source, /\{(?:[^{}\\]|\\[\s\S]|\{(?:[^{}\\]|\\[\s\S])*\})*\}/.source, /\[(?:[^\[\]\\]|\\[\s\S]|\[(?:[^\[\]\\]|\\[\s\S])*\])*\]/.source, /<(?:[^<>\\]|\\[\s\S]|<(?:[^<>\\]|\\[\s\S])*>)*>/.source].join('|') + ')';
  var symbolName = /(?:"(?:\\.|[^"\\\r\n])*"|(?:\b[a-zA-Z_]\w*|[^\s\0-\x7F]+)[?!]?|\$.)/.source;
  Prism.languages.insertBefore('ruby', 'keyword', {
    'regex-literal': [{
      pattern: RegExp(/%r/.source + percentExpression + /[egimnosux]{0,6}/.source),
      greedy: true,
      inside: {
        'interpolation': interpolation,
        'regex': /[\s\S]+/
      }
    }, {
      pattern: /(^|[^/])\/(?!\/)(?:\[[^\r\n\]]+\]|\\.|[^[/\\\r\n])+\/[egimnosux]{0,6}(?=\s*(?:$|[\r\n,.;})#]))/,
      lookbehind: true,
      greedy: true,
      inside: {
        'interpolation': interpolation,
        'regex': /[\s\S]+/
      }
    }],
    'variable': /[@$]+[a-zA-Z_]\w*(?:[?!]|\b)/,
    'symbol': [{
      pattern: RegExp(/(^|[^:]):/.source + symbolName),
      lookbehind: true,
      greedy: true
    }, {
      pattern: RegExp(/([\r\n{(,][ \t]*)/.source + symbolName + /(?=:(?!:))/.source),
      lookbehind: true,
      greedy: true
    }],
    'method-definition': {
      pattern: /(\bdef\s+)\w+(?:\s*\.\s*\w+)?/,
      lookbehind: true,
      inside: {
        'function': /\b\w+$/,
        'keyword': /^self\b/,
        'class-name': /^\w+/,
        'punctuation': /\./
      }
    }
  });
  Prism.languages.insertBefore('ruby', 'string', {
    'string-literal': [{
      pattern: RegExp(/%[qQiIwWs]?/.source + percentExpression),
      greedy: true,
      inside: {
        'interpolation': interpolation,
        'string': /[\s\S]+/
      }
    }, {
      pattern: /("|')(?:#\{[^}]+\}|#(?!\{)|\\(?:\r\n|[\s\S])|(?!\1)[^\\#\r\n])*\1/,
      greedy: true,
      inside: {
        'interpolation': interpolation,
        'string': /[\s\S]+/
      }
    }, {
      pattern: /<<[-~]?([a-z_]\w*)[\r\n](?:.*[\r\n])*?[\t ]*\1/i,
      alias: 'heredoc-string',
      greedy: true,
      inside: {
        'delimiter': {
          pattern: /^<<[-~]?[a-z_]\w*|\b[a-z_]\w*$/i,
          inside: {
            'symbol': /\b\w+/,
            'punctuation': /^<<[-~]?/
          }
        },
        'interpolation': interpolation,
        'string': /[\s\S]+/
      }
    }, {
      pattern: /<<[-~]?'([a-z_]\w*)'[\r\n](?:.*[\r\n])*?[\t ]*\1/i,
      alias: 'heredoc-string',
      greedy: true,
      inside: {
        'delimiter': {
          pattern: /^<<[-~]?'[a-z_]\w*'|\b[a-z_]\w*$/i,
          inside: {
            'symbol': /\b\w+/,
            'punctuation': /^<<[-~]?'|'$/
          }
        },
        'string': /[\s\S]+/
      }
    }],
    'command-literal': [{
      pattern: RegExp(/%x/.source + percentExpression),
      greedy: true,
      inside: {
        'interpolation': interpolation,
        'command': {
          pattern: /[\s\S]+/,
          alias: 'string'
        }
      }
    }, {
      pattern: /`(?:#\{[^}]+\}|#(?!\{)|\\(?:\r\n|[\s\S])|[^\\`#\r\n])*`/,
      greedy: true,
      inside: {
        'interpolation': interpolation,
        'command': {
          pattern: /[\s\S]+/,
          alias: 'string'
        }
      }
    }]
  });
  delete Prism.languages.ruby.string;
  Prism.languages.insertBefore('ruby', 'number', {
    'builtin': /\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Fixnum|Float|Hash|IO|Integer|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|Stat|String|Struct|Symbol|TMS|Thread|ThreadGroup|Time|TrueClass)\b/,
    'constant': /\b[A-Z][A-Z0-9_]*(?:[?!]|\b)/
  });
  Prism.languages.rb = Prism.languages.ruby;
})(Prism);
(function (Prism) {
  var multilineComment = /\/\*(?:[^*/]|\*(?!\/)|\/(?!\*)|<self>)*\*\//.source;
  for (var i = 0; i < 2; i++) {
    // support 4 levels of nested comments
    multilineComment = multilineComment.replace(/<self>/g, function () {
      return multilineComment;
    });
  }
  multilineComment = multilineComment.replace(/<self>/g, function () {
    return /[^\s\S]/.source;
  });
  Prism.languages.rust = {
    'comment': [{
      pattern: RegExp(/(^|[^\\])/.source + multilineComment),
      lookbehind: true,
      greedy: true
    }, {
      pattern: /(^|[^\\:])\/\/.*/,
      lookbehind: true,
      greedy: true
    }],
    'string': {
      pattern: /b?"(?:\\[\s\S]|[^\\"])*"|b?r(#*)"(?:[^"]|"(?!\1))*"\1/,
      greedy: true
    },
    'char': {
      pattern: /b?'(?:\\(?:x[0-7][\da-fA-F]|u\{(?:[\da-fA-F]_*){1,6}\}|.)|[^\\\r\n\t'])'/,
      greedy: true
    },
    'attribute': {
      pattern: /#!?\[(?:[^\[\]"]|"(?:\\[\s\S]|[^\\"])*")*\]/,
      greedy: true,
      alias: 'attr-name',
      inside: {
        'string': null // see below
      }
    },
    // Closure params should not be confused with bitwise OR |
    'closure-params': {
      pattern: /([=(,:]\s*|\bmove\s*)\|[^|]*\||\|[^|]*\|(?=\s*(?:\{|->))/,
      lookbehind: true,
      greedy: true,
      inside: {
        'closure-punctuation': {
          pattern: /^\||\|$/,
          alias: 'punctuation'
        },
        rest: null // see below
      }
    },
    'lifetime-annotation': {
      pattern: /'\w+/,
      alias: 'symbol'
    },
    'fragment-specifier': {
      pattern: /(\$\w+:)[a-z]+/,
      lookbehind: true,
      alias: 'punctuation'
    },
    'variable': /\$\w+/,
    'function-definition': {
      pattern: /(\bfn\s+)\w+/,
      lookbehind: true,
      alias: 'function'
    },
    'type-definition': {
      pattern: /(\b(?:enum|struct|trait|type|union)\s+)\w+/,
      lookbehind: true,
      alias: 'class-name'
    },
    'module-declaration': [{
      pattern: /(\b(?:crate|mod)\s+)[a-z][a-z_\d]*/,
      lookbehind: true,
      alias: 'namespace'
    }, {
      pattern: /(\b(?:crate|self|super)\s*)::\s*[a-z][a-z_\d]*\b(?:\s*::(?:\s*[a-z][a-z_\d]*\s*::)*)?/,
      lookbehind: true,
      alias: 'namespace',
      inside: {
        'punctuation': /::/
      }
    }],
    'keyword': [
    // https://github.com/rust-lang/reference/blob/master/src/keywords.md
    /\b(?:Self|abstract|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|final|fn|for|if|impl|in|let|loop|macro|match|mod|move|mut|override|priv|pub|ref|return|self|static|struct|super|trait|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\b/,
    // primitives and str
    // https://doc.rust-lang.org/stable/rust-by-example/primitives.html
    /\b(?:bool|char|f(?:32|64)|[ui](?:8|16|32|64|128|size)|str)\b/],
    // functions can technically start with an upper-case letter, but this will introduce a lot of false positives
    // and Rust's naming conventions recommend snake_case anyway.
    // https://doc.rust-lang.org/1.0.0/style/style/naming/README.html
    'function': /\b[a-z_]\w*(?=\s*(?:::\s*<|\())/,
    'macro': {
      pattern: /\b\w+!/,
      alias: 'property'
    },
    'constant': /\b[A-Z_][A-Z_\d]+\b/,
    'class-name': /\b[A-Z]\w*\b/,
    'namespace': {
      pattern: /(?:\b[a-z][a-z_\d]*\s*::\s*)*\b[a-z][a-z_\d]*\s*::(?!\s*<)/,
      inside: {
        'punctuation': /::/
      }
    },
    // Hex, oct, bin, dec numbers with visual separators and type suffix
    'number': /\b(?:0x[\dA-Fa-f](?:_?[\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:(?:\d(?:_?\d)*)?\.)?\d(?:_?\d)*(?:[Ee][+-]?\d+)?)(?:_?(?:f32|f64|[iu](?:8|16|32|64|size)?))?\b/,
    'boolean': /\b(?:false|true)\b/,
    'punctuation': /->|\.\.=|\.{1,3}|::|[{}[\];(),:]/,
    'operator': /[-+*\/%!^]=?|=[=>]?|&[&=]?|\|[|=]?|<<?=?|>>?=?|[@?]/
  };
  Prism.languages.rust['closure-params'].inside.rest = Prism.languages.rust;
  Prism.languages.rust['attribute'].inside['string'] = Prism.languages.rust['string'];
})(Prism);
(function (Prism) {
  Prism.languages.sass = Prism.languages.extend('css', {
    // Sass comments don't need to be closed, only indented
    'comment': {
      pattern: /^([ \t]*)\/[\/*].*(?:(?:\r?\n|\r)\1[ \t].+)*/m,
      lookbehind: true,
      greedy: true
    }
  });
  Prism.languages.insertBefore('sass', 'atrule', {
    // We want to consume the whole line
    'atrule-line': {
      // Includes support for = and + shortcuts
      pattern: /^(?:[ \t]*)[@+=].+/m,
      greedy: true,
      inside: {
        'atrule': /(?:@[\w-]+|[+=])/
      }
    }
  });
  delete Prism.languages.sass.atrule;
  var variable = /\$[-\w]+|#\{\$[-\w]+\}/;
  var operator = [/[+*\/%]|[=!]=|<=?|>=?|\b(?:and|not|or)\b/, {
    pattern: /(\s)-(?=\s)/,
    lookbehind: true
  }];
  Prism.languages.insertBefore('sass', 'property', {
    // We want to consume the whole line
    'variable-line': {
      pattern: /^[ \t]*\$.+/m,
      greedy: true,
      inside: {
        'punctuation': /:/,
        'variable': variable,
        'operator': operator
      }
    },
    // We want to consume the whole line
    'property-line': {
      pattern: /^[ \t]*(?:[^:\s]+ *:.*|:[^:\s].*)/m,
      greedy: true,
      inside: {
        'property': [/[^:\s]+(?=\s*:)/, {
          pattern: /(:)[^:\s]+/,
          lookbehind: true
        }],
        'punctuation': /:/,
        'variable': variable,
        'operator': operator,
        'important': Prism.languages.sass.important
      }
    }
  });
  delete Prism.languages.sass.property;
  delete Prism.languages.sass.important;

  // Now that whole lines for other patterns are consumed,
  // what's left should be selectors
  Prism.languages.insertBefore('sass', 'punctuation', {
    'selector': {
      pattern: /^([ \t]*)\S(?:,[^,\r\n]+|[^,\r\n]*)(?:,[^,\r\n]+)*(?:,(?:\r?\n|\r)\1[ \t]+\S(?:,[^,\r\n]+|[^,\r\n]*)(?:,[^,\r\n]+)*)*/m,
      lookbehind: true,
      greedy: true
    }
  });
})(Prism);
Prism.languages.scss = Prism.languages.extend('css', {
  'comment': {
    pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|\/\/.*)/,
    lookbehind: true
  },
  'atrule': {
    pattern: /@[\w-](?:\([^()]+\)|[^()\s]|\s+(?!\s))*?(?=\s+[{;])/,
    inside: {
      'rule': /@[\w-]+/
      // See rest below
    }
  },
  // url, compassified
  'url': /(?:[-a-z]+-)?url(?=\()/i,
  // CSS selector regex is not appropriate for Sass
  // since there can be lot more things (var, @ directive, nesting..)
  // a selector must start at the end of a property or after a brace (end of other rules or nesting)
  // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable
  // the end of a selector is found when there is no rules in it ( {} or {\s}) or if there is a property (because an interpolated var
  // can "pass" as a selector- e.g: proper#{$erty})
  // this one was hard to do, so please be careful if you edit this one :)
  'selector': {
    // Initial look-ahead is used to prevent matching of blank selectors
    pattern: /(?=\S)[^@;{}()]?(?:[^@;{}()\s]|\s+(?!\s)|#\{\$[-\w]+\})+(?=\s*\{(?:\}|\s|[^}][^:{}]*[:{][^}]))/,
    inside: {
      'parent': {
        pattern: /&/,
        alias: 'important'
      },
      'placeholder': /%[-\w]+/,
      'variable': /\$[-\w]+|#\{\$[-\w]+\}/
    }
  },
  'property': {
    pattern: /(?:[-\w]|\$[-\w]|#\{\$[-\w]+\})+(?=\s*:)/,
    inside: {
      'variable': /\$[-\w]+|#\{\$[-\w]+\}/
    }
  }
});
Prism.languages.insertBefore('scss', 'atrule', {
  'keyword': [/@(?:content|debug|each|else(?: if)?|extend|for|forward|function|if|import|include|mixin|return|use|warn|while)\b/i, {
    pattern: /( )(?:from|through)(?= )/,
    lookbehind: true
  }]
});
Prism.languages.insertBefore('scss', 'important', {
  // var and interpolated vars
  'variable': /\$[-\w]+|#\{\$[-\w]+\}/
});
Prism.languages.insertBefore('scss', 'function', {
  'module-modifier': {
    pattern: /\b(?:as|hide|show|with)\b/i,
    alias: 'keyword'
  },
  'placeholder': {
    pattern: /%[-\w]+/,
    alias: 'selector'
  },
  'statement': {
    pattern: /\B!(?:default|optional)\b/i,
    alias: 'keyword'
  },
  'boolean': /\b(?:false|true)\b/,
  'null': {
    pattern: /\bnull\b/,
    alias: 'keyword'
  },
  'operator': {
    pattern: /(\s)(?:[-+*\/%]|[=!]=|<=?|>=?|and|not|or)(?=\s)/,
    lookbehind: true
  }
});
Prism.languages.scss['atrule'].inside.rest = Prism.languages.scss;
Prism.languages.sql = {
  'comment': {
    pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|(?:--|\/\/|#).*)/,
    lookbehind: true
  },
  'variable': [{
    pattern: /@(["'`])(?:\\[\s\S]|(?!\1)[^\\])+\1/,
    greedy: true
  }, /@[\w.$]+/],
  'string': {
    pattern: /(^|[^@\\])("|')(?:\\[\s\S]|(?!\2)[^\\]|\2\2)*\2/,
    greedy: true,
    lookbehind: true
  },
  'identifier': {
    pattern: /(^|[^@\\])`(?:\\[\s\S]|[^`\\]|``)*`/,
    greedy: true,
    lookbehind: true,
    inside: {
      'punctuation': /^`|`$/
    }
  },
  'function': /\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\s*\()/i,
  // Should we highlight user defined functions too?
  'keyword': /\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:COL|_INSERT)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:ING|S)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\b/i,
  'boolean': /\b(?:FALSE|NULL|TRUE)\b/i,
  'number': /\b0x[\da-f]+\b|\b\d+(?:\.\d*)?|\B\.\d+\b/i,
  'operator': /[-+*\/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\b(?:AND|BETWEEN|DIV|ILIKE|IN|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\b/i,
  'punctuation': /[;[\]()`,.]/
};
Prism.languages.swift = {
  'comment': {
    // Nested comments are supported up to 2 levels
    pattern: /(^|[^\\:])(?:\/\/.*|\/\*(?:[^/*]|\/(?!\*)|\*(?!\/)|\/\*(?:[^*]|\*(?!\/))*\*\/)*\*\/)/,
    lookbehind: true,
    greedy: true
  },
  'string-literal': [
  // https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html
  {
    pattern: RegExp(/(^|[^"#])/.source + '(?:'
    // single-line string
    + /"(?:\\(?:\((?:[^()]|\([^()]*\))*\)|\r\n|[^(])|[^\\\r\n"])*"/.source + '|'
    // multi-line string
    + /"""(?:\\(?:\((?:[^()]|\([^()]*\))*\)|[^(])|[^\\"]|"(?!""))*"""/.source + ')' + /(?!["#])/.source),
    lookbehind: true,
    greedy: true,
    inside: {
      'interpolation': {
        pattern: /(\\\()(?:[^()]|\([^()]*\))*(?=\))/,
        lookbehind: true,
        inside: null // see below
      },
      'interpolation-punctuation': {
        pattern: /^\)|\\\($/,
        alias: 'punctuation'
      },
      'punctuation': /\\(?=[\r\n])/,
      'string': /[\s\S]+/
    }
  }, {
    pattern: RegExp(/(^|[^"#])(#+)/.source + '(?:'
    // single-line string
    + /"(?:\\(?:#+\((?:[^()]|\([^()]*\))*\)|\r\n|[^#])|[^\\\r\n])*?"/.source + '|'
    // multi-line string
    + /"""(?:\\(?:#+\((?:[^()]|\([^()]*\))*\)|[^#])|[^\\])*?"""/.source + ')' + '\\2'),
    lookbehind: true,
    greedy: true,
    inside: {
      'interpolation': {
        pattern: /(\\#+\()(?:[^()]|\([^()]*\))*(?=\))/,
        lookbehind: true,
        inside: null // see below
      },
      'interpolation-punctuation': {
        pattern: /^\)|\\#+\($/,
        alias: 'punctuation'
      },
      'string': /[\s\S]+/
    }
  }],
  'directive': {
    // directives with conditions
    pattern: RegExp(/#/.source + '(?:' + (/(?:elseif|if)\b/.source + '(?:[ \t]*'
    // This regex is a little complex. It's equivalent to this:
    //   (?:![ \t]*)?(?:\b\w+\b(?:[ \t]*<round>)?|<round>)(?:[ \t]*(?:&&|\|\|))?
    // where <round> is a general parentheses expression.
    + /(?:![ \t]*)?(?:\b\w+\b(?:[ \t]*\((?:[^()]|\([^()]*\))*\))?|\((?:[^()]|\([^()]*\))*\))(?:[ \t]*(?:&&|\|\|))?/.source + ')+') + '|' + /(?:else|endif)\b/.source + ')'),
    alias: 'property',
    inside: {
      'directive-name': /^#\w+/,
      'boolean': /\b(?:false|true)\b/,
      'number': /\b\d+(?:\.\d+)*\b/,
      'operator': /!|&&|\|\||[<>]=?/,
      'punctuation': /[(),]/
    }
  },
  'literal': {
    pattern: /#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\b/,
    alias: 'constant'
  },
  'other-directive': {
    pattern: /#\w+\b/,
    alias: 'property'
  },
  'attribute': {
    pattern: /@\w+/,
    alias: 'atrule'
  },
  'function-definition': {
    pattern: /(\bfunc\s+)\w+/,
    lookbehind: true,
    alias: 'function'
  },
  'label': {
    // https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID141
    pattern: /\b(break|continue)\s+\w+|\b[a-zA-Z_]\w*(?=\s*:\s*(?:for|repeat|while)\b)/,
    lookbehind: true,
    alias: 'important'
  },
  'keyword': /\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|isolated|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\b/,
  'boolean': /\b(?:false|true)\b/,
  'nil': {
    pattern: /\bnil\b/,
    alias: 'constant'
  },
  'short-argument': /\$\d+\b/,
  'omit': {
    pattern: /\b_\b/,
    alias: 'keyword'
  },
  'number': /\b(?:[\d_]+(?:\.[\de_]+)?|0x[a-f0-9_]+(?:\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\b/i,
  // A class name must start with an upper-case letter and be either 1 letter long or contain a lower-case letter.
  'class-name': /\b[A-Z](?:[A-Z_\d]*[a-z]\w*)?\b/,
  'function': /\b[a-z_]\w*(?=\s*\()/i,
  'constant': /\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\b/,
  // Operators are generic in Swift. Developers can even create new operators (e.g. +++).
  // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html#ID481
  // This regex only supports ASCII operators.
  'operator': /[-+*/%=!<>&|^~?]+|\.[.\-+*/%=!<>&|^~?]+/,
  'punctuation': /[{}[\]();,.:\\]/
};
Prism.languages.swift['string-literal'].forEach(function (rule) {
  rule.inside['interpolation'].inside = Prism.languages.swift;
});
(function (Prism) {
  Prism.languages.typescript = Prism.languages.extend('javascript', {
    'class-name': {
      pattern: /(\b(?:class|extends|implements|instanceof|interface|new|type)\s+)(?!keyof\b)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?:\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,
      lookbehind: true,
      greedy: true,
      inside: null // see below
    },
    'builtin': /\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\b/
  });

  // The keywords TypeScript adds to JavaScript
  Prism.languages.typescript.keyword.push(/\b(?:abstract|declare|is|keyof|readonly|require)\b/,
  // keywords that have to be followed by an identifier
  /\b(?:asserts|infer|interface|module|namespace|type)\b(?=\s*(?:[{_$a-zA-Z\xA0-\uFFFF]|$))/,
  // This is for `import type *, {}`
  /\btype\b(?=\s*(?:[\{*]|$))/);

  // doesn't work with TS because TS is too complex
  delete Prism.languages.typescript['parameter'];
  delete Prism.languages.typescript['literal-property'];

  // a version of typescript specifically for highlighting types
  var typeInside = Prism.languages.extend('typescript', {});
  delete typeInside['class-name'];
  Prism.languages.typescript['class-name'].inside = typeInside;
  Prism.languages.insertBefore('typescript', 'function', {
    'decorator': {
      pattern: /@[$\w\xA0-\uFFFF]+/,
      inside: {
        'at': {
          pattern: /^@/,
          alias: 'operator'
        },
        'function': /^[\s\S]+/
      }
    },
    'generic-function': {
      // e.g. foo<T extends "bar" | "baz">( ...
      pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\s*\()/,
      greedy: true,
      inside: {
        'function': /^#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*/,
        'generic': {
          pattern: /<[\s\S]+/,
          // everything after the first <
          alias: 'class-name',
          inside: typeInside
        }
      }
    }
  });
  Prism.languages.ts = Prism.languages.typescript;
})(Prism);
(function (Prism) {
  var typescript = Prism.util.clone(Prism.languages.typescript);
  Prism.languages.tsx = Prism.languages.extend('jsx', typescript);

  // doesn't work with TS because TS is too complex
  delete Prism.languages.tsx['parameter'];
  delete Prism.languages.tsx['literal-property'];

  // This will prevent collisions between TSX tags and TS generic types.
  // Idea by https://github.com/karlhorky
  // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928
  var tag = Prism.languages.tsx.tag;
  tag.pattern = RegExp(/(^|[^\w$]|(?=<\/))/.source + '(?:' + tag.pattern.source + ')', tag.pattern.flags);
  tag.lookbehind = true;
})(Prism);
Prism.languages.basic = {
  'comment': {
    pattern: /(?:!|REM\b).+/i,
    inside: {
      'keyword': /^REM/i
    }
  },
  'string': {
    pattern: /"(?:""|[!#$%&'()*,\/:;<=>?^\w +\-.])*"/,
    greedy: true
  },
  'number': /(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:E[+-]?\d+)?/i,
  'keyword': /\b(?:AS|BEEP|BLOAD|BSAVE|CALL(?: ABSOLUTE)?|CASE|CHAIN|CHDIR|CLEAR|CLOSE|CLS|COM|COMMON|CONST|DATA|DECLARE|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DIM|DO|DOUBLE|ELSE|ELSEIF|END|ENVIRON|ERASE|ERROR|EXIT|FIELD|FILES|FOR|FUNCTION|GET|GOSUB|GOTO|IF|INPUT|INTEGER|IOCTL|KEY|KILL|LINE INPUT|LOCATE|LOCK|LONG|LOOP|LSET|MKDIR|NAME|NEXT|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPEN|OPTION BASE|OUT|POKE|PUT|READ|REDIM|REM|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SELECT CASE|SHARED|SHELL|SINGLE|SLEEP|STATIC|STEP|STOP|STRING|SUB|SWAP|SYSTEM|THEN|TIMER|TO|TROFF|TRON|TYPE|UNLOCK|UNTIL|USING|VIEW PRINT|WAIT|WEND|WHILE|WRITE)(?:\$|\b)/i,
  'function': /\b(?:ABS|ACCESS|ACOS|ANGLE|AREA|ARITHMETIC|ARRAY|ASIN|ASK|AT|ATN|BASE|BEGIN|BREAK|CAUSE|CEIL|CHR|CLIP|COLLATE|COLOR|CON|COS|COSH|COT|CSC|DATE|DATUM|DEBUG|DECIMAL|DEF|DEG|DEGREES|DELETE|DET|DEVICE|DISPLAY|DOT|ELAPSED|EPS|ERASABLE|EXLINE|EXP|EXTERNAL|EXTYPE|FILETYPE|FIXED|FP|GO|GRAPH|HANDLER|IDN|IMAGE|IN|INT|INTERNAL|IP|IS|KEYED|LBOUND|LCASE|LEFT|LEN|LENGTH|LET|LINE|LINES|LOG|LOG10|LOG2|LTRIM|MARGIN|MAT|MAX|MAXNUM|MID|MIN|MISSING|MOD|NATIVE|NUL|NUMERIC|OF|OPTION|ORD|ORGANIZATION|OUTIN|OUTPUT|PI|POINT|POINTER|POINTS|POS|PRINT|PROGRAM|PROMPT|RAD|RADIANS|RANDOMIZE|RECORD|RECSIZE|RECTYPE|RELATIVE|REMAINDER|REPEAT|REST|RETRY|REWRITE|RIGHT|RND|ROUND|RTRIM|SAME|SEC|SELECT|SEQUENTIAL|SET|SETTER|SGN|SIN|SINH|SIZE|SKIP|SQR|STANDARD|STATUS|STR|STREAM|STYLE|TAB|TAN|TANH|TEMPLATE|TEXT|THERE|TIME|TIMEOUT|TRACE|TRANSFORM|TRUNCATE|UBOUND|UCASE|USE|VAL|VARIABLE|VIEWPORT|WHEN|WINDOW|WITH|ZER|ZONEWIDTH)(?:\$|\b)/i,
  'operator': /<[=>]?|>=?|[+\-*\/^=&]|\b(?:AND|EQV|IMP|NOT|OR|XOR)\b/i,
  'punctuation': /[,;:()]/
};
Prism.languages.vbnet = Prism.languages.extend('basic', {
  'comment': [{
    pattern: /(?:!|REM\b).+/i,
    inside: {
      'keyword': /^REM/i
    }
  }, {
    pattern: /(^|[^\\:])'.*/,
    lookbehind: true,
    greedy: true
  }],
  'string': {
    pattern: /(^|[^"])"(?:""|[^"])*"(?!")/,
    lookbehind: true,
    greedy: true
  },
  'keyword': /(?:\b(?:ADDHANDLER|ADDRESSOF|ALIAS|AND|ANDALSO|AS|BEEP|BLOAD|BOOLEAN|BSAVE|BYREF|BYTE|BYVAL|CALL(?: ABSOLUTE)?|CASE|CATCH|CBOOL|CBYTE|CCHAR|CDATE|CDBL|CDEC|CHAIN|CHAR|CHDIR|CINT|CLASS|CLEAR|CLNG|CLOSE|CLS|COBJ|COM|COMMON|CONST|CONTINUE|CSBYTE|CSHORT|CSNG|CSTR|CTYPE|CUINT|CULNG|CUSHORT|DATA|DATE|DECIMAL|DECLARE|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DEFAULT|DELEGATE|DIM|DIRECTCAST|DO|DOUBLE|ELSE|ELSEIF|END|ENUM|ENVIRON|ERASE|ERROR|EVENT|EXIT|FALSE|FIELD|FILES|FINALLY|FOR(?: EACH)?|FRIEND|FUNCTION|GET|GETTYPE|GETXMLNAMESPACE|GLOBAL|GOSUB|GOTO|HANDLES|IF|IMPLEMENTS|IMPORTS|IN|INHERITS|INPUT|INTEGER|INTERFACE|IOCTL|IS|ISNOT|KEY|KILL|LET|LIB|LIKE|LINE INPUT|LOCATE|LOCK|LONG|LOOP|LSET|ME|MKDIR|MOD|MODULE|MUSTINHERIT|MUSTOVERRIDE|MYBASE|MYCLASS|NAME|NAMESPACE|NARROWING|NEW|NEXT|NOT|NOTHING|NOTINHERITABLE|NOTOVERRIDABLE|OBJECT|OF|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPEN|OPERATOR|OPTION(?: BASE)?|OPTIONAL|OR|ORELSE|OUT|OVERLOADS|OVERRIDABLE|OVERRIDES|PARAMARRAY|PARTIAL|POKE|PRIVATE|PROPERTY|PROTECTED|PUBLIC|PUT|RAISEEVENT|READ|READONLY|REDIM|REM|REMOVEHANDLER|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SBYTE|SELECT(?: CASE)?|SET|SHADOWS|SHARED|SHELL|SHORT|SINGLE|SLEEP|STATIC|STEP|STOP|STRING|STRUCTURE|SUB|SWAP|SYNCLOCK|SYSTEM|THEN|THROW|TIMER|TO|TROFF|TRON|TRUE|TRY|TRYCAST|TYPE|TYPEOF|UINTEGER|ULONG|UNLOCK|UNTIL|USHORT|USING|VIEW PRINT|WAIT|WEND|WHEN|WHILE|WIDENING|WITH|WITHEVENTS|WRITE|WRITEONLY|XOR)|\B(?:#CONST|#ELSE|#ELSEIF|#END|#IF))(?:\$|\b)/i,
  'punctuation': /[,;:(){}]/
});

const emptyArray$1 = [];
const RESPONSIVE_PADDING = {
  mobile: 'medium',
  tablet: 'xlarge',
  desktop: 'xxlarge'
};
function containerWidthForEntryLayout(config) {
  return config.entryLayout === 'content' ? 'none' : 'medium';
}
const EntryLayoutSplitPaneContext = /*#__PURE__*/createContext(null);
function useEntryLayoutSplitPaneContext() {
  return useContext(EntryLayoutSplitPaneContext);
}
function ResetEntryLayoutContext(props) {
  const $ = c(2);
  let t0;
  if ($[0] !== props.children) {
    t0 = /*#__PURE__*/jsx(EntryLayoutSplitPaneContext.Provider, {
      value: null,
      children: props.children
    });
    $[0] = props.children;
    $[1] = t0;
  } else {
    t0 = $[1];
  }
  return t0;
}
function isPreviewPropsKind(props, kind) {
  return props.schema.kind === kind;
}
function FormForEntry(t0) {
  const $ = c(21);
  const {
    formatInfo,
    forceValidation,
    slugField,
    entryLayout,
    previewProps: props
  } = t0;
  let t1;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    t1 = {
      above: "mobile"
    };
    $[0] = t1;
  } else {
    t1 = $[0];
  }
  const isAboveMobile = useContentPanelQuery(t1);
  if (entryLayout === "content" && formatInfo.contentField && isAboveMobile) {
    const {
      contentField
    } = formatInfo;
    let contentFieldProps = props;
    for (const key of contentField.path) {
      if (isPreviewPropsKind(contentFieldProps, "object")) {
        contentFieldProps = contentFieldProps.fields[key];
        continue;
      }
      if (isPreviewPropsKind(contentFieldProps, "conditional")) {
        if (key !== "value") {
          throw new Error("Conditional fields referenced in a contentField path must only reference the value field.");
        }
        contentFieldProps = contentFieldProps.value;
        continue;
      }
      throw new Error(`Path specified in contentField does not point to a content field`);
    }
    let t2;
    if ($[1] !== forceValidation || $[2] !== contentFieldProps) {
      t2 = /*#__PURE__*/jsx(InnerFormValueContentFromPreviewProps, {
        forceValidation: forceValidation,
        ...contentFieldProps
      });
      $[1] = forceValidation;
      $[2] = contentFieldProps;
      $[3] = t2;
    } else {
      t2 = $[3];
    }
    let t3;
    if ($[4] !== contentField.path || $[5] !== t2) {
      t3 = /*#__PURE__*/jsx(SplitPaneSecondary, {
        children: /*#__PURE__*/jsx(EntryLayoutSplitPaneContext.Provider, {
          value: "main",
          children: /*#__PURE__*/jsx(ScrollView, {
            children: /*#__PURE__*/jsx(AddToPathProvider, {
              part: contentField.path,
              children: t2
            })
          })
        })
      });
      $[4] = contentField.path;
      $[5] = t2;
      $[6] = t3;
    } else {
      t3 = $[6];
    }
    let t4;
    if ($[7] !== forceValidation || $[8] !== contentField.path || $[9] !== props) {
      t4 = /*#__PURE__*/jsx(SplitPanePrimary, {
        children: /*#__PURE__*/jsx(EntryLayoutSplitPaneContext.Provider, {
          value: "side",
          children: /*#__PURE__*/jsx(ScrollView, {
            children: /*#__PURE__*/jsx(Box, {
              padding: RESPONSIVE_PADDING,
              children: /*#__PURE__*/jsx(InnerFormValueContentFromPreviewProps, {
                forceValidation: forceValidation,
                omitFieldAtPath: contentField.path,
                ...props
              })
            })
          })
        })
      });
      $[7] = forceValidation;
      $[8] = contentField.path;
      $[9] = props;
      $[10] = t4;
    } else {
      t4 = $[10];
    }
    let t5;
    if ($[11] !== t3 || $[12] !== t4) {
      t5 = /*#__PURE__*/jsxs(SplitView, {
        autoSaveId: "keystatic-content-split-view",
        defaultSize: 320,
        minSize: 240,
        maxSize: 480,
        flex: true,
        children: [t3, t4]
      });
      $[11] = t3;
      $[12] = t4;
      $[13] = t5;
    } else {
      t5 = $[13];
    }
    let t6;
    if ($[14] !== slugField || $[15] !== t5) {
      t6 = /*#__PURE__*/jsx(PathContextProvider, {
        value: emptyArray$1,
        children: /*#__PURE__*/jsx(SlugFieldProvider, {
          value: slugField,
          children: t5
        })
      });
      $[14] = slugField;
      $[15] = t5;
      $[16] = t6;
    } else {
      t6 = $[16];
    }
    return t6;
  }
  let t2;
  if ($[17] !== forceValidation || $[18] !== slugField || $[19] !== props) {
    t2 = /*#__PURE__*/jsx(ScrollView, {
      children: /*#__PURE__*/jsx(PageContainer, {
        paddingY: RESPONSIVE_PADDING,
        children: /*#__PURE__*/jsx(FormValueContentFromPreviewProps, {
          forceValidation: forceValidation,
          slugField: slugField,
          ...props
        })
      })
    });
    $[17] = forceValidation;
    $[18] = slugField;
    $[19] = props;
    $[20] = t2;
  } else {
    t2 = $[20];
  }
  return t2;
}

function isValidURL$1(url) {
  return url === sanitizeUrl(url);
}

const isLinkActive = editor => {
  return isElementActive(editor, 'link');
};
const wrapLink = (editor, url) => {
  if (isLinkActive(editor)) {
    Transforms.unwrapNodes(editor, {
      match: n => n.type === 'link'
    });
    return;
  }
  const {
    selection
  } = editor;
  const isCollapsed = selection && Range.isCollapsed(selection);
  if (isCollapsed) {
    Transforms.insertNodes(editor, {
      type: 'link',
      href: url,
      children: [{
        text: url
      }]
    });
  } else {
    Transforms.wrapNodes(editor, {
      type: 'link',
      href: url,
      children: [{
        text: ''
      }]
    }, {
      split: true
    });
  }
};
const LinkElement = ({
  attributes,
  children,
  element: __elementForGettingPath
}) => {
  const stringFormatter = useLocalizedStringFormatter(strings);
  const editor = useSlateStatic();
  const [currentElement, setNode] = useElementWithSetNodes(editor, __elementForGettingPath);
  const href = currentElement.href;
  const text = Node.string(currentElement);
  const [dialogOpen, setDialogOpen] = useState(false);
  const activePopoverElement = useActiveBlockPopover();
  const selected = activePopoverElement === __elementForGettingPath;
  useEffect(() => {
    if (selected && !href) {
      setDialogOpen(true);
    }
  }, [href, selected]);
  const unlink = useEventCallback$1(() => {
    Transforms.unwrapNodes(editor, {
      at: ReactEditor.findPath(editor, __elementForGettingPath)
    });
    ReactEditor.focus(editor);
  });
  return /*#__PURE__*/jsxs(Fragment, {
    children: [/*#__PURE__*/jsxs(BlockPopoverTrigger, {
      element: __elementForGettingPath,
      children: [/*#__PURE__*/jsx("a", {
        href: href,
        ...attributes,
        children: children
      }), /*#__PURE__*/jsx(BlockPopover, {
        placement: "bottom start",
        children: /*#__PURE__*/jsxs(Flex, {
          gap: "small",
          padding: "regular",
          children: [/*#__PURE__*/jsxs(TooltipTrigger, {
            children: [/*#__PURE__*/jsx(ActionButton, {
              prominence: "low",
              onPress: () => setDialogOpen(true),
              children: /*#__PURE__*/jsx(Icon, {
                src: editIcon
              })
            }), /*#__PURE__*/jsx(Tooltip, {
              children: stringFormatter.format('edit')
            })]
          }), /*#__PURE__*/jsxs(TooltipTrigger, {
            children: [/*#__PURE__*/jsx(ActionButton, {
              prominence: "low",
              onPress: () => {
                window.open(href, '_blank', 'noopener,noreferrer');
              },
              children: /*#__PURE__*/jsx(Icon, {
                src: externalLinkIcon
              })
            }), /*#__PURE__*/jsx(Tooltip, {
              children: /*#__PURE__*/jsx(Text, {
                truncate: 3,
                children: href
              })
            })]
          }), /*#__PURE__*/jsxs(TooltipTrigger, {
            children: [/*#__PURE__*/jsx(ActionButton, {
              prominence: "low",
              onPress: unlink,
              children: /*#__PURE__*/jsx(Icon, {
                src: unlinkIcon
              })
            }), /*#__PURE__*/jsx(Tooltip, {
              children: "Unlink"
            })]
          })]
        })
      })]
    }), /*#__PURE__*/jsx(DialogContainer, {
      onDismiss: () => {
        setDialogOpen(false);
        focusWithPreviousSelection(editor);
      },
      children: dialogOpen && /*#__PURE__*/jsx(LinkDialog$1, {
        text: text,
        href: href,
        onSubmit: ({
          href
        }) => {
          setNode({
            href
          });
        }
      })
    })]
  });
};
function LinkDialog$1({
  onSubmit,
  ...props
}) {
  let [href, setHref] = useState(props.href || '');
  let [touched, setTouched] = useState(false);
  let {
    dismiss
  } = useDialogContainer();
  let stringFormatter = useLocalizedStringFormatter(strings);
  const showInvalidState = touched && !isValidURL$1(href);
  return /*#__PURE__*/jsx(Dialog, {
    size: "small",
    children: /*#__PURE__*/jsxs("form", {
      style: {
        display: 'contents'
      },
      onSubmit: event => {
        if (event.target !== event.currentTarget) return;
        event.preventDefault();
        if (!showInvalidState) {
          dismiss();
          onSubmit({
            href
          });
        }
      },
      children: [/*#__PURE__*/jsxs(Heading, {
        children: [props.href ? 'Edit' : 'Add', " link"]
      }), /*#__PURE__*/jsx(Content, {
        children: /*#__PURE__*/jsxs(Flex, {
          gap: "large",
          direction: "column",
          children: [/*#__PURE__*/jsx(TextField, {
            label: "Text",
            value: props.text,
            isReadOnly: true
          }), /*#__PURE__*/jsx(TextField, {
            autoFocus: true,
            isRequired: true,
            onBlur: () => setTouched(true),
            label: "Link",
            onChange: setHref,
            value: href,
            errorMessage: showInvalidState && 'Please provide a valid URL.'
          })]
        })
      }), /*#__PURE__*/jsxs(ButtonGroup, {
        children: [/*#__PURE__*/jsx(Button, {
          onPress: dismiss,
          children: stringFormatter.format('cancel')
        }), /*#__PURE__*/jsx(Button, {
          prominence: "high",
          type: "submit",
          children: stringFormatter.format('save')
        })]
      })]
    })
  });
}
let _linkIcon = /*#__PURE__*/jsx(Icon, {
  src: linkIcon
});
function LinkButton$1() {
  const {
    editor,
    links: {
      isDisabled,
      isSelected
    }
  } = useToolbarState();
  return useMemo(() => /*#__PURE__*/jsx(ActionButton, {
    prominence: "low",
    isDisabled: isDisabled,
    isSelected: isSelected,
    onPress: () => {
      wrapLink(editor, '');
      ReactEditor.focus(editor);
    },
    children: _linkIcon
  }), [isSelected, isDisabled, editor]);
}
const linkButton = /*#__PURE__*/jsxs(TooltipTrigger, {
  children: [/*#__PURE__*/jsx(LinkButton$1, {}), /*#__PURE__*/jsx(Tooltip, {
    children: /*#__PURE__*/jsx(Text, {
      children: "Link"
    })
  })]
});

const values = {
  start: {
    key: 'start',
    label: 'Align Start',
    icon: /*#__PURE__*/jsx(Icon, {
      src: alignLeftIcon
    })
  },
  center: {
    key: 'center',
    label: 'Align Center',
    icon: /*#__PURE__*/jsx(Icon, {
      src: alignCenterIcon
    })
  },
  end: {
    key: 'end',
    label: 'Align End',
    icon: /*#__PURE__*/jsx(Icon, {
      src: alignRightIcon
    })
  }
};
const TextAlignMenu = ({
  alignment
}) => {
  const toolbarState = useToolbarState();
  const items = useMemo(() => [values.start, ...Object.keys(alignment).map(x => values[x])], [alignment]);
  return useMemo(() => /*#__PURE__*/jsxs(MenuTrigger, {
    children: [/*#__PURE__*/jsxs(TooltipTrigger, {
      children: [/*#__PURE__*/jsxs(ActionButton, {
        prominence: "low",
        children: [values[toolbarState.alignment.selected].icon, /*#__PURE__*/jsx(Icon, {
          src: chevronDownIcon
        })]
      }), /*#__PURE__*/jsx(Tooltip, {
        children: /*#__PURE__*/jsx(Text, {
          children: "Text Alignment"
        })
      })]
    }), /*#__PURE__*/jsx(Menu, {
      selectionMode: "single",
      selectedKeys: [toolbarState.alignment.selected],
      items: items,
      onAction: key => {
        if (key === 'start') {
          Transforms.unsetNodes(toolbarState.editor, 'textAlign', {
            match: node => node.type === 'paragraph' || node.type === 'heading'
          });
        } else {
          Transforms.setNodes(toolbarState.editor, {
            textAlign: key
          }, {
            match: node => node.type === 'paragraph' || node.type === 'heading'
          });
        }
        ReactEditor.focus(toolbarState.editor);
      },
      children: item => {
        return /*#__PURE__*/jsxs(Item$3, {
          textValue: item.label,
          children: [/*#__PURE__*/jsx(Text, {
            children: item.label
          }), item.icon]
        }, item.key);
      }
    })]
  }), [items, toolbarState.alignment.selected, toolbarState.editor]);
};

const insertBlockquote = editor => {
  const isActive = isElementActive(editor, 'blockquote');
  if (isActive) {
    Transforms.unwrapNodes(editor, {
      match: node => node.type === 'blockquote'
    });
  } else {
    Transforms.wrapNodes(editor, {
      type: 'blockquote',
      children: []
    });
  }
};
const BlockquoteButton = () => {
  const {
    editor,
    blockquote: {
      isDisabled,
      isSelected
    }
  } = useToolbarState();
  return useMemo(() => /*#__PURE__*/jsx(ActionButton, {
    prominence: "low",
    isSelected: isSelected,
    isDisabled: isDisabled,
    onPress: () => {
      insertBlockquote(editor);
      ReactEditor.focus(editor);
    },
    children: /*#__PURE__*/jsx(Icon, {
      src: quoteIcon
    })
  }), [editor, isDisabled, isSelected]);
};
const blockquoteButton = /*#__PURE__*/jsxs(TooltipTrigger, {
  children: [/*#__PURE__*/jsx(BlockquoteButton, {}), /*#__PURE__*/jsxs(Tooltip, {
    children: [/*#__PURE__*/jsx(Text, {
      children: "Quote"
    }), /*#__PURE__*/jsx(Kbd, {
      children: '>⎵'
    })]
  })]
});

const languages = [{
  label: 'C',
  value: 'c'
}, {
  label: 'C++',
  value: 'cpp'
}, {
  label: 'Arduino',
  value: 'arduino'
}, {
  label: 'Bash',
  value: 'bash'
}, {
  label: 'C#',
  value: 'csharp'
}, {
  label: 'CSS',
  value: 'css'
}, {
  label: 'Diff',
  value: 'diff'
}, {
  label: 'Go',
  value: 'go'
}, {
  label: 'INI',
  value: 'ini'
}, {
  label: 'Java',
  value: 'java'
}, {
  label: 'JavaScript',
  value: 'javascript'
}, {
  label: 'JSX',
  value: 'jsx'
}, {
  label: 'JSON',
  value: 'json'
}, {
  label: 'Kotlin',
  value: 'kotlin'
}, {
  label: 'Less',
  value: 'less'
}, {
  label: 'Lua',
  value: 'lua'
}, {
  label: 'Makefile',
  value: 'makefile'
}, {
  label: 'Markdown',
  value: 'markdown'
}, {
  label: 'Objective-C',
  value: 'objectivec'
}, {
  label: 'Perl',
  value: 'perl'
}, {
  label: 'PHP',
  value: 'php'
}, {
  label: 'Python',
  value: 'python'
}, {
  label: 'R',
  value: 'r'
}, {
  label: 'Ruby',
  value: 'ruby'
}, {
  label: 'Rust',
  value: 'rust'
}, {
  label: 'Sass',
  value: 'sass'
}, {
  label: 'SCSS',
  value: 'scss'
}, {
  label: 'SQL',
  value: 'sql'
}, {
  label: 'Swift',
  value: 'swift'
}, {
  label: 'TypeScript',
  value: 'typescript'
}, {
  label: 'TSX',
  value: 'tsx'
}, {
  label: 'VB.NET',
  value: 'vbnet'
}, {
  label: 'YAML',
  value: 'yaml'
}];
const canonicalNameToLabel = new Map(languages.map(x => [x.value, x.label]));
const labelToCanonicalName = new Map(languages.map(x => [x.label, x.value]));
const languageToCanonicalName = new Map(languages.map(lang => [Prism.languages[lang.value], lang.value]));
const aliasesToCanonicalName = new Map(Object.keys(Prism.languages).flatMap(lang => {
  const canonicalName = languageToCanonicalName.get(Prism.languages[lang]);
  if (canonicalName === undefined) {
    return [];
  }
  return [[lang, canonicalName]];
}));
const languagesToAliases = new Map(languages.map(lang => [lang.value, []]));
for (const [alias, canonicalName] of aliasesToCanonicalName) {
  languagesToAliases.get(canonicalName).push(alias);
}
const languagesWithAliases = [{
  label: 'Plain text',
  value: 'plain',
  aliases: []
}, ...[...languagesToAliases].map(([canonicalName, aliases]) => ({
  label: canonicalNameToLabel.get(canonicalName),
  value: canonicalName,
  aliases
}))];
const aliasesToLabel = new Map([...aliasesToCanonicalName].map(([alias, canonicalName]) => [alias, canonicalNameToLabel.get(canonicalName)]));

function CustomAttributesDialogInner(props) {
  const editor = useSlateStatic();
  const [state, setState] = useState(() => {
    return getInitialPropsValueFromInitializer(props.schema, Object.fromEntries(Object.keys(props.schema.fields).map(key => [key, props.element[key]])));
  });
  const [forceValidation, setForceValidation] = useState(false);
  const previewProps = useMemo(() => createGetPreviewProps(props.schema, setState, () => undefined), [props.schema])(state);
  let {
    dismiss
  } = useDialogContainer();
  const stringFormatter = useLocalizedStringFormatter(strings);
  return /*#__PURE__*/jsx(Dialog, {
    size: "small",
    children: /*#__PURE__*/jsxs("form", {
      style: {
        display: 'contents'
      },
      onSubmit: event => {
        if (event.target !== event.currentTarget) return;
        event.preventDefault();
        setForceValidation(true);
        if (clientSideValidateProp(props.schema, state, undefined)) {
          dismiss();
          const path = ReactEditor.findPath(editor, props.element);
          console.log(state);
          Transforms.setNodes(editor, state, {
            at: path
          });
        }
      },
      children: [/*#__PURE__*/jsxs(Heading, {
        children: [props.nodeLabel, " details"]
      }), /*#__PURE__*/jsx(Content, {
        children: /*#__PURE__*/jsx(FormValueContentFromPreviewProps, {
          forceValidation: forceValidation,
          autoFocus: true,
          ...previewProps
        })
      }), /*#__PURE__*/jsxs(ButtonGroup, {
        children: [/*#__PURE__*/jsx(Button, {
          onPress: dismiss,
          children: stringFormatter.format('cancel')
        }), /*#__PURE__*/jsx(Button, {
          prominence: "high",
          type: "submit",
          children: stringFormatter.format('save')
        })]
      })]
    })
  });
}
function CustomAttributesEditButton(props) {
  const stringFormatter = useLocalizedStringFormatter(strings);
  return /*#__PURE__*/jsxs(TooltipTrigger, {
    children: [/*#__PURE__*/jsx(ActionButton, {
      prominence: "low",
      onPress: props.onPress,
      children: /*#__PURE__*/jsx(Icon, {
        src: editIcon
      })
    }), /*#__PURE__*/jsx(Tooltip, {
      children: stringFormatter.format('edit')
    })]
  });
}
function CustomAttributesDialog(props) {
  const editor = useSlateStatic();
  return /*#__PURE__*/jsx(DialogContainer, {
    onDismiss: () => {
      props.onDismiss();
      focusWithPreviousSelection(editor);
    },
    children: props.isOpen && /*#__PURE__*/jsx(CustomAttributesDialogInner, {
      element: props.element,
      nodeLabel: props.nodeLabel,
      schema: props.schema
    })
  });
}

function CodeButton() {
  const {
    editor,
    code: {
      isDisabled,
      isSelected
    }
  } = useToolbarState();
  return useMemo(() => /*#__PURE__*/jsx(ActionButton, {
    isSelected: isSelected,
    isDisabled: isDisabled,
    prominence: "low",
    onPress: () => {
      if (isSelected) {
        Transforms.unwrapNodes(editor, {
          match: node => node.type === 'code'
        });
      } else {
        Transforms.wrapNodes(editor, {
          type: 'code',
          children: [{
            text: ''
          }]
        });
      }
      ReactEditor.focus(editor);
    },
    children: /*#__PURE__*/jsx(Icon, {
      src: codeIcon
    })
  }), [isDisabled, isSelected, editor]);
}
const codeButton = /*#__PURE__*/jsxs(TooltipTrigger, {
  children: [/*#__PURE__*/jsx(CodeButton, {}), /*#__PURE__*/jsxs(Tooltip, {
    children: [/*#__PURE__*/jsx(Text, {
      children: "Code block"
    }), /*#__PURE__*/jsx(Kbd, {
      children: "```"
    })]
  })]
});
function CodeElement({
  attributes,
  children,
  element
}) {
  var _aliasesToLabel$get;
  const editor = useSlateStatic();
  const triggerRef = useRef(null);
  const [inputValue, setInputValue] = useState(element.language ? (_aliasesToLabel$get = aliasesToLabel.get(element.language)) !== null && _aliasesToLabel$get !== void 0 ? _aliasesToLabel$get : element.language : 'Plain text');
  const [dialogOpen, setDialogOpen] = useState(false);
  const {
    documentFeatures
  } = useDocumentEditorConfig();
  const customAttributesSchema = documentFeatures.formatting.blockTypes.code && Object.keys(documentFeatures.formatting.blockTypes.code.schema.fields).length ? documentFeatures.formatting.blockTypes.code.schema : undefined;
  return /*#__PURE__*/jsxs(Fragment, {
    children: [/*#__PURE__*/jsx(BlockWrapper$1, {
      children: /*#__PURE__*/jsxs(BlockPopoverTrigger, {
        element: element,
        children: [/*#__PURE__*/jsx("pre", {
          spellCheck: "false",
          ref: triggerRef,
          children: /*#__PURE__*/jsx("code", {
            ...attributes,
            children: children
          })
        }), /*#__PURE__*/jsx(BlockPopover, {
          children: /*#__PURE__*/jsxs(Flex, {
            gap: "regular",
            padding: "regular",
            children: [/*#__PURE__*/jsx(Combobox, {
              "aria-label": "Language",
              width: "scale.2000",
              allowsCustomValue: true // allow consumers to support other languages
              ,
              inputValue: inputValue,
              onInputChange: setInputValue,
              onBlur: () => {
                const path = ReactEditor.findPath(editor, element);
                const canonicalName = aliasesToCanonicalName.get(inputValue);
                if (canonicalName !== undefined) {
                  if (canonicalName === 'plain') {
                    Transforms.unsetNodes(editor, 'language', {
                      at: path
                    });
                    return;
                  }
                  setInputValue(canonicalNameToLabel.get(canonicalName));
                  Transforms.setNodes(editor, {
                    language: canonicalName
                  }, {
                    at: path
                  });
                  return;
                }
                const nameFromLabel = labelToCanonicalName.get(inputValue);
                if (nameFromLabel !== undefined) {
                  if (nameFromLabel === 'plain') {
                    Transforms.unsetNodes(editor, 'language', {
                      at: path
                    });
                    return;
                  }
                  Transforms.setNodes(editor, {
                    language: nameFromLabel
                  }, {
                    at: path
                  });
                  return;
                }
                if (inputValue === '') {
                  Transforms.unsetNodes(editor, 'language', {
                    at: path
                  });
                  setInputValue('Plain text');
                  return;
                }
                if (inputValue !== element.language) {
                  Transforms.setNodes(editor, {
                    language: inputValue
                  }, {
                    at: path
                  });
                }
              },
              onSelectionChange: selection => {
                const path = ReactEditor.findPath(editor, element);
                if (aliasesToCanonicalName.has(inputValue)) {
                  selection = aliasesToCanonicalName.get(inputValue);
                }
                if (selection === null) {
                  if (inputValue === '') {
                    Transforms.unsetNodes(editor, 'language', {
                      at: path
                    });
                  } else {
                    Transforms.setNodes(editor, {
                      language: inputValue
                    }, {
                      at: path
                    });
                  }
                } else if (typeof selection === 'string') {
                  if (selection === 'plain') {
                    Transforms.unsetNodes(editor, 'language', {
                      at: path
                    });
                    setInputValue('Plain text');
                    return;
                  }
                  Transforms.setNodes(editor, {
                    language: selection
                  }, {
                    at: path
                  });
                  const label = canonicalNameToLabel.get(selection);
                  if (label) {
                    setInputValue(label);
                  }
                }
              },
              selectedKey: element.language ? aliasesToCanonicalName.get(element.language) : 'plain',
              items: useMemo(() => inputValue === 'Plain text' || labelToCanonicalName.has(inputValue) ? languagesWithAliases : matchSorter(languagesWithAliases, inputValue, {
                keys: ['label', 'value', 'aliases']
              }), [inputValue]),
              children: item => /*#__PURE__*/jsx(Item$1, {
                children: item.label
              }, item.value)
            }), /*#__PURE__*/jsx(ToolbarSeparator, {}), customAttributesSchema !== undefined && /*#__PURE__*/jsx(CustomAttributesEditButton, {
              onPress: () => setDialogOpen(true)
            }), /*#__PURE__*/jsxs(TooltipTrigger, {
              children: [/*#__PURE__*/jsx(ActionButton, {
                prominence: "low",
                onPress: () => {
                  Transforms.removeNodes(editor, {
                    at: ReactEditor.findPath(editor, element)
                  });
                },
                children: /*#__PURE__*/jsx(Icon, {
                  src: trash2Icon
                })
              }), /*#__PURE__*/jsx(Tooltip, {
                tone: "critical",
                children: "Remove"
              })]
            })]
          })
        })]
      })
    }), customAttributesSchema !== undefined && /*#__PURE__*/jsx(CustomAttributesDialog, {
      element: element,
      isOpen: dialogOpen,
      nodeLabel: "Code block",
      schema: customAttributesSchema,
      onDismiss: () => {
        setDialogOpen(false);
      }
    })]
  });
}

function getValueAtPropPath(value, inputPath) {
  const path = [...inputPath];
  while (path.length) {
    const key = path.shift();
    value = value[key];
  }
  return value;
}
function traverseProps(schema, value, visitor, path = []) {
  if (schema.kind === 'form' || schema.kind === 'child') {
    visitor(schema, value, path);
    return;
  }
  if (schema.kind === 'object') {
    for (const [key, childProp] of Object.entries(schema.fields)) {
      traverseProps(childProp, value[key], visitor, [...path, key]);
    }
    visitor(schema, value, path);
    return;
  }
  if (schema.kind === 'array') {
    for (const [idx, val] of value.entries()) {
      traverseProps(schema.element, val, visitor, path.concat(idx));
    }
    return visitor(schema, value, path);
  }
  if (schema.kind === 'conditional') {
    const discriminant = value.discriminant;
    visitor(schema, discriminant, path.concat('discriminant'));
    traverseProps(schema.values[discriminant.toString()], value.value, visitor, path.concat('value'));
    visitor(schema, value, path);
    return;
  }
  assertNever$1(schema);
}
function transformProps(schema, value, visitors, path = []) {
  if (schema.kind === 'form' || schema.kind === 'child') {
    if (visitors[schema.kind]) {
      return visitors[schema.kind](schema, value, path);
    }
    return value;
  }
  if (schema.kind === 'object') {
    const val = Object.fromEntries(Object.entries(schema.fields).map(([key, val]) => {
      return [key, transformProps(val, value[key], visitors, [...path, key])];
    }));
    if (visitors.object) {
      return visitors[schema.kind](schema, val, path);
    }
    return val;
  }
  if (schema.kind === 'array') {
    const val = value.map((val, idx) => transformProps(schema.element, val, visitors, path.concat(idx)));
    if (visitors.array) {
      return visitors[schema.kind](schema, val, path);
    }
    return val;
  }
  if (schema.kind === 'conditional') {
    const discriminant = transformProps(schema.discriminant, value.discriminant, visitors, path.concat('discriminant'));
    const conditionalVal = transformProps(schema.values[discriminant.toString()], value.value, visitors, path.concat('value'));
    const val = {
      discriminant,
      value: conditionalVal
    };
    if (visitors.conditional) {
      return visitors[schema.kind](schema, val, path);
    }
    return val;
  }
  assertNever$1(schema);
}
function replaceValueAtPropPath(schema, value, newValue, path) {
  if (path.length === 0) {
    return newValue;
  }
  const [key, ...newPath] = path;
  if (schema.kind === 'object') {
    return {
      ...value,
      [key]: replaceValueAtPropPath(schema.fields[key], value[key], newValue, newPath)
    };
  }
  if (schema.kind === 'conditional') {
    const conditionalValue = value;
    // replaceValueAtPropPath should not be used to only update the discriminant of a conditional field
    // if you want to update the discriminant of a conditional field, replace the value of the whole conditional field
    assert$1(key === 'value');
    return {
      discriminant: conditionalValue.discriminant,
      value: replaceValueAtPropPath(schema.values[key], conditionalValue.value, newValue, newPath)
    };
  }
  if (schema.kind === 'array') {
    const prevVal = value;
    const newVal = [...prevVal];
    setKeysForArrayValue(newVal, getKeysForArrayValue(prevVal));
    newVal[key] = replaceValueAtPropPath(schema.element, newVal[key], newValue, newPath);
    return newVal;
  }

  // we should never reach here since form or child fields don't contain other fields
  // so the only thing that can happen to them is to be replaced which happens at the start of this function when path.length === 0
  assert$1(schema.kind !== 'form' && schema.kind !== 'child');
  assertNever$1(schema);
}

function updateComponentBlockElementProps(editor, componentBlock, prevProps, _newProps, basePath, setElement, ignoreChildFields) {
  Editor$1.withoutNormalizing(editor, () => {
    const propPathsWithNodesToReplace = new Map();
    const schema = {
      kind: 'object',
      fields: componentBlock.schema
    };
    const newProps = transformProps(schema, _newProps, {
      child(schema, value, path) {
        if (!ignoreChildFields && schema.options.kind === 'block' && value) {
          try {
            let prevVal = getValueAtPropPath(prevProps, path);
            if (prevVal === value) {
              return null;
            }
          } catch {}
          propPathsWithNodesToReplace.set(JSON.stringify(path), value.map(cloneDescendent));
        }
        return null;
      }
    });
    setElement({
      props: newProps
    });
    const childPropPaths = findChildPropPathsWithPrevious(newProps, prevProps, schema, [], [], []);
    const getNode = () => Node.get(editor, basePath);
    const elementForChildren = getNode();
    if (childPropPaths.length === 0) {
      const indexes = elementForChildren.children.map((_, i) => i).reverse();
      for (const idx of indexes) {
        Transforms.removeNodes(editor, {
          at: [...basePath, idx]
        });
      }
      Transforms.insertNodes(editor, {
        type: 'component-inline-prop',
        propPath: undefined,
        children: [{
          text: ''
        }]
      }, {
        at: [...basePath, 0]
      });
      return;
    }
    const initialPropPathsToEditorPath = new Map();
    for (const [idx, node] of elementForChildren.children.entries()) {
      assert(node.type === 'component-block-prop' || node.type === 'component-inline-prop');
      initialPropPathsToEditorPath.set(node.propPath === undefined ? undefined : JSON.stringify(node.propPath), idx);
    }
    const childrenLeftToAdd = new Set(childPropPaths);
    for (const childProp of childPropPaths) {
      if (childProp.prevPath === undefined) {
        continue;
      }
      const stringifiedPath = JSON.stringify(childProp.prevPath);
      const idxInChildren = initialPropPathsToEditorPath.get(stringifiedPath);
      if (idxInChildren !== undefined) {
        const prevNode = elementForChildren.children[idxInChildren];
        assert(prevNode.propPath !== undefined);
        if (!areArraysEqual(childProp.path, prevNode.propPath)) {
          Transforms.setNodes(editor, {
            propPath: childProp.path
          }, {
            at: [...basePath, idxInChildren]
          });
        }
        childrenLeftToAdd.delete(childProp);
        initialPropPathsToEditorPath.delete(stringifiedPath);
      }
    }
    let newIdx = getNode().children.length;
    for (const childProp of childrenLeftToAdd) {
      Transforms.insertNodes(editor, {
        type: `component-${childProp.options.kind}-prop`,
        propPath: childProp.path,
        children: [childProp.options.kind === 'block' ? {
          type: 'paragraph',
          children: [{
            text: ''
          }]
        } : {
          text: ''
        }]
      }, {
        at: [...basePath, newIdx]
      });
      newIdx++;
    }
    const pathsToRemove = [];
    for (const [, idxInChildren] of initialPropPathsToEditorPath) {
      pathsToRemove.push(Editor$1.pathRef(editor, [...basePath, idxInChildren]));
    }
    for (const pathRef of pathsToRemove) {
      const path = pathRef.unref();
      assert(path !== null);
      Transforms.removeNodes(editor, {
        at: path
      });
    }
    const propPathsToExpectedIndexes = new Map();
    for (const [idx, thing] of childPropPaths.entries()) {
      propPathsToExpectedIndexes.set(JSON.stringify(thing.path), idx);
    }
    outer: while (true) {
      for (const [idx, childNode] of getNode().children.entries()) {
        assert(childNode.type === 'component-block-prop' || childNode.type === 'component-inline-prop');
        const expectedIndex = propPathsToExpectedIndexes.get(JSON.stringify(childNode.propPath));
        assert(expectedIndex !== undefined);
        if (idx === expectedIndex) continue;
        Transforms.moveNodes(editor, {
          at: [...basePath, idx],
          to: [...basePath, expectedIndex]
        });

        // start the for-loop again
        continue outer;
      }
      break;
    }
    for (const [propPath, val] of propPathsWithNodesToReplace) {
      const idx = propPathsToExpectedIndexes.get(propPath);
      if (idx !== undefined) {
        Transforms.removeNodes(editor, {
          at: [...basePath, idx]
        });
        Transforms.insertNodes(editor, {
          type: 'component-block-prop',
          propPath: JSON.parse(propPath),
          children: val
        }, {
          at: [...basePath, idx]
        });
      }
    }
  });
}
function findChildPropPathsWithPrevious(value, prevValue, schema, newPath, prevPath, pathWithKeys) {
  switch (schema.kind) {
    case 'form':
      return [];
    case 'child':
      return [{
        path: newPath,
        prevPath,
        options: schema.options
      }];
    case 'conditional':
      const hasChangedDiscriminant = value.discriminant === prevValue.discriminant;
      return findChildPropPathsWithPrevious(value.value, hasChangedDiscriminant ? prevValue.value : getInitialPropsValue(schema.values[value.discriminant]), schema.values[value.discriminant], newPath.concat('value'), hasChangedDiscriminant ? undefined : prevPath === null || prevPath === void 0 ? void 0 : prevPath.concat('value'), hasChangedDiscriminant ? undefined : pathWithKeys === null || pathWithKeys === void 0 ? void 0 : pathWithKeys.concat('value'));
    case 'object':
      {
        const paths = [];
        for (const key of Object.keys(schema.fields)) {
          paths.push(...findChildPropPathsWithPrevious(value[key], prevValue[key], schema.fields[key], newPath.concat(key), prevPath === null || prevPath === void 0 ? void 0 : prevPath.concat(key), pathWithKeys === null || pathWithKeys === void 0 ? void 0 : pathWithKeys.concat(key)));
        }
        return paths;
      }
    case 'array':
      {
        const paths = [];
        const prevKeys = getKeysForArrayValue(prevValue);
        const keys = getKeysForArrayValue(value);
        for (const [i, val] of value.entries()) {
          const key = keys[i];
          const prevIdx = prevKeys.indexOf(key);
          let prevVal;
          if (prevIdx === -1) {
            prevVal = getInitialPropsValue(schema.element);
          } else {
            prevVal = prevValue[prevIdx];
          }
          paths.push(...findChildPropPathsWithPrevious(val, prevVal, schema.element, newPath.concat(i), prevIdx === -1 ? undefined : prevPath === null || prevPath === void 0 ? void 0 : prevPath.concat(prevIdx), prevIdx === -1 ? undefined : pathWithKeys === null || pathWithKeys === void 0 ? void 0 : pathWithKeys.concat(key)));
        }
        return paths;
      }
  }
}

const ChildrenByPathContext = /*#__PURE__*/React.createContext({});
function ChildFieldEditable({
  path
}) {
  const childrenByPath = useContext(ChildrenByPathContext);
  const child = childrenByPath[JSON.stringify(path)];
  if (child === undefined) {
    return null;
  }
  return child;
}
function ComponentBlockRender({
  componentBlock,
  element,
  onChange,
  children,
  onRemove
}) {
  const getPreviewProps = useMemo(() => {
    return createGetPreviewProps({
      kind: 'object',
      fields: componentBlock.schema
    }, cb => onChange(cb, true), path => /*#__PURE__*/jsx(ChildFieldEditable, {
      path: path
    }));
  }, [onChange, componentBlock]);
  const previewProps = getPreviewProps(element.props);
  const childrenByPath = {};
  let maybeChild;
  let extraChildren = [];
  children.forEach(child => {
    const propPath = child.props.children.props.element.propPath;
    if (propPath === undefined) {
      maybeChild = child;
    } else {
      const schema = getSchemaAtPropPath(propPath, element.props, componentBlock.schema);
      if ((schema === null || schema === void 0 ? void 0 : schema.kind) === 'child' && schema.options.kind === 'block' && schema.options.editIn === 'modal') {
        extraChildren.push(child);
        return;
      }
      childrenByPath[JSON.stringify(propPathWithIndiciesToKeys(propPath, element.props))] = child;
    }
  });
  const ComponentBlockPreview = componentBlock.preview;
  return /*#__PURE__*/jsxs(ChildrenByPathContext.Provider, {
    value: childrenByPath,
    children: [useMemo(() => /*#__PURE__*/jsx(ComponentBlockPreview, {
      onRemove: onRemove,
      ...previewProps
    }), [ComponentBlockPreview, onRemove, previewProps]), /*#__PURE__*/jsxs("span", {
      className: css({
        caretColor: 'transparent',
        '& ::selection': {
          backgroundColor: 'transparent'
        },
        overflow: 'hidden',
        width: 1,
        height: 1,
        position: 'absolute'
      }),
      children: [maybeChild, extraChildren]
    })]
  });
}

// note this is written to avoid crashing when the given prop path doesn't exist in the value
// this is because editor updates happen asynchronously but we have some logic to ensure
// that updating the props of a component block synchronously updates it
// (this is primarily to not mess up things like cursors in inputs)
// this means that sometimes the child elements will be inconsistent with the values
// so to deal with this, we return a prop path this is "wrong" but won't break anything
function propPathWithIndiciesToKeys(propPath, val) {
  return propPath.map(key => {
    var _val2;
    if (typeof key === 'string') {
      var _val;
      val = (_val = val) === null || _val === void 0 ? void 0 : _val[key];
      return key;
    }
    if (!Array.isArray(val)) {
      val = undefined;
      return '';
    }
    const keys = getKeysForArrayValue(val);
    val = (_val2 = val) === null || _val2 === void 0 ? void 0 : _val2[key];
    return keys[key];
  });
}

function ChromefulComponentBlockElement(props) {
  var _props$componentBlock;
  const selected = useSelected();
  const isValid = useMemo(() => clientSideValidateProp({
    kind: 'object',
    fields: props.componentBlock.schema
  }, props.elementProps, undefined), [props.componentBlock, props.elementProps]);
  const [editMode, setEditMode] = useState(false);
  const onCloseEditMode = useCallback(() => {
    setEditMode(false);
  }, []);
  const onShowEditMode = useCallback(() => {
    setEditMode(true);
  }, []);
  const ChromefulToolbar = (_props$componentBlock = props.componentBlock.toolbar) !== null && _props$componentBlock !== void 0 ? _props$componentBlock : DefaultToolbarWithChrome;
  return /*#__PURE__*/jsx(BlockPrimitive, {
    selected: selected,
    ...props.attributes,
    children: /*#__PURE__*/jsxs(Flex, {
      gap: "medium",
      direction: "column",
      children: [/*#__PURE__*/jsx(NotEditable, {
        children: /*#__PURE__*/jsx(Text, {
          casing: "uppercase",
          color: "neutralSecondary",
          weight: "medium",
          size: "small",
          children: props.componentBlock.label
        })
      }), /*#__PURE__*/jsxs(Fragment$1, {
        children: [props.renderedBlock, /*#__PURE__*/jsx(ChromefulToolbar, {
          isValid: isValid,
          onRemove: props.onRemove,
          props: props.previewProps,
          onShowEditMode: onShowEditMode
        }), /*#__PURE__*/jsx(DialogContainer, {
          onDismiss: () => onCloseEditMode(),
          children: (() => {
            if (!editMode) {
              return;
            }
            return /*#__PURE__*/jsxs(Dialog, {
              children: [/*#__PURE__*/jsxs(Heading, {
                children: ["Edit ", props.componentBlock.label]
              }), /*#__PURE__*/jsx(FormValue$1, {
                props: props.previewProps,
                onClose: onCloseEditMode
              })]
            });
          })()
        })]
      })]
    })
  });
}

/**
 * Wrap block content, delimiting it from surrounding content, and provide a
 * focus indicator because the cursor may not be present.
 */
const BlockPrimitive = /*#__PURE__*/forwardRef(function BlockPrimitive({
  children,
  selected,
  ...attributes
}, ref) {
  return /*#__PURE__*/jsx("div", {
    ...attributes,
    ref: ref,
    className: css(blockElementSpacing$1, {
      position: 'relative',
      paddingInlineStart: tokenSchema.size.space.xlarge,
      marginBottom: tokenSchema.size.space.xlarge,
      '::before': {
        display: 'block',
        content: '" "',
        backgroundColor: selected ? tokenSchema.color.alias.borderSelected : tokenSchema.color.alias.borderIdle,
        borderRadius: 4,
        width: 4,
        position: 'absolute',
        left: 0,
        top: 0,
        bottom: 0,
        zIndex: 1
      }
    }),
    children: children
  });
});
function DefaultToolbarWithChrome({
  onShowEditMode,
  onRemove,
  isValid
}) {
  const stringFormatter = useLocalizedStringFormatter(strings);
  return /*#__PURE__*/jsx(NotEditable, {
    children: /*#__PURE__*/jsxs(Flex, {
      direction: "column",
      gap: "medium",
      children: [/*#__PURE__*/jsxs(Flex, {
        alignItems: "center",
        gap: "regular",
        UNSAFE_style: {
          userSelect: 'none'
        },
        children: [/*#__PURE__*/jsx(ActionButton, {
          onPress: () => onShowEditMode(),
          children: stringFormatter.format('edit')
        }), /*#__PURE__*/jsxs(TooltipTrigger, {
          children: [/*#__PURE__*/jsx(ActionButton, {
            prominence: "low",
            onPress: onRemove,
            children: /*#__PURE__*/jsx(Icon, {
              src: trash2Icon
            })
          }), /*#__PURE__*/jsx(Tooltip, {
            tone: "critical",
            children: stringFormatter.format('delete')
          })]
        })]
      }), !isValid && /*#__PURE__*/jsx(FieldMessage, {
        children: "Contains invalid fields. Please edit."
      })]
    })
  });
}
function FormValue$1({
  onClose,
  props
}) {
  const stringFormatter = useLocalizedStringFormatter(strings);
  const formId = useId();
  const [forceValidation, setForceValidation] = useState(false);
  const [state, setState] = useState(() => previewPropsToValue(props));
  const previewProps = useMemo(() => createGetPreviewProps(props.schema, setState, () => undefined), [props.schema])(state);
  return /*#__PURE__*/jsxs(Fragment, {
    children: [/*#__PURE__*/jsx(Content, {
      children: /*#__PURE__*/jsx(Flex, {
        id: formId,
        elementType: "form",
        onSubmit: event => {
          if (event.target !== event.currentTarget) return;
          event.preventDefault();
          if (!clientSideValidateProp(props.schema, state, undefined)) {
            setForceValidation(true);
          } else {
            console.log(valueToUpdater(state, props.schema));
            setValueToPreviewProps(state, props);
            onClose();
          }
        },
        direction: "column",
        gap: "xxlarge",
        children: /*#__PURE__*/jsx(FormValueContentFromPreviewProps, {
          ...previewProps,
          forceValidation: forceValidation
        })
      })
    }), /*#__PURE__*/jsxs(ButtonGroup, {
      children: [/*#__PURE__*/jsx(Button, {
        onPress: onClose,
        children: stringFormatter.format('cancel')
      }), /*#__PURE__*/jsx(Button, {
        form: formId,
        prominence: "high",
        type: "submit",
        children: "Done"
      })]
    })]
  });
}

function ChromelessComponentBlockElement(props) {
  var _props$componentBlock;
  const hasToolbar = props.componentBlock.toolbar !== null;
  const ChromelessToolbar = (_props$componentBlock = props.componentBlock.toolbar) !== null && _props$componentBlock !== void 0 ? _props$componentBlock : DefaultToolbarWithoutChrome;
  return /*#__PURE__*/jsx("div", {
    ...props.attributes,
    className: blockElementSpacing$1,
    children: hasToolbar ? /*#__PURE__*/jsxs(BlockPopoverTrigger, {
      element: props.element,
      children: [/*#__PURE__*/jsx("div", {
        children: props.renderedBlock
      }), /*#__PURE__*/jsx(BlockPopover, {
        children: /*#__PURE__*/jsx(ChromelessToolbar, {
          onRemove: props.onRemove,
          props: props.previewProps
        })
      })]
    }) : /*#__PURE__*/jsx("div", {
      children: props.renderedBlock
    })
  });
}
function DefaultToolbarWithoutChrome({
  onRemove
}) {
  return /*#__PURE__*/jsxs(TooltipTrigger, {
    children: [/*#__PURE__*/jsx(ActionButton, {
      onPress: onRemove,
      margin: "regular",
      children: /*#__PURE__*/jsx(Icon, {
        src: trashIcon
      })
    }), /*#__PURE__*/jsx(Tooltip, {
      tone: "critical",
      children: "Remove"
    })]
  });
}

function findChildPropPathsForProp(value, schema, path) {
  switch (schema.kind) {
    case 'form':
      return [];
    case 'child':
      return [{
        path: path,
        options: schema.options
      }];
    case 'conditional':
      return findChildPropPathsForProp(value.value, schema.values[value.discriminant], path.concat('value'));
    case 'object':
      {
        const paths = [];
        Object.keys(schema.fields).forEach(key => {
          paths.push(...findChildPropPathsForProp(value[key], schema.fields[key], path.concat(key)));
        });
        return paths;
      }
    case 'array':
      {
        const paths = [];
        value.forEach((val, i) => {
          paths.push(...findChildPropPathsForProp(val, schema.element, path.concat(i)));
        });
        return paths;
      }
  }
}
function findChildPropPaths(value, props) {
  const propPaths = findChildPropPathsForProp(value, {
    kind: 'object',
    fields: props
  }, []);
  if (!propPaths.length) {
    return [{
      path: undefined,
      options: {
        kind: 'inline',
        placeholder: ''
      }
    }];
  }
  return propPaths;
}

function getAncestorComponentBlock(editor) {
  if (editor.selection) {
    const ancestorEntry = Editor$1.above(editor, {
      match: node => isBlock(node) && node.type !== 'paragraph'
    });
    if (ancestorEntry && (ancestorEntry[0].type === 'component-block-prop' || ancestorEntry[0].type === 'component-inline-prop')) {
      return {
        isInside: true,
        componentBlock: Editor$1.parent(editor, ancestorEntry[1]),
        prop: ancestorEntry
      };
    }
  }
  return {
    isInside: false
  };
}
const alreadyNormalizedThings = new WeakMap();
function normalizeNodeWithinComponentProp([node, path], editor, fieldOptions) {
  let alreadyNormalizedNodes = alreadyNormalizedThings.get(fieldOptions);
  if (!alreadyNormalizedNodes) {
    alreadyNormalizedNodes = new WeakSet();
    alreadyNormalizedThings.set(fieldOptions, alreadyNormalizedNodes);
  }
  if (alreadyNormalizedNodes.has(node)) {
    return false;
  }
  let didNormalization = false;
  if (fieldOptions.inlineMarks !== 'inherit' && Text$1.isText(node)) {
    didNormalization = normalizeTextBasedOnInlineMarksAndSoftBreaks([node, path], editor, fieldOptions.inlineMarks, fieldOptions.softBreaks);
  }
  if (Element$1.isElement(node)) {
    let childrenHasChanged = node.children.map((node, i) => normalizeNodeWithinComponentProp([node, [...path, i]], editor, fieldOptions))
    // .map then .some because we don't want to exit early
    .some(x => x);
    if (fieldOptions.kind === 'block') {
      if (node.type === 'component-block') {
        if (!fieldOptions.componentBlocks) {
          Transforms.unwrapNodes(editor, {
            at: path
          });
          didNormalization = true;
        }
      } else {
        didNormalization = normalizeElementBasedOnDocumentFeatures([node, path], editor, fieldOptions.documentFeatures) || childrenHasChanged;
      }
    } else {
      didNormalization = normalizeInlineBasedOnLinks([node, path], editor, fieldOptions.documentFeatures.links);
    }
  }
  if (didNormalization === false) {
    alreadyNormalizedNodes.add(node);
  }
  return didNormalization;
}
function canSchemaContainChildField(rootSchema) {
  const queue = new Set([rootSchema]);
  for (const schema of queue) {
    if (schema.kind === 'form') ; else if (schema.kind === 'child') {
      return true;
    } else if (schema.kind === 'array') {
      queue.add(schema.element);
    } else if (schema.kind === 'object') {
      for (const innerProp of Object.values(schema.fields)) {
        queue.add(innerProp);
      }
    } else if (schema.kind === 'conditional') {
      for (const innerProp of Object.values(schema.values)) {
        queue.add(innerProp);
      }
    } else {
      assertNever(schema);
    }
  }
  return false;
}
function doesSchemaOnlyEverContainASingleChildField(rootSchema) {
  const queue = new Set([rootSchema]);
  let hasFoundChildField = false;
  for (const schema of queue) {
    if (schema.kind === 'form') ; else if (schema.kind === 'child') {
      if (hasFoundChildField) {
        return false;
      }
      hasFoundChildField = true;
    } else if (schema.kind === 'array') {
      if (canSchemaContainChildField(schema.element)) {
        return false;
      }
    } else if (schema.kind === 'object') {
      for (const innerProp of Object.values(schema.fields)) {
        queue.add(innerProp);
      }
    } else if (schema.kind === 'conditional') {
      for (const innerProp of Object.values(schema.values)) {
        queue.add(innerProp);
      }
    } else {
      assertNever(schema);
    }
  }
  return hasFoundChildField;
}
function findArrayFieldsWithSingleChildField(schema, value) {
  const propPaths = [];
  traverseProps(schema, value, (schema, value, path) => {
    if (schema.kind === 'array' && doesSchemaOnlyEverContainASingleChildField(schema.element)) {
      propPaths.push([path, schema]);
    }
  });
  return propPaths;
}
function isEmptyChildFieldNode(element) {
  const firstChild = element.children[0];
  return element.children.length === 1 && (element.type === 'component-inline-prop' && firstChild.type === undefined && firstChild.text === '' || element.type === 'component-block-prop' && firstChild.type === 'paragraph' && firstChild.children.length === 1 && firstChild.children[0].type === undefined && firstChild.children[0].text === '');
}
function withComponentBlocks(blockComponents, editorDocumentFeatures, editor) {
  // note that conflicts between the editor document features
  // and the child field document features are dealt with elsewhere
  const memoizedGetDocumentFeaturesForChildField = weakMemoize$1(options => {
    return getDocumentFeaturesForChildField(editorDocumentFeatures, options);
  });
  const {
    normalizeNode,
    deleteBackward,
    insertBreak
  } = editor;
  editor.deleteBackward = unit => {
    if (editor.selection) {
      const ancestorComponentBlock = getAncestorComponentBlock(editor);
      if (ancestorComponentBlock.isInside && Range.isCollapsed(editor.selection) && Editor$1.isStart(editor, editor.selection.anchor, ancestorComponentBlock.prop[1]) && ancestorComponentBlock.prop[1][ancestorComponentBlock.prop[1].length - 1] === 0) {
        Transforms.unwrapNodes(editor, {
          at: ancestorComponentBlock.componentBlock[1]
        });
        return;
      }
    }
    deleteBackward(unit);
  };
  editor.insertBreak = () => {
    const ancestorComponentBlock = getAncestorComponentBlock(editor);
    if (editor.selection && ancestorComponentBlock.isInside) {
      const {
        prop: [componentPropNode, componentPropPath],
        componentBlock: [componentBlockNode, componentBlockPath]
      } = ancestorComponentBlock;
      const isLastProp = componentPropPath[componentPropPath.length - 1] === componentBlockNode.children.length - 1;
      if (componentPropNode.type === 'component-block-prop') {
        const [[paragraphNode, paragraphPath]] = Editor$1.nodes(editor, {
          match: node => node.type === 'paragraph'
        });
        const isLastParagraph = paragraphPath[paragraphPath.length - 1] === componentPropNode.children.length - 1;
        if (Node.string(paragraphNode) === '' && isLastParagraph) {
          if (isLastProp) {
            Transforms.moveNodes(editor, {
              at: paragraphPath,
              to: Path.next(ancestorComponentBlock.componentBlock[1])
            });
          } else {
            Transforms.move(editor, {
              distance: 1,
              unit: 'line'
            });
            Transforms.removeNodes(editor, {
              at: paragraphPath
            });
          }
          return;
        }
      }
      if (componentPropNode.type === 'component-inline-prop') {
        Editor$1.withoutNormalizing(editor, () => {
          const componentBlock = blockComponents[componentBlockNode.component];
          if (componentPropNode.propPath !== undefined && componentBlock !== undefined) {
            const rootSchema = {
              kind: 'object',
              fields: componentBlock.schema
            };
            const ancestorFields = getAncestorSchemas(rootSchema, componentPropNode.propPath, componentBlockNode.props);
            const idx = [...ancestorFields].reverse().findIndex(item => item.kind === 'array');
            if (idx !== -1) {
              const arrayFieldIdx = ancestorFields.length - 1 - idx;
              const arrayField = ancestorFields[arrayFieldIdx];
              assert(arrayField.kind === 'array');
              const val = getValueAtPropPath(componentBlockNode.props, componentPropNode.propPath.slice(0, arrayFieldIdx));
              if (doesSchemaOnlyEverContainASingleChildField(arrayField.element)) {
                if (Node.string(componentPropNode) === '' && val.length - 1 === componentPropNode.propPath[arrayFieldIdx]) {
                  Transforms.removeNodes(editor, {
                    at: componentPropPath
                  });
                  if (isLastProp) {
                    Transforms.insertNodes(editor, {
                      type: 'paragraph',
                      children: [{
                        text: ''
                      }]
                    }, {
                      at: Path.next(componentBlockPath)
                    });
                    Transforms.select(editor, Path.next(componentBlockPath));
                  } else {
                    Transforms.move(editor, {
                      distance: 1,
                      unit: 'line'
                    });
                  }
                } else {
                  insertBreak();
                }
                return;
              }
            }
          }
          Transforms.splitNodes(editor, {
            always: true
          });
          const splitNodePath = Path.next(componentPropPath);
          if (isLastProp) {
            Transforms.moveNodes(editor, {
              at: splitNodePath,
              to: Path.next(componentBlockPath)
            });
          } else {
            moveChildren(editor, splitNodePath, [...Path.next(splitNodePath), 0]);
            Transforms.removeNodes(editor, {
              at: splitNodePath
            });
          }
        });
        return;
      }
    }
    insertBreak();
  };
  editor.normalizeNode = entry => {
    const [node, path] = entry;
    if (node.type === 'component-inline-prop' && !node.propPath && (node.children.length !== 1 || !Text$1.isText(node.children[0]) || node.children[0].text !== '')) {
      Transforms.removeNodes(editor, {
        at: path
      });
      return;
    }
    if (node.type === 'component-block') {
      const componentBlock = blockComponents[node.component];
      if (componentBlock) {
        const rootSchema = {
          kind: 'object',
          fields: componentBlock.schema
        };
        const updatedProps = addMissingFields(node.props, rootSchema);
        if (updatedProps !== node.props) {
          Transforms.setNodes(editor, {
            props: updatedProps
          }, {
            at: path
          });
          return;
        }
        for (const [propPath, arrayField] of findArrayFieldsWithSingleChildField(rootSchema, node.props)) {
          if (node.children.length === 1 && node.children[0].type === 'component-inline-prop' && node.children[0].propPath === undefined) {
            break;
          }
          const nodesWithin = [];
          for (const [idx, childNode] of node.children.entries()) {
            if ((childNode.type === 'component-block-prop' || childNode.type === 'component-inline-prop') && childNode.propPath !== undefined) {
              const subPath = childNode.propPath.concat();
              while (subPath.length) {
                if (typeof subPath.pop() === 'number') break;
              }
              if (areArraysEqual(propPath, subPath)) {
                nodesWithin.push([idx, childNode]);
              }
            }
          }
          const arrVal = getValueAtPropPath(node.props, propPath);
          const prevKeys = getKeysForArrayValue(arrVal);
          const prevKeysSet = new Set(prevKeys);
          const alreadyUsedIndicies = new Set();
          const newVal = [];
          const newKeys = [];
          const getNewKey = () => {
            let key = getNewArrayElementKey();
            while (prevKeysSet.has(key)) {
              key = getNewArrayElementKey();
            }
            return key;
          };
          for (const [, node] of nodesWithin) {
            const idxFromValue = node.propPath[propPath.length];
            assert(typeof idxFromValue === 'number');
            if (arrVal.length <= idxFromValue || alreadyUsedIndicies.has(idxFromValue) && isEmptyChildFieldNode(node)) {
              newVal.push(getInitialPropsValue(arrayField.element));
              newKeys.push(getNewKey());
            } else {
              alreadyUsedIndicies.add(idxFromValue);
              newVal.push(arrVal[idxFromValue]);
              newKeys.push(alreadyUsedIndicies.has(idxFromValue) ? getNewKey() : prevKeys[idxFromValue]);
            }
          }
          setKeysForArrayValue(newVal, newKeys);
          if (!areArraysEqual(arrVal, newVal)) {
            const transformedProps = replaceValueAtPropPath(rootSchema, node.props, newVal, propPath);
            Transforms.setNodes(editor, {
              props: transformedProps
            }, {
              at: path
            });
            for (const [idx, [idxInChildrenOfBlock, nodeWithin]] of nodesWithin.entries()) {
              const newPropPath = [...nodeWithin.propPath];
              newPropPath[propPath.length] = idx;
              Transforms.setNodes(editor, {
                propPath: newPropPath
              }, {
                at: [...path, idxInChildrenOfBlock]
              });
            }
            return;
          }
        }
        const missingKeys = new Map(findChildPropPaths(node.props, componentBlock.schema).map(x => [JSON.stringify(x.path), x.options.kind]));
        node.children.forEach(node => {
          assert(node.type === 'component-block-prop' || node.type === 'component-inline-prop');
          missingKeys.delete(JSON.stringify(node.propPath));
        });
        if (missingKeys.size) {
          Transforms.insertNodes(editor, [...missingKeys].map(([prop, kind]) => ({
            type: `component-${kind}-prop`,
            propPath: prop ? JSON.parse(prop) : prop,
            children: [{
              text: ''
            }]
          })), {
            at: [...path, node.children.length]
          });
          return;
        }
        const foundProps = new Set();
        const stringifiedInlinePropPaths = {};
        findChildPropPaths(node.props, blockComponents[node.component].schema).forEach((x, index) => {
          stringifiedInlinePropPaths[JSON.stringify(x.path)] = {
            options: x.options,
            index
          };
        });
        for (const [index, childNode] of node.children.entries()) {
          if (
          // children that are not these will be handled by
          // the generic allowedChildren normalization
          childNode.type !== 'component-inline-prop' && childNode.type !== 'component-block-prop') {
            continue;
          }
          const childPath = [...path, index];
          const stringifiedPropPath = JSON.stringify(childNode.propPath);
          if (stringifiedInlinePropPaths[stringifiedPropPath] === undefined) {
            Transforms.removeNodes(editor, {
              at: childPath
            });
            return;
          }
          if (foundProps.has(stringifiedPropPath)) {
            Transforms.removeNodes(editor, {
              at: childPath
            });
            return;
          }
          foundProps.add(stringifiedPropPath);
          const propInfo = stringifiedInlinePropPaths[stringifiedPropPath];
          const expectedIndex = propInfo.index;
          if (index !== expectedIndex) {
            Transforms.moveNodes(editor, {
              at: childPath,
              to: [...path, expectedIndex]
            });
            return;
          }
          const expectedChildNodeType = `component-${propInfo.options.kind}-prop`;
          if (childNode.type !== expectedChildNodeType) {
            Transforms.setNodes(editor, {
              type: expectedChildNodeType
            }, {
              at: childPath
            });
            return;
          }
          const documentFeatures = memoizedGetDocumentFeaturesForChildField(propInfo.options);
          if (normalizeNodeWithinComponentProp([childNode, childPath], editor, documentFeatures)) {
            return;
          }
        }
      }
    }
    normalizeNode(entry);
  };
  return editor;
}

// the only thing that this will fix is a new field being added to an object field, nothing else.
function addMissingFields(value, schema) {
  if (schema.kind === 'child' || schema.kind === 'form') {
    return value;
  }
  if (schema.kind === 'conditional') {
    const conditionalValue = value;
    const updatedInnerValue = addMissingFields(conditionalValue.value, schema.values[conditionalValue.discriminant.toString()]);
    if (updatedInnerValue === conditionalValue.value) {
      return value;
    }
    return {
      discriminant: conditionalValue.discriminant,
      value: updatedInnerValue
    };
  }
  if (schema.kind === 'array') {
    const arrValue = value;
    const newArrValue = arrValue.map(x => addMissingFields(x, schema.element));
    if (areArraysEqual(arrValue, newArrValue)) {
      return value;
    }
    return newArrValue;
  }
  if (schema.kind === 'object') {
    const objectValue = value;
    let hasChanged = false;
    const newObjectValue = {};
    for (const [key, innerSchema] of Object.entries(schema.fields)) {
      const innerValue = objectValue[key];
      if (innerValue === undefined) {
        hasChanged = true;
        newObjectValue[key] = getInitialPropsValue(innerSchema);
        continue;
      }
      const newInnerValue = addMissingFields(innerValue, innerSchema);
      if (newInnerValue !== innerValue) {
        hasChanged = true;
      }
      newObjectValue[key] = newInnerValue;
    }
    if (hasChanged) {
      return newObjectValue;
    }
    return value;
  }
  assertNever(schema);
}

function ComponentInlineProp(props) {
  return /*#__PURE__*/jsx("span", {
    ...props.attributes,
    children: props.children
  });
}
function getInitialValue(type, componentBlock) {
  const props = getInitialPropsValue({
    kind: 'object',
    fields: componentBlock.schema
  });
  return {
    type: 'component-block',
    component: type,
    props,
    children: findChildPropPaths(props, componentBlock.schema).map(x => ({
      type: `component-${x.options.kind}-prop`,
      propPath: x.path,
      children: [x.options.kind === 'block' ? {
        type: 'paragraph',
        children: [{
          text: ''
        }]
      } : {
        text: ''
      }]
    }))
  };
}
function insertComponentBlock(editor, componentBlocks, componentBlock) {
  const node = getInitialValue(componentBlock, componentBlocks[componentBlock]);
  insertNodesButReplaceIfSelectionIsAtEmptyParagraphOrHeading(editor, node);
  const componentBlockEntry = Editor$1.above(editor, {
    match: node => node.type === 'component-block'
  });
  if (componentBlockEntry) {
    const start = Editor$1.start(editor, componentBlockEntry[1]);
    Transforms.setSelection(editor, {
      anchor: start,
      focus: start
    });
  }
}
const ComponentBlocksElement = ({
  attributes,
  children,
  element: __elementToGetPath
}) => {
  const editor = useSlateStatic();
  const [currentElement, setElement] = useElementWithSetNodes(editor, __elementToGetPath);
  const blockComponents = useDocumentEditorConfig().componentBlocks;
  const componentBlock = blockComponents[currentElement.component];
  const propsWithChildFields = useMemo(() => {
    if (!componentBlock) return;
    const blockChildrenByPath = new Map();
    for (const child of currentElement.children) {
      if (child.type === 'component-block-prop' && child.propPath) {
        blockChildrenByPath.set(JSON.stringify(child.propPath), child.children);
      }
    }
    if (!blockChildrenByPath.size) return currentElement.props;
    return transformProps({
      kind: 'object',
      fields: componentBlock.schema
    }, currentElement.props, {
      child(schema, value, propPath) {
        if (schema.options.kind === 'block') {
          const key = JSON.stringify(propPath);
          const children = blockChildrenByPath.get(key);
          if (children) {
            return children.map(cloneDescendent);
          }
        }
        return value;
      }
    });
  }, [componentBlock, currentElement]);
  const elementToGetPathRef = useRef({
    __elementToGetPath,
    currentElement,
    propsWithChildFields
  });
  useEffect(() => {
    elementToGetPathRef.current = {
      __elementToGetPath,
      currentElement,
      propsWithChildFields
    };
  });
  const onRemove = useEventCallback$1(() => {
    const path = ReactEditor.findPath(editor, __elementToGetPath);
    Transforms.removeNodes(editor, {
      at: path
    });
  });
  const onPropsChange = useCallback((cb, ignoreChildFields) => {
    const prevProps = elementToGetPathRef.current.propsWithChildFields;
    updateComponentBlockElementProps(editor, componentBlock, prevProps, cb(prevProps), ReactEditor.findPath(editor, elementToGetPathRef.current.__elementToGetPath), setElement, ignoreChildFields);
  }, [setElement, componentBlock, editor]);
  const getToolbarPreviewProps = useMemo(() => {
    if (!componentBlock) {
      return () => {
        throw new Error('expected component block to exist when called');
      };
    }
    return createGetPreviewProps({
      kind: 'object',
      fields: componentBlock.schema
    }, cb => onPropsChange(cb, false), () => undefined);
  }, [componentBlock, onPropsChange]);
  if (!componentBlock) {
    return /*#__PURE__*/jsxs("div", {
      style: {
        border: 'red 4px solid',
        padding: 8
      },
      children: [/*#__PURE__*/jsx("pre", {
        contentEditable: false,
        style: {
          userSelect: 'none'
        },
        children: `The block "${currentElement.component}" no longer exists.

Props:

${JSON.stringify(currentElement.props, null, 2)}

Content:`
      }), children]
    });
  }
  const toolbarPreviewProps = getToolbarPreviewProps(propsWithChildFields);
  const renderedBlock = /*#__PURE__*/jsx(ComponentBlockRender, {
    children: children,
    componentBlock: componentBlock,
    element: currentElement,
    onChange: onPropsChange,
    onRemove: onRemove
  });
  return componentBlock.chromeless ? /*#__PURE__*/jsx(ChromelessComponentBlockElement, {
    element: __elementToGetPath,
    attributes: attributes,
    renderedBlock: renderedBlock,
    componentBlock: componentBlock,
    onRemove: onRemove,
    previewProps: toolbarPreviewProps
  }) : /*#__PURE__*/jsx(ChromefulComponentBlockElement, {
    attributes: attributes,
    children: children,
    componentBlock: componentBlock,
    onRemove: onRemove,
    previewProps: toolbarPreviewProps,
    renderedBlock: renderedBlock,
    elementProps: currentElement.props
  });
};

function insertDivider(editor) {
  insertNodesButReplaceIfSelectionIsAtEmptyParagraphOrHeading(editor, {
    type: 'divider',
    children: [{
      text: ''
    }]
  });
  Editor$1.insertNode(editor, {
    type: 'paragraph',
    children: [{
      text: ''
    }]
  });
}
const DividerButton = () => {
  const {
    editor,
    dividers: {
      isDisabled
    }
  } = useToolbarState();
  return useMemo(() => /*#__PURE__*/jsx(ActionButton, {
    prominence: "low",
    isDisabled: isDisabled,
    onPress: () => {
      insertDivider(editor);
    },
    children: /*#__PURE__*/jsx(Icon, {
      src: minusIcon
    })
  }), [editor, isDisabled]);
};
const dividerButton = /*#__PURE__*/jsxs(TooltipTrigger, {
  delay: 200,
  children: [/*#__PURE__*/jsx(DividerButton, {}), /*#__PURE__*/jsxs(Tooltip, {
    children: [/*#__PURE__*/jsx(Text, {
      children: "Divider"
    }), /*#__PURE__*/jsx(Kbd, {
      children: "---"
    })]
  })]
});
function DividerElement({
  attributes,
  children
}) {
  const selected = useSelected();
  return /*#__PURE__*/jsxs("div", {
    ...attributes,
    style: {
      caretColor: 'transparent'
    },
    children: [/*#__PURE__*/jsx("hr", {
      style: {
        backgroundColor: selected ? tokenSchema.color.alias.borderSelected : tokenSchema.color.alias.borderIdle
      }
    }), children]
  });
}

const LayoutContainer = ({
  attributes,
  children,
  element
}) => {
  const editor = useSlateStatic();
  const layout = element.layout;
  const layoutOptions = useDocumentEditorConfig().documentFeatures.layouts;
  const currentLayoutIndex = layoutOptions.findIndex(x => x.toString() === layout.toString());
  return /*#__PURE__*/jsx("div", {
    className: blockElementSpacing$1,
    ...attributes,
    children: /*#__PURE__*/jsxs(BlockPopoverTrigger, {
      element: element,
      children: [/*#__PURE__*/jsx("div", {
        className: css({
          columnGap: tokenSchema.size.space.regular,
          display: 'grid'
        }),
        style: {
          gridTemplateColumns: layout.map(x => `${x}fr`).join(' ')
        },
        children: children
      }), /*#__PURE__*/jsx(BlockPopover, {
        children: /*#__PURE__*/jsxs(Flex, {
          padding: "regular",
          gap: "regular",
          children: [/*#__PURE__*/jsx(ActionGroup, {
            selectionMode: "single",
            prominence: "low",
            density: "compact",
            onAction: key => {
              const path = ReactEditor.findPath(editor, element);
              const layoutOption = layoutOptions[key];
              Transforms.setNodes(editor, {
                type: 'layout',
                layout: layoutOption
              }, {
                at: path
              });
              ReactEditor.focus(editor);
            },
            selectedKeys: currentLayoutIndex !== -1 ? [currentLayoutIndex.toString()] : [],
            children: layoutOptions.map((layoutOption, i) => /*#__PURE__*/jsx(Item$3, {
              children: makeLayoutIcon(layoutOption)
            }, i))
          }), /*#__PURE__*/jsx(ToolbarSeparator, {}), /*#__PURE__*/jsxs(TooltipTrigger, {
            children: [/*#__PURE__*/jsx(ActionButton, {
              prominence: "low",
              onPress: () => {
                const path = ReactEditor.findPath(editor, element);
                Transforms.removeNodes(editor, {
                  at: path
                });
              },
              children: /*#__PURE__*/jsx(Icon, {
                src: trash2Icon
              })
            }), /*#__PURE__*/jsx(Tooltip, {
              tone: "critical",
              children: "Remove"
            })]
          })]
        })
      })]
    })
  });
};
const LayoutArea = ({
  attributes,
  children
}) => {
  return /*#__PURE__*/jsx("div", {
    className: css({
      borderColor: tokenSchema.color.border.neutral,
      borderRadius: tokenSchema.size.radius.regular,
      borderStyle: 'dashed',
      borderWidth: tokenSchema.size.border.regular,
      padding: tokenSchema.size.space.medium
    }),
    ...attributes,
    children: children
  });
};
const insertLayout = (editor, layout) => {
  insertNodesButReplaceIfSelectionIsAtEmptyParagraphOrHeading(editor, [{
    type: 'layout',
    layout,
    children: [{
      type: 'layout-area',
      children: [{
        type: 'paragraph',
        children: [{
          text: ''
        }]
      }]
    }]
  }]);
  const layoutEntry = Editor$1.above(editor, {
    match: x => x.type === 'layout'
  });
  if (layoutEntry) {
    Transforms.select(editor, [...layoutEntry[1], 0]);
  }
};

// Utils
// ------------------------------

function makeLayoutIcon(ratios) {
  const size = 16;
  const element = /*#__PURE__*/jsx("div", {
    role: "img",
    className: css({
      display: 'grid',
      gridTemplateColumns: ratios.map(r => `${r}fr`).join(' '),
      gap: 2,
      width: size,
      height: size
    }),
    children: ratios.map((_, i) => {
      return /*#__PURE__*/jsx("div", {
        className: css({
          backgroundColor: 'currentcolor',
          borderRadius: 1
        })
      }, i);
    })
  });
  return element;
}
const layoutsIcon = /*#__PURE__*/jsx(Icon, {
  src: columnsIcon
});
const LayoutsButton = ({
  layouts
}) => {
  const {
    editor,
    layouts: {
      isSelected
    }
  } = useToolbarState();
  return useMemo(() => /*#__PURE__*/jsxs(TooltipTrigger, {
    children: [/*#__PURE__*/jsx(ActionButton, {
      prominence: "low",
      isSelected: isSelected,
      onPress: () => {
        if (isElementActive(editor, 'layout')) {
          Transforms.unwrapNodes(editor, {
            match: node => node.type === 'layout'
          });
        } else {
          insertLayout(editor, layouts[0]);
        }
        ReactEditor.focus(editor);
      },
      children: layoutsIcon
    }), /*#__PURE__*/jsx(Tooltip, {
      children: "Layouts"
    })]
  }), [editor, isSelected, layouts]);
};

const toggleList$1 = (editor, format) => {
  const listAbove = getListTypeAbove(editor);
  const isActive = isElementActive(editor, format) && (listAbove === 'none' || listAbove === format);
  Editor$1.withoutNormalizing(editor, () => {
    Transforms.unwrapNodes(editor, {
      match: isListNode,
      split: true,
      mode: isActive ? 'all' : 'lowest'
    });
    if (!isActive) {
      Transforms.wrapNodes(editor, {
        type: format,
        children: []
      }, {
        match: x => x.type !== 'list-item-content' && isBlock(x)
      });
    }
  });
};
function ListButtons$1(props) {
  const {
    editor,
    lists
  } = useToolbarState();
  return useMemo(() => {
    const disabledKeys = [];
    if (lists.ordered.isDisabled) disabledKeys.push('ordered');
    if (lists.unordered.isDisabled) disabledKeys.push('unordered');
    const selectedKeys = [];
    if (lists.ordered.isSelected) selectedKeys.push('ordered');
    if (lists.unordered.isSelected) selectedKeys.push('unordered');
    return /*#__PURE__*/jsx(ActionGroup, {
      flexShrink: 0,
      "aria-label": "Lists",
      selectionMode: "single",
      buttonLabelBehavior: "hide",
      density: "compact"
      // overflowMode="collapse"
      ,
      prominence: "low",
      summaryIcon: /*#__PURE__*/jsx(Icon, {
        src: listIcon
      }),
      selectedKeys: selectedKeys,
      disabledKeys: disabledKeys,
      onAction: key => {
        const format = `${key}-list`;
        toggleList$1(editor, format);
        ReactEditor.focus(editor);
      },
      children: [props.lists.unordered && /*#__PURE__*/jsxs(Item$3, {
        textValue: "Bullet List (- )",
        children: [/*#__PURE__*/jsx(Icon, {
          src: listIcon
        }), /*#__PURE__*/jsx(Text, {
          children: "Bullet List"
        }), /*#__PURE__*/jsx(Kbd, {
          children: "-\u23B5"
        })]
      }, "unordered"), props.lists.ordered && /*#__PURE__*/jsxs(Item$3, {
        textValue: "Numbered List (1.)",
        children: [/*#__PURE__*/jsx(Icon, {
          src: listOrderedIcon
        }), /*#__PURE__*/jsx(Text, {
          children: "Numbered List"
        }), /*#__PURE__*/jsx(Kbd, {
          children: "1.\u23B5"
        })]
      }, "ordered")].filter(x => x !== false)
    });
  }, [editor, lists.ordered.isDisabled, lists.ordered.isSelected, lists.unordered.isDisabled, lists.unordered.isSelected, props.lists.ordered, props.lists.unordered]);
}
function nestList(editor) {
  const block = Editor$1.above(editor, {
    match: isBlock
  });
  if (!block || block[0].type !== 'list-item-content') {
    return false;
  }
  const listItemPath = Path.parent(block[1]);
  // we're the first item in the list therefore we can't nest
  if (listItemPath[listItemPath.length - 1] === 0) {
    return false;
  }
  const previousListItemPath = Path.previous(listItemPath);
  const previousListItemNode = Node.get(editor, previousListItemPath);
  if (previousListItemNode.children.length !== 1) {
    // there's a list nested inside our previous sibling list item so move there
    Transforms.moveNodes(editor, {
      at: listItemPath,
      to: [...previousListItemPath, previousListItemNode.children.length - 1, previousListItemNode.children[previousListItemNode.children.length - 1].children.length]
    });
    return true;
  }
  const type = Editor$1.parent(editor, Path.parent(block[1]))[0].type;
  Editor$1.withoutNormalizing(editor, () => {
    Transforms.wrapNodes(editor, {
      type,
      children: []
    }, {
      at: listItemPath
    });
    Transforms.moveNodes(editor, {
      to: [...previousListItemPath, previousListItemNode.children.length],
      at: listItemPath
    });
  });
  return true;
}
function unnestList(editor) {
  const block = Editor$1.above(editor, {
    match: isBlock
  });
  if (block && block[0].type === 'list-item-content') {
    Transforms.unwrapNodes(editor, {
      match: isListNode,
      split: true
    });
    return true;
  }
  return false;
}

function getUploadedFileObject(accept) {
  return new Promise(resolve => {
    const input = document.createElement('input');
    input.type = 'file';
    input.style.display = 'none';
    input.accept = accept;
    input.onchange = () => {
      var _input$files;
      const file = (_input$files = input.files) === null || _input$files === void 0 ? void 0 : _input$files[0];
      if (file) {
        resolve(file);
      }
    };
    document.body.appendChild(input);
    input.click();
  });
}
async function getUploadedFile(accept) {
  const file = await getUploadedFileObject(accept);
  if (!file) return undefined;
  return {
    content: new Uint8Array(await file.arrayBuffer()),
    filename: file.name
  };
}
function getUploadedImage() {
  return getUploadedFile('image/*');
}
function useObjectURL(data, contentType) {
  const $ = c(4);
  const [url, setUrl] = useState(null);
  let t0;
  let t1;
  if ($[0] !== data || $[1] !== contentType) {
    t0 = () => {
      if (data) {
        const url_0 = URL.createObjectURL(new Blob([data], {
          type: contentType
        }));
        setUrl(url_0);
        return () => URL.revokeObjectURL(url_0);
      } else {
        setUrl(null);
      }
    };
    t1 = [contentType, data];
    $[0] = data;
    $[1] = contentType;
    $[2] = t0;
    $[3] = t1;
  } else {
    t0 = $[2];
    t1 = $[3];
  }
  useEffect(t0, t1);
  return url;
}

// TODO: button labels ("Choose file", "Remove") need i18n support
function ImageFieldInput(props) {
  var _props$validation;
  const $ = c(36);
  const {
    value
  } = props;
  let t0;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    t0 = () => true;
    $[0] = t0;
  } else {
    t0 = $[0];
  }
  const [blurred, onBlur] = useReducer(t0, false);
  const isInEditor = useIsInDocumentEditor();
  const objectUrl = useObjectURL(value === null ? null : value.data, (value === null || value === void 0 ? void 0 : value.extension) === "svg" ? "image/svg+xml" : undefined);
  const labelId = useId();
  const descriptionId = useId();
  const t1 = props.description ? descriptionId : undefined;
  const t2 = (_props$validation = props.validation) === null || _props$validation === void 0 ? void 0 : _props$validation.isRequired;
  let t3;
  if ($[1] !== labelId || $[2] !== t2 || $[3] !== props.label) {
    t3 = /*#__PURE__*/jsx(FieldLabel, {
      id: labelId,
      elementType: "span",
      isRequired: t2,
      children: props.label
    });
    $[1] = labelId;
    $[2] = t2;
    $[3] = props.label;
    $[4] = t3;
  } else {
    t3 = $[4];
  }
  let t4;
  if ($[5] !== props.description || $[6] !== descriptionId) {
    t4 = props.description && /*#__PURE__*/jsx(Text, {
      size: "small",
      color: "neutralSecondary",
      id: descriptionId,
      children: props.description
    });
    $[5] = props.description;
    $[6] = descriptionId;
    $[7] = t4;
  } else {
    t4 = $[7];
  }
  let t5;
  if ($[8] !== props) {
    t5 = /*#__PURE__*/jsx(ActionButton, {
      onPress: async () => {
        const image = await getUploadedImage();
        if (image) {
          var _image$filename$match;
          const extension = (_image$filename$match = image.filename.match(/\.([^.]+$)/)) === null || _image$filename$match === void 0 ? void 0 : _image$filename$match[1];
          if (extension) {
            props.onChange({
              data: image.content,
              extension,
              filename: props.transformFilename ? props.transformFilename(image.filename) : image.filename
            });
          }
        }
      },
      children: "Choose file"
    });
    $[8] = props;
    $[9] = t5;
  } else {
    t5 = $[9];
  }
  let t6;
  if ($[10] !== value || $[11] !== props || $[12] !== onBlur) {
    t6 = value !== null && /*#__PURE__*/jsx(ActionButton, {
      prominence: "low",
      onPress: () => {
        props.onChange(null);
        onBlur();
      },
      children: "Remove"
    });
    $[10] = value;
    $[11] = props;
    $[12] = onBlur;
    $[13] = t6;
  } else {
    t6 = $[13];
  }
  let t7;
  if ($[14] !== t5 || $[15] !== t6) {
    t7 = /*#__PURE__*/jsxs(ButtonGroup, {
      children: [t5, t6]
    });
    $[14] = t5;
    $[15] = t6;
    $[16] = t7;
  } else {
    t7 = $[16];
  }
  let t8;
  if ($[17] !== objectUrl) {
    t8 = objectUrl && /*#__PURE__*/jsx(Box, {
      alignSelf: "start",
      backgroundColor: "canvas",
      borderRadius: "regular",
      border: "neutral",
      padding: "regular",
      children: /*#__PURE__*/jsx("img", {
        src: objectUrl,
        alt: "",
        style: {
          display: "block",
          maxHeight: tokenSchema.size.alias.singleLineWidth,
          maxWidth: "100%"
        }
      })
    });
    $[17] = objectUrl;
    $[18] = t8;
  } else {
    t8 = $[18];
  }
  let t9;
  if ($[19] !== isInEditor || $[20] !== value || $[21] !== props) {
    t9 = isInEditor && value !== null && /*#__PURE__*/jsx(TextField, {
      label: "Filename",
      onChange: filename => {
        props.onChange({
          ...value,
          filename
        });
      },
      value: value.filename
    });
    $[19] = isInEditor;
    $[20] = value;
    $[21] = props;
    $[22] = t9;
  } else {
    t9 = $[22];
  }
  let t10;
  if ($[23] !== props || $[24] !== blurred || $[25] !== value) {
    var _props$validation2;
    t10 = (props.forceValidation || blurred) && ((_props$validation2 = props.validation) === null || _props$validation2 === void 0 ? void 0 : _props$validation2.isRequired) && value === null && /*#__PURE__*/jsxs(FieldMessage, {
      children: [props.label, " is required"]
    });
    $[23] = props;
    $[24] = blurred;
    $[25] = value;
    $[26] = t10;
  } else {
    t10 = $[26];
  }
  let t11;
  if ($[27] !== t1 || $[28] !== labelId || $[29] !== t3 || $[30] !== t4 || $[31] !== t7 || $[32] !== t8 || $[33] !== t9 || $[34] !== t10) {
    t11 = /*#__PURE__*/jsxs(Flex, {
      "aria-describedby": t1,
      "aria-labelledby": labelId,
      direction: "column",
      gap: "medium",
      role: "group",
      children: [t3, t4, t7, t8, t9, t10]
    });
    $[27] = t1;
    $[28] = labelId;
    $[29] = t3;
    $[30] = t4;
    $[31] = t7;
    $[32] = t8;
    $[33] = t9;
    $[34] = t10;
    $[35] = t11;
  } else {
    t11 = $[35];
  }
  return t11;
}

const ImageElement = ({
  attributes,
  children,
  element: __elementForGettingPath
}) => {
  const [dialogOpen, setDialogOpen] = useState(false);
  const [aspectRatio, setAspectRatio] = useState();
  const stringFormatter = useLocalizedStringFormatter(strings);
  const editor = useSlateStatic();
  const [currentElement, setNode] = useElementWithSetNodes(editor, __elementForGettingPath);
  const objectUrl = useObjectURL(currentElement.src.content, currentElement.src.filename.endsWith('.svg') ? 'image/svg+xml' : undefined);
  const activePopoverElement = useActiveBlockPopover();
  const selected = activePopoverElement === __elementForGettingPath;
  return /*#__PURE__*/jsxs(Fragment, {
    children: [/*#__PURE__*/jsxs(BlockWrapper$1, {
      attributes: attributes,
      children: [children, /*#__PURE__*/jsxs(BlockPopoverTrigger, {
        element: __elementForGettingPath,
        children: [/*#__PURE__*/jsx("div", {
          style: {
            alignItems: 'center',
            display: 'flex',
            flexDirection: 'column'
          },
          children: /*#__PURE__*/jsx(NotEditable, {
            children: /*#__PURE__*/jsx("img", {
              ...attributes,
              src: objectUrl,
              alt: currentElement.alt,
              "data-selected": selected,
              onLoad: e => {
                const target = e.target;
                setAspectRatio(target.width / target.height);
              },
              className: css({
                boxSizing: 'border-box',
                borderRadius: tokenSchema.size.radius.regular,
                display: 'block',
                maxHeight: tokenSchema.size.scale[3600],
                maxWidth: '100%',
                transition: transition('box-shadow'),
                '&[data-selected=true]': {
                  boxShadow: `0 0 0 ${tokenSchema.size.border.regular} ${tokenSchema.color.alias.borderSelected}`
                }
              })
            })
          })
        }), /*#__PURE__*/jsx(BlockPopover, {
          hideArrow: true,
          children: /*#__PURE__*/jsxs(Flex, {
            gap: "regular",
            padding: "regular",
            children: [/*#__PURE__*/jsxs(Flex, {
              gap: "small",
              children: [/*#__PURE__*/jsxs(TooltipTrigger, {
                children: [/*#__PURE__*/jsx(ActionButton, {
                  prominence: "low",
                  onPress: () => setDialogOpen(true),
                  children: /*#__PURE__*/jsx(Icon, {
                    src: editIcon
                  })
                }), /*#__PURE__*/jsx(Tooltip, {
                  children: stringFormatter.format('edit')
                })]
              }), /*#__PURE__*/jsxs(TooltipTrigger, {
                children: [/*#__PURE__*/jsx(ActionButton, {
                  prominence: "low",
                  onPress: async () => {
                    const src = await getUploadedImage();
                    if (src) {
                      setNode({
                        src
                      });
                    }
                  },
                  children: /*#__PURE__*/jsx(Icon, {
                    src: fileUpIcon
                  })
                }), /*#__PURE__*/jsx(Tooltip, {
                  children: "Choose file"
                })]
              })]
            }), /*#__PURE__*/jsx(Divider, {
              orientation: "vertical"
            }), /*#__PURE__*/jsxs(TooltipTrigger, {
              children: [/*#__PURE__*/jsx(ActionButton, {
                prominence: "low",
                onPress: () => {
                  Transforms.removeNodes(editor, {
                    at: ReactEditor.findPath(editor, __elementForGettingPath)
                  });
                },
                children: /*#__PURE__*/jsx(Icon, {
                  src: trash2Icon
                })
              }), /*#__PURE__*/jsx(Tooltip, {
                tone: "critical",
                children: "Remove"
              })]
            })]
          })
        })]
      }, aspectRatio)]
    }), /*#__PURE__*/jsx(DialogContainer, {
      onDismiss: () => {
        setDialogOpen(false);
        focusWithPreviousSelection(editor);
      },
      children: dialogOpen && /*#__PURE__*/jsx(ImageDialog$1, {
        alt: currentElement.alt,
        title: currentElement.title,
        filename: currentElement.src.filename,
        onSubmit: ({
          alt,
          filename,
          title
        }) => {
          setNode({
            alt,
            title,
            src: {
              content: currentElement.src.content,
              filename
            }
          });
        }
      })
    })]
  });
};
function ImageDialog$1(props) {
  const {
    images
  } = useDocumentEditorConfig().documentFeatures;
  if (!images) {
    throw new Error('unexpected image rendered when images are disabled');
  }
  const schema = useMemo(() => object(images.schema), [images]);
  const [state, setState] = useState({
    alt: props.alt,
    title: props.title
  });
  const previewProps = useMemo(() => createGetPreviewProps(schema, setState, () => undefined), [schema])(state);
  const [filenameWithoutExtension, filenameExtension] = splitFilename$1(props.filename);
  const [forceValidation, setForceValidation] = useState(false);
  let [fileName, setFileName] = useState(filenameWithoutExtension);
  let [fileNameTouched, setFileNameTouched] = useState(false);
  let {
    dismiss
  } = useDialogContainer();
  let stringFormatter = useLocalizedStringFormatter(strings);
  return /*#__PURE__*/jsx(Dialog, {
    size: "small",
    children: /*#__PURE__*/jsxs("form", {
      style: {
        display: 'contents'
      },
      onSubmit: event => {
        if (event.target !== event.currentTarget) return;
        event.preventDefault();
        setForceValidation(true);
        if (fileName && clientSideValidateProp(schema, state, undefined)) {
          dismiss();
          props.onSubmit({
            alt: state.alt,
            title: state.title,
            filename: [fileName, filenameExtension].join('.')
          });
        }
      },
      children: [/*#__PURE__*/jsx(Heading, {
        children: "Image details"
      }), /*#__PURE__*/jsx(Content, {
        children: /*#__PURE__*/jsxs(Flex, {
          gap: "large",
          direction: "column",
          children: [/*#__PURE__*/jsx(TextField, {
            label: "File name",
            onChange: setFileName,
            onBlur: () => setFileNameTouched(true),
            value: fileName,
            isRequired: true,
            errorMessage: (fileNameTouched || forceValidation) && !fileName ? 'Please provide a file name.' : undefined,
            endElement: filenameExtension ? /*#__PURE__*/jsx(Flex, {
              alignItems: "center",
              justifyContent: "center",
              paddingEnd: "regular",
              children: /*#__PURE__*/jsxs(Text, {
                color: "neutralTertiary",
                children: [".", filenameExtension]
              })
            }) : null
          }), /*#__PURE__*/jsx(FormValueContentFromPreviewProps, {
            forceValidation: forceValidation,
            autoFocus: true,
            ...previewProps
          })]
        })
      }), /*#__PURE__*/jsxs(ButtonGroup, {
        children: [/*#__PURE__*/jsx(Button, {
          onPress: dismiss,
          children: stringFormatter.format('cancel')
        }), /*#__PURE__*/jsx(Button, {
          prominence: "high",
          type: "submit",
          children: stringFormatter.format('save')
        })]
      })]
    })
  });
}
function splitFilename$1(filename) {
  const dotIndex = filename.lastIndexOf('.');
  if (dotIndex === -1) {
    return [filename, ''];
  }
  return [filename.substring(0, dotIndex), filename.substring(dotIndex + 1)];
}
let _imageIcon = /*#__PURE__*/jsx(Icon, {
  src: imageIcon
});
function ImageButton() {
  const editor = useSlateStatic();
  return /*#__PURE__*/jsx(Fragment, {
    children: /*#__PURE__*/jsx(ActionButton, {
      prominence: "low",
      onPress: async () => {
        const src = await getUploadedImage();
        if (src) {
          Transforms.insertNodes(editor, {
            type: 'image',
            src,
            alt: '',
            title: '',
            children: [{
              text: ''
            }]
          });
        }
      },
      children: _imageIcon
    })
  });
}
const imageButton = /*#__PURE__*/jsxs(TooltipTrigger, {
  children: [/*#__PURE__*/jsx(ImageButton, {}), /*#__PURE__*/jsx(Tooltip, {
    children: /*#__PURE__*/jsx(Text, {
      children: "Image"
    })
  })]
});
function withImages(editor) {
  const {
    insertData
  } = editor;
  editor.insertData = data => {
    const images = Array.from(data.files).filter(x => x.type.startsWith('image/'));
    if (images.length) {
      Promise.all(images.map(async file => ({
        name: file.name,
        data: new Uint8Array(await file.arrayBuffer())
      }))).then(images => {
        insertNodesButReplaceIfSelectionIsAtEmptyParagraphOrHeading(editor, {
          type: 'image',
          src: {
            content: images[0].data,
            filename: images[0].name
          },
          alt: '',
          title: '',
          children: [{
            text: ''
          }]
        });
      });
      return;
    }
    insertData(data);
  };
  return editor;
}

function order(a, b) {
  return {
    start: Math.min(a, b),
    end: Math.max(a, b)
  };
}
function getRelativeRowPath(hasHead, rowIndex) {
  return hasHead ? rowIndex === 0 ? [0, 0] : [1, rowIndex - 1] : [0, rowIndex];
}
function getSelectedTableArea(editor) {
  var _Editor$above, _editor$selection, _Editor$above2, _editor$selection2;
  const anchor = (_Editor$above = Editor$1.above(editor, {
    match: nodeTypeMatcher('table-cell'),
    at: (_editor$selection = editor.selection) === null || _editor$selection === void 0 ? void 0 : _editor$selection.anchor.path
  })) === null || _Editor$above === void 0 ? void 0 : _Editor$above[1];
  const focus = (_Editor$above2 = Editor$1.above(editor, {
    match: nodeTypeMatcher('table-cell'),
    at: (_editor$selection2 = editor.selection) === null || _editor$selection2 === void 0 ? void 0 : _editor$selection2.focus.path
  })) === null || _Editor$above2 === void 0 ? void 0 : _Editor$above2[1];
  const table = Editor$1.above(editor, {
    match: nodeTypeMatcher('table')
  });
  if (editor.selection && table && Element$1.isElement(table[0].children[0]) && anchor && focus && Path.equals(anchor.slice(0, -3), focus.slice(0, -3))) {
    const [start, end] = Editor$1.edges(editor, editor.selection);
    return {
      tablePath: table[1],
      table: table[0],
      singleCell: Path.equals(anchor, focus) ? Point.equals(Editor$1.start(editor, anchor), start) && Point.equals(Editor$1.end(editor, anchor), end) && !Point.equals(start, end) ? 'selected' : 'not-selected' : 'many',
      row: order(anchor[anchor.length - 2] + anchor[anchor.length - 3], focus[focus.length - 2] + focus[anchor.length - 3]),
      column: order(anchor[anchor.length - 1], focus[focus.length - 1])
    };
  }
}
const cell = header => ({
  type: 'table-cell',
  ...(header ? {
    header: true
  } : {}),
  children: [{
    type: 'paragraph',
    children: [{
      text: ''
    }]
  }]
});
function cloneDescendant(node) {
  if (Text$1.isText(node)) return {
    ...node
  };
  return {
    ...node,
    children: node.children.map(cloneDescendant)
  };
}
function withTable(editor) {
  const {
    deleteFragment,
    normalizeNode,
    getFragment,
    insertFragment,
    deleteBackward
  } = editor;
  editor.insertFragment = fragment => {
    const selectedTableArea = getSelectedTableArea(editor);
    if (!selectedTableArea || fragment.length !== 1 || fragment[0].type !== 'table') {
      insertFragment(fragment);
      return;
    }
    const newRows = fragment[0].children.flatMap(child => child.type === 'table-head' || child.type === 'table-body' ? child.children : []);
    if (!newRows.every(nodeTypeMatcher('table-row'))) {
      insertFragment(fragment);
      return;
    }
    let {
      row,
      column,
      tablePath,
      table
    } = selectedTableArea;
    const existingBody = selectedTableArea.table.children[selectedTableArea.table.children.length === 1 ? 0 : 1];
    if (newRows[0].type !== 'table-row' || existingBody.type !== 'table-body' || existingBody.children[0].type !== 'table-row') {
      insertFragment(fragment);
      return;
    }
    const hasHead = table.children[0].type === 'table-head';
    if (selectedTableArea.singleCell !== 'many') {
      row = {
        start: row.start,
        end: Math.min(row.start + newRows.length - 1, existingBody.children.length - 1 + (hasHead ? 1 : 0))
      };
      column = {
        start: column.start,
        end: Math.min(column.start + newRows[0].children.length - 1, existingBody.children[0].children.length - 1)
      };
    }
    Editor$1.withoutNormalizing(editor, () => {
      for (let rowIndex = row.start; rowIndex <= row.end; rowIndex++) {
        const newRow = newRows[(rowIndex - row.start) % newRows.length];
        for (let cellIndex = column.start; cellIndex <= column.end; cellIndex++) {
          const relativeCellPath = [...getRelativeRowPath(hasHead, rowIndex), cellIndex];
          const cell = Node.get(table, relativeCellPath);
          const newCell = newRow.children[(cellIndex - column.start) % newRow.children.length];
          if (cell.type !== 'table-cell' || newCell.type !== 'table-cell') {
            continue;
          }
          const cellPath = [...tablePath, ...relativeCellPath];
          for (const childIdx of [...cell.children.keys()].reverse()) {
            Transforms.removeNodes(editor, {
              at: [...cellPath, childIdx]
            });
          }
          Transforms.insertNodes(editor, newCell.children.map(cloneDescendant), {
            at: [...cellPath, 0]
          });
        }
      }
      Transforms.setSelection(editor, {
        anchor: Editor$1.start(editor, [...tablePath, ...getRelativeRowPath(hasHead, row.start), column.start]),
        focus: Editor$1.end(editor, [...tablePath, ...getRelativeRowPath(hasHead, row.end), column.end])
      });
    });
  };
  editor.deleteBackward = unit => {
    if (editor.selection && Range.isCollapsed(editor.selection) && editor.selection.anchor.offset === 0) {
      const tableCell = Editor$1.above(editor, {
        match: nodeTypeMatcher('table-cell')
      });
      if (tableCell && tableCell[0].children[0].type === 'paragraph' && tableCell[0].children[0].children[0].type === undefined && Path.equals(editor.selection.anchor.path, [...tableCell[1], 0, 0])) {
        return;
      }
    }
    deleteBackward(unit);
  };
  editor.getFragment = () => {
    const selectedTableArea = getSelectedTableArea(editor);
    if (selectedTableArea && selectedTableArea.singleCell !== 'not-selected') {
      var _table$children$;
      const {
        table
      } = selectedTableArea;
      const first = table.children[0].type === 'table-head' || table.children[0].type === 'table-body' ? table.children[0] : undefined;
      if (!first) {
        return getFragment();
      }
      const second = ((_table$children$ = table.children[1]) === null || _table$children$ === void 0 ? void 0 : _table$children$.type) === 'table-body' ? table.children[1] : undefined;
      const body = second || first;
      const hasHead = first.type === 'table-head';
      const isSelectionInHead = selectedTableArea.row.start === 0 && !!second;
      const columnLength = selectedTableArea.column.end - selectedTableArea.column.start + 1;
      return [{
        type: 'table',
        children: [...(isSelectionInHead ? [{
          type: 'table-head',
          children: [{
            type: 'table-row',
            children: Array.from({
              length: columnLength
            }).map((_, columnIndex) => first.children[0].children[columnIndex + selectedTableArea.column.start])
          }]
        }] : []), {
          type: 'table-body',
          children: Array.from({
            length: selectedTableArea.row.end - selectedTableArea.row.start + (isSelectionInHead ? 0 : 1)
          }).map((_, rowIndex) => ({
            type: 'table-row',
            children: Array.from({
              length: columnLength
            }).map((_, columnIndex) => body.children[rowIndex + selectedTableArea.row.start - (hasHead && !isSelectionInHead ? 1 : 0)].children[columnIndex + selectedTableArea.column.start])
          }))
        }]
      }];
    }
    return getFragment();
  };
  editor.deleteFragment = direction => {
    if (!editor.selection || Range.isCollapsed(editor.selection)) {
      deleteFragment(direction);
      return;
    }
    const selectedTableArea = getSelectedTableArea(editor);
    if (!selectedTableArea || selectedTableArea.singleCell === 'not-selected') {
      deleteFragment(direction);
      return;
    }
    const headOrBody = selectedTableArea.table.children[0];
    if (!Element$1.isElement(headOrBody) || !Element$1.isElement(headOrBody.children[0])) {
      deleteFragment(direction);
      return;
    }
    const maxRowIdx = selectedTableArea.table.children.reduce((sum, headOrBody) => sum + (headOrBody.type === 'table-head' || headOrBody.type === 'table-body' ? headOrBody.children.length : 0), 0) - 1;
    const {
      row,
      column,
      tablePath
    } = selectedTableArea;
    // note the fact that hasWholeColumnSelected uses row and hasWholeRowSelected uses column
    // is not a mistake. if a whole column has been selected, then the starting row is 0 and the end is the last row
    const hasWholeColumnSelected = row.start === 0 && row.end === maxRowIdx;
    const hasWholeRowSelected = column.start === 0 && column.end === headOrBody.children[0].children.length - 1;
    if (hasWholeColumnSelected && hasWholeRowSelected) {
      Transforms.removeNodes(editor, {
        at: tablePath
      });
      return;
    }
    const hasHead = headOrBody.type === 'table-head';
    if (hasWholeRowSelected) {
      Editor$1.withoutNormalizing(editor, () => {
        for (let i = row.end; i >= row.start; i--) {
          if (hasHead) {
            if (i === 0) {
              Transforms.removeNodes(editor, {
                at: [...tablePath, 0]
              });
              continue;
            }
            Transforms.removeNodes(editor, {
              at: [...tablePath, 1, i - 1]
            });
            continue;
          }
          Transforms.removeNodes(editor, {
            at: [...tablePath, 0, i]
          });
        }
      });
      return;
    }
    if (hasWholeColumnSelected) {
      Editor$1.withoutNormalizing(editor, () => {
        for (let i = column.end; i >= column.start; i--) {
          for (let rowIdx = 0; rowIdx <= maxRowIdx; rowIdx++) {
            Transforms.removeNodes(editor, {
              at: [...tablePath, ...getRelativeRowPath(hasHead, rowIdx), i]
            });
          }
        }
        const selectionPath = [...tablePath, 0, 0, column.start];
        const point = Editor$1.start(editor, column.start === 0 ? selectionPath : Path.previous(selectionPath));
        Transforms.select(editor, point);
      });
      return;
    }
    const selectionStart = Editor$1.start(editor, editor.selection).path;
    Editor$1.withoutNormalizing(editor, () => {
      for (let rowIndex = row.start; rowIndex <= row.end; rowIndex++) {
        for (let cellIndex = column.start; cellIndex <= column.end; cellIndex++) {
          const relativeCellPath = [...getRelativeRowPath(hasHead, rowIndex), cellIndex];
          const cell = Node.get(selectedTableArea.table, relativeCellPath);
          if (!Element$1.isElement(cell)) {
            continue;
          }
          const cellPath = [...tablePath, ...relativeCellPath];
          Transforms.insertNodes(editor, {
            type: 'paragraph',
            children: [{
              text: ''
            }]
          }, {
            at: [...cellPath, 0]
          });
          for (const childIdx of [...cell.children.keys()].reverse()) {
            Transforms.removeNodes(editor, {
              at: [...cellPath, childIdx + 1]
            });
          }
        }
      }
      Transforms.select(editor, selectionStart);
    });
  };
  editor.normalizeNode = entry => {
    const [node, path] = entry;
    if (node.type === 'table-head' && node.children.length > 1) {
      moveChildren(editor, path, Path.next(path), (_, i) => i !== 0);
      return;
    }
    let didUpdateThings = false;
    for (const parent of ['table-body', 'table-head']) {
      if (node.type === parent) {
        for (const [rowIdx, row] of node.children.entries()) {
          if (row.type === 'table-row') {
            for (const [cellIdx, cell] of row.children.entries()) {
              if (cell.type === 'table-cell') {
                const at = [...path, rowIdx, cellIdx];
                if (cell.header && parent === 'table-body') {
                  Transforms.unsetNodes(editor, 'header', {
                    at
                  });
                  didUpdateThings = true;
                }
                if (!cell.header && parent === 'table-head') {
                  Transforms.setNodes(editor, {
                    header: true
                  }, {
                    at
                  });
                  didUpdateThings = true;
                }
              }
            }
          }
        }
      }
    }
    if (didUpdateThings) {
      return;
    }
    if (node.type === 'table') {
      const maxRowCount = node.children.reduce((max, node) => node.type === 'table-head' || node.type === 'table-body' ? node.children.reduce((max, node) => node.type === 'table-row' ? Math.max(max, node.children.length) : max, max) : max, 0);
      let didInsert = false;
      for (const [idx, child] of node.children.entries()) {
        if (child.type === 'table-body' || child.type === 'table-head') {
          for (const [rowIdx, row] of child.children.entries()) {
            if (row.type === 'table-row' && row.children.length !== maxRowCount) {
              Transforms.insertNodes(editor, Array.from({
                length: maxRowCount - row.children.length
              }, () => cell(child.type === 'table-head')), {
                at: [...path, idx, rowIdx, row.children.length]
              });
              didInsert = true;
            }
          }
        }
      }
      if (didInsert) {
        return;
      }
      if (node.children.length === 1 && node.children[0].type === 'table-head') {
        Transforms.insertNodes(editor, {
          type: 'table-body',
          children: Array.from({
            length: node.children[0].children.length
          }, () => cell(false))
        }, {
          at: [...path, 1]
        });
        return;
      }
      if (node.children.length === 2 && node.children[1].type === 'table-head') {
        Transforms.moveNodes(editor, {
          at: [...path, 1],
          to: [...path, 0]
        });
        return;
      }
      if (node.children.length > 2) {
        moveChildren(editor, path, Path.next(path), (_, i) => i !== 0 && i !== 1);
        return;
      }
    }
    normalizeNode(entry);
  };
  return editor;
}

const insertTable$1 = editor => {
  Transforms.insertNodes(editor, {
    type: 'table',
    children: [{
      type: 'table-head',
      children: [{
        type: 'table-row',
        children: [cell(true), cell(true), cell(true)]
      }]
    }, {
      type: 'table-body',
      children: [{
        type: 'table-row',
        children: [cell(false), cell(false), cell(false)]
      }, {
        type: 'table-row',
        children: [cell(false), cell(false), cell(false)]
      }]
    }]
  });
};
const SelectedCellsContext = /*#__PURE__*/createContext(undefined);
function getSelectedCells(table, row, column) {
  var _table$children$;
  const selectedCells = new Set();
  const first = table.children[0].type === 'table-head' || table.children[0].type === 'table-body' ? table.children[0] : undefined;
  if (!first) return selectedCells;
  const second = ((_table$children$ = table.children[1]) === null || _table$children$ === void 0 ? void 0 : _table$children$.type) === 'table-body' ? table.children[1] : undefined;
  for (let rowIndex = row.start; rowIndex <= row.end; rowIndex++) {
    const row = second ? rowIndex === 0 ? first.children[0] : second.children[rowIndex - 1] : first.children[rowIndex];
    if (!Element$1.isElement(row)) continue;
    for (let cellIndex = column.start; cellIndex <= column.end; cellIndex++) {
      selectedCells.add(row.children[cellIndex]);
    }
  }
  return selectedCells;
}
function TableSelectionProvider(props) {
  const editor = useSlate();
  const selectedTableArea = getSelectedTableArea(editor);
  if (selectedTableArea) {
    var _Editor$above, _editor$selection;
    return /*#__PURE__*/jsx(SelectedCellsContext.Provider, {
      value: {
        cells: selectedTableArea.singleCell === 'not-selected' ? new Set() : getSelectedCells(selectedTableArea.table, selectedTableArea.row, selectedTableArea.column),
        table: selectedTableArea.table,
        focus: (_Editor$above = Editor$1.above(editor, {
          match: nodeTypeMatcher('table-cell'),
          at: (_editor$selection = editor.selection) === null || _editor$selection === void 0 ? void 0 : _editor$selection.focus.path
        })) === null || _Editor$above === void 0 ? void 0 : _Editor$above[0]
      },
      children: props.children
    });
  }
  return /*#__PURE__*/jsx(SelectedCellsContext.Provider, {
    value: undefined,
    children: props.children
  });
}
const StartElementsContext = /*#__PURE__*/createContext({
  top: new Map(),
  left: new Map()
});
const TableElement = ({
  attributes,
  children,
  element
}) => {
  var _element$children$;
  const editor = useSlateStatic();
  const selectedCellsContext = useContext(SelectedCellsContext);
  const selectedCells = (selectedCellsContext === null || selectedCellsContext === void 0 ? void 0 : selectedCellsContext.table) === element ? selectedCellsContext : undefined;
  const startElements = useMemo(() => {
    const firstTableChild = element.children[0];
    if (!Element$1.isElement(firstTableChild) || !Element$1.isElement(firstTableChild.children[0])) {
      return {
        top: new Map(),
        left: new Map()
      };
    }
    const top = new Map();
    const left = new Map();
    for (const [idx, cell] of firstTableChild.children[0].children.entries()) {
      if (cell.type !== 'table-cell') continue;
      top.set(cell, element.children.every(headOrBody => Element$1.isElement(headOrBody) ? headOrBody.children.every(row => Element$1.isElement(row) && (selectedCells === null || selectedCells === void 0 ? void 0 : selectedCells.cells.has(row.children[idx]))) : false));
    }
    for (const headOrBody of element.children) {
      if (headOrBody.type !== 'table-head' && headOrBody.type !== 'table-body') {
        continue;
      }
      for (const row of headOrBody.children) {
        if (row.type !== 'table-row' || row.children[0].type !== 'table-cell') {
          continue;
        }
        left.set(row.children[0], row.children.every(element => selectedCells === null || selectedCells === void 0 ? void 0 : selectedCells.cells.has(element)));
      }
    }
    return {
      top,
      left
    };
  }, [element, selectedCells]);
  return /*#__PURE__*/jsx(StartElementsContext.Provider, {
    value: startElements,
    children: /*#__PURE__*/jsx(SelectedCellsContext.Provider, {
      value: selectedCells,
      children: /*#__PURE__*/jsx(BlockWrapper$1, {
        attributes: attributes,
        children: /*#__PURE__*/jsxs(BlockPopoverTrigger, {
          element: element,
          children: [/*#__PURE__*/jsx("table", {
            className: css({
              width: '100%',
              tableLayout: 'fixed',
              position: 'relative',
              borderSpacing: 0,
              '& *::selection': selectedCells !== null && selectedCells !== void 0 && selectedCells.cells.size ? {
                backgroundColor: 'transparent'
              } : undefined
            }),
            children: children
          }), /*#__PURE__*/jsx(BlockPopover, {
            children: /*#__PURE__*/jsxs(Flex, {
              gap: "regular",
              padding: "regular",
              children: [/*#__PURE__*/jsxs(TooltipTrigger, {
                children: [/*#__PURE__*/jsx(ActionButton, {
                  prominence: "low",
                  isSelected: ((_element$children$ = element.children[0]) === null || _element$children$ === void 0 ? void 0 : _element$children$.type) === 'table-head',
                  onPress: () => {
                    const tablePath = ReactEditor.findPath(editor, element);
                    Editor$1.withoutNormalizing(editor, () => {
                      if (element.children[0].type === 'table-head') {
                        Transforms.moveNodes(editor, {
                          at: [...tablePath, 0, 0],
                          to: [...tablePath, 1, 0]
                        });
                        Transforms.removeNodes(editor, {
                          at: [...tablePath, 0]
                        });
                        return;
                      }
                      Transforms.insertNodes(editor, {
                        type: 'table-head',
                        children: []
                      }, {
                        at: [...tablePath, 0]
                      });
                      Transforms.moveNodes(editor, {
                        at: [...tablePath, 1, 0],
                        to: [...tablePath, 0, 0]
                      });
                    });
                  },
                  children: /*#__PURE__*/jsx(Icon, {
                    src: sheetIcon
                  })
                }), /*#__PURE__*/jsx(Tooltip, {
                  children: "Header row"
                })]
              }), /*#__PURE__*/jsx(ToolbarSeparator, {}), /*#__PURE__*/jsxs(TooltipTrigger, {
                children: [/*#__PURE__*/jsx(ActionButton, {
                  prominence: "low",
                  onPress: () => {
                    Transforms.removeNodes(editor, {
                      at: ReactEditor.findPath(editor, element)
                    });
                  },
                  children: /*#__PURE__*/jsx(Icon, {
                    src: trash2Icon
                  })
                }), /*#__PURE__*/jsx(Tooltip, {
                  tone: "critical",
                  children: "Remove"
                })]
              })]
            })
          })]
        })
      })
    })
  });
};
const TableBodyElement = ({
  attributes,
  children
}) => {
  return /*#__PURE__*/jsx("tbody", {
    ...attributes,
    children: children
  });
};
const TableHeadElement = ({
  attributes,
  children
}) => {
  return /*#__PURE__*/jsx("thead", {
    ...attributes,
    children: children
  });
};
const TableRowElement = ({
  attributes,
  children,
  element
}) => {
  var _useContext, _table$children$index;
  const table = (_useContext = useContext(SelectedCellsContext)) === null || _useContext === void 0 ? void 0 : _useContext.table;
  return /*#__PURE__*/jsx(RowIndexContext.Provider, {
    value: (_table$children$index = table === null || table === void 0 ? void 0 : table.children.indexOf(element)) !== null && _table$children$index !== void 0 ? _table$children$index : -1,
    children: /*#__PURE__*/jsx("tr", {
      ...attributes,
      children: children
    })
  });
};
const RowIndexContext = /*#__PURE__*/createContext(-1);
function TableCellElement({
  attributes,
  children,
  element
}) {
  const editor = useSlateStatic();
  const selectedCellsContext = useContext(SelectedCellsContext);
  const startElements = useContext(StartElementsContext);
  const isSelected = selectedCellsContext === null || selectedCellsContext === void 0 ? void 0 : selectedCellsContext.cells.has(element);
  const size = `calc(100% + 2px)`;
  const ElementType = element.header ? 'th' : 'td';
  const borderColor = isSelected ? tokenSchema.color.alias.borderSelected : tokenSchema.color.alias.borderIdle;
  return /*#__PURE__*/jsxs(ElementType, {
    className: css({
      borderInlineEnd: `1px solid ${borderColor}`,
      borderBottom: `1px solid ${borderColor}`,
      borderTop: startElements.top.has(element) ? `1px solid ${borderColor}` : undefined,
      borderInlineStart: startElements.left.has(element) ? `1px solid ${borderColor}` : undefined,
      backgroundColor: selectedCellsContext !== null && selectedCellsContext !== void 0 && selectedCellsContext.cells.has(element) ? tokenSchema.color.alias.backgroundSelected : element.header ? tokenSchema.color.scale.slate3 : undefined,
      position: 'relative',
      margin: 0,
      padding: tokenSchema.size.space.regular,
      fontWeight: 'inherit',
      boxSizing: 'border-box',
      textAlign: 'start',
      verticalAlign: 'top'
    }),
    ...attributes,
    children: [isSelected && /*#__PURE__*/jsxs(Fragment, {
      children: [/*#__PURE__*/jsx("div", {
        contentEditable: false,
        className: css({
          position: 'absolute',
          top: -1,
          insetInlineStart: -1,
          background: tokenSchema.color.alias.borderSelected,
          height: size,
          width: 1
        })
      }), /*#__PURE__*/jsx("div", {
        contentEditable: false,
        className: css({
          position: 'absolute',
          top: -1,
          insetInlineStart: -1,
          background: tokenSchema.color.alias.borderSelected,
          height: 1,
          width: size
        })
      })]
    }), startElements.top.has(element) && /*#__PURE__*/jsx(CellSelection, {
      location: "top",
      selected: !!startElements.top.get(element),
      label: "Select Column",
      onClick: () => {
        const path = ReactEditor.findPath(editor, element);
        const table = Editor$1.above(editor, {
          match: nodeTypeMatcher('table'),
          at: path
        });
        if (!table) return;
        const lastTableIndex = table[0].children.length - 1;
        const tableBody = table[0].children[lastTableIndex];
        if (tableBody.type !== 'table-body') return;
        const cellIndex = path[path.length - 1];
        const endPath = [...table[1], table[0].children.length - 1, tableBody.children.length - 1, cellIndex];
        Transforms.select(editor, {
          anchor: Editor$1.start(editor, path),
          focus: Editor$1.end(editor, endPath)
        });
      }
    }), startElements.left.has(element) && /*#__PURE__*/jsx(CellSelection, {
      location: "left",
      selected: !!startElements.left.get(element),
      label: "Select Row",
      onClick: () => {
        const path = ReactEditor.findPath(editor, element);
        Transforms.select(editor, {
          anchor: Editor$1.start(editor, Path.parent(path)),
          focus: Editor$1.end(editor, Path.parent(path))
        });
      }
    }), startElements.left.has(element) && startElements.top.has(element) && /*#__PURE__*/jsx(CellSelection, {
      location: "top-left",
      selected: !!(startElements.top.get(element) && startElements.left.get(element)),
      label: "Select Table",
      onClick: () => {
        const path = ReactEditor.findPath(editor, element);
        const table = Editor$1.above(editor, {
          match: nodeTypeMatcher('table'),
          at: path
        });
        if (!table) return;
        Transforms.select(editor, {
          anchor: Editor$1.start(editor, table[1]),
          focus: Editor$1.end(editor, table[1])
        });
      }
    }), /*#__PURE__*/jsx("div", {
      children: children
    }), (selectedCellsContext === null || selectedCellsContext === void 0 ? void 0 : selectedCellsContext.focus) === element && /*#__PURE__*/jsx(CellMenu$1, {
      cell: element,
      table: selectedCellsContext.table
    })]
  });
}
function CellSelection(props) {
  const selectedCellsContext = useContext(SelectedCellsContext);
  const editor = useSlateStatic();
  let {
    location,
    selected
  } = props;
  return /*#__PURE__*/jsxs("div", {
    contentEditable: false,
    children: [/*#__PURE__*/jsx("button", {
      tabIndex: -1,
      type: "button",
      ...toDataAttributes({
        location,
        selected
      }),
      className: css({
        background: tokenSchema.color.scale.slate3,
        border: `1px solid ${tokenSchema.color.alias.borderIdle}`,
        margin: 0,
        padding: 0,
        position: 'absolute',
        ':hover': {
          background: tokenSchema.color.scale.slate4
        },
        // ever so slightly larger hit area
        '::before': {
          content: '""',
          inset: -1,
          position: 'absolute'
        },
        // location
        '&[data-location=top]': {
          top: -9,
          insetInlineStart: -1,
          width: 'calc(100% + 2px)',
          height: 8
        },
        '&[data-location=left]': {
          top: -1,
          insetInlineStart: -9,
          width: 8,
          height: 'calc(100% + 2px)'
        },
        '&[data-location=top-left]': {
          top: -9,
          insetInlineStart: -9,
          width: 8,
          height: 8
        },
        '&:not([data-location=top])': {
          borderInlineEnd: 'none'
        },
        '&:not([data-location=left])': {
          borderBottom: 'none'
        },
        // state
        '&[data-selected=true]': {
          background: tokenSchema.color.scale.indigo8,
          borderColor: tokenSchema.color.alias.borderSelected
        }
      }),
      style: {
        visibility: selectedCellsContext !== null && selectedCellsContext !== void 0 && selectedCellsContext.focus ? 'visible' : 'hidden'
      },
      "aria-label": props.label,
      onClick: () => {
        ReactEditor.focus(editor);
        props.onClick();
      }
    }), props.selected && (props.location === 'top' ? /*#__PURE__*/jsx("div", {
      className: css({
        position: 'absolute',
        top: -9,
        insetInlineEnd: -1,
        background: tokenSchema.color.alias.borderSelected,
        height: 8,
        width: 1,
        zIndex: 2
      })
    }) : /*#__PURE__*/jsx("div", {
      className: css({
        position: 'absolute',
        bottom: -1,
        insetInlineStart: -9,
        background: tokenSchema.color.alias.borderSelected,
        height: 1,
        width: 8,
        zIndex: 2
      })
    }))]
  });
}
const cellActions$1 = {
  deleteRow: {
    label: 'Delete row',
    action: (editor, cellPath) => {
      const tablePath = cellPath.slice(0, -3);
      const table = Node.get(editor, tablePath);
      if (table.type !== 'table') return;
      const hasHead = table.children[0].type === 'table-head';
      const rowPath = Path.parent(cellPath);
      Transforms.removeNodes(editor, {
        at: hasHead && rowPath[cellPath.length - 3] === 0 ? Path.parent(rowPath) : rowPath
      });
    }
  },
  deleteColumn: {
    label: 'Delete column',
    action: (editor, path) => {
      const cellIndex = path[path.length - 1];
      const tablePath = path.slice(0, -3);
      const table = Node.get(editor, tablePath);
      if (table.type !== 'table') return;
      Editor$1.withoutNormalizing(editor, () => {
        for (const [headOrBodyIdx, headOrBody] of table.children.entries()) {
          if (headOrBody.type !== 'table-head' && headOrBody.type !== 'table-body') {
            continue;
          }
          for (const idx of headOrBody.children.keys()) {
            Transforms.removeNodes(editor, {
              at: [...tablePath, headOrBodyIdx, idx, cellIndex]
            });
          }
        }
      });
    }
  },
  insertRowBelow: {
    label: 'Insert row below',
    action: (editor, path) => {
      const tableRow = Node.get(editor, Path.parent(path));
      const tablePath = path.slice(0, -3);
      const table = Node.get(editor, tablePath);
      if (tableRow.type !== 'table-row' || table.type !== 'table') {
        return;
      }
      const hasHead = table.children[0].type === 'table-head';
      const newRowPath = [...tablePath, hasHead ? 1 : 0, hasHead && path[path.length - 3] === 0 ? 0 : path[path.length - 2] + 1];
      Editor$1.withoutNormalizing(editor, () => {
        Transforms.insertNodes(editor, {
          type: 'table-row',
          children: tableRow.children.map(() => cell(false))
        }, {
          at: newRowPath
        });
        Transforms.select(editor, [...newRowPath, path[path.length - 1]]);
      });
    }
  },
  insertColumnRight: {
    label: 'Insert column right',
    action: (editor, path) => {
      const newCellIndex = path[path.length - 1] + 1;
      const tablePath = path.slice(0, -3);
      const table = Node.get(editor, tablePath);
      if (table.type !== 'table') return;
      Editor$1.withoutNormalizing(editor, () => {
        for (const [headOrBodyIdx, headOrBody] of table.children.entries()) {
          if (headOrBody.type !== 'table-head' && headOrBody.type !== 'table-body') {
            continue;
          }
          for (const rowIdx of headOrBody.children.keys()) {
            Transforms.insertNodes(editor, cell(headOrBody.type === 'table-head'), {
              at: [...tablePath, headOrBodyIdx, rowIdx, newCellIndex]
            });
          }
        }
        Transforms.select(editor, Editor$1.start(editor, Path.next(path)));
      });
    }
  }
};
const _cellActions = cellActions$1;
function CellMenu$1(props) {
  const editor = useSlateStatic();
  const gutter = tokenSchema.size.space.small;
  return /*#__PURE__*/jsx("div", {
    contentEditable: false,
    className: css({
      top: gutter,
      insetInlineEnd: gutter,
      position: 'absolute'
    }),
    children: /*#__PURE__*/jsxs(TooltipTrigger, {
      children: [/*#__PURE__*/jsxs(MenuTrigger, {
        align: "end",
        children: [/*#__PURE__*/jsx(ActionButton, {
          prominence: "low",
          UNSAFE_className: css({
            borderRadius: tokenSchema.size.radius.small,
            height: 'auto',
            minWidth: 0,
            padding: 0,
            // tiny buttons; increase the hit area
            '&::before': {
              content: '""',
              inset: `calc(${gutter} * -1)`,
              position: 'absolute'
            }
          }),
          children: /*#__PURE__*/jsx(Icon, {
            src: chevronDownIcon
          })
        }), /*#__PURE__*/jsx(Menu, {
          onAction: key => {
            if (key in _cellActions) {
              _cellActions[key].action(editor, ReactEditor.findPath(editor, props.cell));
            }
          },
          items: Object.entries(_cellActions).map(([key, item]) => ({
            ...item,
            key
          })),
          children: item => /*#__PURE__*/jsx(Item$4, {
            children: item.label
          }, item.key)
        })]
      }), /*#__PURE__*/jsx(Tooltip, {
        children: "Options"
      })]
    })
  });
}
const TableButton = () => {
  const {
    editor,
    blockquote: {
      isDisabled,
      isSelected
    }
  } = useToolbarState();
  return useMemo(() => /*#__PURE__*/jsx(ActionButton, {
    prominence: "low",
    isSelected: isSelected,
    isDisabled: isDisabled,
    onPress: () => {
      insertTable$1(editor);
      ReactEditor.focus(editor);
    },
    children: /*#__PURE__*/jsx(Icon, {
      src: tableIcon
    })
  }), [editor, isDisabled, isSelected]);
};
const tableButton = /*#__PURE__*/jsxs(TooltipTrigger, {
  children: [/*#__PURE__*/jsx(TableButton, {}), /*#__PURE__*/jsx(Tooltip, {
    children: /*#__PURE__*/jsx(Text, {
      children: "Table"
    })
  })]
});
function getCellPathInDirection(editor, path, direction) {
  if (direction === 'left' || direction === 'right') {
    const row = Editor$1.above(editor, {
      match: nodeTypeMatcher('table-row'),
      at: path
    });
    if (!row) return;
    const currentCellIdx = path[path.length - 1];
    const diff = direction === 'left' ? -1 : 1;
    const nextCellIdx = currentCellIdx + diff;
    const nextCell = row[0].children[nextCellIdx];
    if (!nextCell) return;
    return [...row[1], nextCellIdx];
  }
  const table = Editor$1.above(editor, {
    match: nodeTypeMatcher('table'),
    at: path
  });
  if (!table) return;
  const diff = direction === 'up' ? -1 : 1;
  const rowIndex = path[path.length - 3] + path[path.length - 2];
  const nextRowIndex = rowIndex + diff;
  const relativeRowPath = getRelativeRowPath(table[0].children[0].type === 'table-head', nextRowIndex);
  if (!Node.has(table[0], relativeRowPath)) return;
  return [...table[1], ...relativeRowPath, path[path.length - 1]];
}

function Toolbar$1({
  documentFeatures,
  viewState
}) {
  const componentBlocks = useDocumentEditorConfig().componentBlocks;
  let hasComponentBlocksForInsertMenu = false,
    hasComponentBlocksForToolbar = false;
  for (const componentBlock of Object.values(componentBlocks)) {
    if (componentBlock.toolbarIcon) {
      hasComponentBlocksForToolbar = true;
    }
    if (!componentBlock.toolbarIcon) {
      hasComponentBlocksForInsertMenu = true;
    }
  }
  const hasMarks = Object.values(documentFeatures.formatting.inlineMarks).some(x => x);
  const hasAlignment = documentFeatures.formatting.alignment.center || documentFeatures.formatting.alignment.end;
  const hasLists = documentFeatures.formatting.listTypes.unordered || documentFeatures.formatting.listTypes.ordered;
  return /*#__PURE__*/jsxs(ToolbarWrapper$1, {
    children: [/*#__PURE__*/jsxs(ToolbarScrollArea$1, {
      children: [!!documentFeatures.formatting.headings.levels.length && /*#__PURE__*/jsx(HeadingMenu$1, {
        headingLevels: documentFeatures.formatting.headings.levels
      }), hasMarks && /*#__PURE__*/jsx(InlineMarks$1, {
        marks: documentFeatures.formatting.inlineMarks
      }), (hasAlignment || hasLists) && /*#__PURE__*/jsxs(ToolbarGroup, {
        children: [hasAlignment && /*#__PURE__*/jsx(TextAlignMenu, {
          alignment: documentFeatures.formatting.alignment
        }), hasLists && /*#__PURE__*/jsx(ListButtons$1, {
          lists: documentFeatures.formatting.listTypes
        })]
      }), (documentFeatures.dividers || documentFeatures.links || !!documentFeatures.images || documentFeatures.formatting.blockTypes.blockquote || documentFeatures.tables || !!documentFeatures.layouts.length || documentFeatures.formatting.blockTypes.code || hasComponentBlocksForToolbar) && /*#__PURE__*/jsxs(ToolbarGroup, {
        children: [documentFeatures.dividers && dividerButton, documentFeatures.links && linkButton, documentFeatures.images && imageButton, documentFeatures.formatting.blockTypes.blockquote && blockquoteButton, !!documentFeatures.layouts.length && /*#__PURE__*/jsx(LayoutsButton, {
          layouts: documentFeatures.layouts
        }), documentFeatures.formatting.blockTypes.code && codeButton, documentFeatures.tables && tableButton, hasComponentBlocksForInsertMenu && insertBlocksInToolbar]
      }), /*#__PURE__*/jsx(Box, {
        flex: true
      })]
    }), useMemo(() => {
      return viewState && /*#__PURE__*/jsxs(Flex, {
        gap: "xsmall",
        children: [/*#__PURE__*/jsx(ToolbarSeparator, {}), /*#__PURE__*/jsxs(TooltipTrigger, {
          children: [/*#__PURE__*/jsx(Button, {
            prominence: "low",
            onPress: () => {
              viewState.toggle();
            },
            children: /*#__PURE__*/jsx(Icon, {
              src: viewState.expanded ? minimizeIcon : maximizeIcon
            })
          }), /*#__PURE__*/jsx(Tooltip, {
            children: viewState.expanded ? 'Collapse' : 'Expand'
          })]
        })]
      });
    }, [viewState]), !!hasComponentBlocksForInsertMenu && /*#__PURE__*/jsx(InsertBlockMenu$1, {})]
  });
}

/** Group buttons together that don't fit into an `ActionGroup` semantically. */
const ToolbarGroup = ({
  children
}) => {
  return /*#__PURE__*/jsx(Flex, {
    gap: "regular",
    children: children
  });
};
const ToolbarContainer$1 = ({
  children
}) => {
  let entryLayoutPane = useEntryLayoutSplitPaneContext();
  if (entryLayoutPane === 'main') {
    return /*#__PURE__*/jsx("div", {
      className: css({
        boxSizing: 'border-box',
        display: 'flex',
        paddingInline: tokenSchema.size.space.medium,
        minWidth: 0,
        maxWidth: 800,
        marginInline: 'auto',
        [breakpointQueries.above.mobile]: {
          paddingInline: tokenSchema.size.space.xlarge
        },
        [breakpointQueries.above.tablet]: {
          paddingInline: tokenSchema.size.space.xxlarge
        }
      }),
      children: children
    });
  }
  return /*#__PURE__*/jsx("div", {
    className: css({
      display: 'flex'
    }),
    children: children
  });
};
const ToolbarWrapper$1 = ({
  children
}) => {
  let entryLayoutPane = useEntryLayoutSplitPaneContext();
  return /*#__PURE__*/jsx(Fragment, {
    children: /*#__PURE__*/jsx("div", {
      "data-layout": entryLayoutPane,
      className: css({
        backdropFilter: 'blur(8px)',
        backgroundClip: 'padding-box',
        backgroundColor: `color-mix(in srgb, transparent, ${tokenSchema.color.background.canvas} 90%)`,
        borderBottom: `${tokenSchema.size.border.regular} solid color-mix(in srgb, transparent, ${tokenSchema.color.foreground.neutral} 10%)`,
        borderStartEndRadius: tokenSchema.size.radius.medium,
        borderStartStartRadius: tokenSchema.size.radius.medium,
        minWidth: 0,
        position: 'sticky',
        top: 0,
        zIndex: 2,
        '&[data-layout="main"]': {
          borderRadius: 0
        }
      }),
      children: /*#__PURE__*/jsx(ToolbarContainer$1, {
        children: children
      })
    })
  });
};
const ToolbarScrollArea$1 = props => {
  let entryLayoutPane = useEntryLayoutSplitPaneContext();
  return /*#__PURE__*/jsx(Flex, {
    "data-layout": entryLayoutPane,
    paddingY: "regular",
    paddingX: "medium",
    gap: "large",
    flex: true,
    minWidth: 0,
    UNSAFE_className: css({
      msOverflowStyle: 'none' /* for Internet Explorer, Edge */,
      scrollbarWidth: 'none' /* for Firefox */,
      overflowX: 'auto',
      /* for Chrome, Safari, and Opera */
      '&::-webkit-scrollbar': {
        display: 'none'
      },
      '&[data-layout="main"]': {
        paddingInline: 0
      }
    }),
    ...props
  });
};
const headingMenuVals$1 = new Map([['normal', 'normal'], ['1', 1], ['2', 2], ['3', 3], ['4', 4], ['5', 5], ['6', 6]]);
const HeadingMenu$1 = ({
  headingLevels
}) => {
  const {
    editor,
    textStyles
  } = useToolbarState();
  const isDisabled = textStyles.allowedHeadingLevels.length === 0;
  const items = useMemo(() => {
    let resolvedItems = [{
      name: 'Paragraph',
      id: 'normal'
    }];
    headingLevels.forEach(level => {
      resolvedItems.push({
        name: `Heading ${level}`,
        id: level.toString()
      });
    });
    return resolvedItems;
  }, [headingLevels]);
  const selected = textStyles.selected.toString();
  return useMemo(() => /*#__PURE__*/jsx(Picker, {
    flexShrink: 0,
    width: "scale.1700",
    prominence: "low",
    "aria-label": "Text block",
    items: items,
    isDisabled: isDisabled,
    selectedKey: selected,
    onSelectionChange: selected => {
      let key = headingMenuVals$1.get(selected);
      if (key === 'normal') {
        Editor$1.withoutNormalizing(editor, () => {
          Transforms.unsetNodes(editor, 'level', {
            match: n => n.type === 'heading'
          });
          Transforms.setNodes(editor, {
            type: 'paragraph'
          }, {
            match: n => n.type === 'heading'
          });
        });
      } else if (key) {
        Transforms.setNodes(editor, {
          type: 'heading',
          level: key
        }, {
          match: node => node.type === 'paragraph' || node.type === 'heading'
        });
      }
      ReactEditor.focus(editor);
    },
    children: item => /*#__PURE__*/jsx(Item$3, {
      children: item.name
    }, item.id)
  }), [editor, isDisabled, items, selected]);
};
const insertBlocksInToolbar = /*#__PURE__*/jsx(InsertBlocksInToolbar, {});
function InsertBlocksInToolbar() {
  const editor = useSlateStatic();
  const componentBlocks = useDocumentEditorConfig().componentBlocks;
  return Object.entries(componentBlocks).filter(([, val]) => val.toolbarIcon).map(([key, item]) => {
    return /*#__PURE__*/jsxs(TooltipTrigger, {
      children: [/*#__PURE__*/jsx(ActionButton, {
        prominence: "low",
        onPress: () => {
          insertComponentBlock(editor, componentBlocks, key);
          ReactEditor.focus(editor);
        },
        children: /*#__PURE__*/jsx(Icon, {
          src: item.toolbarIcon
        })
      }), /*#__PURE__*/jsx(Tooltip, {
        children: item.label
      })]
    }, key);
  });
}
function InsertBlockMenu$1() {
  let entryLayoutPane = useEntryLayoutSplitPaneContext();
  const editor = useSlateStatic();
  const componentBlocks = useDocumentEditorConfig().componentBlocks;
  return /*#__PURE__*/jsxs(MenuTrigger, {
    align: "end",
    children: [/*#__PURE__*/jsxs(TooltipTrigger, {
      children: [/*#__PURE__*/jsxs(ActionButton, {
        marginY: "regular",
        marginEnd: entryLayoutPane === 'main' ? undefined : 'medium',
        children: [/*#__PURE__*/jsx(Icon, {
          src: plusIcon
        }), /*#__PURE__*/jsx(Icon, {
          src: chevronDownIcon
        })]
      }), /*#__PURE__*/jsxs(Tooltip, {
        children: [/*#__PURE__*/jsx(Text, {
          children: "Insert"
        }), /*#__PURE__*/jsx(Kbd, {
          children: "/"
        })]
      })]
    }), /*#__PURE__*/jsx(Menu, {
      onAction: key => {
        insertComponentBlock(editor, componentBlocks, key);
      },
      items: Object.entries(componentBlocks).filter(([, val]) => !val.toolbarIcon),
      children: ([key, item]) => /*#__PURE__*/jsx(Item$3, {
        children: item.label
      }, key)
    })]
  });
}
const inlineMarks = [{
  key: 'bold',
  label: 'Bold',
  icon: boldIcon,
  shortcut: `B`
}, {
  key: 'italic',
  label: 'Italic',
  icon: italicIcon,
  shortcut: `I`
}, {
  key: 'underline',
  label: 'Underline',
  icon: underlineIcon,
  shortcut: `U`
}, {
  key: 'strikethrough',
  label: 'Strikethrough',
  icon: strikethroughIcon
}, {
  key: 'code',
  label: 'Code',
  icon: codeIcon
}, {
  key: 'superscript',
  label: 'Superscript',
  icon: superscriptIcon
}, {
  key: 'subscript',
  label: 'Subscript',
  icon: subscriptIcon
}, {
  key: 'clearFormatting',
  label: 'Clear formatting',
  icon: removeFormattingIcon
}];
function InlineMarks$1({
  marks: _marksShown
}) {
  const {
    editor,
    clearFormatting: {
      isDisabled
    },
    marks
  } = useToolbarState();
  const marksShown = useMemoStringified$1(_marksShown);
  const selectedKeys = useMemoStringified$1(Object.keys(marks).filter(key => marks[key].isSelected));
  const disabledKeys = useMemoStringified$1(Object.keys(marks).filter(key => marks[key].isDisabled).concat(isDisabled ? 'clearFormatting' : []));
  return useMemo(() => {
    const items = inlineMarks.filter(item => item.key === 'clearFormatting' || marksShown[item.key]);
    return /*#__PURE__*/jsx(ActionGroup, {
      UNSAFE_className: css({
        minWidth: `calc(${tokenSchema.size.element.medium} * 4)`
      }),
      prominence: "low",
      density: "compact",
      buttonLabelBehavior: "hide",
      overflowMode: "collapse",
      summaryIcon: /*#__PURE__*/jsx(Icon, {
        src: typeIcon
      }),
      items: items,
      selectionMode: "multiple",
      selectedKeys: selectedKeys,
      disabledKeys: disabledKeys,
      onAction: key => {
        if (key === 'clearFormatting') {
          clearFormatting(editor);
        } else {
          var _Editor$marks;
          const mark = key;
          if ((_Editor$marks = Editor$1.marks(editor)) !== null && _Editor$marks !== void 0 && _Editor$marks[mark]) {
            Editor$1.removeMark(editor, mark);
          } else {
            Editor$1.addMark(editor, mark, true);
          }
        }
        ReactEditor.focus(editor);
      },
      children: item => {
        return /*#__PURE__*/jsxs(Item$3, {
          textValue: item.label,
          children: [/*#__PURE__*/jsx(Text, {
            children: item.label
          }), 'shortcut' in item && /*#__PURE__*/jsx(Kbd, {
            meta: true,
            children: item.shortcut
          }), /*#__PURE__*/jsx(Icon, {
            src: item.icon
          })]
        }, item.key);
      }
    });
  }, [disabledKeys, editor, marksShown, selectedKeys]);
}
function useMemoStringified$1(value) {
  // eslint-disable-next-line react-hooks/exhaustive-deps
  return useMemo(() => value, [JSON.stringify(value)]);
}

const HeadingElement = ({
  attributes,
  children,
  element
}) => {
  const ElementType = `h${element.level}`;
  const editor = useSlateStatic();
  const {
    documentFeatures
  } = useDocumentEditorConfig();
  const [dialogOpen, setDialogOpen] = useState(false);
  if (Object.keys(documentFeatures.formatting.headings.schema.fields).length === 0) {
    return /*#__PURE__*/jsx(ElementType, {
      ...attributes,
      style: {
        textAlign: element.textAlign
      },
      children: children
    });
  }
  return /*#__PURE__*/jsxs(Fragment, {
    children: [/*#__PURE__*/jsx(ElementType, {
      style: {
        textAlign: element.textAlign
      },
      children: /*#__PURE__*/jsxs(BlockPopoverTrigger, {
        element: element,
        children: [/*#__PURE__*/jsx("div", {
          children: children
        }), /*#__PURE__*/jsx(BlockPopover, {
          children: /*#__PURE__*/jsxs(Flex, {
            gap: "regular",
            padding: "regular",
            children: [/*#__PURE__*/jsx(CustomAttributesEditButton, {
              onPress: () => setDialogOpen(true)
            }), /*#__PURE__*/jsxs(TooltipTrigger, {
              children: [/*#__PURE__*/jsx(ActionButton, {
                prominence: "low",
                onPress: () => {
                  Transforms.removeNodes(editor, {
                    at: ReactEditor.findPath(editor, element)
                  });
                },
                children: /*#__PURE__*/jsx(Icon, {
                  src: trash2Icon
                })
              }), /*#__PURE__*/jsx(Tooltip, {
                tone: "critical",
                children: "Remove"
              })]
            })]
          })
        })]
      })
    }), /*#__PURE__*/jsx(CustomAttributesDialog, {
      element: element,
      schema: documentFeatures.formatting.headings.schema,
      isOpen: dialogOpen,
      nodeLabel: "Heading",
      onDismiss: () => setDialogOpen(false)
    })]
  });
};

const renderElement = props => {
  switch (props.element.type) {
    case 'layout':
      return /*#__PURE__*/jsx(LayoutContainer, {
        attributes: props.attributes,
        children: props.children,
        element: props.element
      });
    case 'layout-area':
      return /*#__PURE__*/jsx(LayoutArea, {
        ...props
      });
    case 'code':
      return /*#__PURE__*/jsx(CodeElement, {
        attributes: props.attributes,
        children: props.children,
        element: props.element
      });
    case 'component-block':
      {
        return /*#__PURE__*/jsx(ComponentBlocksElement, {
          attributes: props.attributes,
          children: props.children,
          element: props.element
        });
      }
    case 'component-inline-prop':
    case 'component-block-prop':
      return /*#__PURE__*/jsx(ComponentInlineProp, {
        ...props
      });
    case 'heading':
      return /*#__PURE__*/jsx(HeadingElement, {
        attributes: props.attributes,
        children: props.children,
        element: props.element
      });
    case 'link':
      return /*#__PURE__*/jsx(LinkElement, {
        attributes: props.attributes,
        children: props.children,
        element: props.element
      });
    case 'ordered-list':
      return /*#__PURE__*/jsx("ol", {
        ...props.attributes,
        children: props.children
      });
    case 'unordered-list':
      return /*#__PURE__*/jsx("ul", {
        ...props.attributes,
        children: props.children
      });
    case 'list-item':
      return /*#__PURE__*/jsx("li", {
        ...props.attributes,
        children: props.children
      });
    case 'list-item-content':
      return /*#__PURE__*/jsx("span", {
        ...props.attributes,
        children: props.children
      });
    case 'blockquote':
      return /*#__PURE__*/jsx("blockquote", {
        ...props.attributes,
        children: props.children
      });
    case 'divider':
      return /*#__PURE__*/jsx(DividerElement, {
        ...props
      });
    case 'image':
      return /*#__PURE__*/jsx(ImageElement, {
        attributes: props.attributes,
        children: props.children,
        element: props.element
      });
    case 'table':
      return /*#__PURE__*/jsx(TableElement, {
        attributes: props.attributes,
        children: props.children,
        element: props.element
      });
    case 'table-head':
      return /*#__PURE__*/jsx(TableHeadElement, {
        attributes: props.attributes,
        children: props.children,
        element: props.element
      });
    case 'table-body':
      return /*#__PURE__*/jsx(TableBodyElement, {
        attributes: props.attributes,
        children: props.children,
        element: props.element
      });
    case 'table-row':
      return /*#__PURE__*/jsx(TableRowElement, {
        attributes: props.attributes,
        children: props.children,
        element: props.element
      });
    case 'table-cell':
      return /*#__PURE__*/jsx(TableCellElement, {
        attributes: props.attributes,
        children: props.children,
        element: props.element
      });
    default:
      let {
        textAlign
      } = props.element;
      return /*#__PURE__*/jsx("p", {
        style: {
          textAlign
        },
        ...props.attributes,
        children: props.children
      });
  }
};

function getOptions(toolbarState, componentBlocks) {
  const options = [...Object.keys(componentBlocks).map(key => ({
    label: componentBlocks[key].label,
    insert: editor => {
      insertComponentBlock(editor, componentBlocks, key);
    }
  })), ...toolbarState.textStyles.allowedHeadingLevels.filter(a => toolbarState.editorDocumentFeatures.formatting.headings.levels.includes(a)).map(level => ({
    label: `Heading ${level}`,
    insert(editor) {
      insertNodesButReplaceIfSelectionIsAtEmptyParagraphOrHeading(editor, {
        type: 'heading',
        level,
        children: [{
          text: ''
        }]
      });
    }
  })), !toolbarState.blockquote.isDisabled && toolbarState.editorDocumentFeatures.formatting.blockTypes.blockquote && {
    label: 'Blockquote',
    insert(editor) {
      insertNodesButReplaceIfSelectionIsAtEmptyParagraphOrHeading(editor, {
        type: 'blockquote',
        children: [{
          text: ''
        }]
      });
    }
  }, !toolbarState.code.isDisabled && toolbarState.editorDocumentFeatures.formatting.blockTypes.code && {
    label: 'Code block',
    insert(editor) {
      insertNodesButReplaceIfSelectionIsAtEmptyParagraphOrHeading(editor, {
        type: 'code',
        children: [{
          text: ''
        }]
      });
    }
  }, !!toolbarState.editorDocumentFeatures.images && {
    label: 'Image',
    async insert(editor) {
      const image = await getUploadedImage();
      if (image) {
        insertNodesButReplaceIfSelectionIsAtEmptyParagraphOrHeading(editor, {
          type: 'image',
          src: image,
          alt: '',
          title: '',
          children: [{
            text: ''
          }]
        });
      }
    }
  }, !!toolbarState.editorDocumentFeatures.tables && {
    label: 'Table',
    insert: insertTable$1
  }, !toolbarState.dividers.isDisabled && toolbarState.editorDocumentFeatures.dividers && {
    label: 'Divider',
    insert(editor) {
      insertNodesButReplaceIfSelectionIsAtEmptyParagraphOrHeading(editor, {
        type: 'divider',
        children: [{
          text: ''
        }]
      });
    }
  }, !!toolbarState.editorDocumentFeatures.layouts.length && {
    label: 'Layout',
    insert(editor) {
      insertLayout(editor, toolbarState.editorDocumentFeatures.layouts[0]);
    }
  }, !toolbarState.lists.ordered.isDisabled && toolbarState.editorDocumentFeatures.formatting.listTypes.ordered && {
    label: 'Numbered List',
    keywords: ['ordered list'],
    insert(editor) {
      insertNodesButReplaceIfSelectionIsAtEmptyParagraphOrHeading(editor, {
        type: 'ordered-list',
        children: [{
          text: ''
        }]
      });
    }
  }, !toolbarState.lists.unordered.isDisabled && toolbarState.editorDocumentFeatures.formatting.listTypes.unordered && {
    label: 'Bullet List',
    keywords: ['unordered list'],
    insert(editor) {
      insertNodesButReplaceIfSelectionIsAtEmptyParagraphOrHeading(editor, {
        type: 'unordered-list',
        children: [{
          text: ''
        }]
      });
    }
  }];
  return options.filter(x => typeof x !== 'boolean');
}
function insertOption(editor, text, option) {
  const path = ReactEditor.findPath(editor, text);
  Transforms.delete(editor, {
    at: {
      focus: Editor$1.start(editor, path),
      anchor: Editor$1.end(editor, path)
    }
  });
  option.insert(editor);
}
function InsertMenu$1({
  children,
  text
}) {
  const toolbarState = useToolbarState();
  const {
    editor
  } = toolbarState;
  const {
    componentBlocks
  } = useDocumentEditorConfig();
  const options = matchSorter(getOptions(toolbarState, componentBlocks), text.text.slice(1), {
    keys: ['label', 'keywords']
  }).map((option, index) => ({
    ...option,
    index
  }));
  const stateRef = useRef({
    options,
    text
  });
  useEffect(() => {
    stateRef.current = {
      options,
      text
    };
  });
  const listenerRef = useRef(_event => {});
  useEffect(() => {
    listenerRef.current = event => {
      if (event.defaultPrevented) return;
      switch (event.key) {
        case 'ArrowDown':
          {
            if (stateRef.current.options.length) {
              event.preventDefault();
              state.selectionManager.setFocused(true);
              state.selectionManager.setFocusedKey((Number(state.selectionManager.focusedKey) === stateRef.current.options.length - 1 ? 0 : Number(state.selectionManager.focusedKey) + 1).toString());
            }
            return;
          }
        case 'ArrowUp':
          {
            if (stateRef.current.options.length) {
              event.preventDefault();
              state.selectionManager.setFocused(true);
              state.selectionManager.setFocusedKey((state.selectionManager.focusedKey === '0' ? stateRef.current.options.length - 1 : Number(state.selectionManager.focusedKey) - 1).toString());
            }
            return;
          }
        case 'Enter':
          {
            const option = stateRef.current.options[Number(state.selectionManager.focusedKey)];
            if (option) {
              insertOption(editor, stateRef.current.text, option);
              event.preventDefault();
            }
            return;
          }
        case 'Escape':
          {
            const path = ReactEditor.findPath(editor, stateRef.current.text);
            Transforms.unsetNodes(editor, 'insertMenu', {
              at: path
            });
            event.preventDefault();
            return;
          }
      }
    };
  });
  useEffect(() => {
    const domNode = ReactEditor.toDOMNode(editor, editor);
    let listener = event => listenerRef.current(event);
    domNode.addEventListener('keydown', listener);
    return () => {
      domNode.removeEventListener('keydown', listener);
    };
  }, [editor]);
  const triggerRef = useRef(null);
  const overlayState = useOverlayTriggerState({
    isOpen: true
  });
  const {
    triggerProps: {
      onPress,
      ...triggerProps
    },
    overlayProps
  } = useOverlayTrigger({
    type: 'listbox'
  }, overlayState, triggerRef);
  let state = useListState({
    items: options,
    children: item => /*#__PURE__*/jsx(Item$5, {
      children: item.label
    }, item.index)
  });
  useEffect(() => {
    if (!state.selectionManager.isFocused && state.collection.size) {
      state.selectionManager.setFocused(true);
      state.selectionManager.setFocusedKey('0');
    }
  }, [state]);
  const scrollableRef = useRef(null);
  useEffect(() => {
    var _scrollableRef$curren;
    const element = (_scrollableRef$curren = scrollableRef.current) === null || _scrollableRef$curren === void 0 || (_scrollableRef$curren = _scrollableRef$curren.querySelector('[role="listbox"] [role="presentation"]')) === null || _scrollableRef$curren === void 0 ? void 0 : _scrollableRef$curren.children[state.selectionManager.focusedKey];
    if (element) {
      scrollIntoView(element, {
        scrollMode: 'if-needed',
        boundary: scrollableRef.current,
        block: 'nearest'
      });
    }
  }, [state.selectionManager.focusedKey]);
  const listboxRef = useRef(null);
  let layout = useListBoxLayout();
  return /*#__PURE__*/jsxs(Fragment$1, {
    children: [/*#__PURE__*/jsx("span", {
      ...triggerProps,
      role: "button",
      className: css({
        color: tokenSchema.color.foreground.accent,
        fontWeight: tokenSchema.typography.fontWeight.medium
      }),
      ref: triggerRef,
      children: children
    }), /*#__PURE__*/jsx(Popover, {
      width: "alias.singleLineWidth",
      placement: "bottom start",
      isNonModal: true,
      hideArrow: true,
      ...overlayProps,
      state: overlayState,
      triggerRef: triggerRef,
      children: /*#__PURE__*/jsx("div", {
        className: css({
          overflow: 'scroll',
          maxHeight: 300
        }),
        ref: scrollableRef,
        children: /*#__PURE__*/jsx(ListBoxBase, {
          "aria-label": "Insert block",
          state: state,
          shouldUseVirtualFocus: true,
          layout: layout,
          ref: listboxRef,
          onAction: key => {
            insertOption(editor, text, options[key]);
          }
        })
      })
    })]
  });
}
const nodeListsWithoutInsertMenu = new WeakSet();
const nodesWithoutInsertMenu = new WeakSet();
function findPathWithInsertMenu(node, path) {
  if (Text$1.isText(node)) {
    return node.insertMenu ? path : undefined;
  }
  if (nodeListsWithoutInsertMenu.has(node.children)) {
    return;
  }
  for (const [index, child] of node.children.entries()) {
    if (nodesWithoutInsertMenu.has(child)) continue;
    let maybePath = findPathWithInsertMenu(child, [...path, index]);
    if (maybePath) {
      return maybePath;
    }
    nodesWithoutInsertMenu.add(child);
  }
  nodeListsWithoutInsertMenu.add(node.children);
}
function removeInsertMenuMarkWhenOutsideOfSelection(editor) {
  var _Editor$marks;
  const path = findPathWithInsertMenu(editor, []);
  if (path && !((_Editor$marks = Editor$1.marks(editor)) !== null && _Editor$marks !== void 0 && _Editor$marks.insertMenu) && (!editor.selection || !Path.equals(editor.selection.anchor.path, path) || !Path.equals(editor.selection.focus.path, path))) {
    Transforms.unsetNodes(editor, 'insertMenu', {
      at: path
    });
    return true;
  }
  return false;
}
function withInsertMenu(editor) {
  const {
    normalizeNode,
    apply,
    insertText
  } = editor;
  editor.normalizeNode = ([node, path]) => {
    if (Text$1.isText(node) && node.insertMenu) {
      if (node.text[0] !== '/') {
        Transforms.unsetNodes(editor, 'insertMenu', {
          at: path
        });
        return;
      }
      const whitespaceMatch = /\s/.exec(node.text);
      if (whitespaceMatch) {
        Transforms.unsetNodes(editor, 'insertMenu', {
          at: {
            anchor: {
              path,
              offset: whitespaceMatch.index
            },
            focus: Editor$1.end(editor, path)
          },
          match: Text$1.isText,
          split: true
        });
        return;
      }
    }
    if (Editor$1.isEditor(editor) && removeInsertMenuMarkWhenOutsideOfSelection(editor)) {
      return;
    }
    normalizeNode([node, path]);
  };
  editor.apply = op => {
    apply(op);
    // we're calling this here AND in normalizeNode
    // because normalizeNode won't be called on selection changes
    // but apply will
    // we're still calling this from normalizeNode though because we want it to happen
    // when normalization happens
    if (op.type === 'set_selection') {
      removeInsertMenuMarkWhenOutsideOfSelection(editor);
    }
  };
  editor.insertText = text => {
    insertText(text);
    if (editor.selection && text === '/') {
      const startOfBlock = Editor$1.start(editor, Editor$1.above(editor, {
        match: isBlock
      })[1]);
      const before = Editor$1.before(editor, editor.selection.anchor, {
        unit: 'character'
      });
      if (before && (Point.equals(startOfBlock, before) || before.offset !== 0 && /\s/.test(Node.get(editor, before.path).text[before.offset - 1]))) {
        Transforms.setNodes(editor, {
          insertMenu: true
        }, {
          at: {
            anchor: before,
            focus: editor.selection.anchor
          },
          match: Text$1.isText,
          split: true
        });
      }
    }
  };
  return editor;
}

function Placeholder({
  placeholder,
  children
}) {
  const [width, setWidth] = useState(0);
  return /*#__PURE__*/jsxs("span", {
    className: css({
      position: 'relative',
      display: 'inline-block',
      width
    }),
    children: [/*#__PURE__*/jsx("span", {
      contentEditable: false,
      className: css({
        position: 'absolute',
        pointerEvents: 'none',
        display: 'inline-block',
        left: 0,
        top: 0,
        maxWidth: '100%',
        whiteSpace: 'nowrap',
        opacity: '0.5',
        userSelect: 'none',
        fontStyle: 'normal',
        fontWeight: 'normal',
        textDecoration: 'none',
        textAlign: 'left'
      }),
      children: /*#__PURE__*/jsx("span", {
        ref: node => {
          if (node) {
            const offsetWidth = node.offsetWidth;
            if (offsetWidth !== width) {
              setWidth(offsetWidth);
            }
          }
        },
        children: placeholder
      })
    }), children]
  });
}
const Leaf = ({
  leaf,
  text,
  children,
  attributes
}) => {
  const {
    underline,
    strikethrough,
    bold,
    italic,
    code,
    keyboard,
    superscript,
    subscript,
    placeholder,
    insertMenu,
    ...rest
  } = leaf;
  if (placeholder !== undefined) {
    children = /*#__PURE__*/jsx(Placeholder, {
      placeholder: placeholder,
      children: children
    });
  }
  if (insertMenu) {
    children = /*#__PURE__*/jsx(InsertMenu$1, {
      text: text,
      children: children
    });
  }
  if (code) {
    children = /*#__PURE__*/jsx("code", {
      children: children
    });
  }
  if (bold) {
    children = /*#__PURE__*/jsx("strong", {
      children: children
    });
  }
  if (strikethrough) {
    children = /*#__PURE__*/jsx("s", {
      children: children
    });
  }
  if (italic) {
    children = /*#__PURE__*/jsx("em", {
      children: children
    });
  }
  if (keyboard) {
    children = /*#__PURE__*/jsx("kbd", {
      children: children
    });
  }
  if (superscript) {
    children = /*#__PURE__*/jsx("sup", {
      children: children
    });
  }
  if (subscript) {
    children = /*#__PURE__*/jsx("sub", {
      children: children
    });
  }
  if (underline) {
    children = /*#__PURE__*/jsx("u", {
      children: children
    });
  }
  const prismClassNames = Object.keys(rest).filter(x => x.startsWith('prism_')).map(x => styles$2.get(x.replace('prism_', '')));
  if (prismClassNames.length) {
    const className = prismClassNames.join(' ');
    children = /*#__PURE__*/jsx("span", {
      className: className,
      children: children
    });
  }
  return /*#__PURE__*/jsx("span", {
    ...attributes,
    children: children
  });
};
const renderLeaf = props => {
  return /*#__PURE__*/jsx(Leaf, {
    ...props
  });
};
const styles$2 = new Map([{
  types: ['comment', 'prolog', 'doctype', 'cdata'],
  style: {
    color: tokenSchema.color.foreground.neutralTertiary,
    fontStyle: 'italic'
  }
}, {
  types: ['atrule', 'attr-name', 'class-name', 'selector'],
  style: {
    color: tokenSchema.color.scale.amber11
  }
}, {
  types: ['boolean', 'constant', 'inserted-sign', 'entity', 'inserted', 'number', 'regex', 'symbol', 'variable'],
  style: {
    color: tokenSchema.color.scale.green11
  }
}, {
  types: ['attr-value', 'builtin', 'char', 'constant', 'generics', 'url'],
  style: {
    color: tokenSchema.color.scale.pink11
  }
}, {
  types: ['string'],
  style: {
    color: tokenSchema.color.scale.indigo9
  }
}, {
  types: ['annotation', 'deleted', 'deleted-sign', 'decorator', 'important', 'tag'],
  style: {
    color: tokenSchema.color.scale.red11
  }
}, {
  types: ['function', 'function-variable', 'operator'],
  style: {
    color: tokenSchema.color.scale.purple11
  }
}, {
  types: ['tag', 'selector', 'keyword'],
  style: {
    color: tokenSchema.color.scale.indigo11
  }
}, {
  types: ['punctuation'],
  style: {
    color: tokenSchema.color.foreground.neutralSecondary
  }
}].flatMap(style => {
  const className = css(style.style);
  return style.types.map(x => [x, className]);
}));

const codeBlockShortcutPattern = /^```(\w+)? ?$/;
function withCodeBlock(documentFeatures, componentBlocks, editor) {
  const {
    insertBreak,
    normalizeNode,
    insertText
  } = editor;
  function codeBlockShortcut(block) {
    var _aliasesToCanonicalNa;
    if ((block === null || block === void 0 ? void 0 : block[0].type) !== 'paragraph' || block[0].children.length !== 1 || block[0].children[0].type !== undefined) {
      return false;
    }
    const match = codeBlockShortcutPattern.exec(block[0].children[0].text);
    if (!match) {
      return false;
    }
    const locationDocumentFeatures = getAncestorComponentChildFieldDocumentFeatures(editor, documentFeatures, componentBlocks);
    if (locationDocumentFeatures && (locationDocumentFeatures.kind === 'inline' || !locationDocumentFeatures.documentFeatures.formatting.blockTypes.code)) {
      return false;
    }

    // so that this starts a new undo group
    editor.history.undos.push({
      operations: [],
      selectionBefore: editor.selection
    });
    Transforms.select(editor, block[1]);
    Transforms.delete(editor);
    Transforms.wrapNodes(editor, {
      type: 'code',
      ...(match[1] ? {
        language: (_aliasesToCanonicalNa = aliasesToCanonicalName.get(match[1].toLowerCase())) !== null && _aliasesToCanonicalNa !== void 0 ? _aliasesToCanonicalNa : match[1]
      } : {}),
      children: []
    }, {
      match: node => node.type === 'paragraph'
    });
    return true;
  }
  editor.insertBreak = () => {
    const block = Editor$1.above(editor, {
      match: isBlock
    });
    if ((block === null || block === void 0 ? void 0 : block[0].type) === 'code' && Text$1.isText(block[0].children[0])) {
      const text = block[0].children[0].text;
      if (text[text.length - 1] === '\n' && editor.selection && Range.isCollapsed(editor.selection) && Point.equals(Editor$1.end(editor, block[1]), editor.selection.anchor)) {
        insertBreak();
        Transforms.setNodes(editor, {
          type: 'paragraph',
          children: []
        });
        Transforms.delete(editor, {
          distance: 1,
          at: {
            path: [...block[1], 0],
            offset: text.length - 1
          }
        });
        return;
      }
      editor.insertText('\n');
      return;
    }
    if (editor.selection && Range.isCollapsed(editor.selection) && codeBlockShortcut(block)) {
      return;
    }
    insertBreak();
  };
  editor.insertText = text => {
    insertText(text);
    if (text === ' ' && editor.selection && Range.isCollapsed(editor.selection)) {
      codeBlockShortcut(Editor$1.above(editor, {
        match: isBlock
      }));
    }
  };
  editor.normalizeNode = ([node, path]) => {
    if (node.type === 'code' && Element$1.isElement(node)) {
      for (const [index, childNode] of node.children.entries()) {
        if (!Text$1.isText(childNode)) {
          if (editor.isVoid(childNode)) {
            Transforms.removeNodes(editor, {
              at: [...path, index]
            });
          } else {
            Transforms.unwrapNodes(editor, {
              at: [...path, index]
            });
          }
          return;
        }
        const marks = Object.keys(childNode).filter(x => x !== 'text');
        if (marks.length) {
          Transforms.unsetNodes(editor, marks, {
            at: [...path, index]
          });
          return;
        }
      }
    }
    normalizeNode([node, path]);
  };
  return editor;
}

const paragraphElement = () => ({
  type: 'paragraph',
  children: [{
    text: ''
  }]
});
function withParagraphs(editor) {
  const {
    normalizeNode
  } = editor;
  editor.normalizeNode = entry => {
    const [node, path] = entry;
    if (Editor$1.isEditor(node)) {
      let lastNode = node.children[node.children.length - 1];
      if ((lastNode === null || lastNode === void 0 ? void 0 : lastNode.type) !== 'paragraph') {
        Transforms.insertNodes(editor, paragraphElement(), {
          at: [...path, node.children.length]
        });
        return;
      }
    }
    normalizeNode(entry);
  };
  return editor;
}

function withLayouts(editor) {
  const {
    normalizeNode,
    deleteBackward
  } = editor;
  editor.deleteBackward = unit => {
    if (editor.selection && Range.isCollapsed(editor.selection) &&
    // this is just an little optimisation
    // we're only doing things if we're at the start of a layout area
    // and the start of anything will always be offset 0
    // so we'll bailout if we're not at offset 0
    editor.selection.anchor.offset === 0) {
      const [aboveNode, abovePath] = Editor$1.above(editor, {
        match: node => node.type === 'layout-area'
      }) || [editor, []];
      if (aboveNode.type === 'layout-area' && Point.equals(Editor$1.start(editor, abovePath), editor.selection.anchor)) {
        return;
      }
    }
    deleteBackward(unit);
  };
  editor.normalizeNode = entry => {
    const [node, path] = entry;
    if (Element$1.isElement(node) && node.type === 'layout') {
      if (node.layout === undefined) {
        Transforms.unwrapNodes(editor, {
          at: path
        });
        return;
      }
      if (node.children.length < node.layout.length) {
        Transforms.insertNodes(editor, Array.from({
          length: node.layout.length - node.children.length
        }).map(() => ({
          type: 'layout-area',
          children: [paragraphElement()]
        })), {
          at: [...path, node.children.length]
        });
        return;
      }
      if (node.children.length > node.layout.length) {
        Array.from({
          length: node.children.length - node.layout.length
        }).map((_, i) => i).reverse().forEach(i => {
          const layoutAreaToRemovePath = [...path, i + node.layout.length];
          const child = node.children[i + node.layout.length];
          moveChildren(editor, layoutAreaToRemovePath, [...path, node.layout.length - 1, node.children[node.layout.length - 1].children.length], node => node.type !== 'paragraph' || Node.string(child) !== '');
          Transforms.removeNodes(editor, {
            at: layoutAreaToRemovePath
          });
        });
        return;
      }
    }
    normalizeNode(entry);
  };
  return editor;
}

const markdownLinkPattern = /(^|\s)\[(.+?)\]\((\S+)\)$/;
function withLink(editorDocumentFeatures, componentBlocks, editor) {
  const {
    insertText,
    isInline,
    normalizeNode
  } = editor;
  editor.isInline = element => {
    return element.type === 'link' ? true : isInline(element);
  };
  if (editorDocumentFeatures.links) {
    editor.insertText = text => {
      insertText(text);
      if (text !== ')' || !editor.selection) {
        return;
      }
      const startOfBlock = Editor$1.start(editor, Editor$1.above(editor, {
        match: isBlock
      })[1]);
      const startOfBlockToEndOfShortcutString = Editor$1.string(editor, {
        anchor: editor.selection.anchor,
        focus: startOfBlock
      });
      const match = markdownLinkPattern.exec(startOfBlockToEndOfShortcutString);
      if (!match) {
        return;
      }
      const ancestorComponentChildFieldDocumentFeatures = getAncestorComponentChildFieldDocumentFeatures(editor, editorDocumentFeatures, componentBlocks);
      if ((ancestorComponentChildFieldDocumentFeatures === null || ancestorComponentChildFieldDocumentFeatures === void 0 ? void 0 : ancestorComponentChildFieldDocumentFeatures.documentFeatures.links) === false) {
        return;
      }
      const [, maybeWhitespace, linkText, href] = match;
      // by doing this, the insertText(')') above will happen in a different undo than the link replacement
      // so that means that when someone does an undo after this
      // it will undo to the state of "[content](link)" rather than "[content](link" (note the missing closing bracket)
      editor.history.undos.push({
        operations: [],
        selectionBefore: editor.selection
      });
      const startOfShortcut = match.index === 0 ? startOfBlock : EditorAfterButIgnoringingPointsWithNoContent(editor, startOfBlock, {
        distance: match.index
      });
      const startOfLinkText = EditorAfterButIgnoringingPointsWithNoContent(editor, startOfShortcut, {
        distance: maybeWhitespace === '' ? 1 : 2
      });
      const endOfLinkText = EditorAfterButIgnoringingPointsWithNoContent(editor, startOfLinkText, {
        distance: linkText.length
      });
      Transforms.delete(editor, {
        at: {
          anchor: endOfLinkText,
          focus: editor.selection.anchor
        }
      });
      Transforms.delete(editor, {
        at: {
          anchor: startOfShortcut,
          focus: startOfLinkText
        }
      });
      Transforms.wrapNodes(editor, {
        type: 'link',
        href,
        children: []
      }, {
        at: {
          anchor: editor.selection.anchor,
          focus: startOfShortcut
        },
        split: true
      });
      const nextNode = Editor$1.next(editor);
      if (nextNode) {
        Transforms.select(editor, nextNode[1]);
      }
    };
  }
  editor.normalizeNode = ([node, path]) => {
    if (node.type === 'link') {
      if (Node.string(node) === '') {
        Transforms.unwrapNodes(editor, {
          at: path
        });
        return;
      }
      for (const [idx, child] of node.children.entries()) {
        if (child.type === 'link') {
          // links cannot contain links
          Transforms.unwrapNodes(editor, {
            at: [...path, idx]
          });
          return;
        }
      }
    }
    if (isInlineContainer(node)) {
      let lastMergableLink = null;
      for (const [idx, child] of node.children.entries()) {
        var _lastMergableLink;
        if (child.type === 'link' && child.href === ((_lastMergableLink = lastMergableLink) === null || _lastMergableLink === void 0 ? void 0 : _lastMergableLink.node.href)) {
          const firstLinkPath = [...path, lastMergableLink.index];
          const secondLinkPath = [...path, idx];
          const to = [...firstLinkPath, lastMergableLink.node.children.length];
          // note this is going in reverse, js doesn't have double-ended iterators so it's a for(;;)
          for (let i = child.children.length - 1; i >= 0; i--) {
            const childPath = [...secondLinkPath, i];
            Transforms.moveNodes(editor, {
              at: childPath,
              to
            });
          }
          Transforms.removeNodes(editor, {
            at: secondLinkPath
          });
          return;
        }
        if (!Text$1.isText(child) || child.text !== '') {
          lastMergableLink = null;
        }
        if (child.type === 'link') {
          lastMergableLink = {
            index: idx,
            node: child
          };
        }
      }
    }
    normalizeNode([node, path]);
  };
  return editor;
}

function createDocumentEditorForNormalization(documentFeatures, componentBlocks) {
  return _createDocumentEditor(createEditor(), documentFeatures, componentBlocks);
}
function _createDocumentEditor(baseEditor, documentFeatures, componentBlocks) {
  return withBlocksSchema(withParagraphs(withLink(documentFeatures, componentBlocks, withList(withTable(withComponentBlocks(componentBlocks, documentFeatures, withVoidElements(withLayouts(withCodeBlock(documentFeatures, componentBlocks, withDocumentFeaturesNormalization(documentFeatures, baseEditor))))))))));
}
function withBlocksSchema(editor) {
  const {
    normalizeNode
  } = editor;
  editor.normalizeNode = ([node, path]) => {
    if (!Text$1.isText(node) && node.type !== 'link') {
      const nodeType = Editor$1.isEditor(node) ? 'editor' : node.type;
      if (typeof nodeType !== 'string' || editorSchema[nodeType] === undefined) {
        Transforms.unwrapNodes(editor, {
          at: path
        });
        return;
      }
      const info = editorSchema[nodeType];
      if (info.kind === 'blocks' && node.children.length !== 0 && node.children.every(child => !isBlock(child))) {
        Transforms.wrapNodes(editor, {
          type: info.blockToWrapInlinesIn,
          children: []
        }, {
          at: path,
          match: node => !isBlock(node)
        });
        return;
      }
      let didUpdate = false;
      for (const [index, childNode] of [...node.children.entries()].reverse()) {
        const childPath = [...path, index];
        if (info.kind === 'inlines') {
          if (!Text$1.isText(childNode) && isBlock(childNode)) {
            handleNodeInInvalidPosition(editor, [childNode, childPath], path);
            didUpdate = true;
            continue;
          }
        } else {
          if (!isBlock(childNode)) {
            Transforms.wrapNodes(editor, {
              type: info.blockToWrapInlinesIn,
              children: []
            }, {
              at: childPath
            });
            didUpdate = true;
            continue;
          }
          if (!info.allowedChildren.has(childNode.type)) {
            handleNodeInInvalidPosition(editor, [childNode, childPath], path);
            didUpdate = true;
            continue;
          }
        }
      }
      if (didUpdate) {
        return;
      }
    }
    normalizeNode([node, path]);
  };
  return editor;
}
function handleNodeInInvalidPosition(editor, [node, path], ancestorPath) {
  const nodeType = node.type;
  const childNodeInfo = editorSchema[nodeType];
  // the parent of a block will never be an inline so this casting is okay
  const ancestorNode = Node.get(editor, ancestorPath);
  const parentNodeType = Editor$1.isEditor(ancestorNode) ? 'editor' : ancestorNode.type;
  const parentNodeInfo = editorSchema[parentNodeType];
  if (!childNodeInfo || childNodeInfo.invalidPositionHandleMode === 'unwrap') {
    if (parentNodeInfo.kind === 'blocks' && parentNodeInfo.blockToWrapInlinesIn) {
      Transforms.setNodes(editor, {
        type: parentNodeInfo.blockToWrapInlinesIn,
        ...Object.fromEntries(Object.keys(node).filter(key => key !== 'type' && key !== 'children').map(key => [key, null])) // the Slate types don't understand that null is allowed and it will unset properties with setNodes
      }, {
        at: path
      });
      return;
    }
    Transforms.unwrapNodes(editor, {
      at: path
    });
    return;
  }
  const info = editorSchema[ancestorNode.type || 'editor'];
  if ((info === null || info === void 0 ? void 0 : info.kind) === 'blocks' && info.allowedChildren.has(nodeType)) {
    if (ancestorPath.length === 0) {
      Transforms.moveNodes(editor, {
        at: path,
        to: [path[0] + 1]
      });
    } else {
      Transforms.moveNodes(editor, {
        at: path,
        to: Path.next(ancestorPath)
      });
    }
    return;
  }
  if (Editor$1.isEditor(ancestorNode)) {
    Transforms.moveNodes(editor, {
      at: path,
      to: [path[0] + 1]
    });
    Transforms.unwrapNodes(editor, {
      at: [path[0] + 1]
    });
    return;
  }
  handleNodeInInvalidPosition(editor, [node, path], ancestorPath.slice(0, -1));
}
function withVoidElements(editor) {
  const {
    isVoid
  } = editor;
  editor.isVoid = node => {
    return node.type === 'divider' || node.type === 'image' || isVoid(node);
  };
  return editor;
}

function withBlockMarkdownShortcuts(documentFeatures, componentBlocks, editor) {
  const {
    insertText
  } = editor;
  const shortcuts = Object.create(null);
  const editorDocumentFeaturesForNormalizationToCheck = {
    ...documentFeatures
  };
  let addShortcut = (text, insert, shouldBeEnabledInComponentBlock, type = 'paragraph') => {
    if (!shouldBeEnabledInComponentBlock(editorDocumentFeaturesForNormalizationToCheck)) {
      return;
    }
    const trigger = text[text.length - 1];
    if (!shortcuts[trigger]) {
      shortcuts[trigger] = Object.create(null);
    }
    shortcuts[trigger][text] = {
      insert,
      type,
      shouldBeEnabledInComponentBlock
    };
  };
  addShortcut('1. ', () => {
    Transforms.wrapNodes(editor, {
      type: 'ordered-list',
      children: []
    }, {
      match: isBlock
    });
  }, features => features.formatting.listTypes.ordered);
  addShortcut('- ', () => {
    Transforms.wrapNodes(editor, {
      type: 'unordered-list',
      children: []
    }, {
      match: isBlock
    });
  }, features => features.formatting.listTypes.unordered);
  addShortcut('* ', () => {
    Transforms.wrapNodes(editor, {
      type: 'unordered-list',
      children: []
    }, {
      match: isBlock
    });
  }, features => features.formatting.listTypes.unordered);
  documentFeatures.formatting.headings.levels.forEach(level => {
    addShortcut('#'.repeat(level) + ' ', () => {
      Transforms.setNodes(editor, {
        type: 'heading',
        level
      }, {
        match: node => node.type === 'paragraph' || node.type === 'heading'
      });
    }, features => features.formatting.headings.levels.includes(level), 'heading-or-paragraph');
  });
  addShortcut('> ', () => {
    Transforms.wrapNodes(editor, {
      type: 'blockquote',
      children: []
    }, {
      match: node => node.type === 'paragraph'
    });
  }, features => features.formatting.blockTypes.blockquote);
  addShortcut('---', () => {
    insertDivider(editor);
  }, features => features.dividers);
  editor.insertText = text => {
    insertText(text);
    const shortcutsForTrigger = shortcuts[text];
    if (shortcutsForTrigger && editor.selection && Range.isCollapsed(editor.selection)) {
      const {
        anchor
      } = editor.selection;
      const block = Editor$1.above(editor, {
        match: isBlock
      });
      if (!block || block[0].type !== 'paragraph' && block[0].type !== 'heading') {
        return;
      }
      const start = Editor$1.start(editor, block[1]);
      const range = {
        anchor,
        focus: start
      };
      const shortcutText = Editor$1.string(editor, range);
      const shortcut = shortcutsForTrigger[shortcutText];
      if (!shortcut || shortcut.type === 'paragraph' && block[0].type !== 'paragraph') {
        return;
      }
      const locationDocumentFeatures = getAncestorComponentChildFieldDocumentFeatures(editor, documentFeatures, componentBlocks);
      if (locationDocumentFeatures && (locationDocumentFeatures.kind === 'inline' || !shortcut.shouldBeEnabledInComponentBlock(locationDocumentFeatures.documentFeatures))) {
        return;
      }

      // so that this starts a new undo group
      editor.history.undos.push({
        operations: [],
        selectionBefore: editor.selection
      });
      Transforms.select(editor, range);
      Transforms.delete(editor);
      shortcut.insert();
    }
  };
  return editor;
}

function getDirectBlockquoteParentFromSelection(editor) {
  if (!editor.selection) return {
    isInside: false
  };
  const [, parentPath] = Editor$1.parent(editor, editor.selection);
  if (!parentPath.length) {
    return {
      isInside: false
    };
  }
  const [maybeBlockquoteParent, maybeBlockquoteParentPath] = Editor$1.parent(editor, parentPath);
  const isBlockquote = maybeBlockquoteParent.type === 'blockquote';
  return isBlockquote ? {
    isInside: true,
    path: maybeBlockquoteParentPath
  } : {
    isInside: false
  };
}
function withBlockquote(editor) {
  const {
    insertBreak,
    deleteBackward
  } = editor;
  editor.deleteBackward = unit => {
    if (editor.selection) {
      const parentBlockquote = getDirectBlockquoteParentFromSelection(editor);
      if (parentBlockquote.isInside && Range.isCollapsed(editor.selection) &&
      // the selection is at the start of the paragraph
      editor.selection.anchor.offset === 0 &&
      // it's the first paragraph in the panel
      editor.selection.anchor.path[editor.selection.anchor.path.length - 2] === 0) {
        Transforms.unwrapNodes(editor, {
          match: node => node.type === 'blockquote',
          split: true
        });
        return;
      }
    }
    deleteBackward(unit);
  };
  editor.insertBreak = () => {
    const panel = getDirectBlockquoteParentFromSelection(editor);
    if (editor.selection && panel.isInside) {
      const [node, nodePath] = Editor$1.node(editor, editor.selection);
      if (Path.isDescendant(nodePath, panel.path) && Node.string(node) === '') {
        Transforms.unwrapNodes(editor, {
          match: node => node.type === 'blockquote',
          split: true
        });
        return;
      }
    }
    insertBreak();
  };
  return editor;
}

function withHeading(editor) {
  const {
    insertBreak
  } = editor;
  editor.insertBreak = () => {
    insertBreak();
    const entry = Editor$1.above(editor, {
      match: n => n.type === 'heading'
    });
    if (!entry || !editor.selection || !Range.isCollapsed(editor.selection)) {
      return;
    }
    const path = entry[1];
    if (
    // we want to unwrap the heading when the user inserted a break at the end of the heading
    // when the user inserts a break at the end of a heading, the new heading
    // that we want to unwrap will be empty so the end will be equal to the selection
    Point.equals(Editor$1.end(editor, path), editor.selection.anchor)) {
      Transforms.unwrapNodes(editor, {
        at: path
      });
      return;
    }
    // we also want to unwrap the _previous_ heading when the user inserted a break
    // at the start of the heading, essentially just inserting an empty paragraph above the heading
    if (!Path.hasPrevious(path)) {
      return;
    }
    const previousPath = Path.previous(path);
    const previousNode = Node.get(editor, previousPath);
    if (previousNode.type === 'heading' && previousNode.children.length === 1 && Text$1.isText(previousNode.children[0]) && previousNode.children[0].text === '') {
      Transforms.unwrapNodes(editor, {
        at: previousPath
      });
    }
  };
  return editor;
}

const allMarkdownShortcuts = {
  bold: ['**', '__'],
  italic: ['*', '_'],
  strikethrough: ['~~'],
  code: ['`']
};
function applyMark(editor, mark, shortcutText, startOfStartPoint) {
  // so that this starts a new undo group
  editor.history.undos.push({
    operations: [],
    selectionBefore: editor.selection
  });
  const startPointRef = Editor$1.pointRef(editor, startOfStartPoint);
  Transforms.delete(editor, {
    at: editor.selection.anchor,
    distance: shortcutText.length,
    reverse: true
  });
  Transforms.delete(editor, {
    at: startOfStartPoint,
    distance: shortcutText.length
  });
  Transforms.setNodes(editor, {
    [mark]: true
  }, {
    match: Text$1.isText,
    split: true,
    at: {
      anchor: startPointRef.unref(),
      focus: editor.selection.anchor
    }
  });
  // once you've ended the shortcut, you're done with the mark
  // so we need to remove it so the text you insert after doesn't have it
  editor.removeMark(mark);
}
function withMarks(editorDocumentFeatures, componentBlocks, editor) {
  const {
    insertText,
    insertBreak
  } = editor;
  editor.insertBreak = () => {
    insertBreak();
    const marksAfterInsertBreak = Editor$1.marks(editor);
    if (!marksAfterInsertBreak || !editor.selection) return;
    const parentBlock = Editor$1.above(editor, {
      match: isBlock
    });
    if (!parentBlock) return;
    const point = EditorAfterButIgnoringingPointsWithNoContent(editor, editor.selection.anchor);
    const marksAfterInsertBreakArr = Object.keys(marksAfterInsertBreak);
    if (!point || !Path.isDescendant(point.path, parentBlock[1])) {
      for (const mark of marksAfterInsertBreakArr) {
        editor.removeMark(mark);
      }
      return;
    }
    const textNode = Node.get(editor, point.path);
    for (const mark of marksAfterInsertBreakArr) {
      if (!textNode[mark]) {
        editor.removeMark(mark);
      }
    }
  };
  const selectedMarkdownShortcuts = {};
  const enabledMarks = editorDocumentFeatures.formatting.inlineMarks;
  Object.keys(allMarkdownShortcuts).forEach(mark => {
    if (enabledMarks[mark]) {
      selectedMarkdownShortcuts[mark] = allMarkdownShortcuts[mark];
    }
  });
  if (Object.keys(selectedMarkdownShortcuts).length === 0) return editor;
  editor.insertText = text => {
    insertText(text);
    if (editor.selection && Range.isCollapsed(editor.selection)) {
      for (const [mark, shortcuts] of Object.entries(selectedMarkdownShortcuts)) {
        for (const shortcutText of shortcuts) {
          if (text === shortcutText[shortcutText.length - 1]) {
            // this function is not inlined because
            // https://github.com/swc-project/swc/issues/2622
            const startOfBlock = getStartOfBlock(editor);
            let startOfBlockToEndOfShortcutString = Editor$1.string(editor, {
              anchor: editor.selection.anchor,
              focus: startOfBlock
            });
            const hasWhitespaceBeforeEndOfShortcut = /\s/.test(startOfBlockToEndOfShortcutString.slice(-shortcutText.length - 1, -shortcutText.length));
            const endOfShortcutContainsExpectedContent = shortcutText === startOfBlockToEndOfShortcutString.slice(-shortcutText.length);
            if (hasWhitespaceBeforeEndOfShortcut || !endOfShortcutContainsExpectedContent) {
              continue;
            }
            const strToMatchOn = startOfBlockToEndOfShortcutString.slice(0, -shortcutText.length - 1);
            // TODO: use regex probs
            for (const [offsetFromStartOfBlock] of [...strToMatchOn].reverse().entries()) {
              const expectedShortcutText = strToMatchOn.slice(offsetFromStartOfBlock, offsetFromStartOfBlock + shortcutText.length);
              if (expectedShortcutText !== shortcutText) {
                continue;
              }
              const startOfStartOfShortcut = offsetFromStartOfBlock === 0 ? startOfBlock : EditorAfterButIgnoringingPointsWithNoContent(editor, startOfBlock, {
                distance: offsetFromStartOfBlock
              });
              const endOfStartOfShortcut = Editor$1.after(editor, startOfStartOfShortcut, {
                distance: shortcutText.length
              });
              if (offsetFromStartOfBlock !== 0 && !/\s/.test(Editor$1.string(editor, {
                anchor: Editor$1.before(editor, startOfStartOfShortcut, {
                  unit: 'character'
                }),
                focus: startOfStartOfShortcut
              }))) {
                continue;
              }
              const contentBetweenShortcuts = Editor$1.string(editor, {
                anchor: endOfStartOfShortcut,
                focus: editor.selection.anchor
              }).slice(0, -shortcutText.length);
              if (contentBetweenShortcuts === '' || /\s/.test(contentBetweenShortcuts[0])) {
                continue;
              }

              // this is a bit of a weird one
              // let's say you had <text>__thing _<cursor /></text> and you insert `_`.
              // without the below, that would turn into <text italic>_thing _<cursor /></text>
              // but it's probably meant to be bold but it's not because of the space before the ending _
              // there's probably a better way to do this but meh, this works
              if (mark === 'italic' && (contentBetweenShortcuts[0] === '_' || contentBetweenShortcuts[0] === '*')) {
                continue;
              }
              // this is the start of a code block shortcut
              if (mark === 'code' && contentBetweenShortcuts === '`') {
                continue;
              }
              const ancestorComponentChildFieldDocumentFeatures = getAncestorComponentChildFieldDocumentFeatures(editor, editorDocumentFeatures, componentBlocks);
              if (ancestorComponentChildFieldDocumentFeatures && ancestorComponentChildFieldDocumentFeatures.inlineMarks !== 'inherit' && ancestorComponentChildFieldDocumentFeatures.inlineMarks[mark] === false) {
                continue;
              }
              applyMark(editor, mark, shortcutText, startOfStartOfShortcut);
              return;
            }
          }
        }
      }
    }
  };
  return editor;
}
function getStartOfBlock(editor) {
  return Editor$1.start(editor, Editor$1.above(editor, {
    match: isBlock
  })[1]);
}

// a v important note
// marks in the markdown ast/html are represented quite differently to how they are in slate
// if you had the markdown **something https://keystonejs.com something**
// the bold node is the parent of the link node
// but in slate, marks are only represented on text nodes

const currentlyActiveMarks = new Set();
const currentlyDisabledMarks = new Set();
let currentLink = null;
function addMarkToChildren(mark, cb) {
  const wasPreviouslyActive = currentlyActiveMarks.has(mark);
  currentlyActiveMarks.add(mark);
  try {
    return cb();
  } finally {
    if (!wasPreviouslyActive) {
      currentlyActiveMarks.delete(mark);
    }
  }
}
function setLinkForChildren(href, cb) {
  // we'll only use the outer link
  if (currentLink !== null) {
    return cb();
  }
  currentLink = href;
  try {
    return cb();
  } finally {
    currentLink = null;
  }
}
function addMarksToChildren(marks, cb) {
  const marksToRemove = new Set();
  for (const mark of marks) {
    if (!currentlyActiveMarks.has(mark)) {
      marksToRemove.add(mark);
    }
    currentlyActiveMarks.add(mark);
  }
  try {
    return cb();
  } finally {
    for (const mark of marksToRemove) {
      currentlyActiveMarks.delete(mark);
    }
  }
}
function forceDisableMarkForChildren(mark, cb) {
  const wasPreviouslyDisabled = currentlyDisabledMarks.has(mark);
  currentlyDisabledMarks.add(mark);
  try {
    return cb();
  } finally {
    if (!wasPreviouslyDisabled) {
      currentlyDisabledMarks.delete(mark);
    }
  }
}

/**
 * This type is more strict than `Element & { type: 'link'; }` because `children`
 * is constrained to only contain Text nodes. This can't be assumed generally around the editor
 * (because of potentially future inline components or nested links(which are normalized away but the editor needs to not break if it happens))
 * but where this type is used, we're only going to allow links to contain Text and that's important
 * so that we know a block will never be inside an inline because Slate gets unhappy when that happens
 * (really the link inline should probably be a mark rather than an inline,
 * non-void inlines are probably always bad but that would imply changing the document
 * structure which would be such unnecessary breakage)
 */

function getInlineNodes(text) {
  const node = {
    text
  };
  for (const mark of currentlyActiveMarks) {
    if (!currentlyDisabledMarks.has(mark)) {
      node[mark] = true;
    }
  }
  if (currentLink !== null) {
    return [{
      text: ''
    }, {
      type: 'link',
      href: currentLink,
      children: [node]
    }, {
      text: ''
    }];
  }
  return [node];
}

// very loosely based on https://github.com/ianstormtaylor/slate/blob/d22c76ae1313fe82111317417912a2670e73f5c9/site/examples/paste-html.tsx
function getAlignmentFromElement(element) {
  const parent = element.parentElement;
  // confluence
  const attribute = parent === null || parent === void 0 ? void 0 : parent.getAttribute('data-align');
  // note: we don't show html that confluence would parse as alignment
  // we could change that but meh
  // (they match on div.fabric-editor-block-mark with data-align)
  if (attribute === 'center' || attribute === 'end') {
    return attribute;
  }
  if (element instanceof HTMLElement) {
    // Google docs
    const textAlign = element.style.textAlign;
    if (textAlign === 'center') {
      return 'center';
    }
    // TODO: RTL things?
    if (textAlign === 'right' || textAlign === 'end') {
      return 'end';
    }
  }
}
const headings = {
  H1: 1,
  H2: 2,
  H3: 3,
  H4: 4,
  H5: 5,
  H6: 6
};
const TEXT_TAGS = {
  CODE: 'code',
  DEL: 'strikethrough',
  S: 'strikethrough',
  STRIKE: 'strikethrough',
  EM: 'italic',
  I: 'italic',
  STRONG: 'bold',
  U: 'underline',
  SUP: 'superscript',
  SUB: 'subscript',
  KBD: 'keyboard'
};
function marksFromElementAttributes(element) {
  const marks = new Set();
  const style = element.style;
  const {
    nodeName
  } = element;
  const markFromNodeName = TEXT_TAGS[nodeName];
  if (markFromNodeName) {
    marks.add(markFromNodeName);
  }
  const {
    fontWeight,
    textDecoration,
    verticalAlign
  } = style;
  if (textDecoration === 'underline') {
    marks.add('underline');
  } else if (textDecoration === 'line-through') {
    marks.add('strikethrough');
  }
  // confluence
  if (nodeName === 'SPAN' && element.classList.contains('code')) {
    marks.add('code');
  }
  // Google Docs does weird things with <b>
  if (nodeName === 'B' && fontWeight !== 'normal') {
    marks.add('bold');
  } else if (typeof fontWeight === 'string' && (fontWeight === 'bold' || fontWeight === 'bolder' || fontWeight === '1000' || /^[5-9]\d{2}$/.test(fontWeight))) {
    marks.add('bold');
  }
  if (style.fontStyle === 'italic') {
    marks.add('italic');
  }
  // Google Docs uses vertical align for subscript and superscript instead of <sup> and <sub>
  if (verticalAlign === 'super') {
    marks.add('superscript');
  } else if (verticalAlign === 'sub') {
    marks.add('subscript');
  }
  return marks;
}
function deserializeHTML(html) {
  const parsed = new DOMParser().parseFromString(html, 'text/html');
  return fixNodesForBlockChildren(deserializeNodes(parsed.body.childNodes));
}
function deserializeHTMLNode(el) {
  if (!(el instanceof globalThis.HTMLElement)) {
    const text = el.textContent;
    if (!text) {
      return [];
    }
    return getInlineNodes(text);
  }
  if (el.nodeName === 'BR') {
    return getInlineNodes('\n');
  }
  if (el.nodeName === 'IMG') {
    const alt = el.getAttribute('alt');
    return getInlineNodes(alt !== null && alt !== void 0 ? alt : '');
  }
  if (el.nodeName === 'HR') {
    return [{
      type: 'divider',
      children: [{
        text: ''
      }]
    }];
  }
  const marks = marksFromElementAttributes(el);

  // Dropbox Paper displays blockquotes as lists for some reason
  if (el.classList.contains('listtype-quote')) {
    marks.delete('italic');
    return addMarksToChildren(marks, () => [{
      type: 'blockquote',
      children: fixNodesForBlockChildren(deserializeNodes(el.childNodes))
    }]);
  }
  return addMarksToChildren(marks, () => {
    const {
      nodeName
    } = el;
    if (nodeName === 'A') {
      const href = el.getAttribute('href');
      if (href) {
        return setLinkForChildren(href, () => forceDisableMarkForChildren('underline', () => deserializeNodes(el.childNodes)));
      }
    }
    if (nodeName === 'PRE' && el.textContent) {
      return [{
        type: 'code',
        children: [{
          text: el.textContent || ''
        }]
      }];
    }
    const deserialized = deserializeNodes(el.childNodes);
    const children = fixNodesForBlockChildren(deserialized);
    if (nodeName === 'LI') {
      let nestedList;
      const listItemContent = {
        type: 'list-item-content',
        children: children.filter(node => {
          if (nestedList === undefined && (node.type === 'ordered-list' || node.type === 'unordered-list')) {
            nestedList = node;
            return false;
          }
          return true;
        })
      };
      const listItemChildren = nestedList ? [listItemContent, nestedList] : [listItemContent];
      return [{
        type: 'list-item',
        children: listItemChildren
      }];
    }
    if (nodeName === 'P') {
      return [{
        type: 'paragraph',
        textAlign: getAlignmentFromElement(el),
        children
      }];
    }
    const headingLevel = headings[nodeName];
    if (typeof headingLevel === 'number') {
      return [{
        type: 'heading',
        level: headingLevel,
        textAlign: getAlignmentFromElement(el),
        children
      }];
    }
    if (nodeName === 'BLOCKQUOTE') {
      return [{
        type: 'blockquote',
        children
      }];
    }
    if (nodeName === 'OL') {
      return [{
        type: 'ordered-list',
        children
      }];
    }
    if (nodeName === 'UL') {
      return [{
        type: 'unordered-list',
        children
      }];
    }
    if (nodeName === 'DIV' && !isBlock(children[0])) {
      return [{
        type: 'paragraph',
        children
      }];
    }
    return deserialized;
  });
}
function deserializeNodes(nodes) {
  const outputNodes = [];
  for (const node of nodes) {
    outputNodes.push(...deserializeHTMLNode(node));
  }
  return outputNodes;
}
function fixNodesForBlockChildren(deserializedNodes) {
  if (!deserializedNodes.length) {
    // Slate also gets unhappy if an element has no children
    // the empty text nodes will get normalized away if they're not needed
    return [{
      text: ''
    }];
  }
  if (deserializedNodes.some(isBlock)) {
    const result = [];
    let queuedInlines = [];
    const flushInlines = () => {
      if (queuedInlines.length) {
        result.push({
          type: 'paragraph',
          children: queuedInlines
        });
        queuedInlines = [];
      }
    };
    for (const node of deserializedNodes) {
      if (isBlock(node)) {
        flushInlines();
        result.push(node);
        continue;
      }
      // we want to ignore whitespace between block level elements
      // useful info about whitespace in html:
      // https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Whitespace
      if (Node.string(node).trim() !== '') {
        queuedInlines.push(node);
      }
    }
    flushInlines();
    return result;
  }
  return deserializedNodes;
}

const markdownConfig = {
  mdastExtensions: [gfmAutolinkLiteralFromMarkdown(), gfmStrikethroughFromMarkdown()],
  extensions: [gfmAutolinkLiteral(), gfmStrikethrough()]
};
function deserializeMarkdown(markdown) {
  const root = fromMarkdown(markdown, markdownConfig);
  let nodes = root.children;
  if (nodes.length === 1 && nodes[0].type === 'paragraph') {
    nodes = nodes[0].children;
  }
  return deserializeChildren(nodes, markdown);
}
function deserializeChildren(nodes, input) {
  const outputNodes = [];
  for (const node of nodes) {
    const result = deserializeMarkdownNode(node, input);
    if (result.length) {
      outputNodes.push(...result);
    }
  }
  if (!outputNodes.length) {
    outputNodes.push({
      text: ''
    });
  }
  return outputNodes;
}
function deserializeMarkdownNode(node, input) {
  switch (node.type) {
    case 'blockquote':
      {
        return [{
          type: 'blockquote',
          children: deserializeChildren(node.children, input)
        }];
      }
    case 'link':
      {
        // arguably this could just return a link node rather than use setLinkForChildren since the children _should_ only be inlines
        // but rather than relying on the markdown parser we use being correct in this way since it isn't nicely codified in types
        // let's be safe since we already have the code to do it the safer way because of html pasting
        return setLinkForChildren(node.url, () => deserializeChildren(node.children, input));
      }
    case 'code':
      {
        return [{
          type: 'code',
          children: [{
            text: node.value
          }]
        }];
      }
    case 'paragraph':
      {
        return [{
          type: 'paragraph',
          children: deserializeChildren(node.children, input)
        }];
      }
    case 'heading':
      {
        return [{
          type: 'heading',
          level: node.depth,
          children: deserializeChildren(node.children, input)
        }];
      }
    case 'list':
      {
        return [{
          type: node.ordered ? 'ordered-list' : 'unordered-list',
          children: deserializeChildren(node.children, input)
        }];
      }
    case 'listItem':
      {
        return [{
          type: 'list-item',
          children: deserializeChildren(node.children, input)
        }];
      }
    case 'thematicBreak':
      {
        return [{
          type: 'divider',
          children: [{
            text: ''
          }]
        }];
      }
    case 'break':
      {
        return getInlineNodes('\n');
      }
    case 'delete':
      {
        return addMarkToChildren('strikethrough', () => deserializeChildren(node.children, input));
      }
    case 'strong':
      {
        return addMarkToChildren('bold', () => deserializeChildren(node.children, input));
      }
    case 'emphasis':
      {
        return addMarkToChildren('italic', () => deserializeChildren(node.children, input));
      }
    case 'inlineCode':
      {
        return addMarkToChildren('code', () => getInlineNodes(node.value));
      }
    case 'text':
      {
        return getInlineNodes(node.value);
      }
  }
  return getInlineNodes(input.slice(node.position.start.offset, node.position.end.offset));
}

const urlPattern$1 = /https?:\/\//;
function insertFragmentButDifferent(editor, nodes) {
  if (isBlock(nodes[0])) {
    insertNodesButReplaceIfSelectionIsAtEmptyParagraphOrHeading(editor, nodes);
  } else {
    Transforms.insertFragment(editor, nodes);
  }
}
const clipboardFormatKey = 'x-keystatic-fragment';
const getDefaultView = value => {
  return value && value.ownerDocument && value.ownerDocument.defaultView || null;
};
const isDOMNode = value => {
  const window = getDefaultView(value);
  return !!window && value instanceof window.Node;
};
const isDOMText = value => {
  return isDOMNode(value) && value.nodeType === 3;
};
const isDOMElement = value => {
  return isDOMNode(value) && value.nodeType === 1;
};
const getPlainText = domNode => {
  let text = '';
  if (isDOMText(domNode) && domNode.nodeValue) {
    return domNode.nodeValue;
  }
  if (isDOMElement(domNode)) {
    for (const childNode of Array.from(domNode.childNodes)) {
      text += getPlainText(childNode);
    }
    const display = getComputedStyle(domNode).getPropertyValue('display');
    if (display === 'block' || display === 'list' || domNode.tagName === 'BR') {
      text += '\n';
    }
  }
  return text;
};
function setFragmentData(e, data) {
  const {
    selection
  } = e;
  if (!selection) {
    return;
  }
  const [start, end] = Range.edges(selection);
  const startVoid = Editor$1.void(e, {
    at: start.path
  });
  const endVoid = Editor$1.void(e, {
    at: end.path
  });
  if (Range.isCollapsed(selection) && !startVoid) {
    return;
  }

  // Create a fake selection so that we can add a Base64-encoded copy of the
  // fragment to the HTML, to decode on future pastes.
  const domRange = ReactEditor.toDOMRange(e, selection);
  let contents = domRange.cloneContents();
  let attach = contents.childNodes[0];

  // Make sure attach is non-empty, since empty nodes will not get copied.
  contents.childNodes.forEach(node => {
    if (node.textContent && node.textContent.trim() !== '') {
      attach = node;
    }
  });

  // COMPAT: If the end node is a void node, we need to move the end of the
  // range from the void node's spacer span, to the end of the void node's
  // content, since the spacer is before void's content in the DOM.
  if (endVoid) {
    const [voidNode] = endVoid;
    const r = domRange.cloneRange();
    const domNode = ReactEditor.toDOMNode(e, voidNode);
    r.setEndAfter(domNode);
    contents = r.cloneContents();
  }

  // COMPAT: If the start node is a void node, we need to attach the encoded
  // fragment to the void node's content node instead of the spacer, because
  // attaching it to empty `<div>/<span>` nodes will end up having it erased by
  // most browsers. (2018/04/27)
  if (startVoid) {
    attach = contents.querySelector('[data-slate-spacer]');
  }

  // Remove any zero-width space spans from the cloned DOM so that they don't
  // show up elsewhere when pasted.
  Array.from(contents.querySelectorAll('[data-slate-zero-width]')).forEach(zw => {
    const isNewline = zw.getAttribute('data-slate-zero-width') === 'n';
    zw.textContent = isNewline ? '\n' : '';
  });

  // Set a `data-slate-fragment` attribute on a non-empty node, so it shows up
  // in the HTML, and can be used for intra-Slate pasting. If it's a text
  // node, wrap it in a `<span>` so we have something to set an attribute on.
  if (isDOMText(attach)) {
    const span = attach.ownerDocument.createElement('span');
    // COMPAT: In Chrome and Safari, if we don't add the `white-space` style
    // then leading and trailing spaces will be ignored. (2017/09/21)
    span.style.whiteSpace = 'pre';
    span.appendChild(attach);
    contents.appendChild(span);
    attach = span;
  }
  const fragment = e.getFragment();
  const string = JSON.stringify(fragment, (key, val) => {
    if (val instanceof Uint8Array) {
      return {
        [bytesName]: base64UrlEncode(val)
      };
    }
    return val;
  });
  const encoded = window.btoa(encodeURIComponent(string));
  attach.setAttribute('data-keystatic-fragment', encoded);
  data.setData(`application/${clipboardFormatKey}`, encoded);

  // Add the content to a <div> so that we can get its inner HTML.
  const div = contents.ownerDocument.createElement('div');
  div.appendChild(contents);
  div.setAttribute('hidden', 'true');
  contents.ownerDocument.body.appendChild(div);
  data.setData('text/html', div.innerHTML);
  data.setData('text/plain', getPlainText(div));
  contents.ownerDocument.body.removeChild(div);
}
const catchSlateFragment = /data-keystatic-fragment="(.+?)"/m;
const getSlateFragmentAttribute = dataTransfer => {
  const htmlData = dataTransfer.getData('text/html');
  const [, fragment] = htmlData.match(catchSlateFragment) || [];
  return fragment;
};
const bytesName = '$$keystaticUint8Array$$';
function withPasting(editor) {
  const {
    insertTextData
  } = editor;
  editor.setFragmentData = data => {
    setFragmentData(editor, data);
  };
  editor.insertFragmentData = data => {
    /**
     * Checking copied fragment from application/x-slate-fragment or data-slate-fragment
     */
    const fragment = data.getData(`application/${clipboardFormatKey}`) || getSlateFragmentAttribute(data);
    if (fragment) {
      const decoded = decodeURIComponent(window.atob(fragment));
      const parsed = JSON.parse(decoded, (key, val) => typeof val === 'object' && val !== null && bytesName in val && typeof val[bytesName] === 'string' ? base64UrlDecode(val[bytesName]) : val);
      editor.insertFragment(parsed);
      return true;
    }
    return false;
  };
  editor.insertTextData = data => {
    const blockAbove = Editor$1.above(editor, {
      match: isBlock
    });
    if ((blockAbove === null || blockAbove === void 0 ? void 0 : blockAbove[0].type) === 'code') {
      const plain = data.getData('text/plain');
      editor.insertText(plain);
      return true;
    }
    let vsCodeEditorData = data.getData('vscode-editor-data');
    if (vsCodeEditorData) {
      try {
        const vsCodeData = JSON.parse(vsCodeEditorData);
        if ((vsCodeData === null || vsCodeData === void 0 ? void 0 : vsCodeData.mode) === 'markdown' || (vsCodeData === null || vsCodeData === void 0 ? void 0 : vsCodeData.mode) === 'mdx') {
          const plain = data.getData('text/plain');
          if (plain) {
            const fragment = deserializeMarkdown(plain);
            insertFragmentButDifferent(editor, fragment);
            return true;
          }
        }
      } catch (err) {
        console.log(err);
      }
    }
    const plain = data.getData('text/plain');
    if (
    // isValidURL is a bit more permissive than a user might expect
    // so for pasting, we'll constrain it to starting with https:// or http://
    urlPattern$1.test(plain) && isValidURL$1(plain) && editor.selection && !Range.isCollapsed(editor.selection) &&
    // we only want to turn the selected text into a link if the selection is within the same block
    Editor$1.above(editor, {
      match: node => isBlock(node) && !isBlock(node.children[0])
    }) &&
    // and there is only text(potentially with marks) in the selection
    // no other links
    Editor$1.nodes(editor, {
      match: node => node.type === 'link'
    }).next().done) {
      Transforms.wrapNodes(editor, {
        type: 'link',
        href: plain,
        children: []
      }, {
        split: true
      });
      return true;
    }
    const html = data.getData('text/html');
    if (html) {
      const fragment = deserializeHTML(html);
      insertFragmentButDifferent(editor, fragment);
      return true;
    }
    if (plain) {
      const fragment = deserializeMarkdown(plain);
      insertFragmentButDifferent(editor, fragment);
      return true;
    }
    return insertTextData(data);
  };
  return editor;
}

const shortcuts$1 = {
  '...': '…',
  '-->': '→',
  '->': '→',
  '<-': '←',
  '<--': '←',
  '--': '–'
};
function withShortcuts(editor) {
  const {
    insertText
  } = editor;
  editor.insertText = text => {
    insertText(text);
    if (text === ' ' && editor.selection && Range.isCollapsed(editor.selection)) {
      const selectionPoint = editor.selection.anchor;
      const ancestorBlock = Editor$1.above(editor, {
        match: isBlock
      });
      if (ancestorBlock) {
        Object.keys(shortcuts$1).forEach(shortcut => {
          const pointBefore = Editor$1.before(editor, selectionPoint, {
            unit: 'character',
            distance: shortcut.length + 1
          });
          if (pointBefore && Path.isDescendant(pointBefore.path, ancestorBlock[1])) {
            const range = {
              anchor: selectionPoint,
              focus: pointBefore
            };
            const str = Editor$1.string(editor, range);
            if (str.slice(0, shortcut.length) === shortcut) {
              editor.history.undos.push({
                operations: [],
                selectionBefore: editor.selection
              });
              Transforms.select(editor, range);
              editor.insertText(shortcuts$1[shortcut] + ' ');
            }
          }
        });
      }
    }
  };
  return editor;
}

function withSoftBreaks(editor) {
  // TODO: should soft breaks only work in particular places
  editor.insertSoftBreak = () => {
    Transforms.insertText(editor, '\n');
  };
  return editor;
}

const HOTKEYS = {
  'mod+b': 'bold',
  'mod+i': 'italic',
  'mod+u': 'underline'
};
function isMarkActive$1(editor, mark) {
  const marks = Editor$1.marks(editor);
  if (marks !== null && marks !== void 0 && marks[mark]) {
    return true;
  }
  // see the stuff about marks in toolbar-state for why this is here
  for (const entry of Editor$1.nodes(editor, {
    match: Text$1.isText
  })) {
    if (entry[0][mark]) {
      return true;
    }
  }
  return false;
}
const arrowKeyToDirection = new Map([['ArrowUp', 'up'], ['ArrowDown', 'down'], ['ArrowLeft', 'left'], ['ArrowRight', 'right']]);
const getKeyDownHandler = (editor, documentFeatures) => event => {
  if (event.defaultPrevented) return;
  for (const hotkey in HOTKEYS) {
    if (documentFeatures.formatting.inlineMarks[HOTKEYS[hotkey]] && isHotkey(hotkey, event.nativeEvent)) {
      event.preventDefault();
      const mark = HOTKEYS[hotkey];
      const isActive = isMarkActive$1(editor, mark);
      if (isActive) {
        Editor$1.removeMark(editor, mark);
      } else {
        Editor$1.addMark(editor, mark, true);
      }
      return;
    }
  }
  if (isHotkey('mod+\\', event.nativeEvent)) {
    clearFormatting(editor);
    return;
  }
  if (documentFeatures.links && isHotkey('mod+k', event.nativeEvent)) {
    event.preventDefault();
    wrapLink(editor, '');
    return;
  }
  if (event.key === 'Tab') {
    const didAction = event.shiftKey ? unnestList(editor) : nestList(editor);
    if (didAction) {
      event.preventDefault();
      return;
    }
  }
  if (event.key === 'Tab' && editor.selection) {
    const layoutArea = Editor$1.above(editor, {
      match: node => node.type === 'layout-area' || node.type === 'table-cell'
    });
    if (layoutArea) {
      const layoutAreaToEnter = event.shiftKey ? Editor$1.before(editor, layoutArea[1], {
        unit: 'block'
      }) : Editor$1.after(editor, layoutArea[1], {
        unit: 'block'
      });
      Transforms.setSelection(editor, {
        anchor: layoutAreaToEnter,
        focus: layoutAreaToEnter
      });
      event.preventDefault();
    }
  }
  if (isHotkey('mod+a', event)) {
    const parentTable = Editor$1.above(editor, {
      match: nodeTypeMatcher('table')
    });
    if (parentTable) {
      Transforms.select(editor, parentTable[1]);
      event.preventDefault();
      return;
    }
  }
  const direction = arrowKeyToDirection.get(event.key);
  const {
    selection
  } = editor;
  if (direction && selection) {
    const selectedTableArea = getSelectedTableArea(editor);
    if (selectedTableArea) {
      var _Editor$above, _Editor$above2;
      const focusCellPath = (_Editor$above = Editor$1.above(editor, {
        match: nodeTypeMatcher('table-cell'),
        at: selection.focus.path
      })) === null || _Editor$above === void 0 ? void 0 : _Editor$above[1];
      const anchorCellPath = (_Editor$above2 = Editor$1.above(editor, {
        match: nodeTypeMatcher('table-cell'),
        at: selection.anchor.path
      })) === null || _Editor$above2 === void 0 ? void 0 : _Editor$above2[1];
      if (!focusCellPath || !anchorCellPath) return;
      const newCellPath = getCellPathInDirection(editor, focusCellPath, direction);
      if (newCellPath) {
        if (selectedTableArea.singleCell === 'not-selected') {
          if (direction !== 'up' && direction !== 'down') return;
          const [node, offset] = ReactEditor.toDOMPoint(editor, selection.focus);
          const blockElement = Editor$1.above(editor, {
            match: isBlock,
            at: selection.focus.path
          });
          if (!blockElement) return;
          if (direction === 'up' && blockElement[1].slice(focusCellPath.length).some(idx => idx !== 0)) {
            return;
          }
          if (direction === 'down') {
            const [parentNode] = Editor$1.parent(editor, blockElement[1]);
            if (parentNode.children.length - 1 !== blockElement[1][blockElement[1].length - 1]) {
              return;
            }
            for (const [node, path] of Node.ancestors(editor, blockElement[1], {
              reverse: true
            })) {
              if (node.type === 'table-cell') break;
              const [parentNode] = Editor$1.parent(editor, path);
              if (parentNode.children.length - 1 === path[path.length - 1]) {
                continue;
              }
              return;
            }
          }
          const domNodeForBlockElement = ReactEditor.toDOMNode(editor, blockElement[0]);
          const rangeOfWholeBlock = document.createRange();
          rangeOfWholeBlock.selectNodeContents(domNodeForBlockElement);
          const rectsOfRangeOfWholeBlock = Array.from(rangeOfWholeBlock.getClientRects());
          const newRange = document.createRange();
          newRange.setStart(node, offset);
          newRange.setEnd(node, offset);
          const rangeRects = Array.from(newRange.getClientRects());
          const lastRangeRect = rangeRects[rangeRects.length - 1];
          const key = direction === 'up' ? 'top' : 'bottom';
          const expected = key === 'top' ? Math.min(...rectsOfRangeOfWholeBlock.map(x => x.top)) : Math.max(...rectsOfRangeOfWholeBlock.map(x => x.bottom));
          if (lastRangeRect[key] === expected) {
            const focus = Editor$1[direction === 'up' ? 'end' : 'start'](editor, newCellPath);
            Transforms.select(editor, {
              focus,
              anchor: event.shiftKey ? selection.anchor : focus
            });
            event.preventDefault();
          }
          return;
        }
        if (!event.shiftKey) return;
        if (Path.equals(newCellPath, anchorCellPath)) {
          Transforms.select(editor, newCellPath);
        } else {
          Transforms.select(editor, {
            anchor: selection.anchor,
            focus: Editor$1.start(editor, newCellPath)
          });
        }
        event.preventDefault();
      }
    }
  }
};
function createDocumentEditor(documentFeatures, componentBlocks) {
  return withPasting(withImages(withSoftBreaks(withInsertMenu(withShortcuts(withHeading(withBlockquote(withMarks(documentFeatures, componentBlocks, withBlockMarkdownShortcuts(documentFeatures, componentBlocks, _createDocumentEditor(withHistory(withReact(createEditor())), documentFeatures, componentBlocks))))))))));
}
function DocumentEditor({
  onChange,
  value,
  componentBlocks,
  documentFeatures,
  ...props
}) {
  let entryLayoutPane = useEntryLayoutSplitPaneContext();
  const editor = useMemo(() => createDocumentEditor(documentFeatures, componentBlocks), [documentFeatures, componentBlocks]);
  return /*#__PURE__*/jsx("div", {
    "data-layout": entryLayoutPane,
    className: classNames(css({
      backgroundColor: tokenSchema.color.background.canvas,
      minWidth: 0,
      '&[data-layout="main"]': {
        flex: 1,
        display: 'flex',
        flexDirection: 'column'
      },
      '&:not([data-layout="main"])': {
        border: `${tokenSchema.size.border.regular} solid ${tokenSchema.color.border.neutral}`,
        borderRadius: tokenSchema.size.radius.medium
      }
    }), 'keystar-document-editor'),
    children: /*#__PURE__*/jsxs(DocumentEditorProvider, {
      componentBlocks: componentBlocks,
      documentFeatures: documentFeatures,
      editor: editor,
      value: value,
      onChange: value => {
        onChange === null || onChange === void 0 || onChange(value);
        // this fixes a strange issue in Safari where the selection stays inside of the editor
        // after a blur event happens but the selection is still in the editor
        // so the cursor is visually in the wrong place and it inserts text backwards
        const selection = window.getSelection();
        if (selection && !ReactEditor.isFocused(editor)) {
          const editorNode = ReactEditor.toDOMNode(editor, editor);
          if (selection.anchorNode === editorNode) {
            ReactEditor.focus(editor);
          }
        }
      },
      children: [useMemo(() => onChange !== undefined && /*#__PURE__*/jsx(Toolbar$1, {
        documentFeatures: documentFeatures
      }), [documentFeatures, onChange]), /*#__PURE__*/jsx(DocumentEditorEditable, {
        ...props,
        readOnly: onChange === undefined
      }),
      // for debugging
      false ]
    })
  });
}
const IsInEditorContext = /*#__PURE__*/createContext(false);
function useIsInDocumentEditor() {
  return useContext(IsInEditorContext);
}

// in a seperate function with the editor passed in to make react okay with it
function createKeyForEditor(_editor) {
  return Math.random().toString(36);
}
function DocumentEditorProvider({
  children,
  editor,
  onChange,
  value,
  componentBlocks,
  documentFeatures
}) {
  const identity = useMemo(() => createKeyForEditor(), [editor]);
  return /*#__PURE__*/jsx(IsInEditorContext.Provider, {
    value: true,
    children: /*#__PURE__*/jsx(Slate
    // this fixes issues with Slate crashing when a fast refresh occcurs
    , {
      editor: editor,
      value: value,
      onChange: value => {
        onChange(value);
        // this fixes a strange issue in Safari where the selection stays inside of the editor
        // after a blur event happens but the selection is still in the editor
        // so the cursor is visually in the wrong place and it inserts text backwards
        const selection = window.getSelection();
        if (selection && !ReactEditor.isFocused(editor)) {
          const editorNode = ReactEditor.toDOMNode(editor, editor);
          if (selection.anchorNode === editorNode) {
            ReactEditor.focus(editor);
          }
        }
      },
      children: /*#__PURE__*/jsx(TableSelectionProvider, {
        children: /*#__PURE__*/jsx(ToolbarStateProvider, {
          componentBlocks: componentBlocks,
          editorDocumentFeatures: documentFeatures,
          children: children
        })
      })
    }, identity)
  });
}
function getPrismTokenLength$1(token) {
  if (typeof token === 'string') {
    return token.length;
  } else if (Array.isArray(token.content)) {
    return token.content.reduce((l, t) => l + getPrismTokenLength$1(t), 0);
  } else {
    return getPrismTokenLength$1(token.content);
  }
}
function DocumentEditorEditable(props) {
  const containerSize = useContentPanelSize();
  const entryLayoutPane = useEntryLayoutSplitPaneContext();
  const editor = useSlate();
  const {
    componentBlocks,
    documentFeatures
  } = useDocumentEditorConfig();
  const onKeyDown = useMemo(() => getKeyDownHandler(editor, documentFeatures), [editor, documentFeatures]);
  return /*#__PURE__*/jsx(ActiveBlockPopoverProvider, {
    editor: editor,
    children: /*#__PURE__*/jsx(Prose, {
      size: entryLayoutPane === 'main' ? 'medium' : 'regular',
      children: /*#__PURE__*/jsx(Editable, {
        placeholder: "Start writing or press \"/\" for commands...",
        decorate: useCallback(([node, path]) => {
          let decorations = [];
          if (node.type === 'component-block') {
            if (node.children.length === 1 && Element$1.isElement(node.children[0]) && node.children[0].type === 'component-inline-prop' && node.children[0].propPath === undefined) {
              return decorations;
            }
            node.children.forEach((child, index) => {
              if (Node.string(child) === '' && Element$1.isElement(child) && (child.type === 'component-block-prop' || child.type === 'component-inline-prop') && child.propPath !== undefined) {
                const start = Editor$1.start(editor, [...path, index]);
                const placeholder = getPlaceholderTextForPropPath(child.propPath, componentBlocks[node.component].schema, node.props);
                if (placeholder) {
                  decorations.push({
                    placeholder,
                    anchor: start,
                    focus: start
                  });
                }
              }
            });
          }
          if (node.type === 'code' && node.children.length === 1 && node.children[0].type === undefined && node.language && node.language in Prism.languages) {
            const textPath = [...path, 0];
            const tokens = Prism.tokenize(node.children[0].text, Prism.languages[node.language]);
            function consumeTokens(start, tokens) {
              for (const token of tokens) {
                const length = getPrismTokenLength$1(token);
                const end = start + length;
                if (typeof token !== 'string') {
                  decorations.push({
                    ['prism_' + token.type]: true,
                    anchor: {
                      path: textPath,
                      offset: start
                    },
                    focus: {
                      path: textPath,
                      offset: end
                    }
                  });
                  consumeTokens(start, Array.isArray(token.content) ? token.content : [token.content]);
                }
                start = end;
              }
            }
            consumeTokens(0, tokens);
          }
          return decorations;
        }, [editor, componentBlocks]),
        onKeyDown: onKeyDown,
        renderElement: renderElement,
        renderLeaf: renderLeaf,
        ...props,
        ...toDataAttributes({
          container: containerSize,
          layout: entryLayoutPane
        }),
        className: classNames(editableStyles, props.className)
      })
    })
  });
}
let styles$1 = {
  flex: 1,
  height: 'auto',
  minHeight: tokenSchema.size.scale[2000],
  minWidth: 0,
  padding: tokenSchema.size.space.medium,
  '&[data-layout="main"]': {
    boxSizing: 'border-box',
    height: '100%',
    padding: 0,
    paddingTop: tokenSchema.size.space.medium,
    minHeight: 0,
    minWidth: 0,
    maxWidth: 800,
    marginInline: 'auto',
    [breakpointQueries.above.mobile]: {
      padding: tokenSchema.size.space.xlarge
    },
    [breakpointQueries.above.tablet]: {
      padding: tokenSchema.size.space.xxlarge
    },
    '&[data-container="wide"]': {
      padding: tokenSchema.size.scale[600]
    }
  }
};
const editableStyles = css({
  ...styles$1,
  a: {
    color: tokenSchema.color.foreground.accent
  }
});

const emptyObj = {};
let i$2 = 0;
function newKey$1() {
  return i$2++;
}
function InnerChildFieldInput(props) {
  const outerConfig = useDocumentEditorConfig();
  const [state, setState] = useState(() => ({
    key: newKey$1(),
    value: props.value
  }));
  const documentFeatures = useMemo(() => {
    return getWholeDocumentFeaturesForChildField(outerConfig.documentFeatures, props.schema.options);
  }, [props.schema, outerConfig.documentFeatures]);
  if (state.value !== props.value) {
    setState({
      key: newKey$1(),
      value: props.value
    });
  }
  return /*#__PURE__*/jsx(ResetEntryLayoutContext, {
    children: /*#__PURE__*/jsx(Field, {
      label: props.schema.options.label,
      children: inputProps => /*#__PURE__*/createElement(DocumentEditor, {
        ...inputProps,
        key: state.key,
        componentBlocks: props.schema.options.componentBlocks === 'inherit' ? outerConfig.componentBlocks : emptyObj,
        documentFeatures: documentFeatures,
        onChange: val => {
          setState(state => ({
            key: state.key,
            value: val
          }));
          props.onChange(val);
        },
        value: state.value
      })
    })
  });
}
function ChildFieldInput(props) {
  const data = getChildFieldData(props);
  if (props.schema.options.kind === 'block' && (props.schema.options.editIn === 'both' || props.schema.options.editIn === 'modal') && data.value) {
    return /*#__PURE__*/jsx(InnerChildFieldInput, {
      schema: props.schema,
      ...data
    });
  }
  return null;
}

function getInputComponent(schema) {
  if (schema.kind === 'object') {
    var _schema$Input;
    return (_schema$Input = schema.Input) !== null && _schema$Input !== void 0 ? _schema$Input : ObjectFieldInput;
  }
  if (schema.kind === 'conditional') {
    var _schema$Input2;
    return (_schema$Input2 = schema.Input) !== null && _schema$Input2 !== void 0 ? _schema$Input2 : ConditionalFieldInput;
  }
  if (schema.kind === 'array') {
    var _schema$Input3;
    return (_schema$Input3 = schema.Input) !== null && _schema$Input3 !== void 0 ? _schema$Input3 : ArrayFieldInput;
  }
  if (schema.kind === 'child') {
    return ChildFieldInput;
  }
  return schema.Input;
}
const InnerFormValueContentFromPreviewProps = /*#__PURE__*/memo(function InnerFormValueContentFromPreview(props) {
  var _props$omitFieldAtPat;
  const $ = c(7);
  if (((_props$omitFieldAtPat = props.omitFieldAtPath) === null || _props$omitFieldAtPat === void 0 ? void 0 : _props$omitFieldAtPat.length) === 0) {
    return null;
  }
  let t0;
  if ($[0] !== props.schema) {
    t0 = getInputComponent(props.schema);
    $[0] = props.schema;
    $[1] = t0;
  } else {
    t0 = $[1];
  }
  const Input = t0;
  const t1 = props;
  const t2 = !!props.autoFocus;
  const t3 = !!props.forceValidation;
  let t4;
  if ($[2] !== Input || $[3] !== t1 || $[4] !== t2 || $[5] !== t3) {
    t4 = /*#__PURE__*/jsx(Input, {
      ...t1,
      autoFocus: t2,
      forceValidation: t3
    });
    $[2] = Input;
    $[3] = t1;
    $[4] = t2;
    $[5] = t3;
    $[6] = t4;
  } else {
    t4 = $[6];
  }
  return t4;
});
const emptyArray = [];
const FormValueContentFromPreviewProps = /*#__PURE__*/memo(function FormValueContentFromPreview(t0) {
  const $ = c(13);
  let props;
  let slugField;
  if ($[0] !== t0) {
    ({
      slugField,
      ...props
    } = t0);
    $[0] = t0;
    $[1] = props;
    $[2] = slugField;
  } else {
    props = $[1];
    slugField = $[2];
  }
  let t1;
  if ($[3] !== props.schema) {
    t1 = getInputComponent(props.schema);
    $[3] = props.schema;
    $[4] = t1;
  } else {
    t1 = $[4];
  }
  const Input = t1;
  const t2 = props;
  const t3 = !!props.autoFocus;
  const t4 = !!props.forceValidation;
  let t5;
  if ($[5] !== Input || $[6] !== t2 || $[7] !== t3 || $[8] !== t4) {
    t5 = /*#__PURE__*/jsx(Input, {
      ...t2,
      autoFocus: t3,
      forceValidation: t4
    });
    $[5] = Input;
    $[6] = t2;
    $[7] = t3;
    $[8] = t4;
    $[9] = t5;
  } else {
    t5 = $[9];
  }
  let t6;
  if ($[10] !== slugField || $[11] !== t5) {
    t6 = /*#__PURE__*/jsx(PathContextProvider, {
      value: emptyArray,
      children: /*#__PURE__*/jsx(SlugFieldProvider, {
        value: slugField,
        children: t5
      })
    });
    $[10] = slugField;
    $[11] = t5;
    $[12] = t6;
  } else {
    t6 = $[12];
  }
  return t6;
});

class VariableChildFields extends Error {
  constructor() {
    super('There are a variable number of child fields');
  }
}
function findSingleChildField(schema) {
  try {
    const result = _findConstantChildFields(schema, [], new Set());
    if (result.length === 1) {
      return result[0];
    }
    return;
  } catch (err) {
    if (err instanceof VariableChildFields) {
      return;
    }
    throw err;
  }
}
function _findConstantChildFields(schema, path, seenSchemas) {
  if (seenSchemas.has(schema)) {
    return [];
  }
  seenSchemas.add(schema);
  switch (schema.kind) {
    case 'form':
      return [];
    case 'child':
      return [{
        relativePath: path,
        options: schema.options,
        kind: 'child'
      }];
    case 'conditional':
      {
        if (couldContainChildField(schema)) {
          throw new VariableChildFields();
        }
        return [];
      }
    case 'array':
      {
        if (schema.asChildTag) {
          const child = _findConstantChildFields(schema.element, [], seenSchemas);
          if (child.length > 1) {
            return [];
          }
          return [{
            kind: 'array',
            asChildTag: schema.asChildTag,
            field: schema,
            relativePath: path,
            child: child[0]
          }];
        }
        if (couldContainChildField(schema)) {
          throw new VariableChildFields();
        }
        return [];
      }
    case 'object':
      {
        const paths = [];
        for (const [key, value] of Object.entries(schema.fields)) {
          paths.push(..._findConstantChildFields(value, path.concat(key), seenSchemas));
        }
        return paths;
      }
  }
}
function couldContainChildField(schema, seen = new Set()) {
  if (seen.has(schema)) {
    return false;
  }
  seen.add(schema);
  switch (schema.kind) {
    case 'form':
      return false;
    case 'child':
      return true;
    case 'conditional':
      return Object.values(schema.values).some(value => couldContainChildField(value, seen));
    case 'object':
      return Object.keys(schema.fields).some(key => couldContainChildField(schema.fields[key], seen));
    case 'array':
      return couldContainChildField(schema.element, seen);
  }
}

function inlineNodeFromMarkdoc(node) {
  if (node.type === 'inline') {
    return inlineChildrenFromMarkdoc(node.children);
  }
  if (node.type === 'link') {
    return setLinkForChildren(node.attributes.href, () => inlineChildrenFromMarkdoc(node.children));
  }
  if (node.type === 'text') {
    return getInlineNodes(node.attributes.content);
  }
  if (node.type === 'strong') {
    return addMarkToChildren('bold', () => inlineChildrenFromMarkdoc(node.children));
  }
  if (node.type === 'code') {
    return addMarkToChildren('code', () => getInlineNodes(node.attributes.content));
  }
  if (node.type === 'em') {
    return addMarkToChildren('italic', () => inlineChildrenFromMarkdoc(node.children));
  }
  if (node.type === 's') {
    return addMarkToChildren('strikethrough', () => inlineChildrenFromMarkdoc(node.children));
  }
  if (node.type === 'tag') {
    if (node.tag === 'u') {
      return addMarkToChildren('underline', () => inlineChildrenFromMarkdoc(node.children));
    }
    if (node.tag === 'kbd') {
      return addMarkToChildren('keyboard', () => inlineChildrenFromMarkdoc(node.children));
    }
    if (node.tag === 'sub') {
      return addMarkToChildren('subscript', () => inlineChildrenFromMarkdoc(node.children));
    }
    if (node.tag === 'sup') {
      return addMarkToChildren('superscript', () => inlineChildrenFromMarkdoc(node.children));
    }
  }
  if (node.type === 'softbreak') {
    return getInlineNodes(' ');
  }
  if (node.type === 'hardbreak') {
    return getInlineNodes('\n');
  }
  if (node.tag === 'component-inline-prop' && Array.isArray(node.attributes.propPath) && node.attributes.propPath.every(x => typeof x === 'string' || typeof x === 'number')) {
    return {
      type: 'component-inline-prop',
      children: inlineFromMarkdoc(node.children),
      propPath: node.attributes.propPath
    };
  }
  throw new Error(`Unknown inline node type: ${node.type}`);
}
function inlineChildrenFromMarkdoc(nodes) {
  return nodes.flatMap(inlineNodeFromMarkdoc);
}
function inlineFromMarkdoc(nodes) {
  const transformedNodes = nodes.flatMap(inlineNodeFromMarkdoc);
  const nextNodes = [];
  let lastNode;
  for (const [idx, node] of transformedNodes.entries()) {
    var _lastNode;
    if (node.type === undefined && node.text === '' && ((_lastNode = lastNode) === null || _lastNode === void 0 ? void 0 : _lastNode.type) === undefined && idx !== transformedNodes.length - 1) {
      continue;
    }
    nextNodes.push(node);
    lastNode = node;
  }
  if (!nextNodes.length) {
    nextNodes.push({
      text: ''
    });
  }
  return nextNodes;
}
function fromMarkdoc(node, componentBlocks) {
  const nodes = node.children.flatMap(x => fromMarkdocNode(x, componentBlocks));
  if (nodes.length === 0) {
    return [{
      type: 'paragraph',
      children: [{
        text: ''
      }]
    }];
  }
  if (nodes[nodes.length - 1].type !== 'paragraph') {
    nodes.push({
      type: 'paragraph',
      children: [{
        text: ''
      }]
    });
  }
  return nodes;
}
function fromMarkdocNode(node, componentBlocks) {
  if (node.type === 'blockquote') {
    return {
      type: 'blockquote',
      children: node.children.flatMap(x => fromMarkdocNode(x, componentBlocks))
    };
  }
  if (node.type === 'fence') {
    const {
      language,
      content,
      ...rest
    } = node.attributes;
    return {
      type: 'code',
      children: [{
        text: content.replace(/\n$/, '')
      }],
      ...(typeof language === 'string' ? {
        language
      } : {}),
      ...rest
    };
  }
  if (node.type === 'heading') {
    return {
      ...node.attributes,
      level: node.attributes.level,
      type: 'heading',
      children: inlineFromMarkdoc(node.children)
    };
  }
  if (node.type === 'list') {
    return {
      type: node.attributes.ordered ? 'ordered-list' : 'unordered-list',
      children: node.children.flatMap(x => fromMarkdocNode(x, componentBlocks))
    };
  }
  if (node.type === 'item') {
    var _node$children$;
    const children = [{
      type: 'list-item-content',
      children: node.children.length ? inlineFromMarkdoc([node.children[0]]) : [{
        text: ''
      }]
    }];
    if (((_node$children$ = node.children[1]) === null || _node$children$ === void 0 ? void 0 : _node$children$.type) === 'list') {
      const list = node.children[1];
      children.push({
        type: list.attributes.ordered ? 'ordered-list' : 'unordered-list',
        children: list.children.flatMap(x => fromMarkdocNode(x, componentBlocks))
      });
    }
    return {
      type: 'list-item',
      children
    };
  }
  if (node.type === 'paragraph') {
    if (node.children.length === 1 && node.children[0].type === 'inline' && node.children[0].children.length === 1 && node.children[0].children[0].type === 'image') {
      var _image$attributes$tit;
      const image = node.children[0].children[0];
      return {
        type: 'image',
        src: decodeURI(image.attributes.src),
        alt: image.attributes.alt,
        title: (_image$attributes$tit = image.attributes.title) !== null && _image$attributes$tit !== void 0 ? _image$attributes$tit : '',
        children: [{
          text: ''
        }]
      };
    }
    const children = inlineFromMarkdoc(node.children);
    if (children.length === 1 && children[0].type === 'component-inline-prop') {
      return children[0];
    }
    return {
      type: 'paragraph',
      children,
      textAlign: node.attributes.textAlign
    };
  }
  if (node.type === 'hr') {
    return {
      type: 'divider',
      children: [{
        text: ''
      }]
    };
  }
  if (node.type === 'table') {
    return {
      type: 'table',
      children: node.children.flatMap(x => fromMarkdocNode(x, componentBlocks))
    };
  }
  if (node.type === 'tbody') {
    return {
      type: 'table-body',
      children: node.children.flatMap(x => fromMarkdocNode(x, componentBlocks))
    };
  }
  if (node.type === 'thead') {
    if (!node.children.length) return [];
    return {
      type: 'table-head',
      children: node.children.flatMap(x => fromMarkdocNode(x, componentBlocks))
    };
  }
  if (node.type === 'tr') {
    return {
      type: 'table-row',
      children: node.children.flatMap(x => fromMarkdocNode(x, componentBlocks))
    };
  }
  if (node.type === 'td') {
    return {
      type: 'table-cell',
      children: node.children.flatMap(x => fromMarkdocNode(x, componentBlocks))
    };
  }
  if (node.type === 'th') {
    return {
      type: 'table-cell',
      header: true,
      children: node.children.flatMap(x => fromMarkdocNode(x, componentBlocks))
    };
  }
  if (node.type === 'tag') {
    if (node.tag === 'table') {
      return fromMarkdocNode(node.children[0], componentBlocks);
    }
    if (node.tag === 'layout') {
      return {
        type: 'layout',
        layout: node.attributes.layout,
        children: node.children.flatMap(x => fromMarkdocNode(x, componentBlocks))
      };
    }
    if (node.tag === 'layout-area') {
      return {
        type: 'layout-area',
        children: node.children.flatMap(x => fromMarkdocNode(x, componentBlocks))
      };
    }
    if (node.tag === 'component-block') {
      return {
        type: 'component-block',
        component: node.attributes.component,
        props: node.attributes.props,
        children: node.children.length === 0 ? [{
          type: 'component-inline-prop',
          children: [{
            text: ''
          }]
        }] : node.children.flatMap(x => fromMarkdocNode(x, componentBlocks))
      };
    }
    if (node.tag === 'component-block-prop' && Array.isArray(node.attributes.propPath) && node.attributes.propPath.every(x => typeof x === 'string' || typeof x === 'number')) {
      return {
        type: 'component-block-prop',
        children: node.children.flatMap(x => fromMarkdocNode(x, componentBlocks)),
        propPath: node.attributes.propPath
      };
    }
    if (node.tag) {
      const componentBlock = componentBlocks[node.tag];
      if (componentBlock) {
        const singleChildField = findSingleChildField({
          kind: 'object',
          fields: componentBlock.schema
        });
        if (singleChildField) {
          const newAttributes = JSON.parse(JSON.stringify(node.attributes));
          const children = [];
          toChildrenAndProps$1(node.children, children, newAttributes, singleChildField, [], componentBlocks);
          return {
            type: 'component-block',
            component: node.tag,
            props: newAttributes,
            children
          };
        }
        return {
          type: 'component-block',
          component: node.tag,
          props: node.attributes,
          children: node.children.length === 0 ? [{
            type: 'component-inline-prop',
            children: [{
              text: ''
            }]
          }] : node.children.flatMap(x => fromMarkdocNode(x, componentBlocks))
        };
      }
    }
    throw new Error(`Unknown tag: ${node.tag}`);
  }
  return inlineNodeFromMarkdoc(node);
}
function toChildrenAndProps$1(fromMarkdoc, resultingChildren, value, singleChildField, parentPropPath, componentBlocks) {
  if (singleChildField.kind === 'child') {
    const children = fromMarkdoc.flatMap(x => fromMarkdocNode(x, componentBlocks));
    resultingChildren.push({
      type: `component-${singleChildField.options.kind}-prop`,
      propPath: [...parentPropPath, ...singleChildField.relativePath],
      children
    });
  }
  if (singleChildField.kind === 'array') {
    const arr = [];
    for (let [idx, child] of fromMarkdoc.entries()) {
      if (child.type === 'paragraph') {
        child = child.children[0].children[0];
      }
      if (child.type !== 'tag') {
        throw new Error(`expected tag ${singleChildField.asChildTag}, found type: ${child.type}`);
      }
      if (child.tag !== singleChildField.asChildTag) {
        throw new Error(`expected tag ${singleChildField.asChildTag}, found tag: ${child.tag}`);
      }
      const attributes = JSON.parse(JSON.stringify(child.attributes));
      if (singleChildField.child) {
        toChildrenAndProps$1(child.children, resultingChildren, attributes, singleChildField.child, [...parentPropPath, ...singleChildField.relativePath, idx], componentBlocks);
      }
      arr.push(attributes);
    }
    const key = singleChildField.relativePath[singleChildField.relativePath.length - 1];
    const parent = getValueAtPropPath(value, singleChildField.relativePath.slice(0, -1));
    parent[key] = arr;
  }
}

function getSrcPrefix(publicPath, slug) {
  return typeof publicPath === 'string' ? `${publicPath.replace(/\/*$/, '')}/${slug === undefined ? '' : slug + '/'}` : '';
}

function deserializeFiles(nodes, componentBlocks, files, otherFiles, mode, documentFeatures, slug) {
  return nodes.map(node => {
    if (node.type === 'component-block') {
      const componentBlock = componentBlocks[node.component];
      if (!componentBlock) return node;
      const schema = object(componentBlock.schema);
      return {
        ...node,
        props: deserializeProps$2(schema, node.props, files, otherFiles, mode, slug)
      };
    }
    if (node.type === 'image' && typeof node.src === 'string' && mode === 'edit') {
      var _ref;
      const prefix = getSrcPrefixForImageBlock$1(documentFeatures, slug);
      const filename = node.src.slice(prefix.length);
      const content = (_ref = typeof documentFeatures.images === 'object' && typeof documentFeatures.images.directory === 'string' ? otherFiles.get(fixPath(documentFeatures.images.directory)) : files) === null || _ref === void 0 ? void 0 : _ref.get(filename);
      if (!content) {
        return {
          type: 'paragraph',
          children: [{
            text: `Missing image ${filename}`
          }]
        };
      }
      return {
        type: 'image',
        src: {
          filename,
          content
        },
        alt: node.alt,
        title: node.title,
        children: [{
          text: ''
        }]
      };
    }
    if (typeof node.type === 'string') {
      const children = deserializeFiles(node.children, componentBlocks, files, otherFiles, mode, documentFeatures, slug);
      return {
        ...node,
        children
      };
    }
    return node;
  });
}
function deserializeProps$2(schema, value, files, otherFiles, mode, slug) {
  return transformProps(schema, value, {
    form: (schema, value) => {
      if (schema.formKind === 'asset') {
        var _otherFiles$get;
        if (mode === 'read') {
          return schema.reader.parse(value);
        }
        const filename = schema.filename(value, {
          slug,
          suggestedFilenamePrefix: undefined
        });
        return schema.parse(value, {
          asset: filename ? schema.directory ? (_otherFiles$get = otherFiles.get(schema.directory)) === null || _otherFiles$get === void 0 ? void 0 : _otherFiles$get.get(filename) : files.get(filename) : undefined,
          slug
        });
      }
      if (schema.formKind === 'content' || schema.formKind === 'assets') {
        throw new Error('Not implemented');
      }
      if (mode === 'read') {
        return schema.reader.parse(value);
      }
      return schema.parse(value, undefined);
    }
  });
}
function getSrcPrefixForImageBlock$1(documentFeatures, slug) {
  return getSrcPrefix(typeof documentFeatures.images === 'object' ? documentFeatures.images.publicPath : undefined, slug);
}

function serializeProps$1(rootValue, rootSchema,
// note you might have a slug without a slug field when serializing props inside a component block or etc. in the editor
slugField, slug, shouldSuggestFilenamePrefix) {
  const extraFiles = [];
  return {
    value: transformProps(rootSchema, rootValue, {
      form(schema, value, propPath) {
        if (propPath.length === 1 && slugField === propPath[0]) {
          if (schema.formKind !== 'slug') {
            throw new Error('slugField is a not a slug field');
          }
          return schema.serializeWithSlug(value).value;
        }
        if (schema.formKind === 'asset') {
          const {
            asset,
            value: forYaml
          } = schema.serialize(value, {
            suggestedFilenamePrefix: shouldSuggestFilenamePrefix ? getPropPathPortion(propPath, rootSchema, rootValue) : undefined,
            slug
          });
          if (asset) {
            extraFiles.push({
              path: asset.filename,
              contents: asset.content,
              parent: schema.directory
            });
          }
          return forYaml;
        }
        if (schema.formKind === 'content' || schema.formKind === 'assets') {
          let other, external, forYaml;
          if (schema.formKind === 'content') {
            const out = schema.serialize(value, {
              slug
            });
            if (out.content) {
              extraFiles.push({
                path: getPropPathPortion(propPath, rootSchema, rootValue) + schema.contentExtension,
                contents: out.content,
                parent: undefined
              });
            }
            ({
              value: forYaml,
              other,
              external
            } = out);
          } else {
            const out = schema.serialize(value, {
              slug
            });
            ({
              value: forYaml,
              other,
              external
            } = out);
          }
          for (const [key, contents] of other) {
            extraFiles.push({
              path: getPropPathPortion(propPath, rootSchema, rootValue) + '/' + key,
              contents,
              parent: undefined
            });
          }
          const allowedDirectories = new Set(schema.directories);
          for (const [directory, contents] of external) {
            if (!allowedDirectories.has(directory)) {
              throw new Error(`Invalid directory ${directory} in content field serialization`);
            }
            for (const [filename, fileContents] of contents) {
              extraFiles.push({
                path: filename,
                contents: fileContents,
                parent: directory
              });
            }
          }
          return forYaml;
        }
        return schema.serialize(value).value;
      },
      object(_schema, value) {
        return Object.fromEntries(Object.entries(value).filter(([_, val]) => val !== undefined));
      },
      array(_schema, value) {
        return value.map(val => val === undefined ? null : val);
      },
      conditional(_schema, value) {
        if (value.value === undefined) {
          return {
            discriminant: value.discriminant
          };
        }
        return value;
      },
      child() {
        return undefined;
      }
    }),
    extraFiles
  };
}
function getPropPathPortion(path, schema, value) {
  const end = [];
  for (const portion of path) {
    if (schema.kind === 'array') {
      value = value[portion];
      if (schema.slugField && schema.element.kind === 'object') {
        const slug = getSlugFromState({
          schema: schema.element.fields,
          slugField: schema.slugField
        }, value);
        end.push(slug);
      } else {
        end.push(portion);
      }
      schema = schema.element;
      continue;
    }
    end.push(portion);
    if (schema.kind === 'object') {
      value = value[portion];
      schema = schema.fields[portion];
      continue;
    }
    if (schema.kind === 'conditional') {
      if (portion === 'discriminant') {
        schema = schema.discriminant;
      } else if (portion === 'value') {
        schema = schema.values[value.discriminant];
      }
      value = value[portion];
      continue;
    }
    throw new Error(`unexpected ${schema.kind}`);
  }
  return end.join('/');
}

function toInline(nodes) {
  return new Ast.Node('inline', {}, nodes.flatMap(toMarkdocInline));
}
const markToMarkdoc = {
  bold: {
    type: 'strong'
  },
  code: {
    type: 'code'
  },
  italic: {
    type: 'em'
  },
  underline: {
    type: 'tag',
    tag: 'u'
  },
  keyboard: {
    type: 'tag',
    tag: 'kbd'
  },
  strikethrough: {
    type: 's'
  },
  subscript: {
    type: 'tag',
    tag: 'sub'
  },
  superscript: {
    type: 'tag',
    tag: 'sup'
  }
};
function toMarkdocInline(node) {
  var _exec, _exec2;
  if (node.type === 'link') {
    return new Ast.Node('link', {
      href: node.href
    }, node.children.flatMap(toMarkdocInline));
  }
  if (node.type !== undefined) {
    throw new Error(`unexpected inline node type: ${node.type}`);
  }
  const marks = Object.keys(node).filter(mark => mark !== 'text' && mark !== 'code').sort();
  const splitByNewLines = node.text.split(/\n/);
  if (splitByNewLines.length > 1) {
    return splitByNewLines.flatMap((x, i) => {
      if (i === 0) {
        return toMarkdocInline({
          ...node,
          text: x
        });
      }
      const inner = toMarkdocInline({
        ...node,
        text: x
      });
      return [new Ast.Node('hardbreak'), ...(Array.isArray(inner) ? inner : [inner])];
    });
  }
  const leadingWhitespace = (_exec = /^\s+/.exec(node.text)) === null || _exec === void 0 ? void 0 : _exec[0];
  const trailingWhitespace = (_exec2 = /\s+$/.exec(node.text)) === null || _exec2 === void 0 ? void 0 : _exec2[0];
  let children = node.code ? [new Ast.Node('code', {
    content: node.text.trim()
  }, [])] : [new Ast.Node('text', {
    content: node.text.trim()
  })];
  for (const mark of marks) {
    const config = markToMarkdoc[mark];
    if (config) {
      children = [new Ast.Node(config.type, {}, children, config.tag)];
    }
  }
  if (/^\s+$/.test(node.text)) {
    children.unshift(new Ast.Node('text', {
      content: leadingWhitespace
    }, []));
  } else {
    if (leadingWhitespace !== null && leadingWhitespace !== void 0 && leadingWhitespace.length) {
      children.unshift(new Ast.Node('text', {
        content: leadingWhitespace
      }, []));
    }
    if (trailingWhitespace !== null && trailingWhitespace !== void 0 && trailingWhitespace.length) {
      children.push(new Ast.Node('text', {
        content: trailingWhitespace
      }, []));
    }
  }
  return children;
}
function toMarkdocDocument(nodes, _config) {
  const extraFiles = [];
  const config = {
    ..._config,
    extraFiles
  };
  const node = new Ast.Node('document', {}, nodes.flatMap(x => toMarkdoc(x, config)));
  return {
    node,
    extraFiles
  };
}
function toChildrenAndProps(childrenAsMarkdoc, resultingChildren, value, singleChildField) {
  if (singleChildField.kind === 'child') {
    const child = childrenAsMarkdoc.find(x => areArraysEqual(x.propPath, singleChildField.relativePath));
    if (child) {
      resultingChildren.push(...child.children);
    }
    return;
  }
  if (singleChildField.kind === 'array') {
    const key = singleChildField.relativePath[singleChildField.relativePath.length - 1];
    const parent = getValueAtPropPath(value, singleChildField.relativePath.slice(0, -1));
    const valueAtPropPath = parent[key];
    delete parent[key];
    const childNodes = new Map();
    for (const child of childrenAsMarkdoc) {
      const innerPropPath = child.propPath.slice(singleChildField.relativePath.length + 1);
      const num = child.propPath[singleChildField.relativePath.length];
      if (childNodes.get(num) === undefined) {
        childNodes.set(num, []);
      }
      childNodes.get(num).push({
        children: child.children,
        propPath: innerPropPath
      });
    }
    resultingChildren.push(...valueAtPropPath.map((x, i) => {
      var _childNodes$get;
      const newChildrenAsMarkdoc = (_childNodes$get = childNodes.get(i)) !== null && _childNodes$get !== void 0 ? _childNodes$get : [];
      const children = [];
      toChildrenAndProps(newChildrenAsMarkdoc, children, x, singleChildField.child);
      return new Ast.Node('tag', x, children, singleChildField.asChildTag);
    }));
  }
}
function toMarkdoc(node, config) {
  if (node.type === 'paragraph') {
    const markdocNode = new Ast.Node('paragraph', node.textAlign ? {
      textAlign: node.textAlign
    } : {}, [toInline(node.children)]);
    if (node.textAlign) {
      markdocNode.annotations.push({
        name: 'textAlign',
        value: node.textAlign,
        type: 'attribute'
      });
    }
    return markdocNode;
  }
  if (node.type === 'image') {
    config.extraFiles.push({
      contents: node.src.content,
      path: node.src.filename,
      parent: typeof config.documentFeatures.images === 'object' && typeof config.documentFeatures.images.directory === 'string' ? fixPath(config.documentFeatures.images.directory) : undefined
    });
    return new Ast.Node('paragraph', {}, [new Ast.Node('inline', {}, [new Ast.Node('image', {
      src: encodeURI(`${getSrcPrefixForImageBlock$1(config.documentFeatures, config.slug)}${node.src.filename}`),
      alt: node.alt,
      title: node.title
    })])]);
  }
  if (node.type === 'code') {
    const extraAttributes = {};
    const {
      children,
      language,
      type,
      ...rest
    } = node;
    const schema = typeof config.documentFeatures.formatting.blockTypes.code === 'object' ? config.documentFeatures.formatting.blockTypes.code.schema : undefined;
    if (schema && Object.keys(schema.fields).length > 0) {
      const serialized = serializeProps$1(getInitialPropsValueFromInitializer(schema, rest), schema, undefined, config.slug, false);
      Object.assign(extraAttributes, serialized.value);
      config.extraFiles.push(...serialized.extraFiles);
    }
    let content = children[0].text + '\n';
    const markdocNode = new Ast.Node('fence', {
      content,
      language,
      ...extraAttributes
    }, [new Ast.Node('text', {
      content
    })]);
    for (const [key, value] of Object.entries(extraAttributes)) {
      markdocNode.annotations.push({
        name: key,
        value,
        type: 'attribute'
      });
    }
    return markdocNode;
  }
  const _toMarkdoc = node => toMarkdoc(node, config);
  if (node.type === 'blockquote') {
    return new Ast.Node('blockquote', {}, node.children.map(_toMarkdoc));
  }
  if (node.type === 'divider') {
    return new Ast.Node('hr');
  }
  if (node.type === 'table') {
    const head = node.children.find(x => x.type === 'table-head');
    return new Ast.Node('tag', {}, [new Ast.Node('table', {}, [new Ast.Node('thead', {}, head ? head.children.map(_toMarkdoc) : []), _toMarkdoc(node.children.find(x => x.type === 'table-body'))])], 'table');
  }
  if (node.type === 'table-body') {
    return new Ast.Node('tbody', {}, node.children.map(_toMarkdoc));
  }
  if (node.type === 'table-row') {
    return new Ast.Node('tr', {}, node.children.map(_toMarkdoc));
  }
  if (node.type === 'table-cell') {
    return new Ast.Node(node.header ? 'th' : 'td', {}, node.children.map(_toMarkdoc));
  }
  if (node.type === 'heading') {
    const extraAttributes = {};
    if (node.textAlign) {
      extraAttributes.textAlign = node.textAlign;
    }
    const {
      children,
      level,
      textAlign,
      type,
      ...rest
    } = node;
    const schema = config.documentFeatures.formatting.headings.schema;
    if (Object.keys(schema.fields).length > 0) {
      Object.assign(extraAttributes, serializeProps$1(getInitialPropsValueFromInitializer(schema, rest), schema, undefined, config.slug, false).value);
    }
    const markdocNode = new Ast.Node('heading', {
      level: node.level,
      ...extraAttributes
    }, [toInline(node.children)]);
    for (const [key, value] of Object.entries(extraAttributes)) {
      markdocNode.annotations.push({
        name: key,
        value,
        type: 'attribute'
      });
    }
    return markdocNode;
  }
  if (node.type === 'ordered-list') {
    return new Ast.Node('list', {
      ordered: true
    }, node.children.map(_toMarkdoc));
  }
  if (node.type === 'unordered-list') {
    return new Ast.Node('list', {
      ordered: false
    }, node.children.map(_toMarkdoc));
  }
  if (node.type === 'layout') {
    return new Ast.Node('tag', {
      layout: node.layout
    }, node.children.map(_toMarkdoc), 'layout');
  }
  if (node.type === 'layout-area') {
    return new Ast.Node('tag', {}, node.children.flatMap(_toMarkdoc), 'layout-area');
  }
  if (node.type === 'component-block') {
    const isVoid = node.children.length === 1 && node.children[0].type === 'component-inline-prop' && node.children[0].propPath === undefined;
    const componentBlock = config.componentBlocks[node.component];
    const childrenAsMarkdoc = [];
    for (const child of node.children) {
      if ((child.type === 'component-block-prop' || child.type === 'component-inline-prop') && child.propPath !== undefined) {
        childrenAsMarkdoc.push({
          type: child.type,
          propPath: child.propPath,
          children: child.type === 'component-block-prop' ? child.children.flatMap(_toMarkdoc) : [toInline(child.children)]
        });
      }
    }
    let attributes = node.props;
    if (componentBlock) {
      const serialized = serializeProps$1(node.props, {
        kind: 'object',
        fields: componentBlock.schema
      }, undefined, config.slug, false);
      attributes = serialized.value;
      config.extraFiles.push(...serialized.extraFiles);
      const singleChildField = findSingleChildField({
        kind: 'object',
        fields: componentBlock.schema
      });
      if (singleChildField) {
        const children = [];
        toChildrenAndProps(childrenAsMarkdoc, children, attributes, singleChildField);
        return new Ast.Node('tag', attributes, children, node.component);
      }
    }
    const children = isVoid ? [] : childrenAsMarkdoc.map(x => new Ast.Node('tag', {
      propPath: x.propPath
    }, x.children, x.type));
    return new Ast.Node('tag', attributes, children, node.component);
  }
  if (node.type === 'component-block-prop' || node.type === 'component-inline-prop') {
    return new Ast.Node('tag', {
      propPath: node.propPath
    }, node.type === 'component-inline-prop' ? [toInline(node.children)] : node.children.flatMap(_toMarkdoc), node.type);
  }
  if (node.type === 'list-item') {
    const listItemContent = node.children[0];
    if (listItemContent.type !== 'list-item-content') {
      throw new Error('list item content must contain a list-item-content');
    }
    const inline = toInline(listItemContent.children);
    const children = [inline];
    const nestedList = node.children[1];
    if (nestedList) {
      children.push(toMarkdoc(nestedList, config));
    }
    return new Ast.Node('item', {}, children);
  }
  if (node.type === 'list-item-content') {
    throw new Error('list-item-content in unexpected position');
  }
  debugger;
  throw new Error(`unexpected node type: ${node.type}`);
}

let i$1 = 0;
function newKey() {
  return i$1++;
}
const encoder = new TextEncoder();
function serializeMarkdoc(value, opts, componentBlocks, documentFeatures) {
  const {
    extraFiles,
    node
  } = toMarkdocDocument(value, {
    componentBlocks,
    documentFeatures,
    slug: opts.slug
  });
  const other = new Map();
  const external = new Map();
  for (const file of extraFiles) {
    if (file.parent === undefined) {
      other.set(file.path, file.contents);
      continue;
    }
    if (!external.has(file.parent)) {
      external.set(file.parent, new Map());
    }
    external.get(file.parent).set(file.path, file.contents);
  }
  return {
    content: encoder.encode(format(parse(format(node)))),
    other,
    external,
    value: undefined
  };
}
function normalizeDocumentFieldChildren(documentFeatures, componentBlocks, document) {
  const editor = createDocumentEditorForNormalization(documentFeatures, componentBlocks);
  editor.children = document;
  Editor$1.normalize(editor, {
    force: true
  });
  return editor.children;
}
function DocumentFieldInput$1(props) {
  let entryLayoutPane = useEntryLayoutSplitPaneContext();
  const [state, setState] = useState(() => ({
    key: newKey(),
    value: props.value
  }));
  if (state.value !== props.value) {
    setState({
      key: newKey(),
      value: props.value
    });
  }
  let fieldProps = {
    label: props.label,
    labelElementType: 'span',
    // the editor element isn't an input, so we need to use a span for the label
    description: props.description
  };
  if (entryLayoutPane === 'main') {
    fieldProps = {
      'aria-label': props.label
      // `aria-description` is still in W3C Editor's Draft for ARIA 1.3.
    };
  }
  return /*#__PURE__*/jsx(Field, {
    height: entryLayoutPane === 'main' ? '100%' : undefined,
    ...fieldProps,
    children: inputProps => /*#__PURE__*/createElement(DocumentEditor, {
      ...inputProps,
      key: state.key,
      componentBlocks: props.componentBlocks,
      documentFeatures: props.documentFeatures,
      onChange: val => {
        setState(state => ({
          key: state.key,
          value: val
        }));
        props.onChange(val);
      },
      value: state.value
    })
  });
}

const textDecoder$1 = new TextDecoder();
const defaultAltField$1 = text({
  label: 'Alt text',
  description: 'This text will be used by screen readers and search engines.'
});
const emptyTitleField$1 = basicFormFieldWithSimpleReaderParse({
  Input() {
    return null;
  },
  defaultValue() {
    return '';
  },
  parse(value) {
    if (value === undefined) return '';
    if (typeof value !== 'string') {
      throw new FieldDataError('Must be string');
    }
    return value;
  },
  validate(value) {
    return value;
  },
  serialize(value) {
    return {
      value
    };
  },
  label: 'Title'
});
function normaliseDocumentFeatures(config) {
  var _config$formatting, _formatting$alignment, _formatting$alignment2, _formatting$blockType, _formatting$inlineMar, _formatting$inlineMar2, _formatting$inlineMar3, _formatting$inlineMar4, _formatting$inlineMar5, _formatting$inlineMar6, _formatting$inlineMar7, _formatting$inlineMar8, _formatting$listTypes, _formatting$listTypes2, _imagesConfig$schema$, _imagesConfig$schema, _imagesConfig$schema$2, _imagesConfig$schema2;
  const formatting = config.formatting === true ? {
    // alignment: true, // not supported natively in markdown
    blockTypes: true,
    headingLevels: true,
    inlineMarks: true,
    listTypes: true,
    softBreaks: true
  } : (_config$formatting = config.formatting) !== null && _config$formatting !== void 0 ? _config$formatting : {};
  const imagesConfig = config.images === true ? {} : config.images;
  return {
    formatting: {
      alignment: formatting.alignment === true ? {
        center: true,
        end: true
      } : {
        center: !!((_formatting$alignment = formatting.alignment) !== null && _formatting$alignment !== void 0 && _formatting$alignment.center),
        end: !!((_formatting$alignment2 = formatting.alignment) !== null && _formatting$alignment2 !== void 0 && _formatting$alignment2.end)
      },
      blockTypes: (formatting === null || formatting === void 0 ? void 0 : formatting.blockTypes) === true ? {
        blockquote: true,
        code: {
          schema: object({})
        }
      } : {
        blockquote: !!((_formatting$blockType = formatting.blockTypes) !== null && _formatting$blockType !== void 0 && _formatting$blockType.blockquote),
        code: (_formatting$blockType2 => {
          if (((_formatting$blockType2 = formatting.blockTypes) === null || _formatting$blockType2 === void 0 ? void 0 : _formatting$blockType2.code) === undefined) {
            return false;
          }
          if (formatting.blockTypes.code === true || !formatting.blockTypes.code.schema) {
            return {
              schema: object({})
            };
          }
          for (const key of ['type', 'children', 'language']) {
            if (key in formatting.blockTypes.code.schema) {
              throw new Error(`"${key}" cannot be a key in the schema for code blocks`);
            }
          }
          return {
            schema: object(formatting.blockTypes.code.schema)
          };
        })()
      },
      headings: (_obj$schema => {
        const opt = formatting === null || formatting === void 0 ? void 0 : formatting.headingLevels;
        const obj = typeof opt === 'object' && 'levels' in opt ? opt : {
          levels: opt,
          schema: undefined
        };
        if (obj.schema) {
          for (const key of ['type', 'children', 'level', 'textAlign']) {
            if (key in obj.schema) {
              throw new Error(`"${key}" cannot be a key in the schema for headings`);
            }
          }
        }
        return {
          levels: [...new Set(obj.levels === true ? [1, 2, 3, 4, 5, 6] : obj.levels)],
          schema: object((_obj$schema = obj.schema) !== null && _obj$schema !== void 0 ? _obj$schema : {})
        };
      })(),
      inlineMarks: formatting.inlineMarks === true ? {
        bold: true,
        code: true,
        italic: true,
        keyboard: false,
        // not supported natively in markdown
        strikethrough: true,
        subscript: false,
        // not supported natively in markdown
        superscript: false,
        // not supported natively in markdown
        underline: false // not supported natively in markdown
      } : {
        bold: !!((_formatting$inlineMar = formatting.inlineMarks) !== null && _formatting$inlineMar !== void 0 && _formatting$inlineMar.bold),
        code: !!((_formatting$inlineMar2 = formatting.inlineMarks) !== null && _formatting$inlineMar2 !== void 0 && _formatting$inlineMar2.code),
        italic: !!((_formatting$inlineMar3 = formatting.inlineMarks) !== null && _formatting$inlineMar3 !== void 0 && _formatting$inlineMar3.italic),
        strikethrough: !!((_formatting$inlineMar4 = formatting.inlineMarks) !== null && _formatting$inlineMar4 !== void 0 && _formatting$inlineMar4.strikethrough),
        underline: !!((_formatting$inlineMar5 = formatting.inlineMarks) !== null && _formatting$inlineMar5 !== void 0 && _formatting$inlineMar5.underline),
        keyboard: !!((_formatting$inlineMar6 = formatting.inlineMarks) !== null && _formatting$inlineMar6 !== void 0 && _formatting$inlineMar6.keyboard),
        subscript: !!((_formatting$inlineMar7 = formatting.inlineMarks) !== null && _formatting$inlineMar7 !== void 0 && _formatting$inlineMar7.subscript),
        superscript: !!((_formatting$inlineMar8 = formatting.inlineMarks) !== null && _formatting$inlineMar8 !== void 0 && _formatting$inlineMar8.superscript)
      },
      listTypes: formatting.listTypes === true ? {
        ordered: true,
        unordered: true
      } : {
        ordered: !!((_formatting$listTypes = formatting.listTypes) !== null && _formatting$listTypes !== void 0 && _formatting$listTypes.ordered),
        unordered: !!((_formatting$listTypes2 = formatting.listTypes) !== null && _formatting$listTypes2 !== void 0 && _formatting$listTypes2.unordered)
      },
      softBreaks: !!formatting.softBreaks
    },
    links: !!config.links,
    layouts: [...new Set((config.layouts || []).map(x => JSON.stringify(x)))].map(x => JSON.parse(x)),
    dividers: !!config.dividers,
    images: imagesConfig === undefined ? false : {
      ...imagesConfig,
      schema: {
        alt: (_imagesConfig$schema$ = (_imagesConfig$schema = imagesConfig.schema) === null || _imagesConfig$schema === void 0 ? void 0 : _imagesConfig$schema.alt) !== null && _imagesConfig$schema$ !== void 0 ? _imagesConfig$schema$ : defaultAltField$1,
        title: (_imagesConfig$schema$2 = (_imagesConfig$schema2 = imagesConfig.schema) === null || _imagesConfig$schema2 === void 0 ? void 0 : _imagesConfig$schema2.title) !== null && _imagesConfig$schema$2 !== void 0 ? _imagesConfig$schema$2 : emptyTitleField$1
      }
    },
    tables: !!config.tables
  };
}

/**
 * @deprecated `fields.markdoc` has superseded this field. `fields.mdx` is also available if you prefer MDX.
 */
function document$1({
  label,
  componentBlocks = {},
  description,
  ...documentFeaturesConfig
}) {
  const documentFeatures = normaliseDocumentFeatures(documentFeaturesConfig);
  return {
    kind: 'form',
    formKind: 'content',
    defaultValue() {
      return [{
        type: 'paragraph',
        children: [{
          text: ''
        }]
      }];
    },
    Input(props) {
      return /*#__PURE__*/jsx(DocumentFieldInput$1, {
        componentBlocks: componentBlocks,
        description: description,
        label: label,
        documentFeatures: documentFeatures,
        ...props
      });
    },
    parse(_, data) {
      const markdoc = textDecoder$1.decode(data.content);
      const document = fromMarkdoc(parse(markdoc), componentBlocks);
      return deserializeFiles(normalizeDocumentFieldChildren(documentFeatures, componentBlocks, document), componentBlocks, data.other, data.external, 'edit', documentFeatures, data.slug);
    },
    contentExtension: '.mdoc',
    validate(value) {
      return value;
    },
    directories: [...collectDirectoriesUsedInSchema(object(Object.fromEntries(Object.entries(componentBlocks).map(([name, block]) => [name, object(block.schema)])))), ...(typeof documentFeatures.images === 'object' && typeof documentFeatures.images.directory === 'string' ? [fixPath(documentFeatures.images.directory)] : [])],
    serialize(value, opts) {
      return serializeMarkdoc(value, opts, componentBlocks, documentFeatures);
    },
    reader: {
      parse(value, data) {
        const markdoc = textDecoder$1.decode(data.content);
        const document = fromMarkdoc(parse(markdoc), componentBlocks);
        return deserializeFiles(document, componentBlocks, new Map(), new Map(), 'read', documentFeatures, undefined);
      }
    }
  };
}

const classes = {
  blockParent: 'ProseMirror-blockParent',
  focused: 'ProseMirror-focused',
  hideselection: 'ProseMirror-hideselection',
  nodeInSelection: 'ProseMirror-nodeInSelection',
  nodeSelection: 'ProseMirror-selectednode',
  placeholder: 'ProseMirror-placeholder'
};
function weakMemoize(func) {
  const cache = new WeakMap();
  return arg => {
    if (cache.has(arg)) {
      return cache.get(arg);
    }
    const result = func(arg);
    cache.set(arg, result);
    return result;
  };
}
let maskColor = tokenSchema.color.background.canvas;
let borderColor = tokenSchema.color.alias.borderSelected;
let borderSize = tokenSchema.size.border.medium;
let circleSize = tokenSchema.size.space.regular;
injectGlobal({
  '.prosemirror-dropcursor-block': {
    '&::before, &::after': {
      backgroundColor: maskColor,
      border: `${borderSize} solid ${borderColor}`,
      borderRadius: '50%',
      content: '" "',
      height: circleSize,
      position: 'absolute',
      width: circleSize,
      top: `calc(${circleSize} / -2 - ${borderSize} / 2)`
    },
    '&::before': {
      left: `calc(${circleSize} * -1)`
    },
    '&::after': {
      right: `calc(${circleSize} * -1)`
    }
  }
});

// void elements cannot have pseudo-elements so we need to style them differently
const voidElements = ['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'link', 'meta', 'param', 'source', 'track', 'wbr'];
const prosemirrorStyles = css`
  /* Provide our own selection indicator */
  .${classes.nodeSelection} {
    position: relative;
  }
  .${classes.nodeSelection}::after {
    background-color: ${tokenSchema.color.alias.backgroundSelected};
    border-radius: ${tokenSchema.size.radius.small};
    content: '';
    inset: calc(${tokenSchema.size.alias.focusRingGap} * -1);
    pointer-events: none;
    position: absolute;
  }
  .${classes.nodeSelection}:is(${voidElements.join(', ')}) {
    outline: ${tokenSchema.size.alias.focusRing} solid
      ${tokenSchema.color.border.accent};
    outline-offset: ${tokenSchema.size.alias.focusRingGap};
  }
  .${classes.hideselection} *::selection {
    background: transparent;
  }
  .${classes.hideselection} *::-moz-selection {
    background: transparent;
  }
  .${classes.hideselection} {
    caret-color: transparent;
  }

  /* Style the placeholder element */
  .${classes.placeholder} {
    color: ${tokenSchema.color.foreground.neutralTertiary};
    pointer-events: none;
  }

  /* Protect against generic img rules */
  img.ProseMirror-separator {
    display: inline !important;
    border: none !important;
    margin: 0 !important;
  }

  /* Provide an indicator for focusing places that don't allow regular selection */
  .ProseMirror-gapcursor {
    display: none;
    pointer-events: none;
    position: absolute;
  }
  .ProseMirror-gapcursor:after {
    content: '';
    display: block;
    position: absolute;
    top: -2px;
    width: 20px;
    border-top: 1px solid black;
    animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;
  }

  @keyframes ProseMirror-cursor-blink {
    to {
      visibility: hidden;
    }
  }

  .ProseMirror-focused .ProseMirror-gapcursor {
    display: block;
  }
  .ProseMirror > .ProseMirror-yjs-cursor:first-child {
    margin-top: 16px;
  }
  /* This gives the remote user caret. The colors are automatically overwritten*/
  .ProseMirror-yjs-cursor {
    position: relative;
    margin-left: -1px;
    margin-right: -1px;
    border-left: 1px solid black;
    border-right: 1px solid black;
    border-color: orange;
    word-break: normal;
    pointer-events: none;
  }
  /* This renders the username above the caret */
  .ProseMirror-yjs-cursor > div {
    position: absolute;
    top: -1.05em;
    left: -1px;
    font-size: 13px;
    background-color: rgb(250, 129, 0);
    font-family: ${tokenSchema.typography.fontFamily.base};
    font-style: normal;
    font-weight: normal;
    line-height: normal;
    user-select: none;
    color: white;
    padding-left: 2px;
    padding-right: 2px;
    white-space: nowrap;
  }
`;
function useEventCallback(callback) {
  const callbackRef = useRef(callback);
  const cb = useCallback((...args) => {
    return callbackRef.current(...args);
  }, []);
  useEffect(() => {
    callbackRef.current = callback;
  });
  return cb;
}

function insertNode(nodeType) {
  return (state, dispatch) => {
    if (state.selection instanceof NodeSelection && state.selection.node.type === nodeType) {
      return false;
    }
    if (dispatch) {
      dispatch(state.tr.replaceSelectionWith(nodeType.createAndFill()));
    }
    return true;
  };
}
function toggleCodeBlock(codeBlock, paragraph) {
  return (state, dispatch, view) => {
    const codeBlockPositions = [];
    for (const range of state.selection.ranges) {
      state.doc.nodesBetween(range.$from.pos, range.$to.pos, (node, pos) => {
        if (node.type === codeBlock) {
          codeBlockPositions.push([pos, pos + node.nodeSize]);
        }
      });
    }
    if (!codeBlockPositions.length) {
      return setBlockType(codeBlock)(state, dispatch, view);
    }
    if (dispatch) {
      const tr = state.tr;
      for (const [start, end] of codeBlockPositions) {
        tr.setBlockType(start, end, paragraph);
      }
      dispatch(tr);
    }
    return true;
  };
}
function insertTable(tableType) {
  const rowType = tableType.contentMatch.defaultType;
  const cellType = rowType.contentMatch.defaultType;
  const headerType = getEditorSchema(tableType.schema).nodes.table_header;
  return (state, dispatch) => {
    const header = headerType.createAndFill();
    const cell = cellType.createAndFill();
    const headerRow = rowType.create(undefined, [header, header, header]);
    const row = rowType.create(undefined, [cell, cell, cell]);
    dispatch === null || dispatch === void 0 || dispatch(state.tr.replaceSelectionWith(tableType.create(undefined, [headerRow, row, row])));
    return true;
  };
}

// https://github.com/ProseMirror/prosemirror-schema-list/blob/d017648e4f4472076599aa12ec839ae222e6e1b5/src/schema-list.ts
function findParentList(range, listItemType) {
  for (let d = range.depth; d > 0; d--) {
    let parent = range.$from.node(d);
    if (parent.type.contentMatch.defaultType === listItemType) {
      return {
        node: parent,
        pos: range.$from.before(d)
      };
    }
  }
}
function toggleList(listType, attrs = null) {
  const listItemType = listType.contentMatch.defaultType;
  return function (state, dispatch) {
    let {
      $from,
      $to
    } = state.selection;
    let range = $from.blockRange($to),
      doJoin = false,
      outerRange = range;
    if (!range) return false;
    const parentList = findParentList(range, listItemType);
    if ((parentList === null || parentList === void 0 ? void 0 : parentList.node.type) == listType) {
      return liftListItem(listItemType)(state, dispatch);
    }
    if (parentList && parentList.node.type !== listType) {
      if (dispatch) {
        dispatch(state.tr.setNodeMarkup(parentList.pos, listType, attrs).scrollIntoView());
      }
      return true;
    }
    // This is at the top of an existing list item
    if (range.depth >= 2 && $from.node(range.depth - 1).type.compatibleContent(listType) && range.startIndex == 0) {
      // Don't do anything if this is the top of the list
      if ($from.index(range.depth - 1) == 0) return false;
      let $insert = state.doc.resolve(range.start - 2);
      outerRange = new NodeRange($insert, $insert, range.depth);
      if (range.endIndex < range.parent.childCount) {
        range = new NodeRange($from, state.doc.resolve($to.end(range.depth)), range.depth);
      }
      doJoin = true;
    }
    let wrap = findWrapping(outerRange, listType, attrs, range);
    if (!wrap) return false;
    if (dispatch) {
      dispatch(doWrapInList(state.tr, range, wrap, doJoin, listType).scrollIntoView());
    }
    return true;
  };
}
function doWrapInList(tr, range, wrappers, joinBefore, listType) {
  let content = Fragment$2.empty;
  for (let i = wrappers.length - 1; i >= 0; i--) {
    content = Fragment$2.from(wrappers[i].type.create(wrappers[i].attrs, content));
  }
  tr.step(new ReplaceAroundStep(range.start - (joinBefore ? 2 : 0), range.end, range.start, range.end, new Slice(content, 0, 0), wrappers.length, true));
  let found = 0;
  for (let i = 0; i < wrappers.length; i++) {
    if (wrappers[i].type == listType) found = i + 1;
  }
  let splitDepth = wrappers.length - found;
  let splitPos = range.start + wrappers.length - (joinBefore ? 2 : 0),
    parent = range.parent;
  for (let i = range.startIndex, e = range.endIndex, first = true; i < e; i++, first = false) {
    if (!first && canSplit(tr.doc, splitPos, splitDepth)) {
      tr.split(splitPos, splitDepth);
      splitPos += 2 * splitDepth;
    }
    splitPos += parent.child(i).nodeSize;
  }
  return tr;
}

/// Build a command that splits a non-empty textblock at the top level
/// of a list item by also splitting that list item.
function splitListItem(itemType) {
  return function (state, dispatch) {
    let {
      $from,
      $to,
      node
    } = state.selection;
    if (node && node.isBlock || $from.depth < 2 || !$from.sameParent($to)) {
      return false;
    }
    let grandParent = $from.node(-1);
    if (grandParent.type != itemType) return false;
    if ($from.parent.content.size == 0 && $from.node(-1).childCount == $from.indexAfter(-1)) {
      // In an empty block. If this is a nested list, the wrapping
      // list item should be split. Otherwise, bail out and let next
      // command handle lifting.
      if ($from.depth == 3 || $from.node(-3).type != itemType || $from.index(-2) != $from.node(-2).childCount - 1) {
        return false;
      }
      if (dispatch) {
        let wrap = Fragment$2.empty;
        let depthBefore = $from.index(-1) ? 1 : $from.index(-2) ? 2 : 3;
        // Build a fragment containing empty versions of the structure
        // from the outer list item to the parent node of the cursor
        for (let d = $from.depth - depthBefore; d >= $from.depth - 3; d--) {
          wrap = Fragment$2.from($from.node(d).copy(wrap));
        }
        let depthAfter = $from.indexAfter(-1) < $from.node(-2).childCount ? 1 : $from.indexAfter(-2) < $from.node(-3).childCount ? 2 : 3;
        // Add a second list item with an empty default start node
        wrap = wrap.append(Fragment$2.from(itemType.createAndFill()));
        let start = $from.before($from.depth - (depthBefore - 1));
        let tr = state.tr.replace(start, $from.after(-depthAfter), new Slice(wrap, 4 - depthBefore, 0));
        let sel = -1;
        tr.doc.nodesBetween(start, tr.doc.content.size, (node, pos) => {
          if (sel > -1) return false;
          if (node.isTextblock && node.content.size == 0) sel = pos + 1;
        });
        if (sel > -1) tr.setSelection(Selection.near(tr.doc.resolve(sel)));
        dispatch(tr.scrollIntoView());
      }
      return true;
    }
    let nextType = $to.pos == $from.end() ? grandParent.contentMatchAt(0).defaultType : null;
    let tr = state.tr.delete($from.pos, $to.pos);
    let types = nextType ? [null, {
      type: nextType
    }] : undefined;
    if (!canSplit(tr.doc, $from.pos, 2, types)) return false;
    if (dispatch) dispatch(tr.split($from.pos, 2, types).scrollIntoView());
    return true;
  };
}

/// Create a command to lift the list item around the selection up into
/// a wrapping list.
function liftListItem(itemType) {
  return function (state, dispatch) {
    let {
      $from,
      $to
    } = state.selection;
    let range = $from.blockRange($to, node => node.childCount > 0 && node.firstChild.type == itemType);
    if (!range) return false;
    if (!dispatch) return true;
    if ($from.node(range.depth - 1).type == itemType) {
      // Inside a parent list
      return liftToOuterList(state, dispatch, itemType, range);
    } // Outer list node
    else {
      return liftOutOfList(state, dispatch, range);
    }
  };
}
function liftToOuterList(state, dispatch, itemType, range) {
  let tr = state.tr,
    end = range.end,
    endOfList = range.$to.end(range.depth);
  if (end < endOfList) {
    // There are siblings after the lifted items, which must become
    // children of the last item
    tr.step(new ReplaceAroundStep(end - 1, endOfList, end, endOfList, new Slice(Fragment$2.from(itemType.create(null, range.parent.copy())), 1, 0), 1, true));
    range = new NodeRange(tr.doc.resolve(range.$from.pos), tr.doc.resolve(endOfList), range.depth);
  }
  const target = liftTarget(range);
  if (target == null) return false;
  tr.lift(range, target);
  let after = tr.mapping.map(end, -1) - 1;
  if (canJoin(tr.doc, after)) tr.join(after);
  dispatch(tr.scrollIntoView());
  return true;
}
function liftOutOfList(state, dispatch, range) {
  let tr = state.tr,
    list = range.parent;
  // Merge the list items into a single big item
  for (let pos = range.end, i = range.endIndex - 1, e = range.startIndex; i > e; i--) {
    pos -= list.child(i).nodeSize;
    tr.delete(pos - 1, pos + 1);
  }
  let $start = tr.doc.resolve(range.start),
    item = $start.nodeAfter;
  if (tr.mapping.map(range.end) != range.start + $start.nodeAfter.nodeSize) {
    return false;
  }
  let atStart = range.startIndex == 0,
    atEnd = range.endIndex == list.childCount;
  let parent = $start.node(-1),
    indexBefore = $start.index(-1);
  if (!parent.canReplace(indexBefore + (atStart ? 0 : 1), indexBefore + 1, item.content.append(atEnd ? Fragment$2.empty : Fragment$2.from(list)))) {
    return false;
  }
  let start = $start.pos,
    end = start + item.nodeSize;
  // Strip off the surrounding list. At the sides where we're not at
  // the end of the list, the existing list is closed. At sides where
  // this is the end, it is overwritten to its end.
  tr.step(new ReplaceAroundStep(start - (atStart ? 1 : 0), end + (atEnd ? 1 : 0), start + 1, end - 1, new Slice((atStart ? Fragment$2.empty : Fragment$2.from(list.copy(Fragment$2.empty))).append(atEnd ? Fragment$2.empty : Fragment$2.from(list.copy(Fragment$2.empty))), atStart ? 0 : 1, atEnd ? 0 : 1), atStart ? 0 : 1));
  dispatch(tr.scrollIntoView());
  return true;
}

/// Create a command to sink the list item around the selection down
/// into an inner list.
function sinkListItem(itemType) {
  return function (state, dispatch) {
    let {
      $from,
      $to
    } = state.selection;
    let range = $from.blockRange($to, node => node.childCount > 0 && node.firstChild.type == itemType);
    if (!range) return false;
    let startIndex = range.startIndex;
    if (startIndex == 0) return false;
    let parent = range.parent,
      nodeBefore = parent.child(startIndex - 1);
    if (nodeBefore.type != itemType) return false;
    if (dispatch) {
      let nestedBefore = nodeBefore.lastChild && nodeBefore.lastChild.type == parent.type;
      let inner = Fragment$2.from(nestedBefore ? itemType.create() : null);
      let slice = new Slice(Fragment$2.from(itemType.create(null, Fragment$2.from(parent.type.create(null, inner)))), nestedBefore ? 3 : 1, 0);
      let before = range.start,
        after = range.end;
      dispatch(state.tr.step(new ReplaceAroundStep(before - (nestedBefore ? 3 : 1), after, before, after, slice, 1, true)).scrollIntoView());
    }
    return true;
  };
}

// https://github.com/ProseMirror/prosemirror-gapcursor/blob/bbbee7d483754310f63f3b18d81f5a1da1250234/src/gapcursor.ts#L1
const independentForGapCursor = '@@independentForGapCursor';

/// Gap cursor selections are represented using this class. Its
/// `$anchor` and `$head` properties both point at the cursor position.
class GapCursor extends Selection {
  /// Create a gap cursor.
  constructor($pos) {
    super($pos, $pos);
  }
  map(doc, mapping) {
    let $pos = doc.resolve(mapping.map(this.head));
    return GapCursor.valid($pos) ? new GapCursor($pos) : Selection.near($pos);
  }
  content() {
    return Slice.empty;
  }
  eq(other) {
    return other instanceof GapCursor && other.head == this.head;
  }
  toJSON() {
    return {
      type: 'ksgapcursor',
      pos: this.head
    };
  }

  /// @internal
  static fromJSON(doc, json) {
    if (typeof json.pos != 'number') {
      throw new RangeError('Invalid input for GapCursor.fromJSON');
    }
    return new GapCursor(doc.resolve(json.pos));
  }

  /// @internal
  getBookmark() {
    return new GapBookmark(this.anchor);
  }

  /// @internal
  static valid($pos) {
    let parent = $pos.parent;
    if (parent.isTextblock || !closedBefore($pos) || !closedAfter($pos)) {
      return false;
    }
    let override = parent.type.spec.allowGapCursor;
    if (override != null) return override;
    let deflt = parent.contentMatchAt($pos.index()).defaultType;
    return deflt && deflt.isTextblock;
  }

  /// @internal
  static findGapCursorFrom($pos, dir, mustMove = false) {
    search: for (;;) {
      if (!mustMove && GapCursor.valid($pos)) return $pos;
      let pos = $pos.pos,
        next = null;
      // Scan up from this position
      for (let d = $pos.depth;; d--) {
        let parent = $pos.node(d);
        if (dir > 0 ? $pos.indexAfter(d) < parent.childCount : $pos.index(d) > 0) {
          next = parent.child(dir > 0 ? $pos.indexAfter(d) : $pos.index(d) - 1);
          break;
        } else if (d == 0) {
          return null;
        }
        pos += dir;
        let $cur = $pos.doc.resolve(pos);
        if (GapCursor.valid($cur)) return $cur;
      }

      // And then down into the next node
      for (;;) {
        let inside = dir > 0 ? next.firstChild : next.lastChild;
        if (!inside) {
          if (next.isAtom && !next.isText && !NodeSelection.isSelectable(next)) {
            $pos = $pos.doc.resolve(pos + next.nodeSize * dir);
            mustMove = false;
            continue search;
          }
          break;
        }
        next = inside;
        pos += dir;
        let $cur = $pos.doc.resolve(pos);
        if (GapCursor.valid($cur)) return $cur;
      }
      return null;
    }
  }
}
GapCursor.prototype.visible = false;
GapCursor.findFrom = GapCursor.findGapCursorFrom;

// this will often error because of hot module reloading
// we can just ignore it
try {
  Selection.jsonID('ksgapcursor', GapCursor);
} catch {}
class GapBookmark {
  constructor(pos) {
    this.pos = pos;
  }
  map(mapping) {
    return new GapBookmark(mapping.map(this.pos));
  }
  resolve(doc) {
    let $pos = doc.resolve(this.pos);
    return GapCursor.valid($pos) ? new GapCursor($pos) : Selection.near($pos);
  }
}
function closedBefore($pos) {
  for (let d = $pos.depth; d >= 0; d--) {
    let index = $pos.index(d),
      parent = $pos.node(d);
    // At the start of this parent, look at next one
    if (index == 0) {
      if (parent.type.spec.isolating) return true;
      continue;
    }
    // See if the node before (or its first ancestor) is closed
    for (let before = parent.child(index - 1);; before = before.lastChild) {
      if (before.childCount == 0 && !before.inlineContent || before.isAtom || before.type.spec.isolating || before.type.spec[independentForGapCursor]) {
        return true;
      }
      if (before.inlineContent) return false;
    }
  }
  // Hit start of document
  return true;
}
function closedAfter($pos) {
  for (let d = $pos.depth; d >= 0; d--) {
    let index = $pos.indexAfter(d),
      parent = $pos.node(d);
    if (index == parent.childCount) {
      if (parent.type.spec.isolating) return true;
      continue;
    }
    for (let after = parent.child(index);; after = after.firstChild) {
      if (after.childCount == 0 && !after.inlineContent || after.isAtom || after.type.spec.isolating || after.type.spec[independentForGapCursor]) {
        return true;
      }
      if (after.inlineContent) return false;
    }
  }
  return true;
}

function FormValue(props) {
  const stringFormatter = useLocalizedStringFormatter(strings);
  const formId = useId();
  const [forceValidation, setForceValidation] = useState(false);
  const [state, setState] = useState(props.value);
  const previewProps = useMemo(() => createGetPreviewProps(props.schema, setState, () => undefined), [props.schema])(state);
  const {
    dismiss
  } = useDialogContainer();
  return /*#__PURE__*/jsxs(Fragment, {
    children: [/*#__PURE__*/jsx(Content, {
      children: /*#__PURE__*/jsx(Flex, {
        id: formId,
        elementType: "form",
        onSubmit: event => {
          if (event.target !== event.currentTarget) return;
          event.preventDefault();
          if (!clientSideValidateProp(props.schema, state, undefined)) {
            setForceValidation(true);
          } else {
            props.onSave(state);
            dismiss();
          }
        },
        direction: "column",
        gap: "xxlarge",
        children: /*#__PURE__*/jsx(FormValueContentFromPreviewProps, {
          ...previewProps,
          forceValidation: forceValidation
        })
      })
    }), /*#__PURE__*/jsxs(ButtonGroup, {
      children: [/*#__PURE__*/jsx(Button, {
        onPress: dismiss,
        children: stringFormatter.format('cancel')
      }), /*#__PURE__*/jsx(Button, {
        form: formId,
        prominence: "high",
        type: "submit",
        children: "Done"
      })]
    })]
  });
}

function deserializeProps$1(fields, value, state) {
  try {
    return parseProps({
      kind: 'object',
      fields
    }, value, [], [], (schema, value) => {
      if (schema.formKind === 'asset') {
        var _state$otherFiles$get;
        const filename = schema.filename(value, {
          slug: state.slug,
          suggestedFilenamePrefix: undefined
        });
        return schema.parse(value, {
          asset: filename ? schema.directory ? (_state$otherFiles$get = state.otherFiles.get(schema.directory)) === null || _state$otherFiles$get === void 0 ? void 0 : _state$otherFiles$get.get(filename) : state.extraFiles.get(filename) : undefined,
          slug: state.slug
        });
      }
      if (schema.formKind === 'assets') {
        // TODO: unlike content fields, implementing this is realistic
        // there are few things to work out in terms of where extra files are stored though
        // and i think multiline strings in Markdoc attributes might be broken
        throw new Error('Not implemented');
      }
      if (schema.formKind === 'content') {
        throw new Error('Not implemented');
      }
      return schema.parse(value, undefined);
    }, false);
  } catch (err) {
    throw new Error(formatFormDataError(err));
  }
}
function toSerialized(deserialized, schema) {
  const serialized = serializeProps$1(deserialized, {
    kind: 'object',
    fields: schema
  }, undefined, undefined, false);
  return {
    value: serialized.value,
    extraFiles: serialized.extraFiles.map(x => ({
      ...x,
      contents: x.contents
    }))
  };
}
function deserializeValue(value, schema) {
  const files = new Map();
  const extraFiles = new Map();
  for (const file of value.extraFiles) {
    if (file.parent) {
      if (!extraFiles.has(file.parent)) {
        extraFiles.set(file.parent, new Map());
      }
      extraFiles.get(file.parent).set(file.path, file.contents);
    } else {
      files.set(file.path, file.contents);
    }
  }
  return deserializeProps$1(schema, value.value, {
    slug: undefined,
    extraFiles: files,
    otherFiles: extraFiles
  });
}
function internalToSerialized(fields, value, state) {
  const deserialized = deserializeValue(value, fields);
  const serialized = serializeProps$1(deserialized, {
    kind: 'object',
    fields
  }, undefined, state.slug, false);
  for (const file of serialized.extraFiles) {
    if (file.parent) {
      if (!state.otherFiles.has(file.parent)) {
        state.otherFiles.set(file.parent, new Map());
      }
      state.otherFiles.get(file.parent).set(file.path, file.contents);
    } else {
      state.extraFiles.set(file.path, file.contents);
    }
  }
  return serialized.value;
}
const useDeserializedValue = function useDeserializedValue(value, schema) {
  const $ = c(3);
  let t0;
  let t1;
  if ($[0] !== value || $[1] !== schema) {
    t1 = deserializeValue(value, schema);
    $[0] = value;
    $[1] = schema;
    $[2] = t1;
  } else {
    t1 = $[2];
  }
  t0 = t1;
  return t0;
};

function serializeProps(props) {
  return JSON.stringify({
    value: props.value,
    extraFiles: props.extraFiles.map(x => ({
      path: x.path,
      parent: x.parent,
      contents: base64UrlEncode(x.contents)
    }))
  });
}
function deserializeProps(node) {
  if (typeof node === 'string') return false;
  const serialized = node.dataset.props;
  if (!serialized) return false;
  try {
    const parsed = JSON.parse(serialized);
    return {
      props: {
        value: parsed.value,
        extraFiles: parsed.extraFiles.map(x => ({
          path: x.path,
          parent: x.parent,
          contents: base64UrlDecode(x.contents)
        }))
      }
    };
  } catch {
    return false;
  }
}
function BlockWrapper(props) {
  const $ = c(37);
  const [isOpen, setIsOpen] = useState(false);
  const runCommand = useEditorDispatchCommand();
  let t0;
  let t1;
  if ($[0] !== props.component.schema) {
    t1 = {
      kind: "object",
      fields: props.component.schema
    };
    $[0] = props.component.schema;
    $[1] = t1;
  } else {
    t1 = $[1];
  }
  t0 = t1;
  const schema = t0;
  const value = useDeserializedValue(props.node.attrs.props, props.component.schema);
  const t2 = `${classes.blockParent} ${css$1({
    marginBlock: "1em",
    position: "relative",
    ...(props.hasNodeSelection ? {
      "&::after": {
        backgroundColor: tokenSchema.color.alias.backgroundSelected,
        borderRadius: tokenSchema.size.radius.regular,
        content: "''",
        inset: 0,
        pointerEvents: "none",
        position: "absolute"
      }
    } : {})
  })}${props.hasNodeSelection ? ` ${classes.hideselection}` : ""}`;
  const t3 = props.hasNodeSelection ? "color.alias.borderSelected" : "color.alias.borderDisabled";
  const t4 = props.hasNodeSelection ? "color.alias.backgroundSelected" : "color.alias.backgroundIdle";
  const t5 = props.hasNodeSelection ? tokenSchema.color.foreground.accent : tokenSchema.color.foreground.neutralTertiary;
  let t6;
  if ($[2] !== t5) {
    t6 = css$1({
      color: t5,
      textTransform: "uppercase",
      fontWeight: tokenSchema.typography.fontWeight.semibold,
      fontSize: "0.9rem"
    });
    $[2] = t5;
    $[3] = t6;
  } else {
    t6 = $[3];
  }
  let t7;
  if ($[4] !== runCommand || $[5] !== props) {
    t7 = () => {
      runCommand((state, dispatch) => {
        if (dispatch) {
          dispatch(state.tr.setSelection(NodeSelection.create(state.doc, props.getPos())));
        }
        return true;
      });
    };
    $[4] = runCommand;
    $[5] = props;
    $[6] = t7;
  } else {
    t7 = $[6];
  }
  let t8;
  if ($[7] !== t6 || $[8] !== t7 || $[9] !== props.component.label) {
    t8 = /*#__PURE__*/jsx(Box, {
      flex: 1,
      paddingX: "regular",
      paddingY: "small",
      UNSAFE_className: t6,
      onClick: t7,
      children: props.component.label
    });
    $[7] = t6;
    $[8] = t7;
    $[9] = props.component.label;
    $[10] = t8;
  } else {
    t8 = $[10];
  }
  let t9;
  if ($[11] !== props.component.schema) {
    t9 = !!Object.keys(props.component.schema).length && /*#__PURE__*/jsx(Button, {
      prominence: "low",
      onPress: () => {
        setIsOpen(true);
      },
      UNSAFE_className: css$1({
        borderBottomRightRadius: 0
      }),
      children: "Edit"
    });
    $[11] = props.component.schema;
    $[12] = t9;
  } else {
    t9 = $[12];
  }
  let t10;
  if ($[13] !== t4 || $[14] !== t8 || $[15] !== props.toolbar || $[16] !== t9) {
    t10 = /*#__PURE__*/jsxs(Flex, {
      backgroundColor: t4,
      contentEditable: false,
      alignItems: "center",
      "data-ignore-content": "",
      children: [t8, props.toolbar, t9]
    });
    $[13] = t4;
    $[14] = t8;
    $[15] = props.toolbar;
    $[16] = t9;
    $[17] = t10;
  } else {
    t10 = $[17];
  }
  let t11;
  if ($[18] !== props.children) {
    t11 = /*#__PURE__*/jsx(Box, {
      padding: "regular",
      children: props.children
    });
    $[18] = props.children;
    $[19] = t11;
  } else {
    t11 = $[19];
  }
  let t12;
  if ($[20] !== t2 || $[21] !== t3 || $[22] !== t10 || $[23] !== t11) {
    t12 = /*#__PURE__*/jsxs(Box, {
      UNSAFE_className: t2,
      border: t3,
      borderRadius: "regular",
      children: [t10, t11]
    });
    $[20] = t2;
    $[21] = t3;
    $[22] = t10;
    $[23] = t11;
    $[24] = t12;
  } else {
    t12 = $[24];
  }
  let t13;
  if ($[25] === Symbol.for("react.memo_cache_sentinel")) {
    t13 = () => {
      setIsOpen(false);
    };
    $[25] = t13;
  } else {
    t13 = $[25];
  }
  let t14;
  if ($[26] !== isOpen || $[27] !== props || $[28] !== runCommand || $[29] !== schema || $[30] !== value) {
    t14 = isOpen && /*#__PURE__*/jsxs(Dialog, {
      children: [/*#__PURE__*/jsxs(Heading, {
        children: ["Edit ", props.component.label]
      }), /*#__PURE__*/jsx(FormValue, {
        schema: schema,
        value: value,
        onSave: value_0 => {
          runCommand((state_0, dispatch_0) => {
            if (dispatch_0) {
              dispatch_0(state_0.tr.setNodeAttribute(props.getPos(), "props", toSerialized(value_0, schema.fields)));
            }
            return true;
          });
        }
      })]
    });
    $[26] = isOpen;
    $[27] = props;
    $[28] = runCommand;
    $[29] = schema;
    $[30] = value;
    $[31] = t14;
  } else {
    t14 = $[31];
  }
  let t15;
  if ($[32] !== t14) {
    t15 = /*#__PURE__*/jsx(DialogContainer, {
      onDismiss: t13,
      children: t14
    });
    $[32] = t14;
    $[33] = t15;
  } else {
    t15 = $[33];
  }
  let t16;
  if ($[34] !== t12 || $[35] !== t15) {
    t16 = /*#__PURE__*/jsxs(Fragment, {
      children: [t12, t15]
    });
    $[34] = t12;
    $[35] = t15;
    $[36] = t16;
  } else {
    t16 = $[36];
  }
  return t16;
}
function getCustomNodeSpecs(components) {
  const componentNames = new Map(Object.keys(components).map((name, i) => [name, `component${i}`]));
  return Object.fromEntries(Object.entries(components).flatMap(([name, component]) => {
    let spec;
    const schema = {
      kind: 'object',
      fields: component.schema
    };
    if (component.kind === 'block') {
      spec = {
        group: `${component.forSpecificLocations ? '' : 'block '}${componentNames.get(name)}`,
        defining: true,
        attrs: {
          props: {
            default: toSerialized(getInitialPropsValue(schema), schema.fields)
          }
        },
        reactNodeView: {
          component: function Block(props) {
            const runCommand = useEditorDispatchCommand();
            const value = useDeserializedValue(props.node.attrs.props, component.schema);
            return 'NodeView' in component && component.NodeView ? /*#__PURE__*/jsx(component.NodeView, {
              isSelected: props.hasNodeSelection || props.isNodeCompletelyWithinSelection,
              onRemove: () => {
                runCommand((state, dispatch) => {
                  if (dispatch) {
                    const pos = props.getPos();
                    dispatch(state.tr.delete(pos, pos + props.node.nodeSize));
                  }
                  return true;
                });
              },
              onChange: value => {
                runCommand((state, dispatch) => {
                  if (dispatch) {
                    dispatch(state.tr.setNodeAttribute(props.getPos(), 'props', toSerialized(value, schema.fields)));
                  }
                  return true;
                });
              },
              value: value
            }) : /*#__PURE__*/jsx(BlockWrapper, {
              node: props.node,
              hasNodeSelection: props.hasNodeSelection || props.isNodeCompletelyWithinSelection,
              component: component,
              getPos: props.getPos,
              children: 'ContentView' in component && component.ContentView && /*#__PURE__*/jsx(component.ContentView, {
                value: value
              })
            });
          },
          rendersOwnContent: false
        },
        parseDOM: [{
          tag: `div[data-component="${name}"]`,
          getAttrs(node) {
            if (typeof node === 'string') return false;
            return deserializeProps(node);
          }
        }],
        toDOM(node) {
          return ['div', {
            'data-component': name,
            'data-props': serializeProps(node.attrs.props)
          }];
        },
        insertMenu: component.forSpecificLocations ? undefined : {
          label: component.label,
          command: insertNode,
          forToolbar: true,
          description: component.description,
          icon: component.icon
        }
      };
    } else if (component.kind === 'wrapper') {
      spec = {
        group: `${component.forSpecificLocations ? '' : 'block '}${componentNames.get(name)}`,
        content: 'block+',
        defining: true,
        attrs: {
          props: {
            default: toSerialized(getInitialPropsValue(schema), schema.fields)
          }
        },
        reactNodeView: {
          component: function Block(props) {
            const runCommand = useEditorDispatchCommand();
            const value = useDeserializedValue(props.node.attrs.props, component.schema);
            return 'NodeView' in component && component.NodeView ? /*#__PURE__*/jsx(component.NodeView, {
              isSelected: props.hasNodeSelection || props.isNodeCompletelyWithinSelection,
              onRemove: () => {
                runCommand((state, dispatch) => {
                  if (dispatch) {
                    const pos = props.getPos();
                    dispatch(state.tr.delete(pos, pos + props.node.nodeSize));
                  }
                  return true;
                });
              },
              onChange: value => {
                runCommand((state, dispatch) => {
                  if (dispatch) {
                    dispatch(state.tr.setNodeAttribute(props.getPos(), 'props', toSerialized(value, schema.fields)));
                  }
                  return true;
                });
              },
              value: value,
              children: props.children
            }) : /*#__PURE__*/jsx(BlockWrapper, {
              node: props.node,
              hasNodeSelection: props.hasNodeSelection || props.isNodeCompletelyWithinSelection,
              component: component,
              getPos: props.getPos,
              children: 'ContentView' in component && component.ContentView ? /*#__PURE__*/jsx(component.ContentView, {
                value: value,
                children: props.children
              }) : props.children
            });
          },
          rendersOwnContent: false
        },
        toDOM(node) {
          return ['div', {
            'data-component': name,
            'data-props': serializeProps(node.attrs.props)
          }, 0];
        },
        parseDOM: [{
          tag: `div[data-component="${name}"]`,
          getAttrs: deserializeProps
        }],
        insertMenu: component.forSpecificLocations ? undefined : {
          label: component.label,
          command: insertNode,
          forToolbar: true,
          description: component.description,
          icon: component.icon
        }
      };
    } else if (component.kind === 'inline') {
      spec = {
        group: 'inline',
        inline: true,
        attrs: {
          props: {
            default: toSerialized(getInitialPropsValue(schema), schema.fields)
          }
        },
        toDOM: node => ['span', {
          'data-component': name,
          'data-props': serializeProps(node.attrs.props)
        }],
        parseDOM: [{
          tag: `span[data-component="${name}"]`,
          getAttrs: deserializeProps
        }],
        reactNodeView: {
          component: function Inline(props) {
            const value = useDeserializedValue(props.node.attrs.props, component.schema);
            const runCommand = useEditorDispatchCommand();
            if ('NodeView' in component && component.NodeView) {
              return /*#__PURE__*/jsx("span", {
                contentEditable: false,
                children: /*#__PURE__*/jsx(component.NodeView, {
                  value: value,
                  onChange: value => {
                    runCommand((state, dispatch) => {
                      if (dispatch) {
                        dispatch(state.tr.setNodeAttribute(props.getPos(), 'props', toSerialized(value, schema.fields)));
                      }
                      return true;
                    });
                  },
                  isSelected: props.hasNodeSelection || props.isNodeCompletelyWithinSelection,
                  onRemove: () => {
                    runCommand((state, dispatch) => {
                      if (dispatch) {
                        const pos = props.getPos();
                        dispatch(state.tr.delete(pos, pos + props.node.nodeSize));
                      }
                      return true;
                    });
                  }
                })
              });
            }
            if ('ContentView' in component && component.ContentView) {
              return /*#__PURE__*/jsx(Box, {
                elementType: "span",
                contentEditable: false,
                border: props.hasNodeSelection ? 'color.alias.borderSelected' : 'color.alias.borderIdle',
                borderRadius: "regular",
                children: /*#__PURE__*/jsx(component.ContentView, {
                  value: value
                })
              });
            }
            return /*#__PURE__*/jsx(Box, {
              elementType: "span",
              contentEditable: false,
              border: props.hasNodeSelection ? 'color.alias.borderSelected' : 'color.alias.borderIdle',
              "data-component": name,
              borderRadius: "regular",
              UNSAFE_className: css$1({
                '::after': {
                  content: 'attr(data-component)'
                }
              })
            });
          },
          rendersOwnContent: false
        },
        insertMenu: {
          label: component.label,
          command: insertNode,
          forToolbar: true,
          description: component.description,
          icon: component.icon
        }
      };
    } else if (component.kind === 'repeating') {
      const items = component.children.map(x => ({
        key: x,
        label: components[x].label
      }));
      spec = {
        group: `${component.forSpecificLocations ? '' : 'block '}${componentNames.get(name)}`,
        content: `(${component.children.map(x => componentNames.get(x)).join(' | ')}){${component.validation.children.min},${component.validation.children.max === Infinity ? '' : component.validation.children.max}}`,
        defining: true,
        attrs: {
          props: {
            default: toSerialized(getInitialPropsValue(schema), schema.fields)
          }
        },
        reactNodeView: {
          component: function Block(props) {
            const runCommand = useEditorDispatchCommand();
            const value = useDeserializedValue(props.node.attrs.props, component.schema);
            return 'NodeView' in component && component.NodeView ? /*#__PURE__*/jsx(component.NodeView, {
              isSelected: props.hasNodeSelection || props.isNodeCompletelyWithinSelection,
              onRemove: () => {
                runCommand((state, dispatch) => {
                  if (dispatch) {
                    const pos = props.getPos();
                    dispatch(state.tr.delete(pos, pos + props.node.nodeSize));
                  }
                  return true;
                });
              },
              onChange: value => {
                runCommand((state, dispatch) => {
                  if (dispatch) {
                    dispatch(state.tr.setNodeAttribute(props.getPos(), 'props', toSerialized(value, schema.fields)));
                  }
                  return true;
                });
              },
              value: value,
              children: props.children
            }) : /*#__PURE__*/jsx(BlockWrapper, {
              node: props.node,
              hasNodeSelection: props.hasNodeSelection || props.isNodeCompletelyWithinSelection,
              component: component,
              getPos: props.getPos,
              toolbar: props.node.contentMatchAt(props.node.childCount).defaultType && (component.children.length === 1 ? /*#__PURE__*/jsx(Button, {
                onPress: () => {
                  runCommand((state, dispatch) => {
                    if (dispatch) {
                      dispatch(state.tr.insert(props.getPos() + props.node.nodeSize - 1, state.schema.nodes[component.children[0]].createAndFill()));
                    }
                    return true;
                  });
                },
                children: "Insert"
              }) : /*#__PURE__*/jsxs(MenuTrigger, {
                children: [/*#__PURE__*/jsx(Button, {
                  children: "Insert"
                }), /*#__PURE__*/jsx(Menu, {
                  onAction: key => {
                    runCommand((state, dispatch) => {
                      if (dispatch) {
                        dispatch(state.tr.insert(props.getPos() + props.node.nodeSize - 1, state.schema.nodes[key].createAndFill()));
                      }
                      return true;
                    });
                  },
                  items: items,
                  children: item => /*#__PURE__*/jsx(Item$4, {
                    children: item.label
                  }, item.key)
                })]
              })),
              children: 'ContentView' in component && component.ContentView ? /*#__PURE__*/jsx(component.ContentView, {
                value: value,
                children: props.children
              }) : props.children
            });
          },
          rendersOwnContent: false
        },
        toDOM(node) {
          return ['div', {
            'data-component': name,
            'data-props': serializeProps(node.attrs.props)
          }, 0];
        },
        parseDOM: [{
          tag: `div[data-component="${name}"]`,
          getAttrs: deserializeProps
        }],
        insertMenu: component.forSpecificLocations ? undefined : {
          label: component.label,
          command: insertNode,
          forToolbar: true,
          description: component.description,
          icon: component.icon
        }
      };
    }
    if (spec) {
      return [[name, spec]];
    }
    return [];
  }));
}
function getCustomMarkSpecs(components) {
  return Object.fromEntries(Object.entries(components).flatMap(([name, component]) => {
    var _component$tag;
    if (component.kind !== 'mark') return [];
    const schema = {
      kind: 'object',
      fields: component.schema
    };
    const tag = (_component$tag = component.tag) !== null && _component$tag !== void 0 ? _component$tag : 'span';
    const spec = {
      attrs: {
        props: {
          default: toSerialized(getInitialPropsValue(schema), schema.fields)
        }
      },
      toDOM(mark) {
        const element = document.createElement(tag);
        element.setAttribute('data-component', name);
        element.setAttribute('data-props', serializeProps(mark.attrs.props));
        let deserialized;
        let getDeserialized = () => {
          if (!deserialized) {
            deserialized = deserializeValue(mark.attrs.props, component.schema);
          }
          return deserialized;
        };
        if (typeof component.className === 'function') {
          element.className = component.className({
            value: getDeserialized()
          });
        } else if (typeof component.className === 'string') {
          element.className = component.className;
        }
        if (typeof component.style === 'function') {
          Object.assign(element.style, component.style({
            value: getDeserialized()
          }));
        } else if (component.style) {
          Object.assign(element.style, component.style);
        }
        return element;
      },
      parseDOM: [{
        tag: `${tag}[data-component="${name}"]`,
        getAttrs: deserializeProps
      }]
    };
    return [[name, spec]];
  }));
}

const blockElementSpacing = css({
  marginBlock: '1em'
});
const paragraphDOM = ['p', {
  class: blockElementSpacing
}, 0];
const blockquoteDOM = ['blockquote', {
  class: classNames(classes.blockParent, css({
    [`&.${classes.nodeInSelection}, &.${classes.nodeSelection}`]: {
      borderColor: tokenSchema.color.alias.borderSelected
    }
  }))
}, 0];
const dividerDOM = ['hr', {
  contenteditable: 'false',
  class: css({
    cursor: 'pointer',
    [`&.${classes.nodeInSelection}, &.${classes.nodeSelection}`]: {
      backgroundColor: tokenSchema.color.alias.borderSelected
    }
  })
}];
const codeDOM = ['pre', {
  spellcheck: 'false'
}, ['code', {}, 0]];
const hardBreakDOM = ['br'];
const olDOM = ['ol', {}, 0];
const ulDOM = ['ul', {}, 0];
const liDOM = ['li', {}, 0];
const inlineContent = `inline*`;
const levelsMeta = [{
  description: 'Use this for a top level heading',
  icon: heading1Icon
}, {
  description: 'Use this for key sections',
  icon: heading2Icon
}, {
  description: 'Use this for sub-sections',
  icon: heading3Icon
}, {
  description: 'Use this for deep headings',
  icon: heading4Icon
}, {
  description: 'Use this for grouping list items',
  icon: heading5Icon
}, {
  description: 'Use this for low-level headings',
  icon: heading6Icon
}];
const cellAttrs = {
  colspan: {
    default: 1
  },
  rowspan: {
    default: 1
  }
};
const tableCellClass = css({
  borderBottom: `1px solid ${tokenSchema.color.alias.borderIdle}`,
  borderInlineEnd: `1px solid ${tokenSchema.color.alias.borderIdle}`,
  boxSizing: 'border-box',
  margin: 0,
  padding: tokenSchema.size.space.regular,
  position: 'relative',
  textAlign: 'start',
  verticalAlign: 'top',
  '&.selectedCell': {
    backgroundColor: tokenSchema.color.alias.backgroundSelected,
    '& *::selection': {
      backgroundColor: 'transparent'
    }
  },
  '&.selectedCell::after': {
    border: `1px solid ${tokenSchema.color.alias.borderSelected}`,
    position: 'absolute',
    top: -1,
    left: -1,
    content: '""',
    height: '100%',
    width: '100%'
  }
});
const tableHeaderClass = css(tableCellClass, {
  backgroundColor: tokenSchema.color.scale.slate3,
  fontWeight: tokenSchema.typography.fontWeight.semibold
});
const nodeSpecs = {
  doc: {
    content: 'block+'
  },
  paragraph: {
    content: inlineContent,
    group: 'block',
    parseDOM: [{
      tag: 'p'
    }, {
      tag: '[data-ignore-content]',
      ignore: true
    }],
    toDOM() {
      return paragraphDOM;
    }
  },
  text: {
    group: 'inline'
  },
  blockquote: {
    content: 'block+',
    group: 'block',
    defining: true,
    parseDOM: [{
      tag: 'blockquote'
    }],
    toDOM() {
      return blockquoteDOM;
    },
    insertMenu: {
      label: 'Blockquote',
      description: 'Insert a quote or citation',
      icon: quoteIcon,
      command: wrapIn
    }
  },
  divider: {
    group: 'block',
    parseDOM: [{
      tag: 'hr'
    }],
    toDOM() {
      return dividerDOM;
    },
    insertMenu: {
      label: 'Divider',
      description: 'A horizontal line to separate content',
      icon: separatorHorizontalIcon,
      command: insertNode
    }
  },
  code_block: {
    content: 'text*',
    group: 'block',
    defining: true,
    [independentForGapCursor]: true,
    attrs: {
      language: {
        default: ''
      }
    },
    insertMenu: {
      label: 'Code block',
      description: 'Display code with syntax highlighting',
      icon: fileCodeIcon,
      command: setBlockType
    },
    marks: '',
    code: true,
    parseDOM: [{
      tag: 'pre',
      preserveWhitespace: 'full'
    }],
    toDOM() {
      return codeDOM;
    }
  },
  list_item: {
    content: 'block+',
    parseDOM: [{
      tag: 'li'
    }],
    toDOM() {
      return liDOM;
    },
    defining: true
  },
  unordered_list: {
    content: 'list_item+',
    group: 'block',
    parseDOM: [{
      tag: 'ul'
    }],
    toDOM() {
      return ulDOM;
    },
    insertMenu: {
      label: 'Bullet list',
      description: 'Insert an unordered list',
      icon: listIcon,
      command: toggleList
    }
  },
  ordered_list: {
    content: 'list_item+',
    group: 'block',
    attrs: {
      start: {
        default: 1
      }
    },
    parseDOM: [{
      tag: 'ol',
      getAttrs: node => {
        if (typeof node === 'string') {
          return false;
        }
        if (!(node instanceof HTMLOListElement) || node.start < 0) {
          return {
            start: 1
          };
        }
        return {
          start: node.start
        };
      }
    }],
    toDOM(node) {
      if (node.attrs.start === 1) return olDOM;
      return ['ol', {
        start: node.attrs.start
      }, 0];
    },
    insertMenu: {
      label: 'Ordered list',
      description: 'Insert an ordered list',
      icon: listOrderedIcon,
      command: toggleList
    }
  },
  hard_break: {
    inline: true,
    group: 'inline',
    selectable: false,
    parseDOM: [{
      tag: 'br'
    }],
    toDOM() {
      return hardBreakDOM;
    }
  },
  table: {
    content: 'table_row+',
    insertMenu: {
      label: 'Table',
      description: 'Insert a table',
      icon: tableIcon,
      command: insertTable
    },
    tableRole: 'table',
    isolating: true,
    group: 'block',
    parseDOM: [{
      tag: 'table'
    }],
    toDOM() {
      return ['table', {
        class: css({
          width: '100%',
          tableLayout: 'fixed',
          position: 'relative',
          borderSpacing: 0,
          borderInlineStart: `1px solid ${tokenSchema.color.alias.borderIdle}`,
          borderTop: `1px solid ${tokenSchema.color.alias.borderIdle}`,
          '&:has(.selectedCell) *::selection': {
            backgroundColor: 'transparent'
          },
          // stop content from bouncing around when widgets are added
          '.ProseMirror-widget + *': {
            marginTop: 0
          }
        })
      }, ['tbody', 0]];
    }
  },
  table_row: {
    content: '(table_cell | table_header)*',
    tableRole: 'row',
    allowGapCursor: false,
    parseDOM: [{
      tag: 'tr'
    }],
    toDOM() {
      return ['tr', 0];
    }
  },
  table_cell: {
    content: 'block+',
    tableRole: 'cell',
    isolating: true,
    attrs: cellAttrs,
    parseDOM: [{
      tag: 'td'
    }],
    toDOM() {
      return ['td', {
        class: tableCellClass
      }, 0];
    }
  },
  table_header: {
    content: 'block+',
    tableRole: 'header_cell',
    attrs: cellAttrs,
    isolating: true,
    parseDOM: [{
      tag: 'th'
    }],
    toDOM() {
      return ['th', {
        class: tableHeaderClass
      }, 0];
    }
  },
  image: {
    content: '',
    group: 'inline',
    inline: true,
    attrs: {
      src: {},
      filename: {},
      alt: {
        default: ''
      },
      title: {
        default: ''
      }
    },
    insertMenu: {
      label: 'Image',
      description: 'Insert an image',
      icon: imageIcon,
      command: nodeType => {
        return (state, dispatch, view) => {
          if (dispatch && view) {
            (async () => {
              const file = await getUploadedFileObject('image/*');
              const schema = getEditorSchema(nodeType.schema);
              if (!file || !schema.config.image) return;
              view.dispatch(view.state.tr.replaceSelectionWith(nodeType.createChecked({
                src: new Uint8Array(await file.arrayBuffer()),
                filename: schema.config.image.transformFilename(file.name)
              })));
            })();
          }
          return true;
        };
      }
    },
    nodeView(node) {
      const blob = new Blob([node.attrs.src], {
        type: node.attrs.filename.endsWith('.svg') ? 'image/svg+xml' : undefined
      });
      const dom = document.createElement('img');
      dom.src = URL.createObjectURL(blob);
      dom.alt = node.attrs.alt;
      dom.title = node.attrs.title;
      dom.dataset.filename = node.attrs.filename;
      dom.classList.add(css({
        boxSizing: 'border-box',
        borderRadius: tokenSchema.size.radius.regular,
        display: 'inline-block',
        maxHeight: tokenSchema.size.scale[3600],
        maxWidth: '100%',
        transition: transition('box-shadow'),
        '&::selection': {
          backgroundColor: 'transparent'
        }
      }));
      return {
        dom,
        destroy() {
          URL.revokeObjectURL(dom.src);
        }
      };
    },
    toDOM(node) {
      return ['img', {
        src: `data:${node.attrs.filename.endsWith('.svg') ? 'image/svg+xml' : 'application/octet-stream'};base64,${base64UrlEncode(node.attrs.src)}`,
        alt: node.attrs.alt,
        title: node.attrs.title,
        'data-filename': node.attrs.filename
      }];
    },
    parseDOM: [{
      tag: 'img[src][data-filename]',
      getAttrs(node) {
        var _node$getAttribute, _node$getAttribute2;
        if (typeof node === 'string') return false;
        const src = node.getAttribute('src');
        const filename = node.getAttribute('data-filename');
        if (!(src !== null && src !== void 0 && src.startsWith('data:')) || !filename) return false;
        const srcAsUint8Array = base64UrlDecode(src.replace(/^data:[a-z/-]+;base64,/, ''));
        return {
          src: srcAsUint8Array,
          filename,
          alt: (_node$getAttribute = node.getAttribute('alt')) !== null && _node$getAttribute !== void 0 ? _node$getAttribute : '',
          title: (_node$getAttribute2 = node.getAttribute('title')) !== null && _node$getAttribute2 !== void 0 ? _node$getAttribute2 : ''
        };
      }
    }]
  }
};
const italicDOM = ['em', 0];
const boldDOM = ['strong', 0];
const inlineCodeDOM = ['code', 0];
const strikethroughDOM = ['s', 0];
const markSpecs = {
  link: {
    attrs: {
      href: {},
      title: {
        default: ''
      }
    },
    inclusive: false,
    parseDOM: [{
      tag: 'a[href]',
      getAttrs(node) {
        var _node$getAttribute3;
        if (typeof node === 'string') return false;
        const href = node.getAttribute('href');
        if (!href) return false;
        return {
          href,
          title: (_node$getAttribute3 = node.getAttribute('title')) !== null && _node$getAttribute3 !== void 0 ? _node$getAttribute3 : ''
        };
      }
    }],
    toDOM(node) {
      return ['a', {
        href: node.attrs.href,
        title: node.attrs.title === '' ? undefined : node.attrs.title
      }, 0];
    }
  },
  italic: {
    shortcuts: ['Mod-i', 'Mod-I'],
    parseDOM: [{
      tag: 'i'
    }, {
      tag: 'em'
    }, {
      style: 'font-style=italic'
    }, {
      style: 'font-style=normal',
      clearMark: m => m.type.name == 'italic'
    }],
    toDOM() {
      return italicDOM;
    }
  },
  bold: {
    shortcuts: ['Mod-b', 'Mod-B'],
    parseDOM: [{
      tag: 'strong'
    }, {
      tag: 'b',
      getAttrs: node => typeof node === 'string' ? false : node.style.fontWeight != 'normal' && null
    }, {
      style: 'font-weight=400',
      clearMark: m => m.type.name == 'strong'
    }, {
      style: 'font-weight',
      getAttrs: value => typeof value === 'string' ? /^(bold(er)?|[5-9]\d{2,})$/.test(value) && null : false
    }],
    toDOM() {
      return boldDOM;
    }
  },
  strikethrough: {
    shortcuts: ['Mod-Shift-s', 'Mod-Shift-S'],
    parseDOM: [{
      tag: 's'
    }],
    toDOM() {
      return strikethroughDOM;
    }
  },
  code: {
    shortcuts: ['Mod-`', 'Mod-Shift-M', 'Mod-E', 'Mod-e'],
    parseDOM: [{
      tag: 'code'
    }],
    toDOM() {
      return inlineCodeDOM;
    }
  }
};
function createEditorSchema(config, components, isMDX) {
  const nodeSpecsWithCustomNodes = {
    doc: nodeSpecs.doc,
    paragraph: nodeSpecs.paragraph,
    text: nodeSpecs.text,
    hard_break: nodeSpecs.hard_break,
    ...getCustomNodeSpecs(components)
  };
  if (config.blockquote) {
    nodeSpecsWithCustomNodes.blockquote = nodeSpecs.blockquote;
  }
  if (config.divider) {
    nodeSpecsWithCustomNodes.divider = nodeSpecs.divider;
  }
  if (config.codeBlock) {
    nodeSpecsWithCustomNodes.code_block = {
      ...nodeSpecs.code_block,
      attrs: {
        ...nodeSpecs.code_block.attrs,
        props: {
          default: toSerialized(getInitialPropsValue({
            kind: 'object',
            fields: config.heading.schema
          }), config.heading.schema)
        }
      }
    };
  }
  if (config.orderedList) {
    nodeSpecsWithCustomNodes.ordered_list = nodeSpecs.ordered_list;
  }
  if (config.unorderedList) {
    nodeSpecsWithCustomNodes.unordered_list = nodeSpecs.unordered_list;
  }
  if (config.orderedList || config.unorderedList) {
    nodeSpecsWithCustomNodes.list_item = nodeSpecs.list_item;
  }
  if (config.heading.levels.length) {
    nodeSpecsWithCustomNodes.heading = {
      attrs: {
        level: {
          default: config.heading.levels[0]
        },
        props: {
          default: toSerialized(getInitialPropsValue({
            kind: 'object',
            fields: config.heading.schema
          }), config.heading.schema)
        }
      },
      content: inlineContent,
      group: 'block',
      parseDOM: config.heading.levels.map(level => ({
        tag: 'h' + level,
        attrs: {
          level
        }
      })),
      defining: true,
      toDOM(node) {
        return ['h' + node.attrs.level, 0];
      },
      insertMenu: config.heading.levels.map((level, index) => ({
        ...levelsMeta[index],
        label: 'Heading ' + level,
        command: type => setBlockType(type, {
          level
        })
      }))
    };
  }
  if (config.table) {
    nodeSpecsWithCustomNodes.table = nodeSpecs.table;
    nodeSpecsWithCustomNodes.table_row = nodeSpecs.table_row;
    if (isMDX) {
      nodeSpecsWithCustomNodes.table_cell = {
        ...nodeSpecs.table_cell,
        content: 'paragraph'
      };
    } else {
      nodeSpecsWithCustomNodes.table_cell = nodeSpecs.table_cell;
    }
    nodeSpecsWithCustomNodes.table_header = nodeSpecs.table_header;
  }
  if (config.image) {
    nodeSpecsWithCustomNodes.image = nodeSpecs.image;
  }
  const markSpecsWithCustomMarks = {
    ...getCustomMarkSpecs(components)
  };
  if (config.link) {
    markSpecsWithCustomMarks.link = markSpecs.link;
  }
  if (config.italic) {
    markSpecsWithCustomMarks.italic = markSpecs.italic;
  }
  if (config.bold) {
    markSpecsWithCustomMarks.bold = markSpecs.bold;
  }
  if (config.strikethrough) {
    markSpecsWithCustomMarks.strikethrough = markSpecs.strikethrough;
  }
  if (config.code) {
    markSpecsWithCustomMarks.code = markSpecs.code;
  }
  const schema = new Schema({
    nodes: nodeSpecsWithCustomNodes,
    marks: markSpecsWithCustomMarks
  });
  const nodes = schema.nodes;
  const marks = schema.marks;
  const editorSchema = {
    schema,
    marks,
    nodes,
    config,
    components,
    insertMenuItems: [],
    format: isMDX ? 'mdx' : 'markdoc'
  };
  schemaToEditorSchema.set(schema, editorSchema);
  const insertMenuItems = [];
  for (const node of Object.values(schema.nodes)) {
    const insertMenuSpec = node.spec.insertMenu;
    if (insertMenuSpec) {
      if (Array.isArray(insertMenuSpec)) {
        for (const item of insertMenuSpec) {
          insertMenuItems.push({
            label: item.label,
            description: item.description,
            icon: item.icon,
            command: item.command(node, editorSchema),
            forToolbar: item.forToolbar
          });
        }
      } else {
        insertMenuItems.push({
          label: insertMenuSpec.label,
          description: insertMenuSpec.description,
          icon: insertMenuSpec.icon,
          command: insertMenuSpec.command(node, editorSchema),
          forToolbar: insertMenuSpec.forToolbar
        });
      }
    }
  }

  // TODO: keep "bullet list" and "ordered list" together
  editorSchema.insertMenuItems = insertMenuItems.sort((a, b) => a.label.localeCompare(b.label)).map((item, i) => ({
    ...item,
    id: i.toString()
  }));
  return editorSchema;
}
const schemaToEditorSchema = new WeakMap();
function getEditorSchema(schema) {
  const editorSchema = schemaToEditorSchema.get(schema);
  if (!editorSchema) {
    throw new Error('No editor schema for schema');
  }
  return editorSchema;
}

const EditorStateContext = /*#__PURE__*/React.createContext(null);
function useEditorState() {
  const state = useContext(EditorStateContext);
  if (state === null) {
    throw new Error('useEditorState must be used inside ProseMirrorEditorView');
  }
  return state;
}
function useEditorDispatchCommand() {
  return useStableEditorContext().dispatchCommand;
}
function useEditorSchema() {
  return useStableEditorContext().schema;
}
function useEditorViewRef() {
  return useStableEditorContext().view;
}
function useEditorViewInEffect() {
  const editorViewRef = useEditorViewRef();
  const state = useEditorState();
  return useCallback(() => {
    if (editorViewRef.current && editorViewRef.current.state !== state) {
      var _editorViewRef$curren;
      (_editorViewRef$curren = editorViewRef.current) === null || _editorViewRef$curren === void 0 || _editorViewRef$curren.updateState(state);
    }
    return editorViewRef.current;
  }, [editorViewRef, state]);
}
function useEditorView(state, _onEditorStateChange) {
  const mountRef = useRef(null);
  const viewRef = useRef(null);
  const config = useConfig();
  const onEditorStateChange = useEventCallback(_onEditorStateChange);
  useLayoutEffect(() => {
    if (mountRef.current === null) {
      return;
    }
    const view = new EditorView({
      mount: mountRef.current
    }, {
      state: state,
      ...{
        config
      },
      dispatchTransaction(tr) {
        const newEditorState = view.state.apply(tr);
        view.updateState(newEditorState);
        onEditorStateChange(newEditorState);
      }
    });
    viewRef.current = view;
    return () => {
      view.destroy();
      viewRef.current = null;
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [mountRef, onEditorStateChange, config]);
  useLayoutEffect(() => {
    var _viewRef$current;
    (_viewRef$current = viewRef.current) === null || _viewRef$current === void 0 || _viewRef$current.updateState(state);
  }, [state]);
  return {
    view: viewRef,
    mount: mountRef
  };
}

/**
 * This cannot be moved after mount
 *
 * This could be fixed by storing the editable ref in state but that would be more initial re-renders
 * and moving the editable isn't a thing that we actually would want to do.
 */
function ProseMirrorEditable(props) {
  const {
    mount
  } = useStableEditorContext();
  return /*#__PURE__*/jsx("div", {
    ...props,
    ref: mount
  });
}
const StableEditorContext = /*#__PURE__*/React.createContext(null);
function useStableEditorContext() {
  const context = useContext(StableEditorContext);
  if (context === null) {
    throw new Error('editor hooks must be used inside a ProseMirrorEditorView');
  }
  return context;
}
const ProseMirrorEditor = /*#__PURE__*/forwardRef(function ProseMirrorEditorView(props, ref) {
  const {
    view,
    mount
  } = useEditorView(props.value, props.onChange);
  useImperativeHandle(ref, () => ({
    get view() {
      return view.current;
    }
  }), [view]);
  const stableContext = useMemo(() => {
    return {
      view,
      mount,
      dispatchCommand: command => {
        if (!view.current) return;
        command(view.current.state, view.current.dispatch, view.current);
        view.current.focus();
      },
      schema: getEditorSchema(props.value.schema)
    };
  }, [mount, props.value.schema, view]);
  return /*#__PURE__*/jsx(StableEditorContext.Provider, {
    value: stableContext,
    children: /*#__PURE__*/jsx(EditorStateContext.Provider, {
      value: props.value,
      children: props.children
    })
  });
});

function getSrcPrefixForImageBlock(config, slug) {
  return getSrcPrefix(typeof config.image === 'object' ? config.image.publicPath : undefined, slug);
}
function imageDropPlugin(schema) {
  const imageType = schema.nodes.image;
  return new Plugin({
    props: {
      handleDrop(view, event) {
        var _event$dataTransfer;
        if ((_event$dataTransfer = event.dataTransfer) !== null && _event$dataTransfer !== void 0 && _event$dataTransfer.files.length) {
          const file = event.dataTransfer.files[0];
          let eventPos = view.posAtCoords({
            left: event.clientX,
            top: event.clientY
          });
          if (!eventPos) return;
          let $mouse = view.state.doc.resolve(eventPos.pos);
          for (const [name, component] of Object.entries(schema.components)) {
            if (component.kind !== 'block' && component.kind !== 'inline' || !component.handleFile) {
              continue;
            }
            const result = component.handleFile(file, view.props.config);
            if (!result) continue;
            (async () => {
              const value = await result;
              const slice = Slice.maxOpen(Fragment$2.from(schema.schema.nodes[name].createChecked({
                props: toSerialized(value, component.schema)
              })));
              const pos = dropPoint(view.state.doc, view.state.selection.from, slice);
              if (pos === null) return;
              view.dispatch(view.state.tr.replace(pos, pos, slice));
            })();
            return true;
          }
          if (file.type.startsWith('image/') && imageType && schema.config.image) {
            const {
              transformFilename
            } = schema.config.image;
            (async () => {
              const slice = Slice.maxOpen(Fragment$2.from(imageType.createChecked({
                src: new Uint8Array(await file.arrayBuffer()),
                filename: transformFilename(file.name)
              })));
              const pos = dropPoint(view.state.doc, $mouse.pos, slice);
              if (pos === null) return false;
              view.dispatch(view.state.tr.replace(pos, pos, slice));
            })();
            return true;
          }
        }
      },
      handlePaste(view, event) {
        var _event$clipboardData;
        if ((_event$clipboardData = event.clipboardData) !== null && _event$clipboardData !== void 0 && _event$clipboardData.files.length) {
          const file = event.clipboardData.files[0];
          for (const [name, component] of Object.entries(schema.components)) {
            if (component.kind !== 'block' || !component.handleFile) continue;
            const result = component.handleFile(file, view.props.config);
            if (!result) continue;
            (async () => {
              const value = await result;
              view.dispatch(view.state.tr.replaceSelectionWith(schema.schema.nodes[name].createChecked({
                props: toSerialized(value, component.schema)
              })));
            })();
            return true;
          }
          if (file.type.startsWith('image/') && imageType && schema.config.image) {
            const {
              transformFilename
            } = schema.config.image;
            (async () => {
              view.dispatch(view.state.tr.replaceSelectionWith(imageType.createChecked({
                src: new Uint8Array(await file.arrayBuffer()),
                filename: transformFilename(file.name)
              })));
            })();
            return true;
          }
        }
      }
    }
  });
}
function ImageToolbarButton() {
  const $ = c(3);
  let t0;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    t0 = (_, dispatch, view) => {
      if (dispatch && view) {
        (async () => {
          const file = await getUploadedFileObject("image/*");
          const schema = getEditorSchema(view.state.schema);
          if (!file || !schema.config.image) {
            return;
          }
          view.dispatch(view.state.tr.replaceSelectionWith(view.state.schema.nodes.image.createChecked({
            src: new Uint8Array(await file.arrayBuffer()),
            filename: schema.config.image.transformFilename(file.name)
          })));
        })();
      }
      return true;
    };
    $[0] = t0;
  } else {
    t0 = $[0];
  }
  let t1;
  if ($[1] === Symbol.for("react.memo_cache_sentinel")) {
    t1 = /*#__PURE__*/jsx(ToolbarButton, {
      "aria-label": "Image",
      command: t0,
      children: /*#__PURE__*/jsx(Icon, {
        src: imageIcon
      })
    });
    $[1] = t1;
  } else {
    t1 = $[1];
  }
  let t2;
  if ($[2] === Symbol.for("react.memo_cache_sentinel")) {
    t2 = /*#__PURE__*/jsxs(TooltipTrigger, {
      children: [t1, /*#__PURE__*/jsx(Tooltip, {
        children: /*#__PURE__*/jsx(Text, {
          children: "Image"
        })
      })]
    });
    $[2] = t2;
  } else {
    t2 = $[2];
  }
  return t2;
}

const key$1 = new PluginKey('AutocompleteDecoration');
function hasSelectionInDecorations(selection, decorations) {
  return decorations.find(selection.from, selection.to).length > 0;
}
const inactiveDecorationState = {
  kind: 'inactive'
};
weakMemoize$1(state => {
  const tr = removeAutocompleteDecorationAndContent(state);
  if (!tr) {
    return {
      state
    };
  }
  return {
    state: state.apply(tr),
    tr
  };
});
function addAutocompleteDecoration(tr, menu, from, to, pattern) {
  return tr.setMeta(key$1, {
    action: 'add',
    from,
    to,
    menu,
    pattern
  });
}
function AutocompleteDecoration() {
  const $ = c(4);
  const state = useEditorState();
  let t0;
  if ($[0] !== state) {
    t0 = key$1.getState(state);
    $[0] = state;
    $[1] = t0;
  } else {
    t0 = $[1];
  }
  const pluginState = t0;
  if (!pluginState || pluginState.kind === "inactive") {
    return null;
  }
  let t1;
  if ($[2] !== pluginState) {
    t1 = /*#__PURE__*/jsx(AutocompleteDecorationInner, {
      state: pluginState
    });
    $[2] = pluginState;
    $[3] = t1;
  } else {
    t1 = $[3];
  }
  return t1;
}
function AutocompleteDecorationInner(props) {
  const $ = c(9);
  const state = useEditorState();
  let t0;
  let decoration;
  if ($[0] !== props.state.decorations || $[1] !== state.doc) {
    decoration = props.state.decorations.find()[0];
    t0 = state.doc.textBetween(decoration.from, decoration.to).slice(1);
    $[0] = props.state.decorations;
    $[1] = state.doc;
    $[2] = t0;
    $[3] = decoration;
  } else {
    t0 = $[2];
    decoration = $[3];
  }
  const text = t0;
  let t1;
  if ($[4] !== props.state.component || $[5] !== text || $[6] !== decoration.from || $[7] !== decoration.to) {
    t1 = /*#__PURE__*/jsx(props.state.component, {
      query: text,
      from: decoration.from,
      to: decoration.to
    });
    $[4] = props.state.component;
    $[5] = text;
    $[6] = decoration.from;
    $[7] = decoration.to;
    $[8] = t1;
  } else {
    t1 = $[8];
  }
  return t1;
}
function removeAutocompleteDecoration(tr) {
  return tr.setMeta(key$1, {
    action: 'remove'
  });
}
function getAutocompleteDecoration(state) {
  const pluginState = key$1.getState(state);
  if ((pluginState === null || pluginState === void 0 ? void 0 : pluginState.kind) === 'active') return pluginState.decorations.find()[0];
}
function removeAutocompleteDecorationAndContent(state) {
  const decoration = getAutocompleteDecoration(state);
  if (!decoration) return;
  return removeAutocompleteDecoration(state.tr.delete(decoration.from, decoration.to));
}
const accentForeground = css({
  color: tokenSchema.color.foreground.accent
});
function autocompleteDecoration() {
  return new Plugin({
    key: key$1,
    state: {
      init: () => ({
        kind: 'inactive'
      }),
      apply(tr, value, oldState, newState) {
        const meta = tr.getMeta(key$1);
        if ((meta === null || meta === void 0 ? void 0 : meta.action) === 'add') {
          const deco = Decoration.inline(meta.from, meta.to, {
            nodeName: 'decoration-autocomplete',
            class: accentForeground
          }, {
            inclusiveStart: false,
            inclusiveEnd: true
          });
          const trigger = newState.doc.textBetween(meta.from, meta.to, '');
          const decorations = DecorationSet.create(tr.doc, [deco]);
          return {
            kind: 'active',
            trigger,
            decorations,
            component: meta.menu,
            pattern: meta.pattern
          };
        }
        if (value.kind === 'inactive') return value;
        const decorations = value.decorations.map(tr.mapping, tr.doc);
        const decorationsArr = decorations.find();
        if ((meta === null || meta === void 0 ? void 0 : meta.action) === 'remove' || !hasSelectionInDecorations(tr.selection, decorations) || decorationsArr.length !== 1) {
          return inactiveDecorationState;
        }
        const {
          from,
          to
        } = decorationsArr[0];
        const replacementChar = '\u{fffd}';
        const textBetween = newState.doc.textBetween(from, to, replacementChar, replacementChar);
        if (value.trigger !== textBetween.slice(0, value.trigger.length) || textBetween.includes(replacementChar) || value.pattern && !value.pattern.test(textBetween)) {
          return inactiveDecorationState;
        }
        return {
          ...value,
          decorations
        };
      }
    },
    props: {
      decorations: state => {
        const pluginState = key$1.getState(state);
        if ((pluginState === null || pluginState === void 0 ? void 0 : pluginState.kind) === 'active') return pluginState.decorations;
        return DecorationSet.empty;
      },
      handlePaste,
      handleDrop: handlePaste,
      handleKeyDown(view, event) {
        const state = key$1.getState(view.state);
        if ((state === null || state === void 0 ? void 0 : state.kind) === 'active' && event.key === 'Escape') {
          removeAutocompleteDecoration(view.state.tr);
          return true;
        }
        return false;
      }
    }
  });
}
function handlePaste(view) {
  const state = key$1.getState(view.state);
  if ((state === null || state === void 0 ? void 0 : state.kind) === 'active') {
    view.dispatch(removeAutocompleteDecoration(view.state.tr));
  }
  return false;
}

function useEditorListbox(props) {
  var _scrollRef;
  const $ = c(20);
  let scrollRef;
  let listenerRef;
  let onEscape;
  let otherProps;
  if ($[0] !== props) {
    ({
      listenerRef,
      onEscape,
      scrollRef,
      ...otherProps
    } = props);
    $[0] = props;
    $[1] = scrollRef;
    $[2] = listenerRef;
    $[3] = onEscape;
    $[4] = otherProps;
  } else {
    scrollRef = $[1];
    listenerRef = $[2];
    onEscape = $[3];
    otherProps = $[4];
  }
  const state = useListState(props);
  const layout = useListBoxLayout();
  const listboxRef = useRef(null);
  let t0;
  t0 = new ListKeyboardDelegate({
    collection: state.collection,
    ref: listboxRef,
    layoutDelegate: layout
  });
  const delegate = t0;
  const {
    collectionProps
  } = useSelectableCollection({
    keyboardDelegate: delegate,
    ref: listenerRef,
    scrollRef: (_scrollRef = scrollRef) !== null && _scrollRef !== void 0 ? _scrollRef : listboxRef,
    selectionManager: state.selectionManager,
    disallowEmptySelection: true,
    disallowTypeAhead: true,
    isVirtualized: true,
    shouldFocusWrap: true
  });
  let t1;
  if ($[5] !== state.selectionManager || $[6] !== props.onAction || $[7] !== onEscape) {
    t1 = e => {
      bb8: switch (e.key) {
        case "Enter":
          {
            var _props$onAction;
            state.selectionManager.select(state.selectionManager.focusedKey);
            (_props$onAction = props.onAction) === null || _props$onAction === void 0 || _props$onAction.call(props, state.selectionManager.focusedKey);
            e.preventDefault();
            break bb8;
          }
        case "Escape":
          {
            var _onEscape;
            (_onEscape = onEscape) === null || _onEscape === void 0 || _onEscape();
          }
      }
    };
    $[5] = state.selectionManager;
    $[6] = props.onAction;
    $[7] = onEscape;
    $[8] = t1;
  } else {
    t1 = $[8];
  }
  const onKeyDown = t1;
  let t2;
  if ($[9] !== onKeyDown || $[10] !== collectionProps.onKeyDown) {
    t2 = chain(onKeyDown, collectionProps.onKeyDown);
    $[9] = onKeyDown;
    $[10] = collectionProps.onKeyDown;
    $[11] = t2;
  } else {
    t2 = $[11];
  }
  const keydownListener = t2;
  let t3;
  if ($[12] !== listboxRef || $[13] !== layout || $[14] !== state || $[15] !== otherProps) {
    t3 = /*#__PURE__*/jsx(ListBoxBase, {
      ref: listboxRef,
      renderEmptyState: renderEmptyState,
      layout: layout,
      state: state,
      autoFocus: "first",
      shouldUseVirtualFocus: true,
      shouldFocusWrap: true,
      UNSAFE_className: listStyles,
      ...otherProps
    });
    $[12] = listboxRef;
    $[13] = layout;
    $[14] = state;
    $[15] = otherProps;
    $[16] = t3;
  } else {
    t3 = $[16];
  }
  let t4;
  if ($[17] !== keydownListener || $[18] !== t3) {
    t4 = {
      keydownListener,
      listbox: t3
    };
    $[17] = keydownListener;
    $[18] = t3;
    $[19] = t4;
  } else {
    t4 = $[19];
  }
  return t4;
}
function renderEmptyState() {
  return /*#__PURE__*/jsx(HStack, {
    alignItems: "center",
    gap: "regular",
    height: "element.regular",
    paddingX: "medium",
    children: /*#__PURE__*/jsx(Text, {
      color: "neutralSecondary",
      weight: "medium",
      children: "No results\u2026"
    })
  });
}

const key = new PluginKey('keydown');

/**
 * Generally only one of these should be rendered at a time
 *
 * It's for autocomplete or etc. where you want to handle keydown in a react component
 * because the selection is in a particular place
 */
function useEditorKeydownListener(handler) {
  const $ = c(6);
  const state = useEditorState();
  let t0;
  if ($[0] !== state) {
    t0 = key.getState(state);
    $[0] = state;
    $[1] = t0;
  } else {
    t0 = $[1];
  }
  const pluginState = t0;
  const stableHandler = useEventCallback(handler);
  let t1;
  let t2;
  if ($[2] !== pluginState || $[3] !== stableHandler) {
    t1 = () => {
      if (!pluginState) {
        return;
      }
      const obj = {
        fn: stableHandler
      };
      pluginState.add(obj);
      return () => {
        pluginState.delete(obj);
      };
    };
    t2 = [pluginState, stableHandler];
    $[2] = pluginState;
    $[3] = stableHandler;
    $[4] = t1;
    $[5] = t2;
  } else {
    t1 = $[4];
    t2 = $[5];
  }
  useEffect(t1, t2);
}
function keydownHandler() {
  return new Plugin({
    key,
    state: {
      init() {
        return new Set();
      },
      apply(tr, value) {
        return value;
      }
    },
    props: {
      handleKeyDown(view, event) {
        const pluginState = key.getState(view.state);
        if (!pluginState) return false;
        for (const handler of pluginState) {
          if (handler.fn(event)) return true;
        }
        return false;
      }
    }
  });
}

function getReferenceElementForRange(view, from, to) {
  const nodeAtFrom = view.state.doc.nodeAt(from);
  if (nodeAtFrom !== null && to === from + nodeAtFrom.nodeSize) {
    const node = view.nodeDOM(from);
    if (node instanceof Element) {
      return virtualElement(node, view);
    }
  }
  const fromDom = view.domAtPos(from);
  const toDom = view.domAtPos(to);
  const range = document.createRange();
  range.setStart(fromDom.node, fromDom.offset);
  range.setEnd(toDom.node, toDom.offset);
  return virtualElement(range, view);
}
function useEditorReferenceElement(from, to) {
  const $ = c(5);
  const [referenceElement, setReferenceElement] = useState(null);
  const getEditorView = useEditorViewInEffect();
  let t0;
  let t1;
  if ($[0] !== getEditorView || $[1] !== from || $[2] !== to) {
    t0 = () => {
      const view = getEditorView();
      if (!view) {
        setReferenceElement(null);
        return;
      }
      setReferenceElement(getReferenceElementForRange(view, from, to));
    };
    t1 = [getEditorView, from, to];
    $[0] = getEditorView;
    $[1] = from;
    $[2] = to;
    $[3] = t0;
    $[4] = t1;
  } else {
    t0 = $[3];
    t1 = $[4];
  }
  useLayoutEffect(t0, t1);
  return referenceElement;
}

/**
 * Normalize API for node, range, etc. and include `contextElement` to ensure
 * clipping and position update detection works as expected.
 * @see https://floating-ui.com/docs/virtual-elements
 */
function virtualElement(el, view) {
  const contextElement = view.dom;
  const getBoundingClientRect = () => el.getBoundingClientRect();
  return {
    contextElement,
    getBoundingClientRect
  };
}

function EditorAutocomplete(props) {
  const viewRef = useEditorViewRef();
  const referenceElement = useEditorReferenceElement(props.from, props.to);
  const listenerRef = useMemo(() => {
    return {
      get current() {
        var _viewRef$current$dom, _viewRef$current;
        return (_viewRef$current$dom = (_viewRef$current = viewRef.current) === null || _viewRef$current === void 0 ? void 0 : _viewRef$current.dom) !== null && _viewRef$current$dom !== void 0 ? _viewRef$current$dom : null;
      }
    };
  }, [viewRef]);
  const {
    keydownListener,
    listbox
  } = useEditorListbox({
    listenerRef,
    ...props,
    UNSAFE_style: {
      width: 320,
      ...props.UNSAFE_style
    }
  });
  useEditorKeydownListener(event => {
    keydownListener(event);
    return event.defaultPrevented;
  });
  return referenceElement && /*#__PURE__*/jsx(EditorPopover, {
    adaptToBoundary: "stretch",
    portal: false,
    minWidth: "element.medium",
    placement: "bottom-start",
    reference: referenceElement,
    children: listbox
  });
}

const insertMenuInputRule = {
  pattern: /(?:^|\s)\/$/,
  handler(state, _match, _start, end) {
    return addAutocompleteDecoration(state.tr, InsertMenu, end - 1, end, undefined);
  }
};
const getStateWithoutAutocompleteDecoration = weakMemoize(state => {
  const tr = removeAutocompleteDecorationAndContent(state);
  if (!tr) {
    return {
      state
    };
  }
  return {
    state: state.apply(tr),
    tr
  };
});
function wrapInsertMenuCommand(command) {
  return (stateWithInsertMenuText, dispatch, view) => {
    const {
      state,
      tr
    } = getStateWithoutAutocompleteDecoration(stateWithInsertMenuText);
    if (!tr) return false;
    if (dispatch) dispatch(tr);
    return command(state, dispatch, view);
  };
}
function itemRenderer(item) {
  return /*#__PURE__*/jsxs(Item$5, {
    textValue: item.label,
    children: [/*#__PURE__*/jsx(Text, {
      children: item.label
    }), item.description && /*#__PURE__*/jsx(Text, {
      slot: "description",
      children: item.description
    }), item.icon && /*#__PURE__*/jsx(Icon, {
      src: item.icon
    })]
  }, item.id);
}
function InsertMenu(props) {
  const $ = c(23);
  const viewRef = useEditorViewRef();
  const dispatchCommand = useEditorDispatchCommand();
  const schema = useEditorSchema();
  const editorState = useEditorState();
  let t0;
  let t1;
  if ($[0] !== schema.insertMenuItems || $[1] !== props.query || $[2] !== editorState) {
    let t2;
    if ($[4] !== editorState) {
      t2 = option => option.command(editorState);
      $[4] = editorState;
      $[5] = t2;
    } else {
      t2 = $[5];
    }
    t1 = matchSorter(schema.insertMenuItems, props.query, {
      keys: ["label"]
    }).filter(t2);
    $[0] = schema.insertMenuItems;
    $[1] = props.query;
    $[2] = editorState;
    $[3] = t1;
  } else {
    t1 = $[3];
  }
  t0 = t1;
  const options = t0;
  let t2;
  if ($[6] !== options || $[7] !== dispatchCommand || $[8] !== viewRef.current || $[9] !== editorState.tr) {
    t2 = event => {
      if (event.key !== " ") {
        return false;
      }
      if (options.length === 1) {
        dispatchCommand(wrapInsertMenuCommand(options[0].command));
        return true;
      }
      if (options.length === 0) {
        var _viewRef$current;
        (_viewRef$current = viewRef.current) === null || _viewRef$current === void 0 || _viewRef$current.dispatch(removeAutocompleteDecoration(editorState.tr));
      }
      return false;
    };
    $[6] = options;
    $[7] = dispatchCommand;
    $[8] = viewRef.current;
    $[9] = editorState.tr;
    $[10] = t2;
  } else {
    t2 = $[10];
  }
  useEditorKeydownListener(t2);
  let t3;
  if ($[11] !== editorState || $[12] !== viewRef.current) {
    t3 = () => {
      var _viewRef$current2;
      const tr = removeAutocompleteDecorationAndContent(editorState);
      if (!tr) {
        return;
      }
      (_viewRef$current2 = viewRef.current) === null || _viewRef$current2 === void 0 || _viewRef$current2.dispatch(tr);
    };
    $[11] = editorState;
    $[12] = viewRef.current;
    $[13] = t3;
  } else {
    t3 = $[13];
  }
  let t4;
  if ($[14] !== options || $[15] !== dispatchCommand) {
    t4 = key => {
      const option_1 = options.find(option_0 => option_0.id === key);
      if (!option_1) {
        return;
      }
      dispatchCommand(wrapInsertMenuCommand(option_1.command));
    };
    $[14] = options;
    $[15] = dispatchCommand;
    $[16] = t4;
  } else {
    t4 = $[16];
  }
  let t5;
  if ($[17] !== props.from || $[18] !== props.to || $[19] !== options || $[20] !== t3 || $[21] !== t4) {
    t5 = /*#__PURE__*/jsx(EditorAutocomplete, {
      from: props.from,
      to: props.to,
      "aria-label": "Insert menu",
      items: options,
      children: itemRenderer,
      onEscape: t3,
      onAction: t4
    });
    $[17] = props.from;
    $[18] = props.to;
    $[19] = options;
    $[20] = t3;
    $[21] = t4;
    $[22] = t5;
  } else {
    t5 = $[22];
  }
  return t5;
}

function LinkToolbar(props) {
  const $ = c(33);
  const [dialogOpen, setDialogOpen] = useState(false);
  const stringFormatter = useLocalizedStringFormatter(strings);
  let t0;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    t0 = () => setDialogOpen(true);
    $[0] = t0;
  } else {
    t0 = $[0];
  }
  let t1;
  if ($[1] === Symbol.for("react.memo_cache_sentinel")) {
    t1 = /*#__PURE__*/jsx(ActionButton, {
      prominence: "low",
      onPress: t0,
      children: /*#__PURE__*/jsx(Icon, {
        src: editIcon
      })
    });
    $[1] = t1;
  } else {
    t1 = $[1];
  }
  let t2;
  if ($[2] !== stringFormatter) {
    t2 = stringFormatter.format("edit");
    $[2] = stringFormatter;
    $[3] = t2;
  } else {
    t2 = $[3];
  }
  let t3;
  if ($[4] !== t2) {
    t3 = /*#__PURE__*/jsxs(TooltipTrigger, {
      children: [t1, /*#__PURE__*/jsx(Tooltip, {
        children: t2
      })]
    });
    $[4] = t2;
    $[5] = t3;
  } else {
    t3 = $[5];
  }
  let t4;
  if ($[6] !== props.href) {
    t4 = () => {
      window.open(props.href, "_blank", "noopener,noreferrer");
    };
    $[6] = props.href;
    $[7] = t4;
  } else {
    t4 = $[7];
  }
  let t5;
  if ($[8] === Symbol.for("react.memo_cache_sentinel")) {
    t5 = /*#__PURE__*/jsx(Icon, {
      src: externalLinkIcon
    });
    $[8] = t5;
  } else {
    t5 = $[8];
  }
  let t6;
  if ($[9] !== t4) {
    t6 = /*#__PURE__*/jsx(ActionButton, {
      prominence: "low",
      onPress: t4,
      children: t5
    });
    $[9] = t4;
    $[10] = t6;
  } else {
    t6 = $[10];
  }
  let t7;
  if ($[11] !== props.href) {
    t7 = /*#__PURE__*/jsx(Tooltip, {
      children: /*#__PURE__*/jsx(Text, {
        truncate: 3,
        children: props.href
      })
    });
    $[11] = props.href;
    $[12] = t7;
  } else {
    t7 = $[12];
  }
  let t8;
  if ($[13] !== t6 || $[14] !== t7) {
    t8 = /*#__PURE__*/jsxs(TooltipTrigger, {
      children: [t6, t7]
    });
    $[13] = t6;
    $[14] = t7;
    $[15] = t8;
  } else {
    t8 = $[15];
  }
  let t9;
  if ($[16] === Symbol.for("react.memo_cache_sentinel")) {
    t9 = /*#__PURE__*/jsx(Icon, {
      src: unlinkIcon
    });
    $[16] = t9;
  } else {
    t9 = $[16];
  }
  let t10;
  if ($[17] !== props.onUnlink) {
    t10 = /*#__PURE__*/jsx(ActionButton, {
      prominence: "low",
      onPress: props.onUnlink,
      children: t9
    });
    $[17] = props.onUnlink;
    $[18] = t10;
  } else {
    t10 = $[18];
  }
  let t11;
  if ($[19] === Symbol.for("react.memo_cache_sentinel")) {
    t11 = /*#__PURE__*/jsx(Tooltip, {
      children: "Unlink"
    });
    $[19] = t11;
  } else {
    t11 = $[19];
  }
  let t12;
  if ($[20] !== t10) {
    t12 = /*#__PURE__*/jsxs(TooltipTrigger, {
      children: [t10, t11]
    });
    $[20] = t10;
    $[21] = t12;
  } else {
    t12 = $[21];
  }
  let t13;
  if ($[22] === Symbol.for("react.memo_cache_sentinel")) {
    t13 = () => {
      setDialogOpen(false);
    };
    $[22] = t13;
  } else {
    t13 = $[22];
  }
  let t14;
  if ($[23] !== dialogOpen || $[24] !== props) {
    t14 = dialogOpen && /*#__PURE__*/jsx(LinkDialog, {
      text: props.text,
      href: props.href,
      onSubmit: t15 => {
        const {
          href
        } = t15;
        props.onHrefChange(href);
      }
    });
    $[23] = dialogOpen;
    $[24] = props;
    $[25] = t14;
  } else {
    t14 = $[25];
  }
  let t15;
  if ($[26] !== t14) {
    t15 = /*#__PURE__*/jsx(DialogContainer, {
      onDismiss: t13,
      children: t14
    });
    $[26] = t14;
    $[27] = t15;
  } else {
    t15 = $[27];
  }
  let t16;
  if ($[28] !== t3 || $[29] !== t8 || $[30] !== t12 || $[31] !== t15) {
    t16 = /*#__PURE__*/jsxs(Flex, {
      gap: "small",
      padding: "regular",
      children: [t3, t8, t12, t15]
    });
    $[28] = t3;
    $[29] = t8;
    $[30] = t12;
    $[31] = t15;
    $[32] = t16;
  } else {
    t16 = $[32];
  }
  return t16;
}
function LinkDialog(t0) {
  const $ = c(40);
  let props;
  let onSubmit;
  if ($[0] !== t0) {
    ({
      onSubmit,
      ...props
    } = t0);
    $[0] = t0;
    $[1] = props;
    $[2] = onSubmit;
  } else {
    props = $[1];
    onSubmit = $[2];
  }
  const [href, setHref] = useState(props.href || "");
  const [touched, setTouched] = useState(false);
  const {
    dismiss
  } = useDialogContainer();
  const stringFormatter = useLocalizedStringFormatter(strings);
  let t1;
  if ($[3] !== touched || $[4] !== href) {
    t1 = touched && !isValidURL$1(href);
    $[3] = touched;
    $[4] = href;
    $[5] = t1;
  } else {
    t1 = $[5];
  }
  const showInvalidState = t1;
  let t2;
  if ($[6] === Symbol.for("react.memo_cache_sentinel")) {
    t2 = {
      display: "contents"
    };
    $[6] = t2;
  } else {
    t2 = $[6];
  }
  let t3;
  if ($[7] !== showInvalidState || $[8] !== dismiss || $[9] !== onSubmit || $[10] !== href) {
    t3 = event => {
      if (event.target !== event.currentTarget) {
        return;
      }
      event.preventDefault();
      if (!showInvalidState) {
        dismiss();
        onSubmit({
          href
        });
      }
    };
    $[7] = showInvalidState;
    $[8] = dismiss;
    $[9] = onSubmit;
    $[10] = href;
    $[11] = t3;
  } else {
    t3 = $[11];
  }
  const t4 = props.href ? "Edit" : "Add";
  let t5;
  if ($[12] !== t4) {
    t5 = /*#__PURE__*/jsxs(Heading, {
      children: [t4, " link"]
    });
    $[12] = t4;
    $[13] = t5;
  } else {
    t5 = $[13];
  }
  let t6;
  if ($[14] !== props.text) {
    t6 = /*#__PURE__*/jsx(TextField, {
      label: "Text",
      value: props.text,
      isReadOnly: true
    });
    $[14] = props.text;
    $[15] = t6;
  } else {
    t6 = $[15];
  }
  let t7;
  if ($[16] === Symbol.for("react.memo_cache_sentinel")) {
    t7 = () => setTouched(true);
    $[16] = t7;
  } else {
    t7 = $[16];
  }
  const t8 = showInvalidState && "Please provide a valid URL.";
  let t9;
  if ($[17] !== href || $[18] !== t8) {
    t9 = /*#__PURE__*/jsx(TextField, {
      autoFocus: true,
      isRequired: true,
      onBlur: t7,
      label: "Link",
      onChange: setHref,
      value: href,
      errorMessage: t8
    });
    $[17] = href;
    $[18] = t8;
    $[19] = t9;
  } else {
    t9 = $[19];
  }
  let t10;
  if ($[20] !== t6 || $[21] !== t9) {
    t10 = /*#__PURE__*/jsx(Content, {
      children: /*#__PURE__*/jsxs(Flex, {
        gap: "large",
        direction: "column",
        children: [t6, t9]
      })
    });
    $[20] = t6;
    $[21] = t9;
    $[22] = t10;
  } else {
    t10 = $[22];
  }
  let t11;
  if ($[23] !== stringFormatter) {
    t11 = stringFormatter.format("cancel");
    $[23] = stringFormatter;
    $[24] = t11;
  } else {
    t11 = $[24];
  }
  let t12;
  if ($[25] !== dismiss || $[26] !== t11) {
    t12 = /*#__PURE__*/jsx(Button, {
      onPress: dismiss,
      children: t11
    });
    $[25] = dismiss;
    $[26] = t11;
    $[27] = t12;
  } else {
    t12 = $[27];
  }
  let t13;
  if ($[28] !== stringFormatter) {
    t13 = stringFormatter.format("save");
    $[28] = stringFormatter;
    $[29] = t13;
  } else {
    t13 = $[29];
  }
  let t14;
  if ($[30] !== t13) {
    t14 = /*#__PURE__*/jsx(Button, {
      prominence: "high",
      type: "submit",
      children: t13
    });
    $[30] = t13;
    $[31] = t14;
  } else {
    t14 = $[31];
  }
  let t15;
  if ($[32] !== t12 || $[33] !== t14) {
    t15 = /*#__PURE__*/jsxs(ButtonGroup, {
      children: [t12, t14]
    });
    $[32] = t12;
    $[33] = t14;
    $[34] = t15;
  } else {
    t15 = $[34];
  }
  let t16;
  if ($[35] !== t3 || $[36] !== t5 || $[37] !== t10 || $[38] !== t15) {
    t16 = /*#__PURE__*/jsx(Dialog, {
      size: "small",
      children: /*#__PURE__*/jsxs("form", {
        style: t2,
        onSubmit: t3,
        children: [t5, t10, t15]
      })
    });
    $[35] = t3;
    $[36] = t5;
    $[37] = t10;
    $[38] = t15;
    $[39] = t16;
  } else {
    t16 = $[39];
  }
  return t16;
}

function ImagePopover(props) {
  const $ = c(42);
  const stringFormatter = useLocalizedStringFormatter(strings);
  const runCommand = useEditorDispatchCommand();
  const [dialogOpen, setDialogOpen] = useState(false);
  let t0;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    t0 = () => setDialogOpen(true);
    $[0] = t0;
  } else {
    t0 = $[0];
  }
  let t1;
  if ($[1] === Symbol.for("react.memo_cache_sentinel")) {
    t1 = /*#__PURE__*/jsx(ActionButton, {
      prominence: "low",
      onPress: t0,
      children: /*#__PURE__*/jsx(Icon, {
        src: editIcon
      })
    });
    $[1] = t1;
  } else {
    t1 = $[1];
  }
  let t2;
  if ($[2] !== stringFormatter) {
    t2 = stringFormatter.format("edit");
    $[2] = stringFormatter;
    $[3] = t2;
  } else {
    t2 = $[3];
  }
  let t3;
  if ($[4] !== t2) {
    t3 = /*#__PURE__*/jsxs(TooltipTrigger, {
      children: [t1, /*#__PURE__*/jsx(Tooltip, {
        children: t2
      })]
    });
    $[4] = t2;
    $[5] = t3;
  } else {
    t3 = $[5];
  }
  let t4;
  if ($[6] !== runCommand || $[7] !== props.pos) {
    t4 = async () => {
      const file = await getUploadedFileObject("image/*");
      if (!file) {
        return;
      }
      const src = new Uint8Array(await file.arrayBuffer());
      runCommand((state, dispatch) => {
        if (dispatch) {
          const {
            tr
          } = state;
          tr.setNodeAttribute(props.pos, "src", src);
          const newState = state.apply(tr);
          tr.setSelection(NodeSelection.create(newState.doc, props.pos));
          dispatch(tr);
        }
        return true;
      });
    };
    $[6] = runCommand;
    $[7] = props.pos;
    $[8] = t4;
  } else {
    t4 = $[8];
  }
  let t5;
  if ($[9] === Symbol.for("react.memo_cache_sentinel")) {
    t5 = /*#__PURE__*/jsx(Icon, {
      src: fileUpIcon
    });
    $[9] = t5;
  } else {
    t5 = $[9];
  }
  let t6;
  if ($[10] !== t4) {
    t6 = /*#__PURE__*/jsx(ActionButton, {
      prominence: "low",
      onPress: t4,
      children: t5
    });
    $[10] = t4;
    $[11] = t6;
  } else {
    t6 = $[11];
  }
  let t7;
  if ($[12] === Symbol.for("react.memo_cache_sentinel")) {
    t7 = /*#__PURE__*/jsx(Tooltip, {
      children: "Choose file"
    });
    $[12] = t7;
  } else {
    t7 = $[12];
  }
  let t8;
  if ($[13] !== t6) {
    t8 = /*#__PURE__*/jsxs(TooltipTrigger, {
      children: [t6, t7]
    });
    $[13] = t6;
    $[14] = t8;
  } else {
    t8 = $[14];
  }
  let t9;
  if ($[15] !== t3 || $[16] !== t8) {
    t9 = /*#__PURE__*/jsxs(Flex, {
      gap: "small",
      children: [t3, t8]
    });
    $[15] = t3;
    $[16] = t8;
    $[17] = t9;
  } else {
    t9 = $[17];
  }
  let t10;
  if ($[18] === Symbol.for("react.memo_cache_sentinel")) {
    t10 = /*#__PURE__*/jsx(Divider, {
      orientation: "vertical"
    });
    $[18] = t10;
  } else {
    t10 = $[18];
  }
  let t11;
  if ($[19] !== runCommand || $[20] !== props.pos || $[21] !== props.node.nodeSize) {
    t11 = () => {
      runCommand((state_0, dispatch_0) => {
        if (dispatch_0) {
          dispatch_0(state_0.tr.delete(props.pos, props.pos + props.node.nodeSize));
        }
        return true;
      });
    };
    $[19] = runCommand;
    $[20] = props.pos;
    $[21] = props.node.nodeSize;
    $[22] = t11;
  } else {
    t11 = $[22];
  }
  let t12;
  if ($[23] === Symbol.for("react.memo_cache_sentinel")) {
    t12 = /*#__PURE__*/jsx(Icon, {
      src: trash2Icon
    });
    $[23] = t12;
  } else {
    t12 = $[23];
  }
  let t13;
  if ($[24] !== t11) {
    t13 = /*#__PURE__*/jsx(ActionButton, {
      prominence: "low",
      onPress: t11,
      children: t12
    });
    $[24] = t11;
    $[25] = t13;
  } else {
    t13 = $[25];
  }
  let t14;
  if ($[26] === Symbol.for("react.memo_cache_sentinel")) {
    t14 = /*#__PURE__*/jsx(Tooltip, {
      tone: "critical",
      children: "Remove"
    });
    $[26] = t14;
  } else {
    t14 = $[26];
  }
  let t15;
  if ($[27] !== t13) {
    t15 = /*#__PURE__*/jsxs(TooltipTrigger, {
      children: [t13, t14]
    });
    $[27] = t13;
    $[28] = t15;
  } else {
    t15 = $[28];
  }
  let t16;
  if ($[29] !== t9 || $[30] !== t15) {
    t16 = /*#__PURE__*/jsxs(Flex, {
      gap: "regular",
      padding: "regular",
      children: [t9, t10, t15]
    });
    $[29] = t9;
    $[30] = t15;
    $[31] = t16;
  } else {
    t16 = $[31];
  }
  let t17;
  if ($[32] === Symbol.for("react.memo_cache_sentinel")) {
    t17 = () => {
      setDialogOpen(false);
    };
    $[32] = t17;
  } else {
    t17 = $[32];
  }
  let t18;
  if ($[33] !== dialogOpen || $[34] !== runCommand || $[35] !== props) {
    t18 = dialogOpen && /*#__PURE__*/jsx(ImageDialog, {
      alt: props.node.attrs.alt,
      title: props.node.attrs.title,
      filename: props.node.attrs.filename,
      onSubmit: value => {
        runCommand((state_1, dispatch_1) => {
          if (dispatch_1) {
            const {
              tr: tr_0
            } = state_1;
            tr_0.setNodeMarkup(props.pos, undefined, {
              ...props.node.attrs,
              ...value
            });
            const newState_0 = state_1.apply(tr_0);
            tr_0.setSelection(NodeSelection.create(newState_0.doc, props.pos));
            dispatch_1(tr_0);
          }
          return true;
        });
        setDialogOpen(false);
      }
    });
    $[33] = dialogOpen;
    $[34] = runCommand;
    $[35] = props;
    $[36] = t18;
  } else {
    t18 = $[36];
  }
  let t19;
  if ($[37] !== t18) {
    t19 = /*#__PURE__*/jsx(DialogContainer, {
      onDismiss: t17,
      children: t18
    });
    $[37] = t18;
    $[38] = t19;
  } else {
    t19 = $[38];
  }
  let t20;
  if ($[39] !== t16 || $[40] !== t19) {
    t20 = /*#__PURE__*/jsxs(Fragment, {
      children: [t16, t19]
    });
    $[39] = t16;
    $[40] = t19;
    $[41] = t20;
  } else {
    t20 = $[41];
  }
  return t20;
}
function ImageDialog(props) {
  const schema = useEditorSchema();
  const [state, setState] = useState({
    alt: props.alt,
    title: props.title
  });
  const imagesSchema = useMemo(() => ({
    kind: 'object',
    fields: schema.config.image.schema
  }), [schema.config.image]);
  const previewProps = useMemo(() => createGetPreviewProps(imagesSchema, setState, () => undefined), [imagesSchema])(state);
  const [filenameWithoutExtension, filenameExtension] = splitFilename(props.filename);
  const [forceValidation, setForceValidation] = useState(false);
  let [fileName, setFileName] = useState(filenameWithoutExtension);
  let [fileNameTouched, setFileNameTouched] = useState(false);
  let {
    dismiss
  } = useDialogContainer();
  let stringFormatter = useLocalizedStringFormatter(strings);
  return /*#__PURE__*/jsx(Dialog, {
    size: "small",
    children: /*#__PURE__*/jsxs("form", {
      style: {
        display: 'contents'
      },
      onSubmit: event => {
        if (event.target !== event.currentTarget) return;
        event.preventDefault();
        setForceValidation(true);
        if (fileName && clientSideValidateProp(imagesSchema, state, undefined)) {
          dismiss();
          props.onSubmit({
            alt: state.alt,
            title: state.title,
            filename: [fileName, filenameExtension].join('.')
          });
        }
      },
      children: [/*#__PURE__*/jsx(Heading, {
        children: "Image details"
      }), /*#__PURE__*/jsx(Content, {
        children: /*#__PURE__*/jsxs(Flex, {
          gap: "large",
          direction: "column",
          children: [/*#__PURE__*/jsx(TextField, {
            label: "File name",
            onChange: setFileName,
            onBlur: () => setFileNameTouched(true),
            value: fileName,
            isRequired: true,
            errorMessage: (fileNameTouched || forceValidation) && !fileName ? 'Please provide a file name.' : undefined,
            endElement: filenameExtension ? /*#__PURE__*/jsx(Flex, {
              alignItems: "center",
              justifyContent: "center",
              paddingEnd: "regular",
              children: /*#__PURE__*/jsxs(Text, {
                color: "neutralTertiary",
                children: [".", filenameExtension]
              })
            }) : null
          }), /*#__PURE__*/jsx(FormValueContentFromPreviewProps, {
            forceValidation: forceValidation,
            autoFocus: true,
            ...previewProps
          })]
        })
      }), /*#__PURE__*/jsxs(ButtonGroup, {
        children: [/*#__PURE__*/jsx(Button, {
          onPress: dismiss,
          children: stringFormatter.format('cancel')
        }), /*#__PURE__*/jsx(Button, {
          prominence: "high",
          type: "submit",
          children: stringFormatter.format('save')
        })]
      })]
    })
  });
}
function splitFilename(filename) {
  const dotIndex = filename.lastIndexOf('.');
  if (dotIndex === -1) {
    return [filename, ''];
  }
  return [filename.substring(0, dotIndex), filename.substring(dotIndex + 1)];
}

function ExtraAttributesMenuItem(props) {
  const $ = c(14);
  const [isOpen, setIsOpen] = useState(false);
  let t0;
  let t1;
  if ($[0] !== props.schema) {
    t1 = {
      kind: "object",
      fields: props.schema
    };
    $[0] = props.schema;
    $[1] = t1;
  } else {
    t1 = $[1];
  }
  t0 = t1;
  const componentSchema = t0;
  const value = useDeserializedValue(props.serialized, props.schema);
  const runCommand = useEditorDispatchCommand();
  let t2;
  if ($[2] === Symbol.for("react.memo_cache_sentinel")) {
    t2 = () => {
      setIsOpen(true);
    };
    $[2] = t2;
  } else {
    t2 = $[2];
  }
  let t3;
  if ($[3] === Symbol.for("react.memo_cache_sentinel")) {
    t3 = /*#__PURE__*/jsx(ActionButton, {
      prominence: "low",
      onPress: t2,
      children: /*#__PURE__*/jsx(Icon, {
        src: pencilIcon
      })
    });
    $[3] = t3;
  } else {
    t3 = $[3];
  }
  let t4;
  if ($[4] === Symbol.for("react.memo_cache_sentinel")) {
    t4 = /*#__PURE__*/jsxs(TooltipTrigger, {
      children: [t3, /*#__PURE__*/jsx(Tooltip, {
        children: "Edit"
      })]
    });
    $[4] = t4;
  } else {
    t4 = $[4];
  }
  let t5;
  if ($[5] === Symbol.for("react.memo_cache_sentinel")) {
    t5 = () => {
      setIsOpen(false);
    };
    $[5] = t5;
  } else {
    t5 = $[5];
  }
  let t6;
  if ($[6] !== isOpen || $[7] !== props || $[8] !== runCommand || $[9] !== componentSchema || $[10] !== value) {
    t6 = isOpen && /*#__PURE__*/jsxs(Dialog, {
      children: [/*#__PURE__*/jsxs(Heading, {
        children: ["Edit ", props.name]
      }), /*#__PURE__*/jsx(FormValue, {
        schema: componentSchema,
        value: value,
        onSave: value_0 => {
          runCommand((state, dispatch) => {
            if (dispatch) {
              dispatch(state.tr.setNodeAttribute(props.pos, "props", toSerialized(value_0, props.schema)));
            }
            return true;
          });
        }
      })]
    });
    $[6] = isOpen;
    $[7] = props;
    $[8] = runCommand;
    $[9] = componentSchema;
    $[10] = value;
    $[11] = t6;
  } else {
    t6 = $[11];
  }
  let t7;
  if ($[12] !== t6) {
    t7 = /*#__PURE__*/jsxs(Fragment, {
      children: [t4, /*#__PURE__*/jsx(DialogContainer, {
        onDismiss: t5,
        children: t6
      })]
    });
    $[12] = t6;
    $[13] = t7;
  } else {
    t7 = $[13];
  }
  return t7;
}
function withShouldUse(val, shouldShow) {
  return Object.assign(val, {
    shouldShow
  });
}
const popoverComponents = {
  code_block: function CodeBlockPopover(props) {
    const dispatchCommand = useEditorDispatchCommand();
    const schema = useEditorSchema();
    const viewRef = useEditorViewRef();
    return /*#__PURE__*/jsxs(Flex, {
      gap: "regular",
      padding: "regular",
      children: [/*#__PURE__*/jsx(TextField, {
        "aria-label": "Code block language",
        value: props.node.attrs.language,
        onChange: val => {
          const view = viewRef.current;
          view.dispatch(view.state.tr.setNodeAttribute(props.pos, 'language', val));
        }
      }), !!Object.keys(schema.config.codeBlock.schema).length && /*#__PURE__*/jsx(ExtraAttributesMenuItem, {
        name: "Code Block",
        schema: schema.config.codeBlock.schema,
        pos: props.pos,
        serialized: props.node.attrs.props
      }), /*#__PURE__*/jsx(Divider, {
        orientation: "vertical"
      }), /*#__PURE__*/jsxs(TooltipTrigger, {
        children: [/*#__PURE__*/jsx(ActionButton, {
          prominence: "low",
          onPress: () => {
            dispatchCommand((state, dispatch) => {
              if (dispatch) {
                dispatch(state.tr.delete(props.pos, props.pos + props.node.nodeSize));
              }
              return true;
            });
          },
          children: /*#__PURE__*/jsx(Icon, {
            src: trash2Icon
          })
        }), /*#__PURE__*/jsx(Tooltip, {
          tone: "critical",
          children: "Remove"
        })]
      })]
    });
  },
  image: ImagePopover,
  table: function TablePopover(props) {
    var _props$node$firstChil;
    const dispatchCommand = useEditorDispatchCommand();
    const schema = useEditorSchema();
    return /*#__PURE__*/jsxs(Flex, {
      gap: "regular",
      padding: "regular",
      children: [schema.format === 'markdoc' && /*#__PURE__*/jsxs(Fragment, {
        children: [/*#__PURE__*/jsxs(TooltipTrigger, {
          children: [/*#__PURE__*/jsx(ActionButton, {
            prominence: "low",
            isSelected: ((_props$node$firstChil = props.node.firstChild) === null || _props$node$firstChil === void 0 || (_props$node$firstChil = _props$node$firstChil.firstChild) === null || _props$node$firstChil === void 0 ? void 0 : _props$node$firstChil.type) === schema.nodes.table_header,
            onPress: () => {
              dispatchCommand(toggleHeader('row'));
            },
            children: /*#__PURE__*/jsx(Icon, {
              src: sheetIcon
            })
          }), /*#__PURE__*/jsx(Tooltip, {
            children: "Header row"
          })]
        }), /*#__PURE__*/jsx(Divider, {
          orientation: "vertical"
        })]
      }), /*#__PURE__*/jsxs(TooltipTrigger, {
        children: [/*#__PURE__*/jsx(ActionButton, {
          prominence: "low",
          onPress: () => {
            dispatchCommand((state, dispatch) => {
              if (dispatch) {
                dispatch(state.tr.delete(props.pos, props.pos + props.node.nodeSize));
              }
              return true;
            });
          },
          children: /*#__PURE__*/jsx(Icon, {
            src: trash2Icon
          })
        }), /*#__PURE__*/jsx(Tooltip, {
          tone: "critical",
          children: "Remove"
        })]
      })]
    });
  },
  heading: withShouldUse(function HeadingPopover(props) {
    const dispatchCommand = useEditorDispatchCommand();
    const schema = useEditorSchema();
    return /*#__PURE__*/jsxs(Flex, {
      gap: "regular",
      padding: "regular",
      children: [/*#__PURE__*/jsx(ExtraAttributesMenuItem, {
        name: "Heading",
        schema: schema.config.heading.schema,
        pos: props.pos,
        serialized: props.node.attrs.props
      }), /*#__PURE__*/jsx(Divider, {
        orientation: "vertical"
      }), /*#__PURE__*/jsxs(TooltipTrigger, {
        children: [/*#__PURE__*/jsx(ActionButton, {
          prominence: "low",
          onPress: () => {
            dispatchCommand((state, dispatch) => {
              if (dispatch) {
                dispatch(state.tr.delete(props.pos, props.pos + props.node.nodeSize));
              }
              return true;
            });
          },
          children: /*#__PURE__*/jsx(Icon, {
            src: trash2Icon
          })
        }), /*#__PURE__*/jsx(Tooltip, {
          tone: "critical",
          children: "Remove"
        })]
      })]
    });
  }, schema => !!Object.keys(schema.config.heading.schema).length)
};
function markAround($pos, markType) {
  const {
    parent,
    parentOffset
  } = $pos;
  const start = parent.childAfter(parentOffset);
  if (!start.node) return null;
  const mark = start.node.marks.find(mark => mark.type === markType);
  if (!mark) return null;
  let startIndex = $pos.index();
  let startPos = $pos.start() + start.offset;
  let endIndex = startIndex + 1;
  let endPos = startPos + start.node.nodeSize;
  while (startIndex > 0 && mark.isInSet(parent.child(startIndex - 1).marks)) {
    startIndex -= 1;
    startPos -= parent.child(startIndex).nodeSize;
  }
  while (endIndex < parent.childCount && mark.isInSet(parent.child(endIndex).marks)) {
    endPos += parent.child(endIndex).nodeSize;
    endIndex += 1;
  }
  return {
    from: startPos,
    to: endPos,
    mark
  };
}
const LinkPopover = props => {
  const $ = c(14);
  const dispatchCommand = useEditorDispatchCommand();
  const href = props.mark.attrs.href;
  if (typeof href !== "string") {
    return null;
  }
  let t0;
  if ($[0] !== props.state.doc || $[1] !== props.from || $[2] !== props.to) {
    t0 = props.state.doc.textBetween(props.from, props.to);
    $[0] = props.state.doc;
    $[1] = props.from;
    $[2] = props.to;
    $[3] = t0;
  } else {
    t0 = $[3];
  }
  let t1;
  let t2;
  if ($[4] !== dispatchCommand || $[5] !== props.from || $[6] !== props.to) {
    t1 = () => {
      dispatchCommand((state, dispatch) => {
        if (dispatch) {
          dispatch(state.tr.removeMark(props.from, props.to, state.schema.marks.link));
        }
        return true;
      });
    };
    t2 = href_0 => {
      dispatchCommand((state_0, dispatch_0) => {
        if (dispatch_0) {
          dispatch_0(state_0.tr.removeMark(props.from, props.to, state_0.schema.marks.link).addMark(props.from, props.to, state_0.schema.marks.link.create({
            href: href_0
          })));
        }
        return true;
      });
    };
    $[4] = dispatchCommand;
    $[5] = props.from;
    $[6] = props.to;
    $[7] = t1;
    $[8] = t2;
  } else {
    t1 = $[7];
    t2 = $[8];
  }
  let t3;
  if ($[9] !== t0 || $[10] !== href || $[11] !== t1 || $[12] !== t2) {
    t3 = /*#__PURE__*/jsx(LinkToolbar, {
      text: t0,
      href: href,
      onUnlink: t1,
      onHrefChange: t2
    });
    $[9] = t0;
    $[10] = href;
    $[11] = t1;
    $[12] = t2;
    $[13] = t3;
  } else {
    t3 = $[13];
  }
  return t3;
};
function InlineComponentPopover(props) {
  const $ = c(43);
  let t0;
  if ($[0] !== props.state.schema) {
    t0 = getEditorSchema(props.state.schema);
    $[0] = props.state.schema;
    $[1] = t0;
  } else {
    t0 = $[1];
  }
  const schema = t0;
  const componentConfig = schema.components[props.node.type.name];
  const runCommand = useEditorDispatchCommand();
  const [isOpen, setIsOpen] = useState(false);
  let t1;
  let t2;
  if ($[2] !== componentConfig.schema) {
    t2 = {
      kind: "object",
      fields: componentConfig.schema
    };
    $[2] = componentConfig.schema;
    $[3] = t2;
  } else {
    t2 = $[3];
  }
  t1 = t2;
  const componentSchema = t1;
  const value = useDeserializedValue(props.node.attrs.props, componentConfig.schema);
  const editorViewRef = useEditorViewRef();
  if (componentConfig.kind === "inline" && componentConfig.ToolbarView) {
    let t3;
    if ($[4] !== editorViewRef.current || $[5] !== props.pos || $[6] !== componentSchema.fields) {
      t3 = value_0 => {
        const view = editorViewRef.current;
        view.dispatch(view.state.tr.setNodeAttribute(props.pos, "props", toSerialized(value_0, componentSchema.fields)));
      };
      $[4] = editorViewRef.current;
      $[5] = props.pos;
      $[6] = componentSchema.fields;
      $[7] = t3;
    } else {
      t3 = $[7];
    }
    let t4;
    if ($[8] !== runCommand || $[9] !== props.pos || $[10] !== props.node.nodeSize) {
      t4 = () => {
        runCommand((state, dispatch) => {
          if (dispatch) {
            dispatch(state.tr.delete(props.pos, props.pos + props.node.nodeSize));
          }
          return true;
        });
      };
      $[8] = runCommand;
      $[9] = props.pos;
      $[10] = props.node.nodeSize;
      $[11] = t4;
    } else {
      t4 = $[11];
    }
    let t5;
    if ($[12] !== componentConfig.ToolbarView || $[13] !== value || $[14] !== t3 || $[15] !== t4) {
      t5 = /*#__PURE__*/jsx(componentConfig.ToolbarView, {
        value: value,
        onChange: t3,
        onRemove: t4
      });
      $[12] = componentConfig.ToolbarView;
      $[13] = value;
      $[14] = t3;
      $[15] = t4;
      $[16] = t5;
    } else {
      t5 = $[16];
    }
    return t5;
  }
  let t3;
  if ($[17] === Symbol.for("react.memo_cache_sentinel")) {
    t3 = () => {
      setIsOpen(true);
    };
    $[17] = t3;
  } else {
    t3 = $[17];
  }
  let t4;
  if ($[18] === Symbol.for("react.memo_cache_sentinel")) {
    t4 = /*#__PURE__*/jsx(ActionButton, {
      prominence: "low",
      onPress: t3,
      children: /*#__PURE__*/jsx(Icon, {
        src: pencilIcon
      })
    });
    $[18] = t4;
  } else {
    t4 = $[18];
  }
  let t5;
  if ($[19] === Symbol.for("react.memo_cache_sentinel")) {
    t5 = /*#__PURE__*/jsxs(TooltipTrigger, {
      children: [t4, /*#__PURE__*/jsx(Tooltip, {
        children: "Edit"
      })]
    });
    $[19] = t5;
  } else {
    t5 = $[19];
  }
  let t6;
  if ($[20] !== runCommand || $[21] !== props.pos || $[22] !== props.node.nodeSize) {
    t6 = () => {
      runCommand((state_0, dispatch_0) => {
        if (dispatch_0) {
          dispatch_0(state_0.tr.delete(props.pos, props.pos + props.node.nodeSize));
        }
        return true;
      });
    };
    $[20] = runCommand;
    $[21] = props.pos;
    $[22] = props.node.nodeSize;
    $[23] = t6;
  } else {
    t6 = $[23];
  }
  let t7;
  if ($[24] === Symbol.for("react.memo_cache_sentinel")) {
    t7 = /*#__PURE__*/jsx(Icon, {
      src: trash2Icon
    });
    $[24] = t7;
  } else {
    t7 = $[24];
  }
  let t8;
  if ($[25] !== t6) {
    t8 = /*#__PURE__*/jsx(ActionButton, {
      prominence: "low",
      onPress: t6,
      children: t7
    });
    $[25] = t6;
    $[26] = t8;
  } else {
    t8 = $[26];
  }
  let t9;
  if ($[27] === Symbol.for("react.memo_cache_sentinel")) {
    t9 = /*#__PURE__*/jsx(Tooltip, {
      tone: "critical",
      children: "Remove"
    });
    $[27] = t9;
  } else {
    t9 = $[27];
  }
  let t10;
  if ($[28] !== t8) {
    t10 = /*#__PURE__*/jsxs(Flex, {
      gap: "regular",
      padding: "regular",
      children: [t5, /*#__PURE__*/jsxs(TooltipTrigger, {
        children: [t8, t9]
      })]
    });
    $[28] = t8;
    $[29] = t10;
  } else {
    t10 = $[29];
  }
  let t11;
  if ($[30] === Symbol.for("react.memo_cache_sentinel")) {
    t11 = () => {
      setIsOpen(false);
    };
    $[30] = t11;
  } else {
    t11 = $[30];
  }
  let t12;
  if ($[31] !== isOpen || $[32] !== componentConfig || $[33] !== runCommand || $[34] !== props || $[35] !== componentSchema || $[36] !== value) {
    t12 = isOpen && /*#__PURE__*/jsxs(Dialog, {
      children: [/*#__PURE__*/jsxs(Heading, {
        children: ["Edit ", componentConfig.label]
      }), /*#__PURE__*/jsx(FormValue, {
        schema: componentSchema,
        value: value,
        onSave: value_1 => {
          runCommand((state_1, dispatch_1) => {
            if (dispatch_1) {
              dispatch_1(state_1.tr.setNodeAttribute(props.pos, "props", toSerialized(value_1, componentSchema.fields)));
            }
            return true;
          });
        }
      })]
    });
    $[31] = isOpen;
    $[32] = componentConfig;
    $[33] = runCommand;
    $[34] = props;
    $[35] = componentSchema;
    $[36] = value;
    $[37] = t12;
  } else {
    t12 = $[37];
  }
  let t13;
  if ($[38] !== t12) {
    t13 = /*#__PURE__*/jsx(DialogContainer, {
      onDismiss: t11,
      children: t12
    });
    $[38] = t12;
    $[39] = t13;
  } else {
    t13 = $[39];
  }
  let t14;
  if ($[40] !== t10 || $[41] !== t13) {
    t14 = /*#__PURE__*/jsxs(Fragment, {
      children: [t10, t13]
    });
    $[40] = t10;
    $[41] = t13;
    $[42] = t14;
  } else {
    t14 = $[42];
  }
  return t14;
}
const CustomMarkPopover = props => {
  const $ = c(31);
  let t0;
  if ($[0] !== props.state.schema) {
    t0 = getEditorSchema(props.state.schema);
    $[0] = props.state.schema;
    $[1] = t0;
  } else {
    t0 = $[1];
  }
  const schema = t0;
  const componentConfig = schema.components[props.mark.type.name];
  const runCommand = useEditorDispatchCommand();
  const [isOpen, setIsOpen] = useState(false);
  let t1;
  let t2;
  if ($[2] !== componentConfig.schema) {
    t2 = {
      kind: "object",
      fields: componentConfig.schema
    };
    $[2] = componentConfig.schema;
    $[3] = t2;
  } else {
    t2 = $[3];
  }
  t1 = t2;
  const componentSchema = t1;
  const deserialized = useDeserializedValue(props.mark.attrs.props, componentConfig.schema);
  let t3;
  if ($[4] === Symbol.for("react.memo_cache_sentinel")) {
    t3 = () => {
      setIsOpen(true);
    };
    $[4] = t3;
  } else {
    t3 = $[4];
  }
  let t4;
  if ($[5] === Symbol.for("react.memo_cache_sentinel")) {
    t4 = /*#__PURE__*/jsx(ActionButton, {
      prominence: "low",
      onPress: t3,
      children: /*#__PURE__*/jsx(Icon, {
        src: pencilIcon
      })
    });
    $[5] = t4;
  } else {
    t4 = $[5];
  }
  let t5;
  if ($[6] === Symbol.for("react.memo_cache_sentinel")) {
    t5 = /*#__PURE__*/jsxs(TooltipTrigger, {
      children: [t4, /*#__PURE__*/jsx(Tooltip, {
        children: "Edit"
      })]
    });
    $[6] = t5;
  } else {
    t5 = $[6];
  }
  let t6;
  if ($[7] !== runCommand || $[8] !== props.from || $[9] !== props.to || $[10] !== props.mark.type) {
    t6 = () => {
      runCommand((state, dispatch) => {
        if (dispatch) {
          dispatch(state.tr.removeMark(props.from, props.to, props.mark.type));
        }
        return true;
      });
    };
    $[7] = runCommand;
    $[8] = props.from;
    $[9] = props.to;
    $[10] = props.mark.type;
    $[11] = t6;
  } else {
    t6 = $[11];
  }
  let t7;
  if ($[12] === Symbol.for("react.memo_cache_sentinel")) {
    t7 = /*#__PURE__*/jsx(Icon, {
      src: trash2Icon
    });
    $[12] = t7;
  } else {
    t7 = $[12];
  }
  let t8;
  if ($[13] !== t6) {
    t8 = /*#__PURE__*/jsx(ActionButton, {
      prominence: "low",
      onPress: t6,
      children: t7
    });
    $[13] = t6;
    $[14] = t8;
  } else {
    t8 = $[14];
  }
  let t9;
  if ($[15] === Symbol.for("react.memo_cache_sentinel")) {
    t9 = /*#__PURE__*/jsx(Tooltip, {
      tone: "critical",
      children: "Remove"
    });
    $[15] = t9;
  } else {
    t9 = $[15];
  }
  let t10;
  if ($[16] !== t8) {
    t10 = /*#__PURE__*/jsxs(Flex, {
      gap: "regular",
      padding: "regular",
      children: [t5, /*#__PURE__*/jsxs(TooltipTrigger, {
        children: [t8, t9]
      })]
    });
    $[16] = t8;
    $[17] = t10;
  } else {
    t10 = $[17];
  }
  let t11;
  if ($[18] === Symbol.for("react.memo_cache_sentinel")) {
    t11 = () => {
      setIsOpen(false);
    };
    $[18] = t11;
  } else {
    t11 = $[18];
  }
  let t12;
  if ($[19] !== isOpen || $[20] !== componentConfig || $[21] !== runCommand || $[22] !== props || $[23] !== componentSchema || $[24] !== deserialized) {
    t12 = isOpen && /*#__PURE__*/jsxs(Dialog, {
      children: [/*#__PURE__*/jsxs(Heading, {
        children: ["Edit ", componentConfig.label]
      }), /*#__PURE__*/jsx(FormValue, {
        schema: componentSchema,
        value: deserialized,
        onSave: value => {
          runCommand((state_0, dispatch_0) => {
            if (dispatch_0) {
              dispatch_0(state_0.tr.removeMark(props.from, props.to, props.mark.type).addMark(props.from, props.to, props.mark.type.create({
                props: toSerialized(value, componentConfig.schema)
              })));
            }
            return true;
          });
        }
      })]
    });
    $[19] = isOpen;
    $[20] = componentConfig;
    $[21] = runCommand;
    $[22] = props;
    $[23] = componentSchema;
    $[24] = deserialized;
    $[25] = t12;
  } else {
    t12 = $[25];
  }
  let t13;
  if ($[26] !== t12) {
    t13 = /*#__PURE__*/jsx(DialogContainer, {
      onDismiss: t11,
      children: t12
    });
    $[26] = t12;
    $[27] = t13;
  } else {
    t13 = $[27];
  }
  let t14;
  if ($[28] !== t10 || $[29] !== t13) {
    t14 = /*#__PURE__*/jsxs(Fragment, {
      children: [t10, t13]
    });
    $[28] = t10;
    $[29] = t13;
    $[30] = t14;
  } else {
    t14 = $[30];
  }
  return t14;
};
function getPopoverDecoration(state) {
  if (state.selection instanceof TextSelection) {
    const schema = getEditorSchema(state.schema);
    let decoration = null;
    for (const [name, componentConfig] of Object.entries(schema.components)) {
      if (componentConfig.kind !== 'mark' || !Object.keys(componentConfig.schema).length) {
        continue;
      }
      const mark = schema.schema.marks[name];
      const aroundFrom = markAround(state.selection.$from, mark);
      const aroundTo = markAround(state.selection.$to, mark);
      if (aroundFrom && aroundFrom.from === (aroundTo === null || aroundTo === void 0 ? void 0 : aroundTo.from) && aroundFrom.to === aroundTo.to) {
        const rangeSize = aroundFrom.to - aroundFrom.from;
        if (!decoration || rangeSize < decoration.to - decoration.from) {
          decoration = {
            adaptToBoundary: 'flip',
            kind: 'mark',
            component: CustomMarkPopover,
            mark: aroundFrom.mark,
            from: aroundFrom.from,
            to: aroundFrom.to
          };
        }
      }
    }
    if (schema.marks.link) {
      const linkAroundFrom = markAround(state.selection.$from, schema.marks.link);
      const linkAroundTo = markAround(state.selection.$to, schema.marks.link);
      if (linkAroundFrom && linkAroundFrom.from === (linkAroundTo === null || linkAroundTo === void 0 ? void 0 : linkAroundTo.from) && linkAroundFrom.to === linkAroundTo.to) {
        const rangeSize = linkAroundFrom.to - linkAroundFrom.from;
        if (!decoration || rangeSize < decoration.to - decoration.from) {
          return {
            adaptToBoundary: 'flip',
            kind: 'mark',
            component: LinkPopover,
            mark: linkAroundFrom.mark,
            from: linkAroundFrom.from,
            to: linkAroundFrom.to
          };
        }
      }
    }
    if (decoration) {
      return decoration;
    }
  }
  const editorSchema = getEditorSchema(state.schema);
  if (state.selection instanceof NodeSelection) {
    var _editorSchema$compone;
    const node = state.selection.node;
    if (((_editorSchema$compone = editorSchema.components[node.type.name]) === null || _editorSchema$compone === void 0 ? void 0 : _editorSchema$compone.kind) === 'inline') {
      return {
        adaptToBoundary: 'stick',
        kind: 'node',
        node,
        component: InlineComponentPopover,
        pos: state.selection.from
      };
    }
    const component = popoverComponents[node.type.name];
    if (component !== undefined && (!component.shouldShow || component.shouldShow(editorSchema))) {
      return {
        adaptToBoundary: 'stick',
        kind: 'node',
        node,
        component,
        pos: state.selection.from
      };
    }
  }
  const commonAncestorPos = state.selection.$from.start(state.selection.$from.sharedDepth(state.selection.to));
  const $pos = state.doc.resolve(commonAncestorPos);
  for (let i = $pos.depth; i > 0; i--) {
    const node = $pos.node(i);
    if (!node) break;
    const component = popoverComponents[node.type.name];
    if (component !== undefined && (!component.shouldShow || component.shouldShow(editorSchema))) {
      return {
        adaptToBoundary: 'stick',
        kind: 'node',
        node,
        component,
        pos: $pos.start(i) - 1
      };
    }
  }
  return null;
}
function PopoverInner(props) {
  const $ = c(4);
  const from = props.decoration.kind === "node" ? props.decoration.pos : props.decoration.from;
  const to = props.decoration.kind === "node" ? props.decoration.pos + props.decoration.node.nodeSize : props.decoration.to;
  const reference = useEditorReferenceElement(from, to);
  let t0;
  if ($[0] !== reference || $[1] !== props.decoration || $[2] !== props.state) {
    t0 = reference && /*#__PURE__*/jsx(EditorPopover, {
      adaptToBoundary: props.decoration.adaptToBoundary,
      minWidth: "element.medium",
      placement: "bottom",
      portal: false,
      reference: reference,
      children: props.decoration.kind === "node" ? /*#__PURE__*/jsx(props.decoration.component, {
        ...props.decoration,
        state: props.state
      }) : /*#__PURE__*/jsx(props.decoration.component, {
        ...props.decoration,
        state: props.state
      })
    });
    $[0] = reference;
    $[1] = props.decoration;
    $[2] = props.state;
    $[3] = t0;
  } else {
    t0 = $[3];
  }
  return t0;
}
function EditorPopoverDecoration(props) {
  const $ = c(5);
  let t0;
  let t1;
  if ($[0] !== props.state) {
    t1 = getPopoverDecoration(props.state);
    $[0] = props.state;
    $[1] = t1;
  } else {
    t1 = $[1];
  }
  t0 = t1;
  const popoverDecoration = t0;
  if (!popoverDecoration) {
    return null;
  }
  let t2;
  if ($[2] !== popoverDecoration || $[3] !== props.state) {
    t2 = /*#__PURE__*/jsx(PopoverInner, {
      decoration: popoverDecoration,
      state: props.state
    });
    $[2] = popoverDecoration;
    $[3] = props.state;
    $[4] = t2;
  } else {
    t2 = $[4];
  }
  return t2;
}

function ToolbarButton(props) {
  var _props$isSelected, _props$isDisabled;
  const state = useEditorState();
  const runCommand = useEditorDispatchCommand();
  const isSelected = !!((_props$isSelected = props.isSelected) !== null && _props$isSelected !== void 0 && _props$isSelected.call(props, state)); // no `undefined` — stop "uncontrolled" state taking over
  const isDisabled = !props.command(state) || ((_props$isDisabled = props.isDisabled) === null || _props$isDisabled === void 0 ? void 0 : _props$isDisabled.call(props, state));
  return useMemo(() => /*#__PURE__*/jsx(EditorToolbarButton, {
    "aria-label": props['aria-label'],
    isSelected: isSelected,
    isDisabled: isDisabled,
    onPress: () => {
      runCommand(props.command);
    },
    children: props.children
  }), [isDisabled, isSelected, props, runCommand]);
}
function LinkButton(props) {
  const [text, setText] = useState(null);
  const runCommand = useEditorDispatchCommand();
  const viewRef = useEditorViewRef();
  useEditorKeydownListener(event => {
    if (event.metaKey && (event.key === 'k' || event.key === 'K')) {
      const {
        state
      } = viewRef.current;
      if (!isMarkActive(props.link)(state)) {
        event.preventDefault();
        setText(state.doc.textBetween(state.selection.from, state.selection.to));
        return true;
      }
    }
    return false;
  });
  return useMemo(() => /*#__PURE__*/jsxs(Fragment, {
    children: [/*#__PURE__*/jsxs(TooltipTrigger, {
      children: [/*#__PURE__*/jsx(ToolbarButton, {
        "aria-label": "Divider",
        command: (state_0, dispatch) => {
          const aroundFrom = markAround(state_0.selection.$from, props.link);
          const aroundTo = markAround(state_0.selection.$to, props.link);
          if (aroundFrom && (!aroundTo || aroundFrom.mark === (aroundTo === null || aroundTo === void 0 ? void 0 : aroundTo.mark))) {
            if (dispatch) {
              var _aroundTo$to;
              dispatch(state_0.tr.removeMark(aroundFrom.from, (_aroundTo$to = aroundTo === null || aroundTo === void 0 ? void 0 : aroundTo.to) !== null && _aroundTo$to !== void 0 ? _aroundTo$to : aroundFrom.to, props.link));
            }
            return true;
          }
          if (state_0.selection.empty) {
            return false;
          }
          if (dispatch) {
            const text_0 = state_0.doc.textBetween(state_0.selection.from, state_0.selection.to);
            setText(text_0);
          }
          return true;
        },
        isSelected: isMarkActive(props.link),
        children: /*#__PURE__*/jsx(Icon, {
          src: linkIcon
        })
      }), /*#__PURE__*/jsxs(Tooltip, {
        children: [/*#__PURE__*/jsx(Text, {
          children: "Link"
        }), /*#__PURE__*/jsx(Kbd, {
          meta: true,
          children: "K"
        })]
      })]
    }), /*#__PURE__*/jsx(DialogContainer, {
      onDismiss: () => {
        setText(null);
      },
      children: text && /*#__PURE__*/jsx(LinkDialog, {
        href: "",
        text: text,
        onSubmit: attrs => {
          setText(null);
          runCommand(toggleMark(props.link, attrs));
        }
      })
    })]
  }), [props.link, runCommand, text]);
}
const Toolbar = /*#__PURE__*/memo(function Toolbar(props) {
  const schema = useEditorSchema();
  const {
    nodes,
    marks
  } = schema;
  return /*#__PURE__*/jsxs(ToolbarWrapper, {
    ...props,
    children: [/*#__PURE__*/jsxs(ToolbarScrollArea, {
      children: [nodes.heading && /*#__PURE__*/jsx(HeadingMenu, {
        headingType: nodes.heading
      }), /*#__PURE__*/jsxs(EditorToolbar, {
        "aria-label": "Formatting options",
        children: [/*#__PURE__*/jsx(EditorToolbarSeparator, {}), /*#__PURE__*/jsx(InlineMarks, {}), /*#__PURE__*/jsx(EditorToolbarSeparator, {}), /*#__PURE__*/jsx(ListButtons, {}), /*#__PURE__*/jsx(EditorToolbarSeparator, {}), /*#__PURE__*/jsxs(EditorToolbarGroup, {
          "aria-label": "Blocks",
          children: [nodes.divider && /*#__PURE__*/jsxs(TooltipTrigger, {
            children: [/*#__PURE__*/jsx(ToolbarButton, {
              "aria-label": "Divider",
              command: insertNode(nodes.divider),
              isSelected: typeInSelection(nodes.divider),
              children: /*#__PURE__*/jsx(Icon, {
                src: minusIcon
              })
            }), /*#__PURE__*/jsxs(Tooltip, {
              children: [/*#__PURE__*/jsx(Text, {
                children: "Divider"
              }), /*#__PURE__*/jsx(Kbd, {
                children: "---"
              })]
            })]
          }), marks.link && /*#__PURE__*/jsx(LinkButton, {
            link: marks.link
          }), nodes.blockquote && /*#__PURE__*/jsxs(TooltipTrigger, {
            children: [/*#__PURE__*/jsx(ToolbarButton, {
              "aria-label": "Quote",
              command: (state, dispatch) => {
                const hasQuote = typeInSelection(nodes.blockquote)(state);
                if (hasQuote) {
                  const {
                    $from,
                    $to
                  } = state.selection;
                  const range = $from.blockRange($to, node => node.type === nodes.blockquote);
                  if (!range) return false;
                  const target = liftTarget(range);
                  if (target === null) return false;
                  if (dispatch) {
                    dispatch(state.tr.lift(range, target).scrollIntoView());
                  }
                  return true;
                } else {
                  return wrapIn(nodes.blockquote)(state, dispatch);
                }
              },
              isSelected: typeInSelection(nodes.blockquote),
              children: /*#__PURE__*/jsx(Icon, {
                src: quoteIcon
              })
            }), /*#__PURE__*/jsxs(Tooltip, {
              children: [/*#__PURE__*/jsx(Text, {
                children: "Quote"
              }), /*#__PURE__*/jsx(Kbd, {
                children: '>⎵'
              })]
            })]
          }), nodes.code_block && /*#__PURE__*/jsxs(TooltipTrigger, {
            children: [/*#__PURE__*/jsx(ToolbarButton, {
              "aria-label": "Code block",
              command: toggleCodeBlock(nodes.code_block, nodes.paragraph),
              isSelected: typeInSelection(nodes.code_block),
              children: /*#__PURE__*/jsx(Icon, {
                src: codeIcon
              })
            }), /*#__PURE__*/jsxs(Tooltip, {
              children: [/*#__PURE__*/jsx(Text, {
                children: "Code block"
              }), /*#__PURE__*/jsx(Kbd, {
                children: "```"
              })]
            })]
          }), nodes.table && /*#__PURE__*/jsxs(TooltipTrigger, {
            children: [/*#__PURE__*/jsx(ToolbarButton, {
              "aria-label": "Table",
              command: insertTable(nodes.table),
              children: /*#__PURE__*/jsx(Icon, {
                src: tableIcon
              })
            }), /*#__PURE__*/jsx(Tooltip, {
              children: /*#__PURE__*/jsx(Text, {
                children: "Table"
              })
            })]
          }), nodes.image && /*#__PURE__*/jsx(ImageToolbarButton, {})]
        })]
      })]
    }), /*#__PURE__*/jsx(InsertBlockMenu, {})]
  });
});
const ToolbarContainer = ({
  children
}) => {
  let entryLayoutPane = useEntryLayoutSplitPaneContext();
  return /*#__PURE__*/jsx("div", {
    "data-layout": entryLayoutPane,
    className: css({
      alignItems: 'center',
      boxSizing: 'border-box',
      display: 'flex',
      height: tokenSchema.size.element.medium,
      [breakpointQueries.above.mobile]: {
        height: tokenSchema.size.element.large
      },
      '&[data-layout="main"]': {
        marginInline: 'auto',
        maxWidth: 800,
        minWidth: 0,
        paddingInline: tokenSchema.size.space.medium,
        [breakpointQueries.above.mobile]: {
          paddingInline: tokenSchema.size.space.xlarge
        },
        [breakpointQueries.above.tablet]: {
          paddingInline: tokenSchema.size.space.xxlarge
        }
      }
    }),
    children: children
  });
};
const ToolbarWrapper = props => {
  let entryLayoutPane = useEntryLayoutSplitPaneContext();
  return /*#__PURE__*/jsx("div", {
    ...props,
    "data-layout": entryLayoutPane,
    className: css({
      backdropFilter: 'blur(8px)',
      backgroundClip: 'padding-box',
      backgroundColor: `color-mix(in srgb, transparent, ${tokenSchema.color.background.canvas} 90%)`,
      borderBottom: `${tokenSchema.size.border.regular} solid color-mix(in srgb, transparent, ${tokenSchema.color.foreground.neutral} 10%)`,
      borderStartEndRadius: tokenSchema.size.radius.medium,
      borderStartStartRadius: tokenSchema.size.radius.medium,
      minWidth: 0,
      position: 'sticky',
      top: 0,
      zIndex: 2,
      '&[data-layout="main"]': {
        borderRadius: 0
      }
    }),
    children: /*#__PURE__*/jsx(ToolbarContainer, {
      children: props.children
    })
  });
};
const ToolbarScrollArea = props => {
  let entryLayoutPane = useEntryLayoutSplitPaneContext();
  return /*#__PURE__*/jsx("div", {
    "data-layout": entryLayoutPane,
    className: css({
      alignItems: 'center',
      display: 'flex',
      flex: 1,
      gap: tokenSchema.size.space.regular,
      paddingInline: tokenSchema.size.space.medium,
      minWidth: 0,
      overflowX: 'auto',
      // avoid cropping focus rings
      marginBlock: `calc(${tokenSchema.size.alias.focusRing} * -1)`,
      paddingBlock: tokenSchema.size.alias.focusRing,
      // hide scrollbars
      msOverflowStyle: 'none',
      // for Internet Explorer, Edge
      scrollbarWidth: 'none',
      // for Firefox
      '&::-webkit-scrollbar': {
        display: 'none'
      },
      // for Chrome, Safari, and Opera

      '&[data-layout="main"]': {
        paddingInline: 0
      }
    }),
    ...props
  });
};
const headingMenuVals = new Map([['normal', 'normal'], ['1', 1], ['2', 2], ['3', 3], ['4', 4], ['5', 5], ['6', 6]]);
function getHeadingMenuState(state, headingType, paragraphType) {
  var _activeLevel;
  let activeLevel;
  for (const range of state.selection.ranges) {
    state.doc.nodesBetween(range.$from.pos, range.$to.pos, node => {
      if (node.type === headingType) {
        const level = node.attrs.level;
        if (activeLevel === undefined) {
          activeLevel = level;
        } else if (activeLevel !== level) {
          activeLevel = 'disabled';
        }
      }
      if (node.type === paragraphType) {
        if (activeLevel === undefined) {
          activeLevel = 'normal';
        } else if (activeLevel !== 'normal') {
          activeLevel = 'disabled';
        }
      }
    });
    if (activeLevel === 'disabled') {
      break;
    }
  }
  return (_activeLevel = activeLevel) !== null && _activeLevel !== void 0 ? _activeLevel : 'disabled';
}
const HeadingMenu = props => {
  const {
    nodes,
    config
  } = useEditorSchema();
  const items = useMemo(() => {
    let resolvedItems = [{
      name: 'Paragraph',
      id: 'normal'
    }];
    config.heading.levels.forEach(level => {
      resolvedItems.push({
        name: `Heading ${level}`,
        id: level.toString()
      });
    });
    return resolvedItems;
  }, [config.heading.levels]);
  const state = useEditorState();
  const menuState = getHeadingMenuState(state, props.headingType, nodes.paragraph);
  const runCommand = useEditorDispatchCommand();
  return useMemo(() => /*#__PURE__*/jsx(Picker, {
    flexShrink: 0,
    width: "scale.1700",
    prominence: "low",
    "aria-label": "Text block",
    items: items,
    isDisabled: menuState === 'disabled',
    selectedKey: menuState === 'disabled' ? 'normal' : menuState.toString(),
    onSelectionChange: selected => {
      let key = headingMenuVals.get(selected);
      if (key === 'normal') {
        runCommand(setBlockType(nodes.paragraph));
      } else if (key) {
        runCommand(setBlockType(props.headingType, {
          level: parseInt(key)
        }));
      }
    },
    children: item => /*#__PURE__*/jsx(Item$6, {
      children: item.name
    }, item.id)
  }), [items, menuState, nodes.paragraph, props.headingType, runCommand]);
};
function InsertBlockMenu() {
  const entryLayoutPane = useEntryLayoutSplitPaneContext();
  const commandDispatch = useEditorDispatchCommand();
  const schema = useEditorSchema();
  const items = useMemo(() => schema.insertMenuItems.filter(x => x.forToolbar), [schema.insertMenuItems]);
  const idToItem = useMemo(() => new Map(items.map(item => [item.id, item])), [items]);
  if (items.length === 0) {
    return null;
  }
  return /*#__PURE__*/jsxs(MenuTrigger, {
    align: "end",
    children: [/*#__PURE__*/jsxs(TooltipTrigger, {
      children: [/*#__PURE__*/jsxs(ActionButton, {
        marginEnd: entryLayoutPane === 'main' ? undefined : 'medium',
        children: [/*#__PURE__*/jsx(Icon, {
          src: plusIcon
        }), /*#__PURE__*/jsx(Icon, {
          src: chevronDownIcon
        })]
      }), /*#__PURE__*/jsxs(Tooltip, {
        children: [/*#__PURE__*/jsx(Text, {
          children: "Insert"
        }), /*#__PURE__*/jsx(Kbd, {
          children: "/"
        })]
      })]
    }), /*#__PURE__*/jsx(Menu, {
      onAction: id => {
        var _idToItem$get;
        const command = (_idToItem$get = idToItem.get(id)) === null || _idToItem$get === void 0 ? void 0 : _idToItem$get.command;
        if (command) {
          commandDispatch(command);
        }
      },
      items: items,
      children: itemRenderer
    })]
  });
}
const isMarkActive = markType => state => {
  if (state.selection instanceof TextSelection && state.selection.empty) {
    if (!state.selection.$cursor) return false;
    return !!markType.isInSet(state.storedMarks || state.selection.$cursor.marks());
  }
  for (const range of state.selection.ranges) {
    if (state.doc.rangeHasMark(range.$from.pos, range.$to.pos, markType)) {
      return true;
    }
  }
  return false;
};
function InlineMarks() {
  const state = useEditorState();
  const schema = useEditorSchema();
  const runCommand = useEditorDispatchCommand();
  const inlineMarks = useMemo(() => {
    const marks = [];
    if (schema.marks.bold) {
      marks.push({
        key: 'bold',
        label: 'Bold',
        icon: boldIcon,
        shortcut: `B`,
        command: toggleMark(schema.marks.bold),
        isSelected: isMarkActive(schema.marks.bold)
      });
    }
    if (schema.marks.italic) {
      marks.push({
        key: 'italic',
        label: 'Italic',
        icon: italicIcon,
        shortcut: `I`,
        command: toggleMark(schema.marks.italic),
        isSelected: isMarkActive(schema.marks.italic)
      });
    }
    if (schema.marks.strikethrough) {
      marks.push({
        key: 'strikethrough',
        label: 'Strikethrough',
        icon: strikethroughIcon,
        command: toggleMark(schema.marks.strikethrough),
        isSelected: isMarkActive(schema.marks.strikethrough)
      });
    }
    if (schema.marks.code) {
      marks.push({
        key: 'code',
        label: 'Code',
        icon: codeIcon,
        command: toggleMark(schema.marks.code),
        isSelected: isMarkActive(schema.marks.code)
      });
    }
    for (const [name, componentConfig] of Object.entries(schema.components)) {
      if (componentConfig.kind !== 'mark') continue;
      marks.push({
        key: name,
        label: componentConfig.label,
        icon: componentConfig.icon,
        command: toggleMark(schema.schema.marks[name]),
        isSelected: isMarkActive(schema.schema.marks[name])
      });
    }
    marks.push({
      key: 'clearFormatting',
      label: 'Clear formatting',
      icon: removeFormattingIcon,
      command: removeAllMarks(),
      isSelected: () => false
    });
    return marks;
  }, [schema]);
  const selectedKeys = useMemoStringified(inlineMarks.filter(val => val.isSelected(state)).map(val_0 => val_0.key));
  const disabledKeys = useMemoStringified(inlineMarks.filter(val_1 => !val_1.command(state)).map(val_2 => val_2.key));
  return useMemo(() => {
    return /*#__PURE__*/jsx(EditorToolbarGroup, {
      "aria-label": "Text formatting",
      value: selectedKeys,
      onChange: key => {
        const mark_0 = inlineMarks.find(mark => mark.key === key);
        if (mark_0) {
          runCommand(mark_0.command);
        }
      },
      disabledKeys: disabledKeys,
      selectionMode: "multiple",
      children: inlineMarks.map(mark_1 => /*#__PURE__*/jsxs(TooltipTrigger, {
        children: [/*#__PURE__*/jsx(EditorToolbarItem, {
          value: mark_1.key,
          "aria-label": mark_1.label,
          children: /*#__PURE__*/jsx(Icon, {
            src: mark_1.icon
          })
        }), /*#__PURE__*/jsxs(Tooltip, {
          children: [/*#__PURE__*/jsx(Text, {
            children: mark_1.label
          }), 'shortcut' in mark_1 && /*#__PURE__*/jsx(Kbd, {
            meta: true,
            children: mark_1.shortcut
          })]
        })]
      }, mark_1.key))
    });
  }, [disabledKeys, inlineMarks, runCommand, selectedKeys]);
}
function useMemoStringified(value) {
  // eslint-disable-next-line react-hooks/exhaustive-deps
  return useMemo(() => value, [JSON.stringify(value)]);
}
function getActiveListType(state, schema) {
  const sharedDepth = state.selection.$from.sharedDepth(state.selection.to);
  for (let i = sharedDepth; i > 0; i--) {
    const node = state.selection.$from.node(i);
    if (node.type === schema.nodes.ordered_list) {
      return 'ordered_list';
    } else if (node.type === schema.nodes.unordered_list) {
      return 'unordered_list';
    }
  }
  return null;
}
function ListButtons() {
  const state = useEditorState();
  const schema = useEditorSchema();
  const dispatchCommand = useEditorDispatchCommand();
  const canWrapInOrderedList = !!schema.nodes.ordered_list && toggleList(schema.nodes.ordered_list)(state);
  const canWrapInUnorderedList = !!schema.nodes.unordered_list && toggleList(schema.nodes.unordered_list)(state);
  const activeListType = getActiveListType(state, schema);
  const items = useMemo(() => {
    return [!!schema.nodes.unordered_list && {
      label: 'Bullet list',
      key: 'unordered_list',
      shortcut: '-',
      icon: listIcon
    }, !!schema.nodes.ordered_list && {
      label: 'Numbered list',
      key: 'ordered_list',
      shortcut: '1.',
      icon: listOrderedIcon
    }].filter(removeFalse);
  }, [schema.nodes.unordered_list, schema.nodes.ordered_list]);
  const disabledKeys = useMemo(() => {
    return [!canWrapInOrderedList && 'ordered_list', !canWrapInUnorderedList && 'unordered_list'].filter(removeFalse);
  }, [canWrapInOrderedList, canWrapInUnorderedList]);
  return useMemo(() => {
    if (items.length === 0) {
      return null;
    }
    return /*#__PURE__*/jsx(EditorToolbarGroup, {
      "aria-label": "Lists",
      value: activeListType,
      onChange: key => {
        const format = key;
        const type = schema.nodes[format];
        if (type) {
          dispatchCommand(toggleList(type));
        }
      },
      disabledKeys: disabledKeys,
      selectionMode: "single",
      children: items.map(item => /*#__PURE__*/jsxs(TooltipTrigger, {
        children: [/*#__PURE__*/jsx(EditorToolbarItem, {
          value: item.key,
          "aria-label": item.label,
          children: /*#__PURE__*/jsx(Icon, {
            src: item.icon
          })
        }), /*#__PURE__*/jsxs(Tooltip, {
          children: [/*#__PURE__*/jsx(Text, {
            children: item.label
          }), /*#__PURE__*/jsx(Kbd, {
            meta: true,
            children: item.shortcut
          })]
        })]
      }, item.key))
    });
  }, [activeListType, disabledKeys, dispatchCommand, items, schema.nodes]);
}
function removeFalse(val) {
  return val !== false;
}
function removeAllMarks() {
  return (state, dispatch) => {
    if (state.selection.empty) {
      return false;
    }
    if (dispatch) {
      dispatch(state.tr.removeMark(state.selection.from, state.selection.to));
    }
    return true;
  };
}
function typeInSelection(type) {
  return state => {
    let hasBlock = false;
    for (const range of state.selection.ranges) {
      state.doc.nodesBetween(range.$from.pos, range.$to.pos, node => {
        if (node.type === type) {
          hasBlock = true;
        }
      });
      if (hasBlock) break;
    }
    return hasBlock;
  };
}

let i = 0;
function NodeViewContentDOM(props) {
  const viewRef = useEditorViewRef();
  return /*#__PURE__*/jsx("span", {
    className: displayContentsClassName,
    ref: useCallback(element => {
      if (!element) return;
      element.appendChild(props.node);
      const view = viewRef.current;
      if (!view) return;
      if (view.hasFocus()) {
        view.focus();
      }
    }, [props.node, viewRef])
  });
}
const NodeViewWrapper = /*#__PURE__*/memo(function NodeViewWrapper(props) {
  const $ = c(9);
  let t0;
  if ($[0] !== props.contentDOM) {
    t0 = props.contentDOM ? /*#__PURE__*/jsx(NodeViewContentDOM, {
      node: props.contentDOM
    }) : null;
    $[0] = props.contentDOM;
    $[1] = t0;
  } else {
    t0 = $[1];
  }
  let t1;
  if ($[2] !== props.component || $[3] !== props.node || $[4] !== props.getPos || $[5] !== props.hasNodeSelection || $[6] !== props.isNodeCompletelyWithinSelection || $[7] !== t0) {
    t1 = /*#__PURE__*/jsx(props.component, {
      node: props.node,
      getPos: props.getPos,
      hasNodeSelection: props.hasNodeSelection,
      isNodeCompletelyWithinSelection: props.isNodeCompletelyWithinSelection,
      children: t0
    });
    $[2] = props.component;
    $[3] = props.node;
    $[4] = props.getPos;
    $[5] = props.hasNodeSelection;
    $[6] = props.isNodeCompletelyWithinSelection;
    $[7] = t0;
    $[8] = t1;
  } else {
    t1 = $[8];
  }
  return t1;
});
function NodeViews(props) {
  const $ = c(12);
  let t0;
  if ($[0] !== props.state) {
    t0 = reactNodeViewKey.getState(props.state);
    $[0] = props.state;
    $[1] = t0;
  } else {
    t0 = $[1];
  }
  const pluginState = t0;
  let t1;
  if ($[2] !== pluginState.nodeViews) {
    t1 = () => new Map(pluginState.nodeViews);
    $[2] = pluginState.nodeViews;
    $[3] = t1;
  } else {
    t1 = $[3];
  }
  const [nodeViews, setNodeViews] = useState(t1);
  let t2;
  let t3;
  if ($[4] !== pluginState) {
    t2 = () => pluginState.register(() => {
      setNodeViews(new Map(pluginState.nodeViews));
    });
    t3 = [pluginState];
    $[4] = pluginState;
    $[5] = t2;
    $[6] = t3;
  } else {
    t2 = $[5];
    t3 = $[6];
  }
  useLayoutEffect(t2, t3);
  const nodeSelectionPos = props.state.selection instanceof NodeSelection ? props.state.selection.from : undefined;
  const selectionFrom = props.state.selection.from;
  const selectionTo = props.state.selection.to;
  let t4;
  if ($[7] !== nodeViews || $[8] !== nodeSelectionPos || $[9] !== selectionFrom || $[10] !== selectionTo) {
    t4 = /*#__PURE__*/jsx(Fragment, {
      children: [...nodeViews].map(t5 => {
        const [key, t6] = t5;
        const {
          contentDOM,
          dom,
          node,
          getPos
        } = t6;
        const nodeViewSpec = getReactNodeViewSpec(node.type);
        if (!nodeViewSpec) {
          return null;
        }
        const pos = getPos();
        if (pos === undefined) {
          return null;
        }
        return /*#__PURE__*/createPortal( /*#__PURE__*/jsx(NodeViewWrapper, {
          hasNodeSelection: nodeSelectionPos === pos,
          isNodeCompletelyWithinSelection: pos >= selectionFrom && pos + node.nodeSize <= selectionTo,
          node: node,
          contentDOM: contentDOM,
          component: nodeViewSpec.component,
          getPos: getPos
        }), dom, key);
      })
    });
    $[7] = nodeViews;
    $[8] = nodeSelectionPos;
    $[9] = selectionFrom;
    $[10] = selectionTo;
    $[11] = t4;
  } else {
    t4 = $[11];
  }
  return t4;
}
function getReactNodeViewSpec(type) {
  return type.spec.reactNodeView;
}
const displayContentsClassName = css({
  display: 'contents'
});
function elementWithDisplayContents(tag) {
  const element = document.createElement(tag);
  element.classList.add(displayContentsClassName);
  return element;
}
const reactNodeViewKey = new PluginKey('reactNodeViews');
function reactNodeViews(schema) {
  const nodes = new Set();
  for (const nodeType of Object.values(schema.nodes)) {
    if (nodeType.spec.reactNodeView || nodeType.spec.nodeView) {
      nodes.add(nodeType);
    }
  }
  const plugin = new Plugin({
    key: reactNodeViewKey,
    state: {
      init() {
        const callbacks = new Set();
        return {
          nodeViews: new Map(),
          callbacks,
          register: callback => {
            callbacks.add(callback);
            return () => {
              callbacks.delete(callback);
            };
          }
        };
      },
      apply(tr, pluginState) {
        return pluginState;
      }
    },
    props: {
      nodeViews: Object.fromEntries([...nodes].map(type => [type.name, (node, view, getPos) => {
        if (type.spec.nodeView) {
          return type.spec.nodeView(node, view, getPos);
        }
        const reactNodeViewSpec = getReactNodeViewSpec(type);
        const dom = document.createElement(type.isInline ? 'span' : 'div');
        const contentDOM = reactNodeViewSpec !== null && reactNodeViewSpec !== void 0 && reactNodeViewSpec.rendersOwnContent || type.isLeaf ? undefined : elementWithDisplayContents(type.inlineContent ? 'div' : 'span');
        const inner = elementWithDisplayContents(type.inlineContent ? 'div' : 'span');
        dom.appendChild(inner);
        const key = `${i++}`;
        const info = {
          contentDOM,
          dom: inner,
          getPos,
          key,
          node
        };
        const pluginState = reactNodeViewKey.getState(view.state);
        pluginState.nodeViews.set(key, info);
        const cb = () => {
          for (const callback of pluginState.callbacks) {
            callback();
          }
        };
        cb();
        return {
          dom,
          contentDOM,
          destroy() {
            pluginState.nodeViews.delete(key);
            cb();
          },
          ignoreMutation(mutation) {
            return !(contentDOM !== null && contentDOM !== void 0 && contentDOM.contains(mutation.target));
          },
          deselectNode() {},
          selectNode() {},
          update(node) {
            if (node.type !== type) return false;
            pluginState.nodeViews.set(key, {
              ...info,
              node
            });
            cb();
            return true;
          }
        };
      }]))
    }
  });
  return plugin;
}

const cellActions = {
  deleteRow: {
    label: 'Delete row',
    command: deleteRow
  },
  deleteColumn: {
    label: 'Delete column',
    command: deleteColumn
  },
  insertRowBelow: {
    label: 'Insert row below',
    command: addRowAfter
  },
  insertColumnRight: {
    label: 'Insert column right',
    command: addColumnAfter
  }
};
function CellMenu() {
  const $ = c(12);
  const runCommand = useEditorDispatchCommand();
  const gutter = tokenSchema.size.space.small;
  let t0;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    t0 = css$1({
      top: gutter,
      insetInlineEnd: gutter,
      position: "absolute"
    });
    $[0] = t0;
  } else {
    t0 = $[0];
  }
  let t1;
  if ($[1] === Symbol.for("react.memo_cache_sentinel")) {
    t1 = css$1({
      borderRadius: tokenSchema.size.radius.small,
      height: "auto",
      minWidth: 0,
      padding: 0,
      "&::before": {
        content: "\"\"",
        inset: `calc(${gutter} * -1)`,
        position: "absolute"
      }
    });
    $[1] = t1;
  } else {
    t1 = $[1];
  }
  let t2;
  if ($[2] === Symbol.for("react.memo_cache_sentinel")) {
    t2 = /*#__PURE__*/jsx(ActionButton, {
      prominence: "low",
      "aria-label": "Cell options",
      UNSAFE_className: t1,
      children: /*#__PURE__*/jsx(Icon, {
        src: chevronDownIcon
      })
    });
    $[2] = t2;
  } else {
    t2 = $[2];
  }
  let t3;
  if ($[3] !== runCommand) {
    t3 = key => {
      if (key in cellActions) {
        runCommand(cellActions[key].command);
      }
    };
    $[3] = runCommand;
    $[4] = t3;
  } else {
    t3 = $[4];
  }
  let t4;
  let t5;
  if ($[5] === Symbol.for("react.memo_cache_sentinel")) {
    t4 = Object.entries(cellActions).map(t6 => {
      const [key_0, item] = t6;
      return {
        ...item,
        key: key_0
      };
    });
    t5 = item_0 => /*#__PURE__*/jsx(Item$1, {
      children: item_0.label
    }, item_0.key);
    $[5] = t4;
    $[6] = t5;
  } else {
    t4 = $[5];
    t5 = $[6];
  }
  let t6;
  if ($[7] !== t3) {
    t6 = /*#__PURE__*/jsxs(MenuTrigger, {
      align: "end",
      children: [t2, /*#__PURE__*/jsx(Menu, {
        onAction: t3,
        items: t4,
        children: t5
      })]
    });
    $[7] = t3;
    $[8] = t6;
  } else {
    t6 = $[8];
  }
  let t7;
  if ($[9] === Symbol.for("react.memo_cache_sentinel")) {
    t7 = /*#__PURE__*/jsx(Tooltip, {
      children: "Options"
    });
    $[9] = t7;
  } else {
    t7 = $[9];
  }
  let t8;
  if ($[10] !== t6) {
    t8 = /*#__PURE__*/jsx("div", {
      contentEditable: false,
      className: t0,
      children: /*#__PURE__*/jsxs(TooltipTrigger, {
        children: [t6, t7]
      })
    });
    $[10] = t6;
    $[11] = t8;
  } else {
    t8 = $[11];
  }
  return t8;
}
function getDecoration(state) {
  const cellPos = findCellPosAbove(state.selection.$from);
  if (cellPos !== undefined) {
    const element = document.createElement('div');
    const decoration = Decoration.widget(cellPos + 1, element, {
      element,
      side: 1
    });
    return {
      set: DecorationSet.create(state.doc, [decoration]),
      element
    };
  }
}
const _tableCellMenuPlugin = new Plugin({
  state: {
    init(config, state) {
      return getDecoration(state);
    },
    apply(tr, oldPluginState, oldState, state) {
      return getDecoration(state);
    }
  },
  props: {
    decorations(state) {
      var _tableCellMenuPlugin$;
      return (_tableCellMenuPlugin$ = _tableCellMenuPlugin.getState(state)) === null || _tableCellMenuPlugin$ === void 0 ? void 0 : _tableCellMenuPlugin$.set;
    }
  }
});
function tableCellMenuPlugin() {
  return _tableCellMenuPlugin;
}
function CellMenuPortal() {
  const $ = c(4);
  const state = useEditorState();
  let t0;
  let t1;
  if ($[0] !== state) {
    t1 = Symbol.for("react.early_return_sentinel");
    bb0: {
      var _tableCellMenuPlugin$2;
      const element = (_tableCellMenuPlugin$2 = _tableCellMenuPlugin.getState(state)) === null || _tableCellMenuPlugin$2 === void 0 ? void 0 : _tableCellMenuPlugin$2.element;
      if (!element) {
        t1 = null;
        break bb0;
      }
      let t2;
      if ($[3] === Symbol.for("react.memo_cache_sentinel")) {
        t2 = /*#__PURE__*/jsx(CellMenu, {});
        $[3] = t2;
      } else {
        t2 = $[3];
      }
      t0 = /*#__PURE__*/createPortal(t2, element);
    }
    $[0] = state;
    $[1] = t0;
    $[2] = t1;
  } else {
    t0 = $[1];
    t1 = $[2];
  }
  if (t1 !== Symbol.for("react.early_return_sentinel")) {
    return t1;
  }
  return t0;
}
function findCellPosAbove($pos) {
  for (let d = $pos.depth; d > 0; d--) {
    const node = $pos.node(d);
    const role = node.type.spec.tableRole;
    if (role === 'cell' || role === 'header_cell') {
      return $pos.before(d);
    }
  }
}

const EditorContext = /*#__PURE__*/createContext({
  id: ''
});
const EditorContextProvider = EditorContext.Provider;
function getRootId(id) {
  return `keystatic-editor-root-${id}`;
}
function getToolbarId(id) {
  return `keystatic-editor-toolbar-${id}`;
}
function getContentId(id) {
  return `keystatic-editor-content-${id}`;
}

const contentStyles = css({
  flex: 1,
  height: 'auto',
  minHeight: tokenSchema.size.scale[2000],
  minWidth: 0,
  outline: 0,
  padding: tokenSchema.size.space.medium,
  '[data-layout="main"] > div > &': {
    boxSizing: 'border-box',
    height: '100%',
    padding: 0,
    paddingTop: tokenSchema.size.space.medium,
    minHeight: 0,
    minWidth: 0,
    maxWidth: 800,
    marginInline: 'auto',
    [breakpointQueries.above.mobile]: {
      padding: tokenSchema.size.space.xlarge
    },
    [breakpointQueries.above.tablet]: {
      padding: tokenSchema.size.space.xxlarge
    },
    '&[data-container="wide"]': {
      padding: tokenSchema.size.scale[600]
    }
  }
});
const Editor = /*#__PURE__*/forwardRef(function Editor(t0, ref) {
  const $ = c(46);
  let _value;
  let _onChange;
  let props;
  if ($[0] !== t0) {
    ({
      value: _value,
      onChange: _onChange,
      ...props
    } = t0);
    $[0] = t0;
    $[1] = _value;
    $[2] = _onChange;
    $[3] = props;
  } else {
    _value = $[1];
    _onChange = $[2];
    props = $[3];
  }
  const [valueWhileInCollab, setValueWhileInCollab] = useState(_value);
  if ("yjs" in _onChange) {
    var _ySyncPluginKey$getSt;
    const yjsFragment = (_ySyncPluginKey$getSt = ySyncPluginKey.getState(valueWhileInCollab)) === null || _ySyncPluginKey$getSt === void 0 ? void 0 : _ySyncPluginKey$getSt.type;
    if (yjsFragment !== _onChange.yjs()) {
      setValueWhileInCollab(_value);
    }
  }
  const entryLayoutPane = useEntryLayoutSplitPaneContext();
  const containerSize = useContentPanelSize();
  const t1 = entryLayoutPane === "main" ? "medium" : "regular";
  let t2;
  if ($[4] !== entryLayoutPane || $[5] !== containerSize) {
    t2 = toDataAttributes({
      layout: entryLayoutPane,
      container: containerSize
    });
    $[4] = entryLayoutPane;
    $[5] = containerSize;
    $[6] = t2;
  } else {
    t2 = $[6];
  }
  let t3;
  if ($[7] !== t1 || $[8] !== t2) {
    t3 = {
      size: t1,
      UNSAFE_className: contentStyles,
      ...t2
    };
    $[7] = t1;
    $[8] = t2;
    $[9] = t3;
  } else {
    t3 = $[9];
  }
  const styleProps = useProseStyleProps(t3);
  let value;
  let onChange;
  if (yCursorPluginKey.getState(_value)) {
    value = valueWhileInCollab !== null && valueWhileInCollab !== void 0 ? valueWhileInCollab : _value;
    onChange = setValueWhileInCollab;
  } else {
    value = _value;
    onChange = _onChange;
  }
  const id = useId();
  let t4;
  let t5;
  if ($[10] !== id) {
    t5 = {
      id
    };
    $[10] = id;
    $[11] = t5;
  } else {
    t5 = $[11];
  }
  t4 = t5;
  const editorContext = t4;
  let t6;
  if ($[12] !== id) {
    t6 = getRootId(id);
    $[12] = id;
    $[13] = t6;
  } else {
    t6 = $[13];
  }
  let t7;
  if ($[14] === Symbol.for("react.memo_cache_sentinel")) {
    t7 = css(prosemirrorStyles, {
      "&[data-layout=\"main\"]": {
        flex: 1,
        display: "flex",
        flexDirection: "column"
      },
      "&:not([data-layout=\"main\"])": {
        border: `${tokenSchema.size.border.regular} solid ${tokenSchema.color.border.neutral}`,
        borderRadius: tokenSchema.size.radius.medium
      }
    });
    $[14] = t7;
  } else {
    t7 = $[14];
  }
  let t8;
  if ($[15] !== id) {
    t8 = getToolbarId(id);
    $[15] = id;
    $[16] = t8;
  } else {
    t8 = $[16];
  }
  let t9;
  if ($[17] !== t8) {
    t9 = /*#__PURE__*/jsx(Toolbar, {
      id: t8,
      "data-keystatic-editor": "toolbar"
    });
    $[17] = t8;
    $[18] = t9;
  } else {
    t9 = $[18];
  }
  let t10;
  if ($[19] !== id) {
    t10 = getContentId(id);
    $[19] = id;
    $[20] = t10;
  } else {
    t10 = $[20];
  }
  let t11;
  if ($[21] !== props || $[22] !== styleProps || $[23] !== t10) {
    t11 = /*#__PURE__*/jsx("div", {
      children: /*#__PURE__*/jsx(ProseMirrorEditable, {
        ...props,
        ...styleProps,
        role: "textbox",
        "aria-multiline": "true",
        id: t10,
        "data-keystatic-editor": "content"
      })
    });
    $[21] = props;
    $[22] = styleProps;
    $[23] = t10;
    $[24] = t11;
  } else {
    t11 = $[24];
  }
  let t12;
  if ($[25] !== t6 || $[26] !== entryLayoutPane || $[27] !== t9 || $[28] !== t11) {
    t12 = /*#__PURE__*/jsxs(Box, {
      id: t6,
      "data-keystatic-editor": "root",
      "data-layout": entryLayoutPane,
      backgroundColor: "canvas",
      minWidth: 0,
      UNSAFE_className: t7,
      children: [t9, t11]
    });
    $[25] = t6;
    $[26] = entryLayoutPane;
    $[27] = t9;
    $[28] = t11;
    $[29] = t12;
  } else {
    t12 = $[29];
  }
  let t13;
  if ($[30] !== value) {
    t13 = /*#__PURE__*/jsx(NodeViews, {
      state: value
    });
    $[30] = value;
    $[31] = t13;
  } else {
    t13 = $[31];
  }
  let t14;
  if ($[32] === Symbol.for("react.memo_cache_sentinel")) {
    t14 = /*#__PURE__*/jsx(CellMenuPortal, {});
    $[32] = t14;
  } else {
    t14 = $[32];
  }
  let t15;
  if ($[33] !== value) {
    t15 = /*#__PURE__*/jsx(EditorPopoverDecoration, {
      state: value
    });
    $[33] = value;
    $[34] = t15;
  } else {
    t15 = $[34];
  }
  let t16;
  if ($[35] === Symbol.for("react.memo_cache_sentinel")) {
    t16 = /*#__PURE__*/jsx(AutocompleteDecoration, {});
    $[35] = t16;
  } else {
    t16 = $[35];
  }
  let t17;
  if ($[36] !== value || $[37] !== onChange || $[38] !== ref || $[39] !== t12 || $[40] !== t13 || $[41] !== t15) {
    t17 = /*#__PURE__*/jsxs(ProseMirrorEditor, {
      value: value,
      onChange: onChange,
      ref: ref,
      children: [t12, t13, t14, t15, t16]
    });
    $[36] = value;
    $[37] = onChange;
    $[38] = ref;
    $[39] = t12;
    $[40] = t13;
    $[41] = t15;
    $[42] = t17;
  } else {
    t17 = $[42];
  }
  let t18;
  if ($[43] !== editorContext || $[44] !== t17) {
    t18 = /*#__PURE__*/jsx(EditorContextProvider, {
      value: editorContext,
      children: t17
    });
    $[43] = editorContext;
    $[44] = t17;
    $[45] = t18;
  } else {
    t18 = $[45];
  }
  return t18;
});

const emptyDecorations = [];
function getDecorationsForIndividualNode(node) {
  if (!node.type.spec.code || !node.childCount) return emptyDecorations;
  const text = node.content.child(0).text;
  if (!text) return emptyDecorations;
  const lang = node.attrs.language;
  if (typeof lang !== 'string' || !Object.prototype.hasOwnProperty.call(Prism.languages, node.attrs.language)) {
    return emptyDecorations;
  }
  const decorations = [];
  const tokens = Prism.tokenize(text, Prism.languages[node.attrs.language]);
  function consumeTokens(start, tokens) {
    for (const token of tokens) {
      const length = getPrismTokenLength(token);
      const end = start + length;
      if (typeof token !== 'string') {
        const className = styles.get(token.type);
        if (className) {
          decorations.push({
            attrs: {
              class: className
            },
            from: start,
            to: end
          });
        }
        consumeTokens(start, Array.isArray(token.content) ? token.content : [token.content]);
      }
      start = end;
    }
  }
  consumeTokens(0, tokens);
  return decorations;
}
function getDecorationsForFragment(fragment) {
  let start = 0;
  const allDecorations = [];
  for (let i = 0; i < fragment.childCount; i++) {
    const node = fragment.child(i);
    const decorations = getDecorationsForNode(node);
    if (!decorations.length) {
      start += node.nodeSize;
      continue;
    }
    const textStart = start + 1;
    for (const decoration of decorations) {
      allDecorations.push({
        attrs: decoration.attrs,
        from: decoration.from + textStart,
        to: decoration.to + textStart
      });
    }
    start += node.nodeSize;
  }
  return allDecorations;
}
const getDecorationsForNode = weakMemoize(node => {
  if (node.isTextblock) return getDecorationsForIndividualNode(node);
  return getDecorationsForFragment(node.content);
});
function codeBlockSyntaxHighlighting() {
  return new Plugin({
    props: {
      decorations(state) {
        const decorations = getDecorationsForNode(state.doc).map(decoration => Decoration.inline(decoration.from, decoration.to, decoration.attrs));
        return DecorationSet.create(state.doc, decorations);
      }
    }
  });
}
function getPrismTokenLength(token) {
  if (typeof token === 'string') {
    return token.length;
  } else if (Array.isArray(token.content)) {
    return token.content.reduce((l, t) => l + getPrismTokenLength(t), 0);
  } else {
    return getPrismTokenLength(token.content);
  }
}
const styles = new Map([{
  types: ['comment', 'prolog', 'doctype', 'cdata'],
  style: {
    color: tokenSchema.color.foreground.neutralTertiary,
    fontStyle: 'italic'
  }
}, {
  types: ['atrule', 'attr-name', 'class-name', 'selector'],
  style: {
    color: tokenSchema.color.scale.amber11
  }
}, {
  types: ['boolean', 'constant', 'inserted-sign', 'entity', 'inserted', 'number', 'regex', 'symbol', 'variable'],
  style: {
    color: tokenSchema.color.scale.green11
  }
}, {
  types: ['attr-value', 'builtin', 'char', 'constant', 'generics', 'url'],
  style: {
    color: tokenSchema.color.scale.pink11
  }
}, {
  types: ['string'],
  style: {
    color: tokenSchema.color.scale.indigo9
  }
}, {
  types: ['annotation', 'deleted', 'deleted-sign', 'decorator', 'important', 'tag'],
  style: {
    color: tokenSchema.color.scale.red11
  }
}, {
  types: ['function', 'function-variable', 'operator'],
  style: {
    color: tokenSchema.color.scale.purple11
  }
}, {
  types: ['tag', 'selector', 'keyword'],
  style: {
    color: tokenSchema.color.scale.indigo11
  }
}, {
  types: ['punctuation'],
  style: {
    color: tokenSchema.color.foreground.neutralSecondary
  }
}].flatMap(style => {
  const className = css(style.style);
  return style.types.map(x => [x, className]);
}));

const mac = typeof navigator != 'undefined' ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : false;
const codeModiferEnterCommand = (state, dispatch, view) => {
  const {
    $head,
    $anchor
  } = state.selection;
  if (!$head.parent.type.spec.code || !$head.sameParent($anchor)) {
    return false;
  }
  return chainCommands(createParagraphNear, liftEmptyBlock, splitBlock)(state, dispatch, view);
};
function findSelectableAncestor($pos, startDepth) {
  for (let depth = startDepth; depth > 0; depth--) {
    let pos = $pos.before(depth);
    const node = $pos.doc.nodeAt(pos);
    if (node && node.type.spec.selectable !== false) {
      return pos;
    }
  }
}
const selectParentSelectableNode = (state, dispatch) => {
  const {
    $from,
    to
  } = state.selection;
  const same = $from.sharedDepth(to);
  if (same === 0) return false;
  const pos = findSelectableAncestor($from, same);
  if (pos === undefined) return false;
  if (dispatch) {
    dispatch(state.tr.setSelection(NodeSelection.create(state.doc, pos)));
  }
  return true;
};
function keymapForSchema({
  nodes,
  marks,
  config
}, isCollab) {
  const bindings = {};
  const add = (key, command) => {
    if (bindings[key]) {
      bindings[key] = chainCommands(bindings[key], command);
    } else {
      bindings[key] = command;
    }
  };
  if (nodes.list_item) {
    add('Enter', splitListItem(nodes.list_item));
    add('Tab', sinkListItem(nodes.list_item));
    add('Shift-Tab', liftListItem(nodes.list_item));
  }
  add('Enter', chainCommands(newlineInCode, createParagraphNear, liftEmptyBlock, splitBlock));
  let deleteBackward = chainCommands(deleteSelection, joinBackward, selectNodeBackward);
  let deleteForward = chainCommands(deleteSelection, joinForward, selectNodeForward);
  add('Backspace', deleteBackward);
  add('Mod-Backspace', deleteBackward);
  add('Shift-Backspace', deleteBackward);
  add('Delete', deleteForward);
  add('Mod-Delete', deleteForward);
  add('Mod-a', selectAll);
  if (mac) {
    add('Ctrl-h', deleteBackward);
    add('Alt-Backspace', deleteBackward);
    add('Ctrl-d', deleteForward);
    add('Ctrl-Alt-Backspace', deleteForward);
    add('Alt-Delete', deleteForward);
    add('Alt-d', deleteForward);
    add('Ctrl-a', selectTextblockStart);
    add('Ctrl-e', selectTextblockEnd);
  }
  add('Mod-z', isCollab ? undo : undo$1);
  add('Shift-Mod-z', isCollab ? redo : redo$1);
  if (mac) {
    add('Mod-y', isCollab ? redo : redo$1);
  }
  const modiferEnterKeys = ['Mod-Enter', 'Shift-Enter'];
  if (mac) {
    modiferEnterKeys.push('Ctrl-Enter');
  }
  for (const key of modiferEnterKeys) {
    add(key, codeModiferEnterCommand);
    if (nodes.hard_break) {
      add(key, insertHardBreak(nodes.hard_break));
    }
  }
  for (const mark of Object.values(marks)) {
    if (mark.spec.shortcuts) {
      if (Array.isArray(mark.spec.shortcuts)) {
        for (const shortcut of mark.spec.shortcuts) {
          if (typeof shortcut !== 'string') {
            throw new Error(`Invalid shortcut for mark ${mark.name}`);
          }
          add(shortcut, toggleMark(mark));
        }
        continue;
      }
      throw new Error(`Invalid shortcuts for mark ${mark.name}`);
    }
  }
  add('Alt-ArrowUp', joinUp);
  add('Alt-ArrowDown', joinDown);
  add('Escape', selectParentSelectableNode);
  if (nodes.unordered_list) {
    add('Shift-Ctrl-8', toggleList(nodes.unordered_list));
  }
  if (nodes.ordered_list) {
    add('Shift-Ctrl-9', toggleList(nodes.ordered_list));
  }
  add('Shift-Ctrl-0', setBlockType(nodes.paragraph));
  if (nodes.heading) {
    for (const level of config.heading.levels) {
      add(`Shift-Ctrl-${level}`, setBlockType(nodes.heading, {
        level
      }));
    }
  }
  return bindings;
}
function insertHardBreak(hardBreakType) {
  return (state, dispatch) => {
    if (dispatch) {
      dispatch(state.tr.replaceSelectionWith(hardBreakType.create()).scrollIntoView());
    }
    return true;
  };
}

// https://github.com/ProseMirror/prosemirror-dropcursor/blob/d7347ca3d07cd9207ce83e33ed066629da4c3a9d/src/dropcursor.ts
/// Create a plugin that, when added to a ProseMirror instance,
/// causes a decoration to show up at the drop position when something
/// is dragged over the editor.
///
/// Nodes may add a `disableDropCursor` property to their spec to
/// control the showing of a drop cursor inside them. This may be a
/// boolean or a function, which will be called with a view and a
/// position, and should return a boolean.
function dropCursor(options = {}) {
  return new Plugin({
    view(editorView) {
      return new DropCursorView(editorView, options);
    }
  });
}
class DropCursorView {
  cursorPos = null;
  element = null;
  constructor(editorView, options) {
    var _options$width;
    this.editorView = editorView;
    this.width = (_options$width = options.width) !== null && _options$width !== void 0 ? _options$width : 1;
    this.color = options.color === false ? undefined : options.color || 'black';
    this.class = options.class;
    this.handlers = ['dragover', 'dragend', 'drop', 'dragleave'].map(name => {
      let handler = e => {
        this[name](e);
      };
      editorView.dom.addEventListener(name, handler);
      return {
        name,
        handler
      };
    });
  }
  destroy() {
    this.handlers.forEach(({
      name,
      handler
    }) => this.editorView.dom.removeEventListener(name, handler));
  }
  update(editorView, prevState) {
    if (this.cursorPos != null && prevState.doc != editorView.state.doc) {
      if (this.cursorPos > editorView.state.doc.content.size) {
        this.setCursor(null);
      } else this.updateOverlay();
    }
  }
  setCursor(pos) {
    if (pos == this.cursorPos) return;
    this.cursorPos = pos;
    if (pos == null) {
      this.element.parentNode.removeChild(this.element);
      this.element = null;
    } else {
      this.updateOverlay();
    }
  }
  updateOverlay() {
    let $pos = this.editorView.state.doc.resolve(this.cursorPos);
    let isBlock = !$pos.parent.inlineContent,
      rect;
    if (isBlock) {
      let before = $pos.nodeBefore,
        after = $pos.nodeAfter;
      if (before || after) {
        let node = this.editorView.nodeDOM(this.cursorPos - (before ? before.nodeSize : 0));
        if (node) {
          let nodeRect = node.getBoundingClientRect();
          let top = before ? nodeRect.bottom : nodeRect.top;
          if (before && after) {
            top = (top + this.editorView.nodeDOM(this.cursorPos).getBoundingClientRect().top) / 2;
          }
          rect = {
            left: nodeRect.left,
            right: nodeRect.right,
            top: top - this.width / 2,
            bottom: top + this.width / 2
          };
        }
      }
    }
    if (!rect) {
      let coords = this.editorView.coordsAtPos(this.cursorPos);
      rect = {
        left: coords.left - this.width / 2,
        right: coords.left + this.width / 2,
        top: coords.top,
        bottom: coords.bottom
      };
    }
    let parent = this.editorView.dom.offsetParent;
    if (!this.element) {
      this.element = parent.appendChild(document.createElement('div'));
      if (this.class) this.element.className = this.class;
      this.element.style.cssText = 'position: absolute; z-index: 50; pointer-events: none;';
      if (this.color) {
        this.element.style.backgroundColor = this.color;
      }
    }
    this.element.classList.toggle('prosemirror-dropcursor-block', isBlock);
    this.element.classList.toggle('prosemirror-dropcursor-inline', !isBlock);
    let parentLeft, parentTop;
    if (!parent || parent == document.body && getComputedStyle(parent).position == 'static') {
      parentLeft = -pageXOffset;
      parentTop = -pageYOffset;
    } else {
      let rect = parent.getBoundingClientRect();
      parentLeft = rect.left - parent.scrollLeft;
      parentTop = rect.top - parent.scrollTop;
    }
    this.element.style.left = rect.left - parentLeft + 'px';
    this.element.style.top = rect.top - parentTop + 'px';
    this.element.style.width = rect.right - rect.left + 'px';
    this.element.style.height = rect.bottom - rect.top + 'px';
  }
  scheduleRemoval(timeout) {
    if (this.timeout !== undefined) {
      clearTimeout(this.timeout);
    }
    this.timeout = setTimeout(() => this.setCursor(null), timeout);
  }
  dragover(event) {
    if (!this.editorView.editable) return;
    let pos = this.editorView.posAtCoords({
      left: event.clientX,
      top: event.clientY
    });
    let node = pos && pos.inside >= 0 && this.editorView.state.doc.nodeAt(pos.inside);
    let disableDropCursor = node && node.type.spec.disableDropCursor;
    let disabled = typeof disableDropCursor == 'function' ? disableDropCursor(this.editorView, pos, event) : disableDropCursor;
    if (pos && !disabled) {
      let target = pos.pos;
      if (this.editorView.dragging && this.editorView.dragging.slice) {
        let point = dropPoint(this.editorView.state.doc, target, this.editorView.dragging.slice);
        if (point != null) target = point;
      }
      this.setCursor(target);
      this.scheduleRemoval(5000);
    }
  }
  dragend() {
    this.scheduleRemoval(20);
  }
  drop() {
    this.scheduleRemoval(20);
  }
  dragleave(event) {
    if (event.target == this.editorView.dom || !this.editorView.dom.contains(event.relatedTarget)) {
      this.setCursor(null);
    }
  }
}

// https://github.com/ProseMirror/prosemirror-gapcursor/blob/bbbee7d483754310f63f3b18d81f5a1da1250234/src/index.ts

/// Create a gap cursor plugin. When enabled, this will capture clicks
/// near and arrow-key-motion past places that don't have a normally
/// selectable position nearby, and create a gap cursor selection for
/// them. The cursor is drawn as an element with class
/// `ProseMirror-gapcursor`. You can either include
/// `style/gapcursor.css` from the package's directory or add your own
/// styles to make it visible.
function gapCursor() {
  return new Plugin({
    props: {
      decorations: drawGapCursor,
      createSelectionBetween(_view, $anchor, $head) {
        return $anchor.pos == $head.pos && GapCursor.valid($head) ? new GapCursor($head) : null;
      },
      handleClick,
      handleKeyDown,
      handleDOMEvents: {
        beforeinput: beforeinput
      }
    }
  });
}
const handleKeyDown = keydownHandler$1({
  ArrowLeft: arrow('horiz', -1),
  ArrowRight: arrow('horiz', 1),
  ArrowUp: arrow('vert', -1),
  ArrowDown: arrow('vert', 1)
});
function arrow(axis, dir) {
  const dirStr = axis == 'vert' ? dir > 0 ? 'down' : 'up' : dir > 0 ? 'right' : 'left';
  return function (state, dispatch, view) {
    let sel = state.selection;
    let $start = dir > 0 ? sel.$to : sel.$from,
      mustMove = sel.empty;
    if (sel instanceof TextSelection) {
      if (!view.endOfTextblock(dirStr) || $start.depth == 0) return false;
      mustMove = false;
      $start = state.doc.resolve(dir > 0 ? $start.after() : $start.before());
    }
    let $found = GapCursor.findGapCursorFrom($start, dir, mustMove);
    if (!$found) return false;
    if (dispatch) dispatch(state.tr.setSelection(new GapCursor($found)));
    return true;
  };
}
function handleClick(view, pos, event) {
  if (!view || !view.editable) return false;
  let $pos = view.state.doc.resolve(pos);
  if (!GapCursor.valid($pos)) return false;
  let clickPos = view.posAtCoords({
    left: event.clientX,
    top: event.clientY
  });
  if (clickPos && clickPos.inside > -1 && NodeSelection.isSelectable(view.state.doc.nodeAt(clickPos.inside))) {
    return false;
  }
  view.dispatch(view.state.tr.setSelection(new GapCursor($pos)));
  return true;
}

// This is a hack that, when a composition starts while a gap cursor
// is active, quickly creates an inline context for the composition to
// happen in, to avoid it being aborted by the DOM selection being
// moved into a valid position.
function beforeinput(view, event) {
  if (event.inputType != 'insertCompositionText' || !(view.state.selection instanceof GapCursor)) {
    return false;
  }
  let {
    $from
  } = view.state.selection;
  let insert = $from.parent.contentMatchAt($from.index()).findWrapping(view.state.schema.nodes.text);
  if (!insert) return false;
  let frag = Fragment$2.empty;
  for (let i = insert.length - 1; i >= 0; i--) {
    frag = Fragment$2.from(insert[i].createAndFill(null, frag));
  }
  let tr = view.state.tr.replace($from.pos, $from.pos, new Slice(frag, 0, 0));
  tr.setSelection(TextSelection.near(tr.doc.resolve($from.pos + 1)));
  view.dispatch(tr);
  return false;
}
function drawGapCursor(state) {
  if (!(state.selection instanceof GapCursor)) return null;
  let node = document.createElement('div');
  node.className = 'ProseMirror-gapcursor';
  return DecorationSet.create(state.doc, [Decoration.widget(state.selection.head, node, {
    key: 'gapcursor'
  })]);
}

// https://github.com/ProseMirror/prosemirror-inputrules/blob/47dff8a7316e5cf86343e37fd97588a30345bc0a/src/inputrules.ts
const MAX_MATCH = 500;

/// Create an input rules plugin. When enabled, it will cause text
/// input that matches any of the given rules to trigger the rule's
/// action.
function inputRules({
  rules,
  enterRules
}) {
  return new Plugin({
    props: {
      handleTextInput(view) {
        setTimeout(() => {
          run(view, rules);
        });
        return false;
      },
      handleKeyDown(view, event) {
        if (event.key === 'Enter') {
          return run(view, enterRules);
        }
        return false;
      },
      handleDOMEvents: {
        compositionend: view => {
          setTimeout(() => {
            run(view, rules);
          });
        }
      }
    }
  });
}
function getMatch(state, from, to, rules) {
  const $from = state.doc.resolve(from);
  if ($from.parent.type.spec.code) return;
  const textBefore = $from.parent.textBetween(Math.max(0, $from.parentOffset - MAX_MATCH), $from.parentOffset, null, '\ufffc');
  for (const rule of rules) {
    const match = rule.pattern.exec(textBefore);
    if (!match) continue;
    const matchFrom = from - match[0].length;
    const tr = rule.handler(state, match, matchFrom, to);
    if (!tr) continue;
    return tr;
  }
  return;
}
function run(view, rules) {
  const state = view.state;
  if (view.composing || !(state.selection instanceof TextSelection)) {
    return false;
  }
  const {
    $cursor
  } = state.selection;
  if (!$cursor) return false;
  const tr = getMatch(state, $cursor.pos, $cursor.pos, rules);
  if (!tr) return false;
  const yUndoPluginState = yUndoPluginKey.getState(view.state);
  if (yUndoPluginState) {
    const undoManager = yUndoPluginState.undoManager;
    undoManager.stopCapturing();
    view.dispatch(tr);
  } else {
    view.dispatch(closeHistory(tr));
  }
  return true;
}

// based on https://github.com/ProseMirror/prosemirror-inputrules/blob/47dff8a7316e5cf86343e37fd97588a30345bc0a/src/inputrules.ts
/// Build an input rule handler for automatically wrapping a textblock when a
/// given string is typed.
///
/// `nodeType` is the type of node to wrap in. If it needs attributes,
/// you can either pass them directly, or pass a function that will
/// compute them from the regular expression match.
///
/// By default, if there's a node with the same type above the newly
/// wrapped node, the rule will try to [join](#transform.Transform.join) those
/// two nodes. You can pass a join predicate, which takes a regular
/// expression match and the node before the wrapped node, and can
/// return a boolean to indicate whether a join should happen.
function wrappingInputRuleHandler(nodeType, getAttrs = null, joinPredicate) {
  return (state, match, start, end) => {
    let attrs = getAttrs instanceof Function ? getAttrs(match) : getAttrs;
    let tr = state.tr.delete(start, end);
    let $start = tr.doc.resolve(start),
      range = $start.blockRange(),
      wrapping = range && findWrapping(range, nodeType, attrs);
    if (!wrapping) return null;
    tr.wrap(range, wrapping);
    let before = tr.doc.resolve(start - 1).nodeBefore;
    if (before && before.type == nodeType && canJoin(tr.doc, start - 1) && (!joinPredicate || joinPredicate(match, before))) {
      tr.join(start - 1);
    }
    return tr;
  };
}

/// Build an input rule that changes the type of a textblock when the
/// matched text is typed into it. You'll usually want to start your
/// regexp with `^` to that it is only matched at the start of a
/// textblock. The optional `getAttrs` parameter can be used to compute
/// the new node's attributes, and works the same as in the
/// `wrappingInputRule` function.
function textblockTypeInputRuleHandler(nodeType, getAttrs = null) {
  return (state, match, start, end) => {
    let $start = state.doc.resolve(start);
    let attrs = getAttrs instanceof Function ? getAttrs(match) : getAttrs;
    if (attrs === false) return null;
    if (!$start.node(-1).canReplaceWith($start.index(-1), $start.indexAfter(-1), nodeType)) {
      return null;
    }
    return state.tr.delete(start, end).setBlockType(start, start, nodeType, attrs);
  };
}
function replaceTypeInputRuleHandler(nodeType, getAttrs = null) {
  return (state, match, start, end) => {
    let $start = state.doc.resolve(start);
    let attrs = getAttrs instanceof Function ? getAttrs(match) : getAttrs;
    if (!$start.node(-1).canReplaceWith($start.index(-1), $start.indexAfter(-1), nodeType)) {
      return null;
    }

    // might want to move the selection to after the divider
    return state.tr.delete(start, end).replaceSelectionWith(nodeType.createAndFill(attrs));
  };
}
function stringHandler(replacement) {
  return (state, match, start, end) => {
    let insert = replacement;
    if (match[1]) {
      let offset = match[0].lastIndexOf(match[1]);
      insert += match[0].slice(offset + match[1].length);
      start += offset;
      let cutOff = start - end;
      if (cutOff > 0) {
        insert = match[0].slice(offset - cutOff, offset) + insert;
        start = end;
      }
    }
    return state.tr.insertText(insert, start, end);
  };
}

const shortcuts = {
  '...': '…',
  '-->': '→',
  '->': '→',
  '<-': '←',
  '<--': '←',
  '--': '–',
  '(c)': '©',
  '(r)': '®',
  '(tm)': '™'
};
const simpleMarkShortcuts = new Map([['bold', ['**', '__']], ['italic', ['*', '_']], ['strikethrough', ['~~']], ['code', ['`']]]);

const textShortcutRules = Object.entries(shortcuts).map(([shortcut, replacement]) => ({
  pattern: new RegExp(`(${escape(shortcut)})\\s$`),
  handler: stringHandler(replacement)
}));
function inputRulesForSchema({
  nodes,
  marks,
  config
}) {
  const rules = [...textShortcutRules];
  if (nodes.blockquote) {
    rules.push({
      pattern: /^\s*>\s$/,
      handler: wrappingInputRuleHandler(nodes.blockquote)
    });
  }
  if (nodes.ordered_list) {
    rules.push({
      pattern: /^\s*(\d+)(?:\.|\))\s$/,
      handler: wrappingInputRuleHandler(nodes.ordered_list, match => ({
        start: parseInt(match[1], 10)
      }))
    });
  }
  if (nodes.unordered_list) {
    rules.push({
      pattern: /^\s*([-+*])\s$/,
      handler: wrappingInputRuleHandler(nodes.unordered_list)
    });
  }
  if (nodes.code_block) {
    rules.push({
      pattern: /^```(\w+)?\s$/,
      handler: textblockTypeInputRuleHandler(nodes.code_block, match => {
        var _match$;
        return {
          language: (_match$ = match[1]) !== null && _match$ !== void 0 ? _match$ : ''
        };
      })
    });
  }
  if (nodes.divider) {
    rules.push({
      pattern: /^---$/,
      handler: replaceTypeInputRuleHandler(nodes.divider)
    });
  }
  if (nodes.heading) {
    rules.push({
      pattern: /^(#{1,6})\s$/,
      handler: textblockTypeInputRuleHandler(nodes.heading, match => config.heading.levels.includes(match[1].length) ? {
        level: match[1].length
      } : null)
    });
  }
  for (const [markName, shortcuts] of simpleMarkShortcuts) {
    const mark = marks[markName];
    for (const shortcut of shortcuts) {
      if (!mark) continue;
      rules.push({
        pattern: new RegExp(`${shortcut[0] === '_' ? '(?:^|\\s)' : shortcut === '*' ? '(?:^|[^\\*])' : ''}${escape(shortcut)}([^${escape(shortcut[0])}\\s]|(?:[^${escape(shortcut[0])}\\s].*[^\\s]))${escape(shortcut)}$`),
        handler: (state, [, content], __start, end) => {
          const start = end - content.length - shortcut.length * 2;
          if (!allowsMarkType(state.doc, start, end, mark)) return null;
          const tr = state.tr;
          tr.addMark(start + shortcut.length, end - shortcut.length, mark.create());
          tr.delete(end - shortcut.length, end);
          tr.delete(start, start + shortcut.length);
          tr.removeStoredMark(mark);
          return tr;
        }
      });
    }
  }
  const linkType = marks.link;
  if (linkType) {
    rules.push({
      pattern: /(?:^|[^!])\[(.*)\]\((.*)\)$/,
      handler(state, [, text, href], __start, end) {
        const start = end - href.length - text.length - 4;
        if (!allowsMarkType(state.doc, start, end, linkType)) return null;
        const tr = state.tr;
        tr.addMark(start, end, linkType.create({
          href
        }));
        tr.delete(start + 1 + text.length, end);
        tr.delete(start, start + 1);
        tr.removeStoredMark(linkType);
        return tr;
      }
    });
  }
  rules.push(insertMenuInputRule);
  return rules;
}
function enterInputRulesForSchema({
  nodes
}) {
  const rules = [];
  if (nodes.code_block) {
    rules.push({
      pattern: /^```(\w+)?$/,
      handler: textblockTypeInputRuleHandler(nodes.code_block, match => {
        var _match$2;
        return {
          language: (_match$2 = match[1]) !== null && _match$2 !== void 0 ? _match$2 : ''
        };
      })
    });
  }
  return rules;
}
function allowsMarkType(doc, start, end, markType) {
  let allowsMarkType = true;
  doc.nodesBetween(start, end, node => {
    if (!node.isText && !node.type.allowsMarkType(markType)) {
      allowsMarkType = false;
    }
  });
  return allowsMarkType;
}

function isValidURL(url) {
  return url === sanitizeUrl(url);
}
const urlPattern = /^https?:\/\//;
function rangeHasLink($from, $to, schema) {
  let hasLink = false;
  $from.doc.nodesBetween($from.pos, $to.pos, node => {
    if (node.marks.some(x => x.type === schema.marks.link)) {
      hasLink = true;
      return false;
    }
  });
  return hasLink;
}
function pasteLinks(schema) {
  if (!schema.marks.link) return new Plugin({});
  const linkType = schema.marks.link;
  return new Plugin({
    props: {
      transformPasted(slice) {
        var _slice$content$firstC, _slice$content$firstC2;
        if (slice.content.childCount === 1 && ((_slice$content$firstC = slice.content.firstChild) === null || _slice$content$firstC === void 0 ? void 0 : _slice$content$firstC.type) === schema.nodes.paragraph && ((_slice$content$firstC2 = slice.content.firstChild.firstChild) === null || _slice$content$firstC2 === void 0 ? void 0 : _slice$content$firstC2.text) !== undefined && urlPattern.test(slice.content.firstChild.firstChild.text) && isValidURL(slice.content.firstChild.firstChild.text) && slice.content.firstChild.firstChild.marks.length === 0) {
          return Slice.maxOpen(Fragment$2.from(schema.nodes.paragraph.createChecked(null, schema.schema.text(slice.content.firstChild.firstChild.text, [linkType.create({
            href: slice.content.firstChild.firstChild.text,
            title: ''
          })]))));
        }
        return slice;
      },
      handlePaste(view, event) {
        var _event$clipboardData;
        const plain = (_event$clipboardData = event.clipboardData) === null || _event$clipboardData === void 0 ? void 0 : _event$clipboardData.getData('text/plain');
        if (plain &&
        // isValidURL is a bit more permissive than a user might expect
        // so for pasting, we'll constrain it to starting with https:// or http://
        urlPattern.test(plain) && isValidURL(plain) && !view.state.selection.empty && view.state.selection.$from.parent === view.state.selection.$to.parent && !rangeHasLink(view.state.selection.$from, view.state.selection.$to, schema)) {
          const {
            tr
          } = view.state;
          tr.addMark(view.state.selection.from, view.state.selection.to, linkType.create({
            href: plain,
            title: ''
          }));
          view.dispatch(tr);
          return true;
        }
        return false;
      }
    }
  });
}

// based on https://github.com/ProseMirror/prosemirror-markdown/blob/e59521463f62b296cc072962aa2d60b267ea4397/src/to_markdown.ts#L300-L410
function textblockChildren(fragment, createTextNode, createLeafNode, createWrapperNode) {
  let content = [];
  let depth = 0;
  let active = [];
  let trailing = '';
  function getCurrentChildrenArray() {
    let current = content;
    for (let i = 0; i < depth; i++) {
      const last = current[current.length - 1];
      if (!('children' in last)) {
        throw new Error('Expected children in last element');
      }
      current = last.children;
    }
    return current;
  }
  const process = (node, offset, index) => {
    var _node;
    let marks = node ? node.marks : [];
    let leading = trailing;
    trailing = '';
    if ((_node = node) !== null && _node !== void 0 && _node.isText && marks.some(mark => {
      return shouldExpelWhitespace(mark.type) && !mark.isInSet(active);
    })) {
      let [, lead, rest] = /^(\s*)(.*)$/m.exec(node.text);
      if (lead) {
        leading += lead;
        node = rest ? node.withText(rest) : null;
        if (!node) marks = active;
      }
    }
    if (node && node.isText && marks.some(mark => {
      return shouldExpelWhitespace(mark.type) && (index == fragment.childCount - 1 || !mark.isInSet(fragment.child(index + 1).marks));
    })) {
      let [, rest, trail] = /^(.*?)(\s*)$/m.exec(node.text);
      if (trail) {
        trailing = trail;
        node = rest ? node.withText(rest) : null;
        if (!node) marks = active;
      }
    }
    outer: for (const [i, mark] of marks.entries()) {
      if (!isMarkTypeMixable(mark.type)) {
        continue;
      }
      for (const [j, other] of active.entries()) {
        if (!isMarkTypeMixable(other.type)) break;
        if (mark.eq(other)) {
          if (i > j) {
            marks = marks.slice(0, j).concat(mark).concat(marks.slice(j, i)).concat(marks.slice(i + 1, marks.length));
          } else if (j > i) {
            marks = marks.slice(0, i).concat(marks.slice(i + 1, j)).concat(mark).concat(marks.slice(j, marks.length));
          }
          continue outer;
        }
      }
    }
    let keep = 0;
    while (keep < Math.min(active.length, marks.length) && marks[keep].eq(active[keep])) {
      ++keep;
    }
    while (keep < active.length) {
      const mark = active.pop();
      if (mark.type !== getEditorSchema(mark.type.schema).marks.code) {
        depth--;
      }
    }
    if (leading) {
      getCurrentChildrenArray().push(createTextNode(leading));
    }
    if (node) {
      while (active.length < marks.length) {
        let add = marks[active.length];
        active.push(add);
        const wrapper = createWrapperNode(add);
        if (wrapper) {
          getCurrentChildrenArray().push(wrapper);
          depth++;
        }
      }
      const leaf = createLeafNode(node);
      if (leaf) {
        getCurrentChildrenArray().push(leaf);
      }
    }
  };
  fragment.forEach(process);
  process(null, 0, fragment.childCount);
  return content;
}
function shouldExpelWhitespace(markType) {
  const schema = getEditorSchema(markType.schema);
  return markType === schema.marks.bold || markType === schema.marks.italic || markType === schema.marks.strikethrough;
}
function isMarkTypeMixable(markType) {
  const schema = getEditorSchema(markType.schema);
  return markType === schema.marks.bold || markType === schema.marks.italic || markType === schema.marks.strikethrough || markType === schema.marks.link;
}

function _blocks$1(fragment, state) {
  const children = [];
  fragment.forEach(child => {
    children.push(proseMirrorToMarkdoc(child, state));
  });
  return children;
}
function _inline$1(fragment, state) {
  return [new Ast.Node('inline', {}, textblockChildren(fragment, content => new Ast.Node('text', {
    content
  }), node => getLeafContent$1(node, state), mark => getWrapperForMark$1(mark, state)))];
}
function getLeafContent$1(node, state) {
  const {
    schema
  } = state;
  if (node.type === schema.nodes.hard_break) {
    return new Ast.Node('hardbreak');
  }
  if (node.type === schema.nodes.image) {
    const {
      src,
      filename
    } = node.attrs;
    if (typeof state.schema.config.image === 'object' && typeof state.schema.config.image.directory === 'string') {
      const parent = fixPath(state.schema.config.image.directory);
      if (!state.otherFiles.has(parent)) {
        state.otherFiles.set(parent, new Map());
      }
      state.otherFiles.get(parent).set(filename, src);
    } else {
      state.extraFiles.set(filename, src);
    }
    return new Ast.Node('image', {
      src: encodeURI(`${getSrcPrefixForImageBlock(state.schema.config, state.slug)}${node.attrs.filename}`),
      alt: node.attrs.alt,
      title: node.attrs.title
    });
  }
  const componentConfig = state.schema.components[node.type.name];
  if ((componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig.kind) === 'inline') {
    const tag = new Ast.Node('tag', internalToSerialized(componentConfig.schema, node.attrs.props, state), [], node.type.name);
    tag.inline = true;
    return tag;
  }
  if (node.text !== undefined) {
    return new Ast.Node(node.marks.some(x => x.type === schema.marks.code) ? 'code' : 'text', {
      content: node.text
    });
  }
}
function getWrapperForMark$1(mark, state) {
  const {
    schema
  } = state;
  if (mark.type === schema.marks.code) {
    return;
  }
  const componentConfig = schema.components[mark.type.name];
  if (componentConfig) {
    const node = new Ast.Node('tag', internalToSerialized(componentConfig.schema, mark.attrs.props, state), [], mark.type.name);
    node.inline = true;
    return node;
  }
  let type;
  if (mark.type === schema.marks.bold) {
    type = 'strong';
  }
  if (mark.type === schema.marks.italic) {
    type = 'em';
  }
  if (mark.type === schema.marks.strikethrough) {
    type = 's';
  }
  if (type) {
    return new Ast.Node(type, {}, []);
  }
  if (mark.type === schema.marks.link) {
    return new Ast.Node('link', {
      href: mark.attrs.href,
      title: mark.attrs.title
    });
  }
}
function proseMirrorToMarkdoc(node, state) {
  const blocks = fragment => _blocks$1(fragment, state);
  const inline = fragment => _inline$1(fragment, state);
  const schema = getEditorSchema(node.type.schema);
  if (node.type === schema.nodes.doc) {
    return new Ast.Node('document', {}, blocks(node.content));
  }
  if (node.type === schema.nodes.paragraph) {
    return new Ast.Node('paragraph', {}, inline(node.content));
  }
  if (node.type === schema.nodes.blockquote) {
    return new Ast.Node('blockquote', {}, blocks(node.content));
  }
  if (node.type === schema.nodes.divider) {
    return new Ast.Node('hr');
  }
  if (node.type === schema.nodes.table) {
    const rows = blocks(node.content);
    const head = new Ast.Node('thead', {}, []);
    if (rows[0].children[0].type === 'th') {
      head.children.push(rows.shift());
    }
    const body = new Ast.Node('tbody', {}, rows);
    return new Ast.Node('tag', {}, [new Ast.Node('table', {}, [head, body])], 'table');
  }
  if (node.type === schema.nodes.table_row) {
    return new Ast.Node('tr', {}, blocks(node.content));
  }
  if (node.type === schema.nodes.table_header) {
    return new Ast.Node('th', {}, blocks(node.content));
  }
  if (node.type === schema.nodes.table_cell) {
    return new Ast.Node('td', {}, blocks(node.content));
  }
  if (node.type === schema.nodes.heading) {
    const extra = internalToSerialized(schema.config.heading.schema, node.attrs.props, state);
    const markdocNode = new Ast.Node('heading', {
      level: node.attrs.level,
      ...extra
    }, inline(node.content));
    for (const [key, value] of Object.entries(extra)) {
      markdocNode.annotations.push({
        name: key,
        value,
        type: 'attribute'
      });
    }
    return markdocNode;
  }
  if (node.type === schema.nodes.code_block) {
    const extra = internalToSerialized(schema.config.codeBlock.schema, node.attrs.props, state);
    const markdocNode = new Ast.Node('fence', typeof node.attrs.language === 'string' && node.attrs.language !== 'plain' ? {
      language: node.attrs.language,
      content: node.textBetween(0, node.content.size) + '\n',
      ...extra
    } : {
      content: node.textBetween(0, node.content.size) + '\n',
      ...extra
    }, inline(node.content));
    for (const [key, value] of Object.entries(extra)) {
      markdocNode.annotations.push({
        name: key,
        value,
        type: 'attribute'
      });
    }
    return markdocNode;
  }
  if (node.type === schema.nodes.list_item) {
    let listItemContent = blocks(node.content);
    if (listItemContent.length === 1 && listItemContent[0].type === 'paragraph') {
      listItemContent = listItemContent[0].children;
    } else if (listItemContent.length === 2 && listItemContent[0].type === 'paragraph' && listItemContent[0].children.length === 1 && listItemContent[1].type === 'list') {
      listItemContent = [listItemContent[0].children[0], listItemContent[1]];
    }
    return new Ast.Node('item', {}, listItemContent);
  }
  if (node.type === schema.nodes.ordered_list) {
    return new Ast.Node('list', {
      ordered: true,
      start: node.attrs.start
    }, blocks(node.content));
  }
  if (node.type === schema.nodes.unordered_list) {
    return new Ast.Node('list', {
      ordered: false
    }, blocks(node.content));
  }
  const name = node.type.name;
  const componentConfig = schema.components[name];
  if (componentConfig) {
    const children = componentConfig.kind === 'wrapper' || componentConfig.kind === 'repeating' ? blocks(node.content) : [];
    return new Ast.Node('tag', internalToSerialized(componentConfig.schema, node.attrs.props, state), children, name);
  }
  return new Ast.Node('paragraph', {}, inline(node.content));
}

let _state;
function getState$1() {
  if (!_state) {
    throw new Error('state not set');
  }
  return _state;
}
function getSchema$1() {
  return getState$1().schema;
}
function error$1(error) {
  getState$1().errors.push(error);
}
function withMark$1(mark, fn) {
  const state = getState$1();
  const oldMarks = state.marks;
  state.marks = mark.addToSet(state.marks);
  try {
    return fn();
  } finally {
    state.marks = oldMarks;
  }
}
function childrenToProseMirrorNodes$1(nodes, parentType) {
  const children = [];
  for (const node of nodes) {
    const pmNode = markdocNodeToProseMirrorNode$1(node, parentType);
    if (pmNode) {
      if (Array.isArray(pmNode)) {
        children.push(...pmNode);
      } else {
        children.push(pmNode);
      }
    }
  }
  return children;
}
function notAllowed$1(node, parentType) {
  error$1({
    error: {
      id: 'unspecified-type',
      level: 'critical',
      message: `${node.type} is not allowed`
    },
    lines: node.lines,
    type: node.type,
    location: node.location
  });
  return childrenToProseMirrorNodes$1(node.children, parentType);
}
function createAndFill$1(markdocNode, nodeType, attrs) {
  let children = childrenToProseMirrorNodes$1(markdocNode.children, nodeType);
  const node = nodeType.createAndFill(attrs, children);
  if (!node) {
    error$1({
      error: {
        id: 'unexpected-children',
        level: 'critical',
        message: `${markdocNode.type} has unexpected children`
      },
      lines: markdocNode.lines,
      type: markdocNode.type,
      location: markdocNode.location
    });
  }
  return node;
}
function addMark$1(node, mark, parentType) {
  if (!mark) return notAllowed$1(node, parentType);
  return withMark$1(mark instanceof MarkType ? mark.create() : mark, () => childrenToProseMirrorNodes$1(node.children, parentType));
}
function markdocToProseMirror(node, schema, files, otherFiles, slug) {
  _state = {
    schema,
    errors: [],
    marks: [],
    extraFiles: files !== null && files !== void 0 ? files : new Map(),
    otherFiles: otherFiles !== null && otherFiles !== void 0 ? otherFiles : new Map(),
    slug
  };
  try {
    let pmNode = markdocNodeToProseMirrorNode$1(node, undefined);
    if (_state.errors.length) {
      throw new Error(_state.errors.map(e => e.lines[0] + ':' + e.error.message).join('\n'));
    }
    if (!(pmNode instanceof Node$1)) {
      throw new Error('unexpected node');
    }
    return pmNode;
  } finally {
    _state = undefined;
  }
}
function listItem(markdocNode, nodeType) {
  const schema = getSchema$1();
  const children = [];
  for (const node of markdocNode.children) {
    const pmNode = markdocNodeToProseMirrorNode$1(node, schema.nodes.paragraph);
    if (!pmNode) continue;
    if (!Array.isArray(pmNode)) {
      if (pmNode.isInline) {
        children.push(schema.nodes.paragraph.createAndFill({}, pmNode));
        continue;
      }
      children.push(pmNode);
      continue;
    }
    if (node.type === 'inline') {
      children.push(schema.nodes.paragraph.createAndFill({}, pmNode));
      continue;
    }
    children.push(...pmNode);
  }
  const node = nodeType.createAndFill({}, children);
  if (!node) {
    error$1({
      error: {
        id: 'unexpected-children',
        level: 'critical',
        message: `${markdocNode.type} has unexpected children`
      },
      lines: markdocNode.lines,
      type: markdocNode.type,
      location: markdocNode.location
    });
  }
  return node;
}
function markdocNodeToProseMirrorNode$1(node, parentType) {
  if (node.errors.length) {
    for (const err of node.errors) {
      error$1({
        error: err,
        lines: node.lines,
        type: node.type,
        location: node.location
      });
    }
    return null;
  }
  if (node.type === 'error') {
    error$1({
      error: {
        id: 'error-node',
        level: 'critical',
        message: 'Unexpected error node without errors'
      },
      lines: node.lines,
      type: node.type,
      location: node.location
    });
    return null;
  }
  const schema = getSchema$1();
  if (node.type === 'inline') {
    return childrenToProseMirrorNodes$1(node.children, parentType);
  }
  if (node.type === 'em') {
    return addMark$1(node, schema.marks.italic, parentType);
  }
  if (node.type === 'code') {
    if (!schema.marks.code) return notAllowed$1(node, parentType);
    return schema.schema.text(node.attributes.content, [...getState$1().marks, schema.marks.code.create()]);
  }
  if (node.type === 's') {
    return addMark$1(node, schema.marks.strikethrough, parentType);
  }
  if (node.type === 'strong') {
    return addMark$1(node, schema.marks.bold, parentType);
  }
  if (node.type === 'softbreak') {
    return schema.schema.text('\n');
  }
  if (node.type === 'hardbreak') {
    if (!schema.nodes.hard_break) return notAllowed$1(node, parentType);
    return schema.nodes.hard_break.create();
  }
  if (node.type === 'blockquote') {
    if (!schema.nodes.blockquote) return notAllowed$1(node, parentType);
    return createAndFill$1(node, schema.nodes.blockquote, {});
  }
  if (node.type === 'heading') {
    if (!schema.nodes.heading) return notAllowed$1(node, parentType);
    const {
      level,
      ...attrs
    } = node.attributes;
    const state = getState$1();
    const fields = state.schema.config.heading.schema;
    return createAndFill$1(node, schema.nodes.heading, {
      level: node.attributes.level,
      props: toSerialized(deserializeProps$1(fields, attrs, state), fields)
    });
  }
  if (node.type === 'paragraph') {
    return createAndFill$1(node, schema.nodes.paragraph, {});
  }
  if (node.type === 'comment') {
    return [];
  }
  if (node.type === 'document') {
    return createAndFill$1(node, schema.nodes.doc, {});
  }
  if (node.type === 'fence') {
    if (!schema.nodes.code_block) return notAllowed$1(node, parentType);
    let {
      language,
      content,
      ...attrs
    } = node.attributes;
    const state = getState$1();
    const fields = state.schema.config.codeBlock.schema;
    content = content.slice(0, -1);
    return schema.nodes.code_block.createAndFill({
      language: typeof node.attributes.language === 'string' ? node.attributes.language : '',
      props: toSerialized(deserializeProps$1(fields, attrs, state), fields)
    }, content ? schema.schema.text(content) : undefined);
  }
  if (node.type === 'hr') {
    if (!schema.nodes.divider) return notAllowed$1(node, parentType);
    return createAndFill$1(node, schema.nodes.divider, {});
  }
  if (node.type === 'link') {
    var _schema$marks$link;
    return addMark$1(node, (_schema$marks$link = schema.marks.link) === null || _schema$marks$link === void 0 ? void 0 : _schema$marks$link.create({
      href: node.attributes.href
    }), parentType);
  }
  if (node.type === 'text') {
    return schema.schema.text(node.attributes.content, getState$1().marks);
  }
  if (node.type === 'item') {
    if (!schema.nodes.list_item) return notAllowed$1(node, parentType);
    return listItem(node, schema.nodes.list_item);
  }
  if (node.type === 'list') {
    const listType = node.attributes.ordered ? schema.nodes.ordered_list : schema.nodes.unordered_list;
    if (!listType) return notAllowed$1(node, parentType);
    return createAndFill$1(node, listType, node.attributes.ordered && node.attributes.start !== undefined ? {
      start: node.attributes.start
    } : {});
  }
  if (node.type === 'table') {
    if (!schema.nodes.table) return notAllowed$1(node, parentType);
    return createAndFill$1(node, schema.nodes.table, {});
  }
  if (node.type === 'tbody' || node.type === 'thead') {
    return childrenToProseMirrorNodes$1(node.children, parentType);
  }
  if (node.type === 'tr') {
    if (!schema.nodes.table_row) return notAllowed$1(node, parentType);
    return createAndFill$1(node, schema.nodes.table_row, {});
  }
  if (node.type === 'th') {
    if (!schema.nodes.table_header) return notAllowed$1(node, parentType);
    return listItem(node, schema.nodes.table_header);
  }
  if (node.type === 'td') {
    if (!schema.nodes.table_cell) return notAllowed$1(node, parentType);
    return listItem(node, schema.nodes.table_cell);
  }
  if (node.type === 'tag' && node.tag) {
    if (node.tag === 'table') {
      return markdocNodeToProseMirrorNode$1(node.children[0], parentType);
    }
    const componentConfig = schema.components[node.tag];
    if (componentConfig) {
      const state = getState$1();
      const deserialized = deserializeProps$1(componentConfig.schema, node.attributes, state);
      if (componentConfig.kind === 'mark') {
        return addMark$1(node, schema.schema.marks[node.tag].create({
          props: toSerialized(deserialized, componentConfig.schema)
        }), parentType);
      }
      const nodeType = schema.schema.nodes[node.tag];
      const children = childrenToProseMirrorNodes$1(node.children, nodeType);
      const pmNode = nodeType.createAndFill({
        props: toSerialized(deserialized, componentConfig.schema)
      }, children);
      if (!pmNode) {
        error$1({
          error: {
            id: 'unexpected-children',
            level: 'critical',
            message: `${node.type} has unexpected children`
          },
          lines: node.lines,
          type: node.type,
          location: node.location
        });
      }
      if (componentConfig.kind === 'inline' && !(parentType !== null && parentType !== void 0 && parentType.isTextblock)) {
        return schema.nodes.paragraph.createAndFill({}, pmNode);
      }
      return pmNode;
    }
    error$1({
      error: {
        id: 'unspecified-type',
        level: 'critical',
        message: `Missing component definition for ${node.tag}`
      },
      lines: node.lines,
      type: node.type,
      location: node.location
    });
    return childrenToProseMirrorNodes$1(node.children, parentType);
  }
  if (node.type === 'image') {
    var _ref, _node$attributes$titl;
    const prefix = getSrcPrefixForImageBlock(schema.config, getState$1().slug);
    const fullFilename = decodeURIComponent(node.attributes.src);
    const filename = fullFilename.slice(prefix.length);
    const content = (_ref = typeof schema.config.image === 'object' && typeof schema.config.image.directory === 'string' ? getState$1().otherFiles.get(fixPath(schema.config.image.directory)) : getState$1().extraFiles) === null || _ref === void 0 ? void 0 : _ref.get(filename);
    if (content && schema.nodes.image) {
      return schema.nodes.image.createChecked({
        src: content,
        alt: node.attributes.alt,
        title: node.attributes.title,
        filename
      });
    }
    return schema.schema.text(`![${node.attributes.alt || ''}](${node.attributes.src || ''}${(_node$attributes$titl = node.attributes.title) !== null && _node$attributes$titl !== void 0 && _node$attributes$titl.length ? ` "${node.attributes.title}"` : ''})`);
  }
  error$1({
    error: {
      id: 'unhandled-type',
      level: 'critical',
      message: `Unhandled type ${node.type}`
    },
    lines: node.lines,
    type: node.type,
    location: node.location
  });
  return null;
}

function markdocClipboard() {
  return new Plugin({
    props: {
      // TODO: for a doc like this:
      // <doc>
      //   <blockquote><paragraph>h<anchor/>ell</head>o</paragraph></blockquote>
      // </doc>
      // you shouldn't get the block quote
      clipboardTextSerializer(content, view) {
        try {
          return format(proseMirrorToMarkdoc(view.state.doc.type.create({}, content.content), {
            otherFiles: new Map(),
            extraFiles: new Map(),
            schema: getEditorSchema(view.state.schema),
            slug: undefined
          }));
        } catch (err) {
          console.log('failed to serialize clipboard text as markdoc', err);
          return content.content.textBetween(0, content.content.size, '\n\n');
        }
      },
      clipboardTextParser(text, $context, plain, view) {
        try {
          return Slice.maxOpen(markdocToProseMirror(parse(text), getEditorSchema(view.state.schema), undefined, undefined, undefined).content);
        } catch (err) {
          console.log('failed to parse clipboard text as markdoc', err);
          return defaultClipboardTextParser(text, $context, plain, view);
        }
      },
      handlePaste(view, event) {
        if (view.props.editable && !view.props.editable(view.state)) {
          return false;
        }
        if (!event.clipboardData) {
          return false;
        }
        const html = event.clipboardData.getData('text/html');
        if (html && isProbablyHtmlFromVscode(html)) {
          const plain = event.clipboardData.getData('text/plain');
          view.pasteText(plain);
          return true;
        }
        return false;
      }
    }
  });
}

// vscode adds extra data to the DataTransfer but those only exist when pasted into a chromium browser
// this works across browser
function isProbablyHtmlFromVscode(html) {
  const parser = new globalThis.DOMParser();
  const parsed = parser.parseFromString(html, 'text/html');
  const firstDiv = parsed.body.firstElementChild;
  if (parsed.body.childElementCount !== 1 || (firstDiv === null || firstDiv === void 0 ? void 0 : firstDiv.tagName) !== 'DIV' || !(firstDiv instanceof HTMLElement) || !firstDiv.style.fontFamily.includes('monospace')) {
    return false;
  }
  for (const line of firstDiv.children) {
    if (line.tagName === 'BR') continue;
    if (line.tagName !== 'DIV') return false;
    for (const span of line.children) {
      if (span.tagName !== 'SPAN') return false;
    }
  }
  return true;
}
function defaultClipboardTextParser(text, $context, plain, view) {
  let marks = $context.marks();
  let {
      schema
    } = view.state,
    serializer = DOMSerializer.fromSchema(schema);
  let dom = document.createElement('div');
  text.split(/(?:\r\n?|\n)+/).forEach(block => {
    let p = dom.appendChild(document.createElement('p'));
    if (block) {
      p.appendChild(serializer.serializeNode(schema.text(block, marks)));
    }
  });
  let parser = view.someProp('clipboardParser') || view.someProp('domParser') || DOMParser$1.fromSchema(view.state.schema);
  return parser.parseSlice(dom, {
    preserveWhitespace: true,
    context: $context,
    // @ts-expect-error
    ruleFromNode(dom) {
      if (dom.nodeName == 'BR' && !dom.nextSibling && dom.parentNode && !inlineParents.test(dom.parentNode.nodeName)) {
        return {
          ignore: true
        };
      }
      return null;
    }
  });
}
const inlineParents = /^(a|abbr|acronym|b|cite|code|del|em|i|ins|kbd|label|output|q|ruby|s|samp|span|strong|sub|sup|time|u|tt|var)$/i;

function nodeInSelectionDecorations() {
  return new Plugin({
    props: {
      decorations(state) {
        const decorations = [];
        let from, to;
        if (state.selection instanceof TextSelection) {
          ({
            from,
            to
          } = state.selection);
        }
        if (state.selection instanceof AllSelection) {
          from = 0;
          to = state.doc.content.size;
        }
        if (from !== undefined && to !== undefined) {
          const _from = from;
          const _to = to;
          state.doc.nodesBetween(from, to, (node, pos) => {
            if (node.isText) {
              return;
            }
            const nodeFrom = pos;
            const nodeTo = pos + node.nodeSize;
            if (nodeFrom >= _from && nodeTo <= _to) {
              decorations.push(Decoration.node(pos, pos + node.nodeSize, {
                class: classes.nodeInSelection
              }));
            }
          });
        }
        return DecorationSet.create(state.doc, decorations);
      }
    }
  });
}

function placeholderPlugin(text) {
  return new Plugin({
    props: {
      decorations(state) {
        var _doc$firstChild;
        let doc = state.doc;
        if (doc.childCount === 1 && (_doc$firstChild = doc.firstChild) !== null && _doc$firstChild !== void 0 && _doc$firstChild.isTextblock && doc.firstChild.content.size === 0) {
          let placeholder = document.createElement('span');
          placeholder.className = classes.placeholder;
          placeholder.textContent = text;
          return DecorationSet.create(doc, [Decoration.widget(1, placeholder)]);
        }
      }
    }
  });
}

const cursorBuilder = user => {
  const cursor = document.createElement('span');
  cursor.classList.add('ProseMirror-yjs-cursor');
  cursor.style.borderColor = user.color;
  const userDiv = document.createElement('div');
  userDiv.style.backgroundColor = user.color;
  userDiv.insertBefore(document.createTextNode(user.name), null);
  cursor.insertBefore(userDiv, null);
  return cursor;
};
function createEditorState(doc, selection, storedMarks, yXmlFragment, awareness) {
  const schema = getEditorSchema(doc.type.schema);
  return EditorState.create({
    selection,
    storedMarks,
    plugins: [pasteLinks(schema), imageDropPlugin(schema), keydownHandler(), ...(yXmlFragment && awareness ? [ySyncPlugin(yXmlFragment), yCursorPlugin(awareness, {
      cursorBuilder,
      awarenessStateFilter(userClientId, clientId, awarenessState) {
        const localState = awareness.getLocalState();
        return userClientId !== clientId && awarenessState.location === (localState === null || localState === void 0 ? void 0 : localState.location) && awarenessState.branch === (localState === null || localState === void 0 ? void 0 : localState.branch);
      }
    }), yUndoPlugin()] : [history()]), dropCursor({
      color: tokenSchema.color.alias.borderSelected,
      width: 2
    }), inputRules({
      rules: inputRulesForSchema(schema),
      enterRules: enterInputRulesForSchema(schema)
    }), gapCursor(), keymap(keymapForSchema(schema, !!(yXmlFragment && awareness))), markdocClipboard(), nodeInSelectionDecorations(), placeholderPlugin('Start writing or press "/" for commands…'), reactNodeViews(doc.type.schema), autocompleteDecoration(), tableEditing(), tableCellMenuPlugin(), codeBlockSyntaxHighlighting()],
    doc
  });
}

let state;
function getState() {
  if (!state) {
    throw new Error('state not set');
  }
  return state;
}
function error(message) {
  getState().errors.push(message);
}
function getSchema() {
  return getState().schema;
}
function withMark(mark, fn) {
  const state = getState();
  const oldMarks = state.marks;
  state.marks = mark.addToSet(state.marks);
  try {
    return fn();
  } finally {
    state.marks = oldMarks;
  }
}
function childrenToProseMirrorNodes(nodes, parentType) {
  const children = [];
  for (const node of nodes) {
    const pmNode = markdocNodeToProseMirrorNode(node, parentType);
    if (pmNode) {
      if (Array.isArray(pmNode)) {
        children.push(...pmNode);
      } else {
        children.push(pmNode);
      }
    }
  }
  return children;
}
function notAllowed(node, parentType) {
  error(`${node.type} is not allowed`);
  return childrenToProseMirrorNodes('children' in node ? node.children : [], parentType);
}
function createAndFill(mdNode, nodeType, attrs, mapChildren) {
  let children = childrenToProseMirrorNodes('children' in mdNode ? mdNode.children : [], nodeType);
  if (mapChildren) {
    children = mapChildren(children);
  }
  const node = nodeType.createAndFill(attrs, children);
  if (!node) {
    error(`${mdNode.type} has unexpected children`);
  }
  return node;
}
function addMark(node, mark, parentType) {
  if (!mark) return notAllowed(node, parentType);
  return withMark(mark instanceof MarkType ? mark.create() : mark, () => childrenToProseMirrorNodes('children' in node ? node.children : [], parentType));
}
function mdxToProseMirror(node, schema, files, otherFiles, slug) {
  state = {
    schema,
    errors: [],
    marks: [],
    extraFiles: files !== null && files !== void 0 ? files : new Map(),
    otherFiles: otherFiles !== null && otherFiles !== void 0 ? otherFiles : new Map(),
    slug,
    definitions: new Map()
  };
  visit(node, node => {
    if (node.type === 'definition') {
      const id = String(node.identifier).toUpperCase();

      // Mimick CM behavior of link definitions.
      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.
      if (!getState().definitions.has(id)) {
        getState().definitions.set(id, node);
      }
    }
  });
  try {
    let pmNode = markdocNodeToProseMirrorNode(node, undefined);
    if (state.errors.length) {
      throw new Error(state.errors.join('\n'));
    }
    if (!(pmNode instanceof Node$1)) {
      throw new Error('unexpected node');
    }
    return pmNode;
  } finally {
    state = undefined;
  }
}
const wrapInParagraph = schema => children => {
  const newChildren = [];
  let inlineQueue = [];
  for (const child of children) {
    if (child.isInline) {
      inlineQueue.push(child);
      continue;
    }
    if (inlineQueue.length) {
      newChildren.push(schema.nodes.paragraph.createChecked({}, inlineQueue));
      inlineQueue = [];
    }
    newChildren.push(child);
  }
  if (inlineQueue.length) {
    newChildren.push(schema.nodes.paragraph.createChecked({}, inlineQueue));
  }
  return newChildren;
};
function programToValue(program) {
  assert(program.body.length === 1);
  const statement = program.body[0];
  assert(statement.type === 'ExpressionStatement');
  return expressionToValue(statement.expression);
}
function expressionToValue(expression) {
  if (expression.type === 'Literal') {
    const val = expression.value;
    assert(typeof val === 'string' || typeof val === 'number' || typeof val === 'boolean' || val === null);
    return val;
  }
  if (expression.type === 'ArrayExpression') {
    return expression.elements.map(value => {
      assert(value !== null && value.type !== 'SpreadElement');
      return expressionToValue(value);
    });
  }
  if (expression.type === 'ObjectExpression') {
    return Object.fromEntries(expression.properties.map(property => {
      assert(property.type === 'Property' && !property.computed && property.kind === 'init');
      const key = property.key;
      const name = key.type === 'Identifier' ? key.name : key.type === 'Literal' ? key.value : undefined;
      assert(typeof name === 'string');
      return [name, expressionToValue(property.value)];
    }));
  }
  throw new Error(`Unexpected expression type ${expression.type}`);
}
function markdocNodeToProseMirrorNode(node, parentType) {
  const schema = getSchema();
  if (node.type === 'emphasis') {
    return addMark(node, schema.marks.italic, parentType);
  }
  if (node.type === 'inlineCode') {
    if (!schema.marks.code) return notAllowed(node, parentType);
    return schema.schema.text(node.value, [...getState().marks, schema.marks.code.create()]);
  }
  if (node.type === 'delete') {
    return addMark(node, schema.marks.strikethrough, parentType);
  }
  if (node.type === 'strong') {
    return addMark(node, schema.marks.bold, parentType);
  }
  if (node.type === 'break') {
    if (!schema.nodes.hard_break) return notAllowed(node, parentType);
    return schema.nodes.hard_break.create();
  }
  if (node.type === 'blockquote') {
    if (!schema.nodes.blockquote) return notAllowed(node, parentType);
    return createAndFill(node, schema.nodes.blockquote, {});
  }
  if (node.type === 'heading') {
    if (!schema.nodes.heading) return notAllowed(node, parentType);
    return createAndFill(node, schema.nodes.heading, {
      level: node.depth
    });
  }
  if (node.type === 'paragraph') {
    return createAndFill(node, schema.nodes.paragraph, {});
  }
  if (node.type === 'root') {
    return createAndFill(node, schema.nodes.doc, {});
  }
  if (node.type === 'code') {
    if (!schema.nodes.code_block) return notAllowed(node, parentType);
    let language = typeof node.lang === 'string' ? node.lang : '';
    if (node.meta) {
      language += ' ' + node.meta;
    }
    return schema.nodes.code_block.createAndFill({
      language
    }, schema.schema.text(node.value));
  }
  if (node.type === 'thematicBreak') {
    if (!schema.nodes.divider) return notAllowed(node, parentType);
    return createAndFill(node, schema.nodes.divider, {});
  }
  if (node.type === 'link') {
    var _schema$marks$link;
    return addMark(node, (_schema$marks$link = schema.marks.link) === null || _schema$marks$link === void 0 ? void 0 : _schema$marks$link.create({
      href: node.url
    }), parentType);
  }
  if (node.type === 'linkReference') {
    var _schema$marks$link2;
    const data = getState().definitions.get(node.identifier.toUpperCase());
    if (!data) {
      error(`Could not find definition for ${node.identifier}`);
      return childrenToProseMirrorNodes(node.children, parentType);
    }
    return addMark(node, (_schema$marks$link2 = schema.marks.link) === null || _schema$marks$link2 === void 0 ? void 0 : _schema$marks$link2.create({
      href: data.url
    }), parentType);
  }
  if (node.type === 'text') {
    return schema.schema.text(node.value, getState().marks);
  }
  if (node.type === 'listItem') {
    if (!schema.nodes.list_item) return notAllowed(node, parentType);
    return createAndFill(node, schema.nodes.list_item, {}, wrapInParagraph(schema));
  }
  if (node.type === 'list') {
    const listType = node.ordered ? schema.nodes.ordered_list : schema.nodes.unordered_list;
    if (!listType) return notAllowed(node, parentType);
    return createAndFill(node, listType, node.ordered && node.start != null ? {
      start: node.start
    } : {});
  }
  if (node.type === 'table') {
    if (!schema.nodes.table) return notAllowed(node, parentType);
    return createAndFill(node, schema.nodes.table, {});
  }
  if (node.type === 'tableRow') {
    if (!schema.nodes.table_row) return notAllowed(node, parentType);
    return createAndFill(node, schema.nodes.table_row, {});
  }
  if (node.type === 'tableCell') {
    if (!schema.nodes.table_cell) return notAllowed(node, parentType);
    return createAndFill(node, schema.nodes.table_cell, {}, wrapInParagraph(schema));
  }
  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {
    if (!node.name) {
      return notAllowed(node, parentType);
    }
    const componentConfig = schema.components[node.name];
    if (componentConfig) {
      const state = getState();
      const attributes = {};
      for (const attribute of node.attributes) {
        if (attribute.type === 'mdxJsxAttribute') {
          if (attribute.value == null) {
            attributes[attribute.name] = true;
            continue;
          }
          try {
            attributes[attribute.name] = typeof attribute.value === 'string' ? attribute.value : programToValue(attribute.value.data.estree);
          } catch {
            error(`${node.type} has unexpected attributes`);
          }
          continue;
        }
        error(`${node.type} has unexpected attributes`);
      }
      const deserialized = deserializeProps$1(componentConfig.schema, attributes, state);
      if (componentConfig.kind === 'mark') {
        if (node.type === 'mdxJsxFlowElement') {
          return notAllowed(node, parentType);
        }
        return addMark(node, schema.schema.marks[node.name].create({
          props: toSerialized(deserialized, componentConfig.schema)
        }), parentType);
      }
      const nodeType = schema.schema.nodes[node.name];
      const pmNode = nodeType.createAndFill({
        props: toSerialized(deserialized, componentConfig.schema)
      }, childrenToProseMirrorNodes(node.children, nodeType));
      if (!pmNode) {
        error(`${node.type} has unexpected children`);
      }
      if (componentConfig.kind === 'inline' && !(parentType !== null && parentType !== void 0 && parentType.isTextblock)) {
        return schema.nodes.paragraph.createAndFill({}, pmNode);
      }
      return pmNode;
    }
    error(`Missing component definition for ${node.name}`);
    return childrenToProseMirrorNodes('children' in node ? node.children : [], parentType);
  }
  if (node.type === 'image' || node.type === 'imageReference') {
    var _ref;
    const data = node.type === 'image' ? node : getState().definitions.get(node.identifier.toUpperCase());
    if (!data) {
      error(`Could not find definition for ${node.identifier}`);
      return null;
    }
    const prefix = getSrcPrefixForImageBlock(schema.config, getState().slug);
    const fullFilename = decodeURI(data.url);
    const filename = fullFilename.slice(prefix.length);
    const content = (_ref = typeof schema.config.image === 'object' && typeof schema.config.image.directory === 'string' ? getState().otherFiles.get(fixPath(schema.config.image.directory)) : getState().extraFiles) === null || _ref === void 0 ? void 0 : _ref.get(filename);
    if (content && schema.nodes.image) {
      return schema.nodes.image.createChecked({
        src: content,
        alt: node.alt,
        title: data.title,
        filename
      });
    }
    return schema.schema.text(`![${node.alt || ''}](${data.url || ''}${data.title ? ` "${data.title}"` : ''})`);
  }
  if (node.type === 'definition') return [];
  error(`Unhandled type ${node.type}: ${toMarkdown(node, {
    extensions: [gfmAutolinkLiteralToMarkdown(), gfmStrikethroughToMarkdown(), gfmTableToMarkdown(), mdxToMarkdown()],
    rule: '-'
  })}`);
  return null;
}

function _blocks(fragment, state) {
  const children = [];
  fragment.forEach(child => {
    children.push(proseMirrorToMDX(child, state));
  });
  return children;
}
function _inline(fragment, state) {
  return textblockChildren(fragment, text => ({
    type: 'text',
    value: text
  }), node => getLeafContent(node, state), mark => getWrapperForMark(mark, state));
}
function propsToAttributes(props) {
  return Object.entries(props).map(([key, value]) => ({
    type: 'mdxJsxAttribute',
    name: key,
    value: value === true ? null : typeof value === 'string' ? value : {
      type: 'mdxJsxAttributeValueExpression',
      value: JSON.stringify(value)
    }
  }));
}
function getLeafContent(node, state) {
  const {
    schema
  } = state;
  if (node.type === schema.nodes.hard_break) {
    return {
      type: 'break'
    };
  }
  if (node.type === schema.nodes.image) {
    const {
      src,
      filename
    } = node.attrs;
    if (typeof state.schema.config.image === 'object' && typeof state.schema.config.image.directory === 'string') {
      const parent = fixPath(state.schema.config.image.directory);
      if (!state.otherFiles.has(parent)) {
        state.otherFiles.set(parent, new Map());
      }
      state.otherFiles.get(parent).set(filename, src);
    } else {
      state.extraFiles.set(filename, src);
    }
    return {
      type: 'image',
      url: encodeURI(`${getSrcPrefixForImageBlock(state.schema.config, state.slug)}${node.attrs.filename}`),
      alt: node.attrs.alt,
      title: node.attrs.title
    };
  }
  const componentConfig = state.schema.components[node.type.name];
  if ((componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig.kind) === 'inline') {
    return {
      type: 'mdxJsxTextElement',
      name: node.type.name,
      attributes: propsToAttributes(internalToSerialized(componentConfig.schema, node.attrs.props, state)),
      children: []
    };
  }
  if (node.text !== undefined) {
    return {
      type: node.marks.some(x => x.type === schema.marks.code) ? 'inlineCode' : 'text',
      value: node.text
    };
  }
}
function getWrapperForMark(mark, state) {
  const {
    schema
  } = state;
  if (mark.type === schema.marks.code) {
    return;
  }
  const componentConfig = schema.components[mark.type.name];
  if (componentConfig) {
    return {
      type: 'mdxJsxTextElement',
      name: mark.type.name,
      attributes: propsToAttributes(internalToSerialized(componentConfig.schema, mark.attrs.props, state)),
      children: []
    };
  }
  let type;
  if (mark.type === schema.marks.bold) {
    type = 'strong';
  }
  if (mark.type === schema.marks.italic) {
    type = 'emphasis';
  }
  if (mark.type === schema.marks.strikethrough) {
    type = 'delete';
  }
  if (type) {
    return {
      type,
      children: []
    };
  }
  if (mark.type === schema.marks.link) {
    return {
      type: 'link',
      url: mark.attrs.href,
      title: mark.attrs.title,
      children: []
    };
  }
}
function mapContent(node, fn) {
  const result = [];
  node.content.forEach(node => {
    result.push(fn(node));
  });
  return result;
}
function convertListItem(listItemContent) {
  return {
    type: 'listItem',
    spread: listItemContent.length === 2 && listItemContent[0].type === 'paragraph' && listItemContent[1].type === 'list' ? false : undefined,
    children: listItemContent
  };
}
function proseMirrorToMDXRoot(node, state) {
  return {
    type: 'root',
    children: _blocks(node.content, state)
  };
}
function proseMirrorToMDX(node, state) {
  const blocks = fragment => _blocks(fragment, state);
  const inline = fragment => _inline(fragment, state);
  const schema = getEditorSchema(node.type.schema);
  if (node.type === schema.nodes.paragraph) {
    return {
      type: 'paragraph',
      children: inline(node.content)
    };
  }
  if (node.type === schema.nodes.blockquote) {
    return {
      type: 'blockquote',
      children: blocks(node.content)
    };
  }
  if (node.type === schema.nodes.divider) {
    return {
      type: 'thematicBreak'
    };
  }
  if (node.type === schema.nodes.table) {
    return {
      type: 'table',
      children: mapContent(node, row => {
        return {
          type: 'tableRow',
          children: mapContent(row, cell => {
            return {
              type: 'tableCell',
              children: inline(cell.content.child(0).content)
            };
          })
        };
      })
    };
  }
  if (node.type === schema.nodes.heading) {
    return {
      type: 'heading',
      depth: node.attrs.level,
      children: inline(node.content)
    };
  }
  if (node.type === schema.nodes.code_block) {
    var _lang;
    let lang = typeof node.attrs.language === 'string' && node.attrs.language !== 'plain' ? node.attrs.language : undefined;
    let meta = null;
    if ((_lang = lang) !== null && _lang !== void 0 && _lang.includes(' ')) {
      [lang, meta] = lang.split(' ', 2);
    }
    return {
      type: 'code',
      lang,
      meta,
      value: node.textContent
    };
  }
  if (node.type === schema.nodes.ordered_list) {
    return {
      type: 'list',
      ordered: true,
      spread: false,
      start: node.attrs.start,
      children: mapContent(node, node => convertListItem(blocks(node.content)))
    };
  }
  if (node.type === schema.nodes.unordered_list) {
    return {
      type: 'list',
      spread: false,
      children: mapContent(node, node => convertListItem(blocks(node.content)))
    };
  }
  const name = node.type.name;
  const componentConfig = schema.components[name];
  if (componentConfig) {
    const children = componentConfig.kind === 'wrapper' || componentConfig.kind === 'repeating' ? blocks(node.content) : [];
    return {
      type: 'mdxJsxFlowElement',
      name,
      attributes: propsToAttributes(internalToSerialized(componentConfig.schema, node.attrs.props, state)),
      children
    };
  }
  return {
    type: 'paragraph',
    children: inline(node.content)
  };
}

function getDefaultValue(schema) {
  return createEditorState(schema.nodes.doc.createAndFill());
}
function parseToEditorState(content, schema, files, otherFiles, slug) {
  const doc = markdocToProseMirror(parse(content), schema, files, otherFiles, slug);
  return createEditorState(doc);
}
function serializeFromEditorState(value, slug) {
  const other = new Map();
  const external = new Map();
  const markdocNode = proseMirrorToMarkdoc(value.doc, {
    extraFiles: other,
    otherFiles: external,
    schema: getEditorSchema(value.schema),
    slug
  });
  const markdoc = format(markdocNode);
  return {
    content: format(parse(markdoc)),
    other,
    external
  };
}
function parseToEditorStateMDX(content, schema, files, otherFiles, slug) {
  const root = fromMarkdown(content, {
    extensions: [mdxjs(), gfmAutolinkLiteral(), gfmStrikethrough(), gfmTable()],
    mdastExtensions: [mdxFromMarkdown(), gfmAutolinkLiteralFromMarkdown(), gfmStrikethroughFromMarkdown(), gfmTableFromMarkdown()]
  });
  const doc = mdxToProseMirror(root, schema, files, otherFiles, slug);
  return createEditorState(doc);
}
function serializeFromEditorStateMDX(value, slug) {
  const other = new Map();
  const external = new Map();
  const mdxNode = proseMirrorToMDXRoot(value.doc, {
    extraFiles: other,
    otherFiles: external,
    schema: getEditorSchema(value.schema),
    slug
  });
  const mdx = toMarkdown(mdxNode, {
    extensions: [gfmAutolinkLiteralToMarkdown(), gfmStrikethroughToMarkdown(), gfmTableToMarkdown(), mdxToMarkdown()],
    rule: '-'
  });
  return {
    content: mdx,
    other,
    external
  };
}
function DocumentFieldInput(props) {
  const $ = c(12);
  const entryLayoutPane = useEntryLayoutSplitPaneContext();
  let t0;
  if ($[0] !== props.label || $[1] !== props.description) {
    t0 = {
      label: props.label,
      labelElementType: "span",
      description: props.description
    };
    $[0] = props.label;
    $[1] = props.description;
    $[2] = t0;
  } else {
    t0 = $[2];
  }
  let fieldProps = t0;
  if (entryLayoutPane === "main") {
    let t1;
    if ($[3] !== props.label) {
      t1 = {
        "aria-label": props.label
      };
      $[3] = props.label;
      $[4] = t1;
    } else {
      t1 = $[4];
    }
    fieldProps = t1;
  }
  const t1 = entryLayoutPane === "main" ? "100%" : undefined;
  let t2;
  if ($[5] !== props.value || $[6] !== props.onChange) {
    t2 = inputProps => /*#__PURE__*/jsx(Editor, {
      ...inputProps,
      value: props.value,
      onChange: props.onChange
    });
    $[5] = props.value;
    $[6] = props.onChange;
    $[7] = t2;
  } else {
    t2 = $[7];
  }
  let t3;
  if ($[8] !== t1 || $[9] !== fieldProps || $[10] !== t2) {
    t3 = /*#__PURE__*/jsx(Field, {
      height: t1,
      ...fieldProps,
      children: t2
    });
    $[8] = t1;
    $[9] = fieldProps;
    $[10] = t2;
    $[11] = t3;
  } else {
    t3 = $[11];
  }
  return t3;
}
function createEditorStateFromYJS(schema, yXmlFragment, awareness) {
  return createEditorState(yXmlFragmentToProsemirror(schema.schema, yXmlFragment), undefined, undefined, yXmlFragment, awareness);
}

const defaultAltField = text({
  label: 'Alt text',
  description: 'This text will be used by screen readers and search engines.'
});
const emptyTitleField = basicFormFieldWithSimpleReaderParse({
  Input() {
    return null;
  },
  defaultValue() {
    return '';
  },
  parse(value) {
    if (value === undefined) return '';
    if (typeof value !== 'string') {
      throw new FieldDataError('Must be string');
    }
    return value;
  },
  validate(value) {
    return value;
  },
  serialize(value) {
    return {
      value
    };
  },
  label: 'Title'
});
function editorOptionsToConfig(options) {
  var _options$bold, _options$italic, _options$strikethroug, _options$code, _options$blockquote, _options$orderedList, _options$unorderedLis, _options$table, _options$link, _options$divider;
  return {
    bold: (_options$bold = options.bold) !== null && _options$bold !== void 0 ? _options$bold : true,
    italic: (_options$italic = options.italic) !== null && _options$italic !== void 0 ? _options$italic : true,
    strikethrough: (_options$strikethroug = options.strikethrough) !== null && _options$strikethroug !== void 0 ? _options$strikethroug : true,
    code: (_options$code = options.code) !== null && _options$code !== void 0 ? _options$code : true,
    heading: (() => {
      let levels = [];
      let levelsOpt = typeof options.heading === 'object' && !Array.isArray(options.heading) ? options.heading.levels : options.heading;
      if (levelsOpt === true || levelsOpt === undefined) {
        levels = [1, 2, 3, 4, 5, 6];
      }
      if (Array.isArray(levelsOpt)) {
        levels = levelsOpt;
      }
      return {
        levels,
        schema: options.heading && typeof options.heading === 'object' && 'schema' in options.heading ? options.heading.schema : {}
      };
    })(),
    blockquote: (_options$blockquote = options.blockquote) !== null && _options$blockquote !== void 0 ? _options$blockquote : true,
    orderedList: (_options$orderedList = options.orderedList) !== null && _options$orderedList !== void 0 ? _options$orderedList : true,
    unorderedList: (_options$unorderedLis = options.unorderedList) !== null && _options$unorderedLis !== void 0 ? _options$unorderedLis : true,
    table: (_options$table = options.table) !== null && _options$table !== void 0 ? _options$table : true,
    link: (_options$link = options.link) !== null && _options$link !== void 0 ? _options$link : true,
    image: options.image !== false ? ((_opts$transformFilena, _opts$schema$alt, _opts$schema, _opts$schema$title, _opts$schema2) => {
      const opts = options.image === true ? undefined : options.image;
      return {
        directory: opts === null || opts === void 0 ? void 0 : opts.directory,
        publicPath: opts === null || opts === void 0 ? void 0 : opts.publicPath,
        transformFilename: (_opts$transformFilena = opts === null || opts === void 0 ? void 0 : opts.transformFilename) !== null && _opts$transformFilena !== void 0 ? _opts$transformFilena : x => x,
        schema: {
          alt: (_opts$schema$alt = opts === null || opts === void 0 || (_opts$schema = opts.schema) === null || _opts$schema === void 0 ? void 0 : _opts$schema.alt) !== null && _opts$schema$alt !== void 0 ? _opts$schema$alt : defaultAltField,
          title: (_opts$schema$title = opts === null || opts === void 0 || (_opts$schema2 = opts.schema) === null || _opts$schema2 === void 0 ? void 0 : _opts$schema2.title) !== null && _opts$schema$title !== void 0 ? _opts$schema$title : emptyTitleField
        }
      };
    })() : undefined,
    divider: (_options$divider = options.divider) !== null && _options$divider !== void 0 ? _options$divider : true,
    codeBlock: options.codeBlock === false ? undefined : {
      schema: typeof options.codeBlock === 'object' ? options.codeBlock.schema : {}
    }
  };
}

function getTypeForField(field) {
  if (field.kind === 'object' || field.kind === 'conditional') {
    return {
      type: Object,
      required: true
    };
  }
  if (field.kind === 'array') {
    return {
      type: Array,
      required: true
    };
  }
  if (field.kind === 'child') {
    return {};
  }
  if (field.formKind === undefined) {
    if (typeof field.defaultValue === 'string' && 'options' in field && Array.isArray(field.options) && field.options.every(val => typeof val === 'object' && val !== null && 'value' in val && typeof val.value === 'string')) {
      return {
        type: String,
        matches: field.options.map(x => x.value),
        required: true
      };
    }
    if (typeof field.defaultValue === 'string') {
      let required = false;
      try {
        field.parse('');
      } catch {
        required = true;
      }
      return {
        type: String,
        required
      };
    }
    try {
      field.parse(1);
      return {
        type: Number
      };
    } catch {}
    if (typeof field.defaultValue === 'boolean') {
      return {
        type: Boolean,
        required: true
      };
    }
    return {};
  }
  if (field.formKind === 'slug') {
    let required = false;
    try {
      field.parse('', undefined);
    } catch {
      required = true;
    }
    return {
      type: String,
      required
    };
  }
  if (field.formKind === 'asset') {
    let required = false;
    try {
      field.validate(null);
    } catch {
      required = true;
    }
    return {
      type: String,
      required
    };
  }
  return {};
}
function fieldsToMarkdocAttributes(fields) {
  return Object.fromEntries(Object.entries(fields).map(([name, field]) => {
    const schema = getTypeForField(field);
    return [name, schema];
  }));
}
function createMarkdocConfig(opts) {
  const editorConfig = editorOptionsToConfig(opts.options || {});
  const config = {
    nodes: {
      ...nodes
    },
    tags: {}
  };
  if (editorConfig.heading.levels.length) {
    config.nodes.heading = {
      ...nodes.heading,
      attributes: {
        ...nodes.heading.attributes,
        ...fieldsToMarkdocAttributes(editorConfig.heading.schema)
      }
    };
  } else {
    config.nodes.heading = undefined;
  }
  if (!editorConfig.blockquote) {
    config.nodes.blockquote = undefined;
  }
  if (editorConfig.codeBlock) {
    config.nodes.fence = {
      ...nodes.fence,
      attributes: {
        ...nodes.fence.attributes,
        ...fieldsToMarkdocAttributes(editorConfig.codeBlock.schema)
      }
    };
  } else {
    config.nodes.fence = undefined;
  }
  if (!editorConfig.orderedList && !editorConfig.unorderedList) {
    config.nodes.list = undefined;
  }
  if (!editorConfig.bold) {
    config.nodes.strong = undefined;
  }
  if (!editorConfig.italic) {
    config.nodes.em = undefined;
  }
  if (!editorConfig.strikethrough) {
    config.nodes.s = undefined;
  }
  if (!editorConfig.link) {
    config.nodes.link = undefined;
  }
  if (!editorConfig.image) {
    config.nodes.image = undefined;
  }
  if (!editorConfig.divider) {
    config.nodes.hr = undefined;
  }
  if (!editorConfig.table) {
    config.nodes.table = undefined;
  }
  for (const [name, component] of Object.entries(opts.components || {})) {
    var _opts$render;
    const isEmpty = component.kind === 'block' || component.kind === 'inline';
    config.tags[name] = {
      render: (_opts$render = opts.render) === null || _opts$render === void 0 || (_opts$render = _opts$render.tags) === null || _opts$render === void 0 ? void 0 : _opts$render[name],
      children: isEmpty ? [] : undefined,
      selfClosing: isEmpty,
      attributes: fieldsToMarkdocAttributes(component.schema),
      description: 'description' in component ? component.description : undefined,
      inline: component.kind === 'inline' || component.kind === 'mark'
    };
  }
  for (const [name, render] of Object.entries(((_opts$render2 = opts.render) === null || _opts$render2 === void 0 ? void 0 : _opts$render2.nodes) || {})) {
    var _opts$render2;
    const nodeSchema = config.nodes[name];
    if (nodeSchema) {
      nodeSchema.render = render;
    }
  }
  return config;
}

const textDecoder = new TextDecoder();
const textEncoder = new TextEncoder();
function getDirectoriesForEditorField(components, config) {
  return [...collectDirectoriesUsedInSchema(object(Object.fromEntries(Object.entries(components).map(([name, component]) => [name, object(component.schema)])))), ...(typeof config.image === 'object' && typeof config.image.directory === 'string' ? [fixPath(config.image.directory)] : [])];
}
function markdoc({
  label,
  description,
  options = {},
  components = {},
  extension = 'mdoc'
}) {
  let schema;
  const config = editorOptionsToConfig(options);
  let getSchema = () => {
    if (!schema) {
      schema = createEditorSchema(config, components, false);
    }
    return schema;
  };
  return {
    kind: 'form',
    formKind: 'content',
    defaultValue() {
      return getDefaultValue(getSchema());
    },
    Input(props) {
      return /*#__PURE__*/jsx(DocumentFieldInput, {
        description: description,
        label: label,
        ...props
      });
    },
    parse: (_, {
      content,
      other,
      external,
      slug
    }) => {
      const text = textDecoder.decode(content);
      return parseToEditorState(text, getSchema(), other, external, slug);
    },
    contentExtension: `.${extension}`,
    validate(value) {
      return value;
    },
    directories: getDirectoriesForEditorField(components, config),
    serialize(value, {
      slug
    }) {
      const out = serializeFromEditorState(value, slug);
      return {
        content: textEncoder.encode(out.content),
        external: out.external,
        other: out.other,
        value: undefined
      };
    },
    reader: {
      parse: (_, {
        content
      }) => {
        const text = textDecoder.decode(content);
        return {
          node: parse(text)
        };
      }
    },
    collaboration: {
      toYjs(value) {
        return prosemirrorToYXmlFragment(value.doc);
      },
      fromYjs(yjsValue, awareness) {
        return createEditorStateFromYJS(getSchema(), yjsValue, awareness);
      }
    }
  };
}
markdoc.createMarkdocConfig = createMarkdocConfig;
markdoc.inline = function inlineMarkdoc({
  label,
  description,
  options = {},
  components = {}
}) {
  let schema;
  const config = editorOptionsToConfig(options);
  let getSchema = () => {
    if (!schema) {
      schema = createEditorSchema(config, components, false);
    }
    return schema;
  };
  return {
    kind: 'form',
    formKind: 'assets',
    defaultValue() {
      return getDefaultValue(getSchema());
    },
    Input(props) {
      return /*#__PURE__*/jsx(DocumentFieldInput, {
        description: description,
        label: label,
        ...props
      });
    },
    parse: (value, {
      other,
      external,
      slug
    }) => {
      if (value === undefined) {
        value = '';
      }
      if (typeof value !== 'string') {
        throw new FieldDataError('Must be a string');
      }
      return parseToEditorState(value, getSchema(), other, external, slug);
    },
    validate(value) {
      return value;
    },
    directories: getDirectoriesForEditorField(components, config),
    serialize(value, {
      slug
    }) {
      const out = serializeFromEditorState(value, slug);
      return {
        external: out.external,
        other: out.other,
        value: out.content
      };
    },
    reader: {
      parse: value => {
        if (value === undefined) {
          value = '';
        }
        if (typeof value !== 'string') {
          throw new FieldDataError('Must be a string');
        }
        return {
          node: parse(value)
        };
      }
    },
    collaboration: {
      toYjs(value) {
        return prosemirrorToYXmlFragment(value.doc);
      },
      fromYjs(yjsValue, awareness) {
        return createEditorStateFromYJS(getSchema(), yjsValue, awareness);
      }
    }
  };
};
function mdx({
  label,
  description,
  options = {},
  components = {},
  extension = 'mdx'
}) {
  let schema;
  const config = editorOptionsToConfig(options);
  let getSchema = () => {
    if (!schema) {
      schema = createEditorSchema(config, components, true);
    }
    return schema;
  };
  return {
    kind: 'form',
    formKind: 'content',
    defaultValue() {
      return getDefaultValue(getSchema());
    },
    Input(props) {
      return /*#__PURE__*/jsx(DocumentFieldInput, {
        description: description,
        label: label,
        ...props
      });
    },
    parse: (_, {
      content,
      other,
      external,
      slug
    }) => {
      const text = textDecoder.decode(content);
      return parseToEditorStateMDX(text, getSchema(), other, external, slug);
    },
    contentExtension: `.${extension}`,
    validate(value) {
      return value;
    },
    directories: getDirectoriesForEditorField(components, config),
    serialize(value, {
      slug
    }) {
      const out = serializeFromEditorStateMDX(value, slug);
      return {
        content: textEncoder.encode(out.content),
        external: out.external,
        other: out.other,
        value: undefined
      };
    },
    reader: {
      parse: (_, {
        content
      }) => {
        const text = textDecoder.decode(content);
        return text;
      }
    },
    collaboration: {
      toYjs(value) {
        return prosemirrorToYXmlFragment(value.doc);
      },
      fromYjs(yjsValue, awareness) {
        return createEditorStateFromYJS(getSchema(), yjsValue, awareness);
      }
    }
  };
}
mdx.inline = function mdx({
  label,
  description,
  options = {},
  components = {}
}) {
  let schema;
  const config = editorOptionsToConfig(options);
  let getSchema = () => {
    if (!schema) {
      schema = createEditorSchema(config, components, true);
    }
    return schema;
  };
  return {
    kind: 'form',
    formKind: 'assets',
    defaultValue() {
      return getDefaultValue(getSchema());
    },
    Input(props) {
      return /*#__PURE__*/jsx(DocumentFieldInput, {
        description: description,
        label: label,
        ...props
      });
    },
    parse: (value, {
      other,
      external,
      slug
    }) => {
      if (value === undefined) {
        value = '';
      }
      if (typeof value !== 'string') {
        throw new FieldDataError('Must be a string');
      }
      return parseToEditorStateMDX(value, getSchema(), other, external, slug);
    },
    validate(value) {
      return value;
    },
    directories: getDirectoriesForEditorField(components, config),
    serialize(value, {
      slug
    }) {
      const out = serializeFromEditorStateMDX(value, slug);
      return {
        external: out.external,
        other: out.other,
        value: out.content
      };
    },
    reader: {
      parse: value => {
        if (value === undefined) {
          value = '';
        }
        if (typeof value !== 'string') {
          throw new FieldDataError('Must be a string');
        }
        return value;
      }
    },
    collaboration: {
      toYjs(value) {
        return prosemirrorToYXmlFragment(value.doc);
      },
      fromYjs(yjsValue, awareness) {
        return createEditorStateFromYJS(getSchema(), yjsValue, awareness);
      }
    }
  };
};

export { useArrayFieldValidationMessage as A, ArrayFieldListView as B, CreateBranchDialog as C, FormValueContentFromPreviewProps as D, valueToUpdater as E, FormForEntry as F, isValidURL$1 as G, useIsInDocumentEditor as H, useObjectURL as I, getUploadedFile as J, getSrcPrefix as K, ImageFieldInput as L, move as M, document$1 as N, mdx as O, PageRoot as P, markdoc as Q, config as R, SidebarDialog as S, ThemeProvider as T, collection as U, singleton as V, BlockWrapper$1 as W, ToolbarSeparator as X, getValueAtPropPath as Y, formatFormDataError as Z, PageHeader as a, setKeysForArrayValue as b, serializeProps$1 as c, getNewArrayElementKey as d, updateValue as e, getInitialPropsValueFromInitializer as f, getKeysForArrayValue as g, createGetPreviewProps as h, PageBody as i, containerWidthForEntryLayout as j, useCreateBranchMutation as k, prettyErrorForCreateBranchMutation as l, clientSideValidateProp as m, setValueToPreviewProps as n, getInitialPropsValue as o, parseProps as p, useAssociatedPullRequest as q, useNavItems as r, strings as s, toFormattedFormDataError as t, useTheme as u, pluralize as v, useSidebar as w, SidebarPanel as x, SidebarProvider as y, useFieldSpan as z };
