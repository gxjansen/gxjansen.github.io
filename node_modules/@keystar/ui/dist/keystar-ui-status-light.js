'use client';
import { c } from './react-compiler-runtime-19061925.js';
import { filterDOMProps } from '@react-aria/utils';
import { forwardRef } from 'react';
import { useStyleProps, classNames, css, tokenSchema } from '@keystar/ui/style';
import { Text } from '@keystar/ui/typography';
import { isReactText } from '@keystar/ui/utils';
import { jsx } from 'react/jsx-runtime';

/** Status lights describe the state or condition of an entity. */
const StatusLight = /*#__PURE__*/forwardRef(function StatusLight(props, forwardedRef) {
  const $ = c(13);
  const {
    children,
    role,
    tone: t0
  } = props;
  const tone = t0 === undefined ? "neutral" : t0;
  const styleProps = useStyleProps(props);
  if (!children && !props["aria-label"]) {
    console.warn("If no children are provided, an aria-label must be specified");
  }
  if (!role && (props["aria-label"] || props["aria-labelledby"])) {
    console.warn("A labelled StatusLight must have a role.");
  }
  let t1;
  if ($[0] !== props) {
    t1 = filterDOMProps(props, {
      labelable: true
    });
    $[0] = props;
    $[1] = t1;
  } else {
    t1 = $[1];
  }
  let t2;
  if ($[2] !== styleProps.className) {
    t2 = classNames(css({
      alignItems: "center",
      color: tokenSchema.color.foreground.neutral,
      display: "flex",
      gap: tokenSchema.size.space.regular,
      height: tokenSchema.size.element.small,
      "&::before": {
        content: "\"\"",
        backgroundColor: tokenSchema.color.foreground.neutralTertiary,
        borderRadius: tokenSchema.size.radius.full,
        height: tokenSchema.size.scale[100],
        width: tokenSchema.size.scale[100]
      },
      "&[data-tone=neutral]": {
        color: tokenSchema.color.foreground.neutralSecondary
      },
      "&[data-tone=accent]::before": {
        backgroundColor: tokenSchema.color.background.accentEmphasis
      },
      "&[data-tone=caution]::before": {
        backgroundColor: tokenSchema.color.background.cautionEmphasis
      },
      "&[data-tone=critical]::before": {
        backgroundColor: tokenSchema.color.background.criticalEmphasis
      },
      "&[data-tone=pending]::before": {
        backgroundColor: tokenSchema.color.background.pendingEmphasis
      },
      "&[data-tone=positive]::before": {
        backgroundColor: tokenSchema.color.background.positiveEmphasis
      }
    }), styleProps.className);
    $[2] = styleProps.className;
    $[3] = t2;
  } else {
    t2 = $[3];
  }
  let t3;
  if ($[4] !== children) {
    t3 = isReactText(children) ? /*#__PURE__*/jsx(Text, {
      color: "inherit",
      children: children
    }) : children;
    $[4] = children;
    $[5] = t3;
  } else {
    t3 = $[5];
  }
  let t4;
  if ($[6] !== t1 || $[7] !== styleProps || $[8] !== forwardedRef || $[9] !== tone || $[10] !== t2 || $[11] !== t3) {
    t4 = /*#__PURE__*/jsx("div", {
      ...t1,
      ...styleProps,
      ref: forwardedRef,
      "data-tone": tone,
      className: t2,
      children: t3
    });
    $[6] = t1;
    $[7] = styleProps;
    $[8] = forwardedRef;
    $[9] = tone;
    $[10] = t2;
    $[11] = t3;
    $[12] = t4;
  } else {
    t4 = $[12];
  }
  return t4;
});

export { StatusLight };
