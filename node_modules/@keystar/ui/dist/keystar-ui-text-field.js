'use client';
import { c } from './react-compiler-runtime-19061925.js';
import { forwardRef, useCallback } from 'react';
import { useHover, usePress } from '@react-aria/interactions';
import { useObjectRef, useLayoutEffect, chain } from '@react-aria/utils';
import { FieldPrimitive, validateFieldProps } from '@keystar/ui/field';
import { classNames, css, toDataAttributes, tokenSchema, transition, FocusRing } from '@keystar/ui/style';
import { jsx, jsxs } from 'react/jsx-runtime';
import { useTextField } from '@react-aria/textfield';
import { warning } from 'emery';
import { useControlledState } from '@react-stately/utils';

/** Internal component for default appearance and behaviour. */
const TextFieldPrimitive = /*#__PURE__*/forwardRef(function TextFieldPrimitive(props, forwardedRef) {
  var _inputProps;
  const $ = c(66);
  let t0;
  let isDisabled;
  let inputWrapperProps;
  let inputProps;
  let autoFocus;
  let startElement;
  let endElement;
  let isRequired;
  let description;
  let descriptionProps;
  let errorMessage;
  let errorMessageProps;
  let label;
  let labelProps;
  let otherProps;
  if ($[0] !== props) {
    const {
      autoFocus: t1,
      description: t2,
      descriptionProps: t3,
      endElement: t4,
      errorMessage: t5,
      errorMessageProps: t6,
      id,
      inputProps: t7,
      inputWrapperProps: t8,
      isDisabled: t9,
      isMultiline: t10,
      isRequired: t11,
      label: t12,
      labelProps: t13,
      startElement: t14,
      ...t15
    } = props;
    autoFocus = t1;
    description = t2;
    descriptionProps = t3;
    endElement = t4;
    errorMessage = t5;
    errorMessageProps = t6;
    inputProps = t7;
    inputWrapperProps = t8;
    isDisabled = t9;
    t0 = t10;
    isRequired = t11;
    label = t12;
    labelProps = t13;
    startElement = t14;
    otherProps = t15;
    $[0] = props;
    $[1] = t0;
    $[2] = isDisabled;
    $[3] = inputWrapperProps;
    $[4] = inputProps;
    $[5] = autoFocus;
    $[6] = startElement;
    $[7] = endElement;
    $[8] = isRequired;
    $[9] = description;
    $[10] = descriptionProps;
    $[11] = errorMessage;
    $[12] = errorMessageProps;
    $[13] = label;
    $[14] = labelProps;
    $[15] = otherProps;
  } else {
    t0 = $[1];
    isDisabled = $[2];
    inputWrapperProps = $[3];
    inputProps = $[4];
    autoFocus = $[5];
    startElement = $[6];
    endElement = $[7];
    isRequired = $[8];
    description = $[9];
    descriptionProps = $[10];
    errorMessage = $[11];
    errorMessageProps = $[12];
    label = $[13];
    labelProps = $[14];
    otherProps = $[15];
  }
  const isMultiline = t0 === undefined ? false : t0;
  const InputElement = isMultiline ? "textarea" : "input";
  let t1;
  if ($[16] !== isDisabled) {
    t1 = {
      isDisabled
    };
    $[16] = isDisabled;
    $[17] = t1;
  } else {
    t1 = $[17];
  }
  const {
    hoverProps,
    isHovered
  } = useHover(t1);
  const inputClassName = useTextFieldStyles();
  const inputRef = useObjectRef(forwardedRef);
  let t2;
  if ($[18] !== inputRef.current) {
    t2 = () => {
      var _inputRef$current;
      if (document.activeElement === inputRef.current) {
        return;
      }
      (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 || _inputRef$current.focus();
    };
    $[18] = inputRef.current;
    $[19] = t2;
  } else {
    t2 = $[19];
  }
  const onIndicatorPressStart = t2;
  let t3;
  if ($[20] !== isDisabled || $[21] !== onIndicatorPressStart) {
    t3 = {
      isDisabled,
      onPressStart: onIndicatorPressStart,
      preventFocusOnPress: true
    };
    $[20] = isDisabled;
    $[21] = onIndicatorPressStart;
    $[22] = t3;
  } else {
    t3 = $[22];
  }
  const {
    pressProps
  } = usePress(t3);
  let t4;
  if ($[23] !== inputWrapperProps) {
    var _inputWrapperProps;
    t4 = classNames(css({
      display: "flex",
      flex: "1 1 auto",
      position: "relative",
      zIndex: 0
    }), (_inputWrapperProps = inputWrapperProps) === null || _inputWrapperProps === void 0 ? void 0 : _inputWrapperProps.className);
    $[23] = inputWrapperProps;
    $[24] = t4;
  } else {
    t4 = $[24];
  }
  let t5;
  if ($[25] !== props || $[26] !== isHovered || $[27] !== isMultiline) {
    t5 = toDataAttributes({
      adornment: getAdornmentType(props),
      hovered: isHovered || undefined,
      multiline: isMultiline || undefined
    });
    $[25] = props;
    $[26] = isHovered;
    $[27] = isMultiline;
    $[28] = t5;
  } else {
    t5 = $[28];
  }
  const t6 = (_inputProps = inputProps) === null || _inputProps === void 0 ? void 0 : _inputProps.className;
  let t7;
  if ($[29] !== inputClassName || $[30] !== t6) {
    t7 = classNames(inputClassName, t6);
    $[29] = inputClassName;
    $[30] = t6;
    $[31] = t7;
  } else {
    t7 = $[31];
  }
  let t8;
  if ($[32] !== props) {
    t8 = getAdornmentType(props);
    $[32] = props;
    $[33] = t8;
  } else {
    t8 = $[33];
  }
  const t9 = isMultiline ? 1 : undefined;
  let t10;
  if ($[34] !== InputElement || $[35] !== inputProps || $[36] !== t5 || $[37] !== t7 || $[38] !== t8 || $[39] !== inputRef || $[40] !== t9) {
    t10 = /*#__PURE__*/jsx(InputElement, {
      ...inputProps,
      ...t5,
      className: t7,
      "data-adornment": t8,
      ref: inputRef,
      rows: t9
    });
    $[34] = InputElement;
    $[35] = inputProps;
    $[36] = t5;
    $[37] = t7;
    $[38] = t8;
    $[39] = inputRef;
    $[40] = t9;
    $[41] = t10;
  } else {
    t10 = $[41];
  }
  let t11;
  if ($[42] !== autoFocus || $[43] !== t10) {
    t11 = /*#__PURE__*/jsx(FocusRing, {
      autoFocus: autoFocus,
      isTextInput: true,
      children: t10
    });
    $[42] = autoFocus;
    $[43] = t10;
    $[44] = t11;
  } else {
    t11 = $[44];
  }
  let t12;
  if ($[45] !== inputClassName || $[46] !== pressProps) {
    t12 = /*#__PURE__*/jsx(InputStateIndicator, {
      inputClassName: inputClassName,
      ...pressProps
    });
    $[45] = inputClassName;
    $[46] = pressProps;
    $[47] = t12;
  } else {
    t12 = $[47];
  }
  let t13;
  if ($[48] !== inputWrapperProps || $[49] !== hoverProps || $[50] !== t4 || $[51] !== startElement || $[52] !== t11 || $[53] !== t12 || $[54] !== endElement) {
    t13 = /*#__PURE__*/jsxs("div", {
      ...inputWrapperProps,
      ...hoverProps,
      className: t4,
      children: [startElement, t11, t12, endElement]
    });
    $[48] = inputWrapperProps;
    $[49] = hoverProps;
    $[50] = t4;
    $[51] = startElement;
    $[52] = t11;
    $[53] = t12;
    $[54] = endElement;
    $[55] = t13;
  } else {
    t13 = $[55];
  }
  let t14;
  if ($[56] !== isRequired || $[57] !== description || $[58] !== descriptionProps || $[59] !== errorMessage || $[60] !== errorMessageProps || $[61] !== label || $[62] !== labelProps || $[63] !== otherProps || $[64] !== t13) {
    t14 = /*#__PURE__*/jsx(FieldPrimitive, {
      isRequired: isRequired,
      description: description,
      descriptionProps: descriptionProps,
      errorMessage: errorMessage,
      errorMessageProps: errorMessageProps,
      label: label,
      labelProps: labelProps,
      ...otherProps,
      children: t13
    });
    $[56] = isRequired;
    $[57] = description;
    $[58] = descriptionProps;
    $[59] = errorMessage;
    $[60] = errorMessageProps;
    $[61] = label;
    $[62] = labelProps;
    $[63] = otherProps;
    $[64] = t13;
    $[65] = t14;
  } else {
    t14 = $[65];
  }
  return t14;
});

// Styled components
// ----------------------------------------------------------------------------

function makeSiblingSelector(base) {
  return function siblingSelector(...selectors) {
    return selectors.map(s => `.${base}${s} + &`).join(', ');
  };
}
const InputStateIndicator = ({
  inputClassName,
  ...props
}) => {
  const s = makeSiblingSelector(inputClassName);
  return /*#__PURE__*/jsx("div", {
    role: "presentation",
    ...props,
    className: css({
      backgroundColor: tokenSchema.color.background.canvas,
      border: `${tokenSchema.size.border.regular} solid ${tokenSchema.color.alias.borderIdle}`,
      borderRadius: tokenSchema.size.radius.regular,
      cursor: 'text',
      inset: 0,
      position: 'absolute',
      transition: transition(['border-color', 'box-shadow']),
      zIndex: -1,
      [s('[data-hovered]')]: {
        borderColor: tokenSchema.color.alias.borderHovered
      },
      [s(':invalid', '[aria-invalid]')]: {
        borderColor: tokenSchema.color.alias.borderInvalid
      },
      [s(':focus')]: {
        borderColor: tokenSchema.color.alias.borderFocused
      },
      [s(':focus:not([readonly])')]: {
        boxShadow: `0 0 0 1px ${tokenSchema.color.alias.borderFocused}`
      },
      [s(':disabled', '[aria-disabled]')]: {
        backgroundColor: tokenSchema.color.alias.backgroundDisabled,
        // borderColor: tokenSchema.color.alias.borderDisabled,
        borderColor: 'transparent',
        cursor: 'auto'
      }
    })
  });
};
function useTextFieldStyles() {
  return css({
    color: tokenSchema.color.foreground.neutral,
    flex: 1,
    fontFamily: tokenSchema.typography.fontFamily.base,
    fontSize: tokenSchema.typography.text.regular.size,
    fontWeight: tokenSchema.typography.fontWeight.regular,
    height: tokenSchema.size.element.regular,
    lineHeight: tokenSchema.typography.lineheight.small,
    outline: 0,
    overflow: 'visible',
    paddingBlock: tokenSchema.size.space.small,
    paddingInline: tokenSchema.size.space.medium,
    position: 'relative',
    textIndent: 0,
    textOverflow: 'ellipsis',
    verticalAlign: 'top',
    width: '100%',
    MozOsxFontSmoothing: 'auto',
    WebkitFontSmoothing: 'auto',
    '::placeholder': {
      color: tokenSchema.color.foreground.neutralTertiary
    },
    '&:disabled, &[aria-disabled]': {
      color: tokenSchema.color.alias.foregroundDisabled,
      '::placeholder': {
        color: tokenSchema.color.alias.foregroundDisabled
      }
    },
    /* Remove the inner padding and cancel buttons for input[type="search"] in Chrome and Safari on macOS. */
    '&::-webkit-search-cancel-button, &::-webkit-search-decoration': {
      WebkitAppearance: 'none'
    },
    // TEXTAREA
    // ------------------------------

    '&[data-multiline]': {
      height: 'auto',
      lineHeight: tokenSchema.typography.lineheight.medium,
      // min: 3 lines
      minHeight: `calc(${tokenSchema.size.space.regular} * 2 + ${tokenSchema.typography.text.regular.size} * ${tokenSchema.typography.lineheight.medium} * 3)`,
      overflow: 'auto',
      paddingBlock: tokenSchema.size.space.regular,
      resize: 'none'
    }
  });
}

// Utils
// ----------------------------------------------------------------------------

function getAdornmentType(props) {
  if (props.startElement && props.endElement) {
    return 'both';
  } else if (props.startElement) {
    return 'start';
  } else if (props.endElement) {
    return 'end';
  }
  return 'none';
}

function validateTextFieldProps(props) {
  // warn if `placeholder` is used without a `description` present
  warning(!props.placeholder || !!props.description, 'Placeholder text is not accessible. Use the `description` prop to provide information that will aid user input.');
  return validateFieldProps(props);
}

const TextField = /*#__PURE__*/forwardRef(function TextField(props, forwardedRef) {
  const $ = c(9);
  let t0;
  if ($[0] !== props) {
    t0 = validateTextFieldProps(props);
    $[0] = props;
    $[1] = t0;
  } else {
    t0 = $[1];
  }
  props = t0;
  const domRef = useObjectRef(forwardedRef);
  const {
    labelProps,
    inputProps,
    descriptionProps,
    errorMessageProps
  } = useTextField(props, domRef);
  let t1;
  if ($[2] !== domRef || $[3] !== props || $[4] !== labelProps || $[5] !== inputProps || $[6] !== descriptionProps || $[7] !== errorMessageProps) {
    t1 = /*#__PURE__*/jsx(TextFieldPrimitive, {
      ref: domRef,
      ...props,
      labelProps: labelProps,
      inputProps: inputProps,
      descriptionProps: descriptionProps,
      errorMessageProps: errorMessageProps
    });
    $[2] = domRef;
    $[3] = props;
    $[4] = labelProps;
    $[5] = inputProps;
    $[6] = descriptionProps;
    $[7] = errorMessageProps;
    $[8] = t1;
  } else {
    t1 = $[8];
  }
  return t1;
});

const TextArea = /*#__PURE__*/forwardRef(function TextArea({
  onChange,
  ...props
}, forwardedRef) {
  var _props$defaultValue;
  props = validateTextFieldProps(props);
  let domRef = useObjectRef(forwardedRef);
  let [inputValue, setInputValue] = useControlledState(props.value, (_props$defaultValue = props.defaultValue) !== null && _props$defaultValue !== void 0 ? _props$defaultValue : '', () => {});
  let onHeightChange = useCallback(() => {
    let input = domRef.current;
    // Auto-grow unless an explicit height is set.
    if (!props.height && input) {
      let prevOverflow = input.style.overflow;
      // Firefox scroll position fix https://bugzilla.mozilla.org/show_bug.cgi?id=1787062
      let isFirefox = ('MozAppearance' in input.style);
      if (!isFirefox) {
        // eslint-disable-next-line react-compiler/react-compiler
        input.style.overflow = 'hidden';
      }
      input.style.height = 'auto';
      // offsetHeight - clientHeight accounts for the border/padding.
      input.style.height = `${input.scrollHeight + (input.offsetHeight - input.clientHeight)}px`;
      input.style.overflow = prevOverflow;
    }
  }, [domRef, props.height]);
  useLayoutEffect(() => {
    if (domRef.current) {
      onHeightChange();
    }
  }, [onHeightChange, inputValue, domRef]);
  let {
    labelProps,
    inputProps,
    descriptionProps,
    errorMessageProps
  } = useTextField({
    ...props,
    onChange: chain(onChange, setInputValue),
    inputElementType: 'textarea'
  }, domRef);
  return /*#__PURE__*/jsx(TextFieldPrimitive, {
    ...props,
    ref: domRef,
    labelProps: labelProps,
    inputProps: inputProps,
    descriptionProps: descriptionProps,
    errorMessageProps: errorMessageProps,
    isMultiline: true
  });
});

export { TextArea, TextField, TextFieldPrimitive, validateTextFieldProps };
