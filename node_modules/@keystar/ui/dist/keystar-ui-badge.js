'use client';
import { c } from './react-compiler-runtime-19061925.js';
import { filterDOMProps } from '@react-aria/utils';
import { forwardRef } from 'react';
import { Flex } from '@keystar/ui/layout';
import { SlotProvider } from '@keystar/ui/slots';
import { useStyleProps } from '@keystar/ui/style';
import { Text } from '@keystar/ui/typography';
import { isReactText } from '@keystar/ui/utils';
import { jsx } from 'react/jsx-runtime';

/**
 * A badge is a decorative indicator used to either call attention to an item or
 * for communicating non-actionable, supplemental information.
 */
const Badge = /*#__PURE__*/forwardRef(function Badge(props, forwardedRef) {
  const $ = c(20);
  let t0;
  let otherProps;
  let children;
  if ($[0] !== props) {
    ({
      children,
      tone: t0,
      ...otherProps
    } = props);
    $[0] = props;
    $[1] = t0;
    $[2] = otherProps;
    $[3] = children;
  } else {
    t0 = $[1];
    otherProps = $[2];
    children = $[3];
  }
  const tone = t0 === undefined ? "neutral" : t0;
  const styleProps = useStyleProps(otherProps);
  const bg = tone === "neutral" ? "surfaceSecondary" : tone;
  const fg = tone === "neutral" ? undefined : tone;
  let t1;
  let t2;
  if ($[4] !== fg) {
    t2 = {
      icon: {
        color: fg
      },
      text: {
        trim: false,
        color: fg,
        weight: "medium"
      }
    };
    $[4] = fg;
    $[5] = t2;
  } else {
    t2 = $[5];
  }
  t1 = t2;
  const slots = t1;
  let t3;
  if ($[6] !== otherProps) {
    t3 = filterDOMProps(otherProps, {
      labelable: true
    });
    $[6] = otherProps;
    $[7] = t3;
  } else {
    t3 = $[7];
  }
  let t4;
  if ($[8] !== children) {
    t4 = isReactText(children) ? /*#__PURE__*/jsx(Text, {
      children: children
    }) : children;
    $[8] = children;
    $[9] = t4;
  } else {
    t4 = $[9];
  }
  let t5;
  if ($[10] !== slots || $[11] !== t4) {
    t5 = /*#__PURE__*/jsx(SlotProvider, {
      slots: slots,
      children: t4
    });
    $[10] = slots;
    $[11] = t4;
    $[12] = t5;
  } else {
    t5 = $[12];
  }
  let t6;
  if ($[13] !== styleProps.className || $[14] !== styleProps.style || $[15] !== forwardedRef || $[16] !== t3 || $[17] !== bg || $[18] !== t5) {
    t6 = /*#__PURE__*/jsx(Flex, {
      UNSAFE_className: styleProps.className,
      UNSAFE_style: styleProps.style,
      ref: forwardedRef,
      ...t3,
      backgroundColor: bg,
      borderRadius: "full",
      height: "element.small",
      minWidth: 0,
      paddingX: "regular",
      alignItems: "center",
      flexShrink: 0,
      gap: "small",
      inline: true,
      children: t5
    });
    $[13] = styleProps.className;
    $[14] = styleProps.style;
    $[15] = forwardedRef;
    $[16] = t3;
    $[17] = bg;
    $[18] = t5;
    $[19] = t6;
  } else {
    t6 = $[19];
  }
  return t6;
});

export { Badge };
