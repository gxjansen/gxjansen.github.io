'use client';
import { c } from './react-compiler-runtime-19061925.js';
import { useId, useObjectRef } from '@react-aria/utils';
import React, { forwardRef } from 'react';
import { ActionButton } from '@keystar/ui/button';
import { Icon } from '@keystar/ui/icon';
import { eyeIcon } from '@keystar/ui/icon/icons/eyeIcon';
import { eyeOffIcon } from '@keystar/ui/icon/icons/eyeOffIcon';
import { ClassList, css, tokenSchema } from '@keystar/ui/style';
import { validateTextFieldProps, TextFieldPrimitive } from '@keystar/ui/text-field';
import { useLocalizedStringFormatter } from '@react-aria/i18n';
import { useTextField } from '@react-aria/textfield';
import { useControlledState } from '@react-stately/utils';
import { jsx } from 'react/jsx-runtime';

const intlMessages = {
  'ar-AE': {
    show: vars => `أقل ${vars === null || vars === void 0 ? void 0 : vars.fieldLabel}`
  },
  'bg-BG': {
    show: vars => `Показване ${vars === null || vars === void 0 ? void 0 : vars.fieldLabel}`
  },
  'cs-CZ': {
    show: vars => `Zobrazit ${vars === null || vars === void 0 ? void 0 : vars.fieldLabel}`
  },
  'da-DK': {
    show: vars => `Vis ${vars === null || vars === void 0 ? void 0 : vars.fieldLabel}`
  },
  'de-DE': {
    show: vars => `${vars === null || vars === void 0 ? void 0 : vars.fieldLabel} anzeigen`
  },
  'el-GR': {
    show: vars => `Εμφάνιση ${vars === null || vars === void 0 ? void 0 : vars.fieldLabel}`
  },
  'en-US': {
    show: vars => `Show ${vars === null || vars === void 0 ? void 0 : vars.fieldLabel}`
  },
  'es-ES': {
    show: vars => `Mostrar ${vars === null || vars === void 0 ? void 0 : vars.fieldLabel}`
  },
  'et-EE': {
    show: vars => `Kuva ${vars === null || vars === void 0 ? void 0 : vars.fieldLabel}`
  },
  'fi-FI': {
    show: vars => `Näytä ${vars === null || vars === void 0 ? void 0 : vars.fieldLabel}`
  },
  'fr-FR': {
    show: vars => `Afficher ${vars === null || vars === void 0 ? void 0 : vars.fieldLabel}`
  },
  'he-IL': {
    show: vars => `${vars === null || vars === void 0 ? void 0 : vars.fieldLabel} הצג`
  },
  'hr-HR': {
    show: vars => `Prikaži ${vars === null || vars === void 0 ? void 0 : vars.fieldLabel}`
  },
  'hu-HU': {
    show: vars => `Mutass ${vars === null || vars === void 0 ? void 0 : vars.fieldLabel}`
  },
  'it-IT': {
    show: vars => `Mostra ${vars === null || vars === void 0 ? void 0 : vars.fieldLabel}`
  },
  'ja-JP': {
    show: vars => `${vars === null || vars === void 0 ? void 0 : vars.fieldLabel}を表示`
  },
  'ko-KR': {
    show: vars => `${vars === null || vars === void 0 ? void 0 : vars.fieldLabel} 표시`
  },
  'lt-LT': {
    show: vars => `Rodyti ${vars === null || vars === void 0 ? void 0 : vars.fieldLabel}`
  },
  'lv-LV': {
    show: vars => `Rādīt ${vars === null || vars === void 0 ? void 0 : vars.fieldLabel}`
  },
  'nb-NO': {
    show: vars => `Vis ${vars === null || vars === void 0 ? void 0 : vars.fieldLabel}`
  },
  'nl-NL': {
    show: vars => `Toon ${vars === null || vars === void 0 ? void 0 : vars.fieldLabel}`
  },
  'pl-PL': {
    show: vars => `Pokaż ${vars === null || vars === void 0 ? void 0 : vars.fieldLabel}`
  },
  'pt-BR': {
    show: vars => `Mostrar ${vars === null || vars === void 0 ? void 0 : vars.fieldLabel}`
  },
  'pt-PT': {
    show: vars => `Mostrar ${vars === null || vars === void 0 ? void 0 : vars.fieldLabel}`
  },
  'ro-RO': {
    show: vars => `Se afișează ${vars === null || vars === void 0 ? void 0 : vars.fieldLabel}`
  },
  'ru-RU': {
    show: vars => `Показать ${vars === null || vars === void 0 ? void 0 : vars.fieldLabel}`
  },
  'sk-SK': {
    show: vars => `Zobraziť ${vars === null || vars === void 0 ? void 0 : vars.fieldLabel}`
  },
  'sl-SI': {
    show: vars => `Prikaži ${vars === null || vars === void 0 ? void 0 : vars.fieldLabel}`
  },
  'sr-SP': {
    show: vars => `Prikaži ${vars === null || vars === void 0 ? void 0 : vars.fieldLabel}`
  },
  'sv-SE': {
    show: vars => `Visa ${vars === null || vars === void 0 ? void 0 : vars.fieldLabel}`
  },
  'tr-TR': {
    show: vars => `${vars === null || vars === void 0 ? void 0 : vars.fieldLabel} göster`
  },
  'uk-UA': {
    show: vars => `Показувати ${vars === null || vars === void 0 ? void 0 : vars.fieldLabel}`
  },
  'zh-CN': {
    show: vars => `显示${vars === null || vars === void 0 ? void 0 : vars.fieldLabel}`
  },
  'zh-TW': {
    show: vars => `顯示${vars === null || vars === void 0 ? void 0 : vars.fieldLabel}`
  }
};

/**
 * Provides the behavior and accessibility implementation for a password field.
 * @param props - Props for the password field.
 * @param state - State for the password field, as returned by `usePasswordFieldState`.
 * @param inputRef - A ref to the input element.
 */
function usePasswordField(props, state, inputRef) {
  const $ = c(22);
  const {
    autoComplete: t0,
    isDisabled
  } = props;
  const autoComplete = t0 === undefined ? "current-password" : t0;
  const type = state.secureTextEntry ? "password" : "text";
  let t1;
  if ($[0] !== props || $[1] !== state.value || $[2] !== state.setValue || $[3] !== type || $[4] !== autoComplete) {
    t1 = {
      ...props,
      value: state.value,
      onChange: state.setValue,
      type,
      autoComplete
    };
    $[0] = props;
    $[1] = state.value;
    $[2] = state.setValue;
    $[3] = type;
    $[4] = autoComplete;
    $[5] = t1;
  } else {
    t1 = $[5];
  }
  const {
    labelProps,
    inputProps,
    descriptionProps,
    errorMessageProps
  } = useTextField(t1, inputRef);
  const fieldLabel = props["aria-label"] || (typeof props.label === "string" ? props.label : "");
  let ariaLabelledby;
  if (!fieldLabel) {
    ariaLabelledby = props.label != null ? labelProps.id : props["aria-labelledby"];
  }
  const formatter = useLocalizedStringFormatter(intlMessages);
  const revealButtonId = useId();
  let t2;
  if ($[6] !== fieldLabel || $[7] !== formatter) {
    t2 = formatter.format("show", {
      fieldLabel
    }).trim();
    $[6] = fieldLabel;
    $[7] = formatter;
    $[8] = t2;
  } else {
    t2 = $[8];
  }
  const t3 = ariaLabelledby ? revealButtonId : undefined;
  const t4 = ariaLabelledby ? `${revealButtonId} ${ariaLabelledby}` : undefined;
  const t5 = !state.secureTextEntry;
  let t6;
  if ($[9] !== t2 || $[10] !== t3 || $[11] !== t4 || $[12] !== t5 || $[13] !== isDisabled || $[14] !== state.toggleSecureTextEntry) {
    t6 = {
      "aria-label": t2,
      id: t3,
      "aria-labelledby": t4,
      "aria-pressed": t5,
      isDisabled,
      onPress: state.toggleSecureTextEntry
    };
    $[9] = t2;
    $[10] = t3;
    $[11] = t4;
    $[12] = t5;
    $[13] = isDisabled;
    $[14] = state.toggleSecureTextEntry;
    $[15] = t6;
  } else {
    t6 = $[15];
  }
  const revealButtonProps = t6;
  let t7;
  if ($[16] !== labelProps || $[17] !== inputProps || $[18] !== revealButtonProps || $[19] !== errorMessageProps || $[20] !== descriptionProps) {
    t7 = {
      labelProps,
      inputProps,
      revealButtonProps,
      errorMessageProps,
      descriptionProps
    };
    $[16] = labelProps;
    $[17] = inputProps;
    $[18] = revealButtonProps;
    $[19] = errorMessageProps;
    $[20] = descriptionProps;
    $[21] = t7;
  } else {
    t7 = $[21];
  }
  return t7;
}

/**
 * Provides state management for a password field.
 */
function usePasswordFieldState(props) {
  const $ = c(9);
  let t0;
  if ($[0] !== props.value) {
    t0 = toString(props.value);
    $[0] = props.value;
    $[1] = t0;
  } else {
    t0 = $[1];
  }
  let t1;
  if ($[2] !== props.defaultValue) {
    t1 = toString(props.defaultValue) || "";
    $[2] = props.defaultValue;
    $[3] = t1;
  } else {
    t1 = $[3];
  }
  const [value, setValue] = useControlledState(t0, t1, props.onChange);
  const [secureTextEntry, setSecureTextEntry] = React.useState(true);
  let t2;
  if ($[4] === Symbol.for("react.memo_cache_sentinel")) {
    t2 = () => {
      setSecureTextEntry(isSecure => !isSecure);
    };
    $[4] = t2;
  } else {
    t2 = $[4];
  }
  const toggleSecureTextEntry = t2;
  let t3;
  if ($[5] !== value || $[6] !== setValue || $[7] !== secureTextEntry) {
    t3 = {
      value,
      setValue,
      secureTextEntry,
      setSecureTextEntry,
      toggleSecureTextEntry
    };
    $[5] = value;
    $[6] = setValue;
    $[7] = secureTextEntry;
    $[8] = t3;
  } else {
    t3 = $[8];
  }
  return t3;
}
function toString(val) {
  if (val == null) {
    return;
  }
  return val.toString();
}

const classList = new ClassList('PasswordField', ['input']);

/**
 * Password fields are text fields for entering secure text.
 */
const PasswordField = /*#__PURE__*/forwardRef(function PasswordField(props, forwardedRef) {
  const $ = c(31);
  let t0;
  if ($[0] !== props) {
    t0 = validateTextFieldProps(props);
    $[0] = props;
    $[1] = t0;
  } else {
    t0 = $[1];
  }
  props = t0;
  let t1;
  let isDisabled;
  let styleProps;
  let label;
  let description;
  let isReadOnly;
  let isRequired;
  if ($[2] !== props) {
    ({
      description,
      allowTextReveal: t1,
      isDisabled,
      isReadOnly,
      isRequired,
      label,
      ...styleProps
    } = props);
    $[2] = props;
    $[3] = t1;
    $[4] = isDisabled;
    $[5] = styleProps;
    $[6] = label;
    $[7] = description;
    $[8] = isReadOnly;
    $[9] = isRequired;
  } else {
    t1 = $[3];
    isDisabled = $[4];
    styleProps = $[5];
    label = $[6];
    description = $[7];
    isReadOnly = $[8];
    isRequired = $[9];
  }
  const allowTextReveal = t1 === undefined ? true : t1;
  const inputRef = useObjectRef(forwardedRef);
  const state = usePasswordFieldState(props);
  const {
    labelProps,
    inputProps,
    revealButtonProps,
    descriptionProps,
    errorMessageProps
  } = usePasswordField(props, state, inputRef);
  let t2;
  if ($[10] === Symbol.for("react.memo_cache_sentinel")) {
    t2 = classList.element("input");
    $[10] = t2;
  } else {
    t2 = $[10];
  }
  let t3;
  if ($[11] !== inputProps) {
    t3 = {
      ...inputProps,
      className: t2
    };
    $[11] = inputProps;
    $[12] = t3;
  } else {
    t3 = $[12];
  }
  let t4;
  if ($[13] !== allowTextReveal || $[14] !== isDisabled || $[15] !== state || $[16] !== revealButtonProps) {
    t4 = allowTextReveal && /*#__PURE__*/jsx(RevealButton, {
      isDisabled: isDisabled,
      secureTextEntry: state.secureTextEntry,
      ...revealButtonProps
    });
    $[13] = allowTextReveal;
    $[14] = isDisabled;
    $[15] = state;
    $[16] = revealButtonProps;
    $[17] = t4;
  } else {
    t4 = $[17];
  }
  let t5;
  if ($[18] !== styleProps || $[19] !== label || $[20] !== description || $[21] !== descriptionProps || $[22] !== errorMessageProps || $[23] !== labelProps || $[24] !== inputRef || $[25] !== t3 || $[26] !== isDisabled || $[27] !== isReadOnly || $[28] !== isRequired || $[29] !== t4) {
    t5 = /*#__PURE__*/jsx(TextFieldPrimitive, {
      ...styleProps,
      label: label,
      description: description,
      descriptionProps: descriptionProps,
      errorMessageProps: errorMessageProps,
      labelProps: labelProps,
      ref: inputRef,
      inputProps: t3,
      isDisabled: isDisabled,
      isReadOnly: isReadOnly,
      isRequired: isRequired,
      endElement: t4
    });
    $[18] = styleProps;
    $[19] = label;
    $[20] = description;
    $[21] = descriptionProps;
    $[22] = errorMessageProps;
    $[23] = labelProps;
    $[24] = inputRef;
    $[25] = t3;
    $[26] = isDisabled;
    $[27] = isReadOnly;
    $[28] = isRequired;
    $[29] = t4;
    $[30] = t5;
  } else {
    t5 = $[30];
  }
  return t5;
});

/**
 * @private the reveal button is used to show and hide input text.
 */
function RevealButton(props) {
  let {
    secureTextEntry,
    ...otherProps
  } = props;
  return /*#__PURE__*/jsx(ActionButton, {
    ...otherProps,
    UNSAFE_className: css({
      borderStartStartRadius: 0,
      borderEndStartRadius: 0,
      [`${classList.selector('input')}[aria-invalid] ~ &`]: {
        borderColor: tokenSchema.color.alias.borderInvalid
      },
      [`${classList.selector('input')}[readonly] ~ &`]: {
        borderColor: tokenSchema.color.alias.borderIdle
      },
      [`${classList.selector('input')}:focus ~ &`]: {
        borderColor: tokenSchema.color.alias.borderFocused
      }
    }),
    children: /*#__PURE__*/jsx(Icon, {
      src: secureTextEntry ? eyeIcon : eyeOffIcon
    })
  });
}

export { PasswordField };
