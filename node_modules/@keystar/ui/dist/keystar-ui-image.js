'use client';
import { c } from './react-compiler-runtime-19061925.js';
import { filterDOMProps } from '@react-aria/utils';
import { warning } from 'emery';
import { AspectRatio } from '@keystar/ui/layout';
import { useSlotProps } from '@keystar/ui/slots';
import { useStyleProps, classNames, css } from '@keystar/ui/style';
import { jsx, jsxs } from 'react/jsx-runtime';
import 'react';

const supportedProps = new Set(['loading', 'onError', 'onLoad', 'src']);
/**
 * A wrapper around the native image tag with support for common behaviour.
 */
function Image(props) {
  const $ = c(21);
  props = useSlotProps(props, "image");
  let t0;
  let otherProps;
  let alt;
  let aspectRatio;
  let children;
  if ($[0] !== props) {
    ({
      alt,
      aspectRatio,
      children,
      fit: t0,
      ...otherProps
    } = props);
    $[0] = props;
    $[1] = t0;
    $[2] = otherProps;
    $[3] = alt;
    $[4] = aspectRatio;
    $[5] = children;
  } else {
    t0 = $[1];
    otherProps = $[2];
    alt = $[3];
    aspectRatio = $[4];
    children = $[5];
  }
  const fit = t0 === undefined ? "cover" : t0;
  const styleProps = useStyleProps(otherProps);
  warning(alt != null, "The `alt` prop was not provided to an image. Add `alt` text for screen readers, or set `alt=\"\"` prop to indicate that the image is decorative or redundant with displayed text and should not be announced by screen readers.");
  let t1;
  if ($[6] !== otherProps) {
    t1 = filterDOMProps(otherProps, {
      propNames: supportedProps
    });
    $[6] = otherProps;
    $[7] = t1;
  } else {
    t1 = $[7];
  }
  const t2 = alt === "" ? "presentation" : undefined;
  let t3;
  if ($[8] !== fit) {
    t3 = classNames(css({
      objectFit: fit
    }));
    $[8] = fit;
    $[9] = t3;
  } else {
    t3 = $[9];
  }
  let t4;
  if ($[10] !== t1 || $[11] !== alt || $[12] !== t2 || $[13] !== t3) {
    t4 = /*#__PURE__*/jsx("img", {
      ...t1,
      alt: alt,
      role: t2,
      className: t3
    });
    $[10] = t1;
    $[11] = alt;
    $[12] = t2;
    $[13] = t3;
    $[14] = t4;
  } else {
    t4 = $[14];
  }
  let t5;
  if ($[15] !== aspectRatio || $[16] !== styleProps.className || $[17] !== styleProps.style || $[18] !== t4 || $[19] !== children) {
    t5 = /*#__PURE__*/jsxs(AspectRatio, {
      value: aspectRatio,
      UNSAFE_className: styleProps.className,
      UNSAFE_style: styleProps.style,
      children: [t4, children]
    });
    $[15] = aspectRatio;
    $[16] = styleProps.className;
    $[17] = styleProps.style;
    $[18] = t4;
    $[19] = children;
    $[20] = t5;
  } else {
    t5 = $[20];
  }
  return t5;
}

export { Image };
