'use client';
import { c } from './react-compiler-runtime-19061925.js';
import { cache } from '@keystar/ui/style';
import { KeystarProvider } from '@keystar/ui/core';
import { useServerInsertedHTML, useRouter } from 'next/navigation';
import { useRef } from 'react';
import { ColorSchemeProvider, useRootColorScheme } from './useRootColorScheme-ca6a3821.js';
import { jsx } from 'react/jsx-runtime';

cache.compat = true;
function NextRootProvider(props) {
  const $ = c(2);
  let t0;
  if ($[0] !== props) {
    t0 = /*#__PURE__*/jsx(ColorSchemeProvider, {
      children: /*#__PURE__*/jsx(InnerProvider, {
        ...props
      })
    });
    $[0] = props;
    $[1] = t0;
  } else {
    t0 = $[1];
  }
  return t0;
}
const insertedKeys = Object.keys(cache.inserted);
const prevInsert = cache.insert;
cache.insert = (...args) => {
  const serialized = args[1];
  if (cache.inserted[serialized.name] === undefined) {
    insertedKeys.push(serialized.name);
  }
  return prevInsert(...args);
};
function InnerProvider(props) {
  const $ = c(7);
  const lastIndexRef = useRef(0);
  const {
    colorScheme
  } = useRootColorScheme();
  let t0;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    t0 = () => {
      const names = insertedKeys.slice(lastIndexRef.current);
      lastIndexRef.current = insertedKeys.length;
      if (names.length === 0) {
        return null;
      }
      let styles = "";
      for (const name of names) {
        styles = styles + cache.inserted[name];
      }
      return /*#__PURE__*/jsx("style", {
        "data-emotion": `${cache.key} ${names.join(" ")}`,
        dangerouslySetInnerHTML: {
          __html: styles
        }
      }, Math.random().toString(36));
    };
    $[0] = t0;
  } else {
    t0 = $[0];
  }
  useServerInsertedHTML(t0);
  const {
    push: navigate
  } = useRouter();
  let t1;
  let t2;
  if ($[1] !== navigate) {
    t2 = {
      navigate
    };
    $[1] = navigate;
    $[2] = t2;
  } else {
    t2 = $[2];
  }
  t1 = t2;
  const router = t1;
  let t3;
  if ($[3] !== props || $[4] !== colorScheme || $[5] !== router) {
    t3 = /*#__PURE__*/jsx(KeystarProvider, {
      ...props,
      UNSAFE_className: props.fontClassName,
      colorScheme: colorScheme,
      elementType: "html",
      router: router
    });
    $[3] = props;
    $[4] = colorScheme;
    $[5] = router;
    $[6] = t3;
  } else {
    t3 = $[6];
  }
  return t3;
}

export { NextRootProvider };
