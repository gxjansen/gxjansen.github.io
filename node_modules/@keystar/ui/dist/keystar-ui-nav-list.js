'use client';
import { c } from './react-compiler-runtime-19061925.js';
import { useObjectRef, filterDOMProps, useLayoutEffect, useId } from '@react-aria/utils';
import { forwardRef, useEffect, useState } from 'react';
import { Flex, Box } from '@keystar/ui/layout';
import { SlotProvider } from '@keystar/ui/slots';
import { tokenSchema, useStyleProps, css, classNames, FocusRing, transition } from '@keystar/ui/style';
import { jsx, jsxs } from 'react/jsx-runtime';
import { useLink } from '@react-aria/link';
import { Text } from '@keystar/ui/typography';
import { isReactText } from '@keystar/ui/utils';

const listBlockGutter = tokenSchema.size.space.large;
const itemIndicatorGutter = tokenSchema.size.space.regular;
const itemIndicatorWidth = tokenSchema.size.space.small;
const itemContentGutter = tokenSchema.size.space.medium;
const textInsetStart = `calc(${itemIndicatorWidth} + ${itemIndicatorGutter} + ${itemContentGutter})`;

/** Navigation lists let users navigate the application. */
const NavList = /*#__PURE__*/forwardRef(function NavList(props, forwardedRef) {
  const $ = c(19);
  let otherProps;
  let children;
  if ($[0] !== props) {
    ({
      children,
      ...otherProps
    } = props);
    $[0] = props;
    $[1] = otherProps;
    $[2] = children;
  } else {
    otherProps = $[1];
    children = $[2];
  }
  const domRef = useObjectRef(forwardedRef);
  const styleProps = useStyleProps(otherProps);
  const dividerStyles = useDividerStyles();
  const currentItem = useCurrentItem(domRef);
  let t0;
  let t1;
  if ($[3] !== currentItem) {
    t0 = () => {
      if (currentItem) {
        currentItem.scrollIntoView({
          block: "center"
        });
      }
    };
    t1 = [currentItem];
    $[3] = currentItem;
    $[4] = t0;
    $[5] = t1;
  } else {
    t0 = $[4];
    t1 = $[5];
  }
  useEffect(t0, t1);
  let t2;
  let t3;
  if ($[6] !== dividerStyles) {
    t3 = {
      divider: {
        "aria-hidden": true,
        elementType: "li",
        size: "medium",
        UNSAFE_className: dividerStyles
      }
    };
    $[6] = dividerStyles;
    $[7] = t3;
  } else {
    t3 = $[7];
  }
  t2 = t3;
  const slots = t2;
  let t4;
  if ($[8] !== otherProps) {
    t4 = filterDOMProps(otherProps, {
      labelable: true
    });
    $[8] = otherProps;
    $[9] = t4;
  } else {
    t4 = $[9];
  }
  let t5;
  if ($[10] !== slots || $[11] !== children) {
    t5 = /*#__PURE__*/jsx(Flex, {
      direction: "column",
      elementType: "ul",
      flex: "1 0 0",
      children: /*#__PURE__*/jsx(SlotProvider, {
        slots: slots,
        children: children
      })
    });
    $[10] = slots;
    $[11] = children;
    $[12] = t5;
  } else {
    t5 = $[12];
  }
  let t6;
  if ($[13] !== domRef || $[14] !== styleProps.className || $[15] !== styleProps.style || $[16] !== t4 || $[17] !== t5) {
    t6 = /*#__PURE__*/jsx(Flex, {
      elementType: "nav",
      ref: domRef,
      direction: "column",
      UNSAFE_className: styleProps.className,
      UNSAFE_style: styleProps.style,
      ...t4,
      children: t5
    });
    $[13] = domRef;
    $[14] = styleProps.className;
    $[15] = styleProps.style;
    $[16] = t4;
    $[17] = t5;
    $[18] = t6;
  } else {
    t6 = $[18];
  }
  return t6;
});

// Styles
// -----------------------------------------------------------------------------

function useDividerStyles() {
  return css({
    marginBlock: listBlockGutter,
    marginInlineStart: textInsetStart,
    width: `calc(40% - ${textInsetStart} - ${itemContentGutter})`,
    // FIXME: magic numbers
    minWidth: 80,
    maxWidth: 240
  });
}

// Utils
// -----------------------------------------------------------------------------

function useCurrentItem(ref) {
  const $ = c(4);
  const [currentItem, setCurrentItem] = useState(null);
  let t0;
  if ($[0] !== ref.current) {
    t0 = () => {
      const el = ref.current && ref.current.querySelector("[aria-current]");
      if (el) {
        setCurrentItem(el);
      }
    };
    $[0] = ref.current;
    $[1] = t0;
  } else {
    t0 = $[1];
  }
  let t1;
  if ($[2] !== ref) {
    t1 = [ref];
    $[2] = ref;
    $[3] = t1;
  } else {
    t1 = $[3];
  }
  useLayoutEffect(t0, t1);
  return currentItem;
}

// TODO:
// - generic `Item` slot component
// - collection/virtualized?

/** An item within a `NavList`. */
const NavItem = /*#__PURE__*/forwardRef(function NavItem(props, forwardedRef) {
  const $ = c(31);
  let otherProps;
  let children;
  let ariaCurrent;
  let href;
  if ($[0] !== props) {
    ({
      "aria-current": ariaCurrent,
      children,
      href,
      ...otherProps
    } = props);
    $[0] = props;
    $[1] = otherProps;
    $[2] = children;
    $[3] = ariaCurrent;
    $[4] = href;
  } else {
    otherProps = $[1];
    children = $[2];
    ariaCurrent = $[3];
    href = $[4];
  }
  const styles = useStyles();
  const domRef = useObjectRef(forwardedRef);
  const {
    linkProps
  } = useLink(props, domRef);
  let t0;
  let t1;
  if ($[5] !== styles.text) {
    t1 = {
      color: "inherit",
      UNSAFE_className: styles.text
    };
    $[5] = styles.text;
    $[6] = t1;
  } else {
    t1 = $[6];
  }
  const t2 = t1;
  let t3;
  if ($[7] !== t2) {
    t3 = {
      text: t2
    };
    $[7] = t2;
    $[8] = t3;
  } else {
    t3 = $[8];
  }
  t0 = t3;
  const slots = t0;
  let t4;
  if ($[9] !== styles.anchor) {
    t4 = classNames(styles.anchor);
    $[9] = styles.anchor;
    $[10] = t4;
  } else {
    t4 = $[10];
  }
  let t5;
  if ($[11] !== otherProps) {
    t5 = filterDOMProps(otherProps);
    $[11] = otherProps;
    $[12] = t5;
  } else {
    t5 = $[12];
  }
  let t6;
  if ($[13] !== styles.content) {
    t6 = classNames(styles.content);
    $[13] = styles.content;
    $[14] = t6;
  } else {
    t6 = $[14];
  }
  let t7;
  if ($[15] !== children) {
    t7 = isReactText(children) ? /*#__PURE__*/jsx(Text, {
      children: children
    }) : children;
    $[15] = children;
    $[16] = t7;
  } else {
    t7 = $[16];
  }
  let t8;
  if ($[17] !== slots || $[18] !== t7) {
    t8 = /*#__PURE__*/jsx(SlotProvider, {
      slots: slots,
      children: t7
    });
    $[17] = slots;
    $[18] = t7;
    $[19] = t8;
  } else {
    t8 = $[19];
  }
  let t9;
  if ($[20] !== t6 || $[21] !== t8) {
    t9 = /*#__PURE__*/jsx("div", {
      className: t6,
      children: t8
    });
    $[20] = t6;
    $[21] = t8;
    $[22] = t9;
  } else {
    t9 = $[22];
  }
  let t10;
  if ($[23] !== domRef || $[24] !== ariaCurrent || $[25] !== href || $[26] !== t4 || $[27] !== linkProps || $[28] !== t5 || $[29] !== t9) {
    t10 = /*#__PURE__*/jsx("li", {
      children: /*#__PURE__*/jsx(FocusRing, {
        children: /*#__PURE__*/jsx("a", {
          ref: domRef,
          "aria-current": ariaCurrent,
          href: href,
          className: t4,
          ...linkProps,
          ...t5,
          children: t9
        })
      })
    });
    $[23] = domRef;
    $[24] = ariaCurrent;
    $[25] = href;
    $[26] = t4;
    $[27] = linkProps;
    $[28] = t5;
    $[29] = t9;
    $[30] = t10;
  } else {
    t10 = $[30];
  }
  return t10;
});

// Styles
// ------------------------------

function useStyles() {
  const ringColor = tokenSchema.color.alias.focusRing;
  const ringWidth = tokenSchema.size.alias.focusRing;
  const anchor = css({
    color: tokenSchema.color.foreground.neutral,
    display: 'flex',
    gap: itemIndicatorGutter,
    paddingBlock: tokenSchema.size.space.xsmall,
    outline: 0,
    // selected indicator
    '&::before': {
      borderRadius: itemIndicatorWidth,
      content: '""',
      insetInlineStart: tokenSchema.size.space.xsmall,
      marginBlock: tokenSchema.size.space.xsmall,
      position: 'relative',
      width: itemIndicatorWidth
    },
    // interaction
    '&:hover': {
      color: tokenSchema.color.foreground.neutralEmphasis
    },
    // selection
    '&[aria-current]:not([aria-current=false])': {
      color: tokenSchema.color.foreground.neutralEmphasis,
      '&::before': {
        backgroundColor: tokenSchema.color.background.accentEmphasis
      }
    }
  });
  const content = css({
    alignItems: 'center',
    borderRadius: tokenSchema.size.radius.regular,
    display: 'flex',
    flex: 1,
    flexShrink: 0,
    gap: tokenSchema.size.space.regular,
    minHeight: tokenSchema.size.element.regular,
    minWidth: 0,
    paddingInline: tokenSchema.size.space.medium,
    paddingBlock: tokenSchema.size.space.small,
    position: 'relative',
    // focus ring
    [`&::after`]: {
      borderRadius: tokenSchema.size.radius.regular,
      content: '""',
      insetBlock: 1,
      insetInline: -1,
      margin: 1,
      position: 'absolute',
      transition: transition(['box-shadow', 'margin'], {
        easing: 'easeOut'
      })
    },
    [`.${anchor}[data-focus=visible] &::after`]: {
      boxShadow: `0 0 0 ${ringWidth} ${ringColor}`,
      margin: 0
    },
    [`.${anchor}[aria-current]:not([aria-current=false]) &`]: {
      backgroundColor: tokenSchema.color.alias.backgroundHovered
    },
    [`.${anchor}:hover &`]: {
      backgroundColor: tokenSchema.color.alias.backgroundHovered
    },
    [`.${anchor}:active &`]: {
      backgroundColor: tokenSchema.color.alias.backgroundPressed
    }
  });
  const text = css({
    fontWeight: tokenSchema.typography.fontWeight.regular,
    [`.${anchor}[aria-current]:not([aria-current=false]) &`]: {
      fontWeight: tokenSchema.typography.fontWeight.medium
    }
  });
  return {
    anchor,
    content,
    text
  };
}

// TODO:
// - generic `Group` or `Section` slot component
// - collapsible?

/** Render a group of navigation links. */
function NavGroup(props) {
  const $ = c(21);
  let id;
  let otherProps;
  let title;
  let children;
  if ($[0] !== props) {
    ({
      children,
      id,
      title,
      ...otherProps
    } = props);
    $[0] = props;
    $[1] = id;
    $[2] = otherProps;
    $[3] = title;
    $[4] = children;
  } else {
    id = $[1];
    otherProps = $[2];
    title = $[3];
    children = $[4];
  }
  const headingId = useId(id);
  const groupStyles = useGroupStyles();
  const headingStyles = useHeadingStyles();
  let t0;
  if ($[5] !== groupStyles) {
    t0 = classNames(groupStyles);
    $[5] = groupStyles;
    $[6] = t0;
  } else {
    t0 = $[6];
  }
  let t1;
  if ($[7] !== otherProps) {
    t1 = filterDOMProps(otherProps);
    $[7] = otherProps;
    $[8] = t1;
  } else {
    t1 = $[8];
  }
  let t2;
  if ($[9] !== headingId || $[10] !== headingStyles || $[11] !== title) {
    t2 = /*#__PURE__*/jsx(Text, {
      elementType: "h3",
      id: headingId,
      UNSAFE_className: headingStyles,
      children: title
    });
    $[9] = headingId;
    $[10] = headingStyles;
    $[11] = title;
    $[12] = t2;
  } else {
    t2 = $[12];
  }
  let t3;
  if ($[13] !== headingId || $[14] !== children) {
    t3 = /*#__PURE__*/jsx(Box, {
      elementType: "ul",
      flexShrink: 0,
      "aria-labelledby": headingId,
      children: children
    });
    $[13] = headingId;
    $[14] = children;
    $[15] = t3;
  } else {
    t3 = $[15];
  }
  let t4;
  if ($[16] !== t0 || $[17] !== t1 || $[18] !== t2 || $[19] !== t3) {
    t4 = /*#__PURE__*/jsxs("li", {
      className: t0,
      ...t1,
      children: [t2, t3]
    });
    $[16] = t0;
    $[17] = t1;
    $[18] = t2;
    $[19] = t3;
    $[20] = t4;
  } else {
    t4 = $[20];
  }
  return t4;
}

// Styles
// ------------------------------

function useGroupStyles() {
  return css({
    '&:not(:first-child)': {
      marginBlockStart: listBlockGutter
    },
    '&:not(:last-child)': {
      marginBlockEnd: listBlockGutter
    }
  });
}
function useHeadingStyles() {
  return css({
    color: tokenSchema.color.foreground.neutralSecondary,
    fontSize: tokenSchema.typography.text.small.size,
    fontWeight: tokenSchema.typography.fontWeight.medium,
    paddingBlock: tokenSchema.size.space.regular,
    paddingInlineEnd: itemContentGutter,
    paddingInlineStart: textInsetStart,
    textTransform: 'uppercase'
  });
}

export { NavGroup, NavItem, NavList };
