'use client';
import { c } from './react-compiler-runtime-19061925.js';
import { isSameMonth, isSameDay, getDayOfWeek, isToday, endOfMonth, getWeeksInMonth, createCalendar } from '@internationalized/date';
import { useCalendarCell, useCalendarGrid, useCalendar, useRangeCalendar } from '@react-aria/calendar';
import { useLocale, useDateFormatter } from '@react-aria/i18n';
import { mergeProps, useObjectRef } from '@react-aria/utils';
import { useCalendarState, useRangeCalendarState } from '@react-stately/calendar';
import { useRef, createElement, forwardRef, useImperativeHandle } from 'react';
import { useProviderProps } from '@keystar/ui/core';
import { VisuallyHidden } from '@react-aria/visually-hidden';
import { ActionButton } from '@keystar/ui/button';
import { Icon } from '@keystar/ui/icon';
import { chevronLeftIcon } from '@keystar/ui/icon/icons/chevronLeftIcon';
import { chevronRightIcon } from '@keystar/ui/icon/icons/chevronRightIcon';
import { tokenSchema, toDataAttributes, css, useStyleProps, classNames } from '@keystar/ui/style';
import { Text, Heading } from '@keystar/ui/typography';
import { useFocusRing } from '@react-aria/focus';
import { useHover } from '@react-aria/interactions';
import { jsx, jsxs } from 'react/jsx-runtime';

function CalendarCell(t0) {
  const $ = c(70);
  let props;
  let currentMonth;
  let state;
  if ($[0] !== t0) {
    ({
      currentMonth,
      state,
      ...props
    } = t0);
    $[0] = t0;
    $[1] = props;
    $[2] = currentMonth;
    $[3] = state;
  } else {
    props = $[1];
    currentMonth = $[2];
    state = $[3];
  }
  const ref = useRef(null);
  const t1 = !isSameMonth(props.date, currentMonth);
  let t2;
  if ($[4] !== props || $[5] !== t1) {
    t2 = {
      ...props,
      isDisabled: t1
    };
    $[4] = props;
    $[5] = t1;
    $[6] = t2;
  } else {
    t2 = $[6];
  }
  const {
    buttonProps,
    cellProps,
    formattedDate,
    isDisabled,
    isFocused,
    isInvalid,
    isPressed,
    isSelected
  } = useCalendarCell(t2, state, ref);
  let t3;
  if ($[7] !== state || $[8] !== props.date || $[9] !== isDisabled) {
    t3 = state.isCellUnavailable(props.date) && !isDisabled;
    $[7] = state;
    $[8] = props.date;
    $[9] = isDisabled;
    $[10] = t3;
  } else {
    t3 = $[10];
  }
  const isUnavailable = t3;
  let t4;
  if ($[11] !== isDisabled || $[12] !== isInvalid || $[13] !== props || $[14] !== state) {
    t4 = !isDisabled && !isInvalid && state.isCellUnavailable(props.date.add({
      days: 1
    }));
    $[11] = isDisabled;
    $[12] = isInvalid;
    $[13] = props;
    $[14] = state;
    $[15] = t4;
  } else {
    t4 = $[15];
  }
  const isLastSelectedBeforeDisabled = t4;
  let t5;
  if ($[16] !== isDisabled || $[17] !== isInvalid || $[18] !== props || $[19] !== state) {
    t5 = !isDisabled && !isInvalid && state.isCellUnavailable(props.date.subtract({
      days: 1
    }));
    $[16] = isDisabled;
    $[17] = isInvalid;
    $[18] = props;
    $[19] = state;
    $[20] = t5;
  } else {
    t5 = $[20];
  }
  const isFirstSelectedAfterDisabled = t5;
  const highlightedRange = "highlightedRange" in state && state.highlightedRange;
  let t6;
  if ($[21] !== isSelected || $[22] !== highlightedRange || $[23] !== props) {
    t6 = isSelected && highlightedRange && isSameDay(props.date, highlightedRange.start);
    $[21] = isSelected;
    $[22] = highlightedRange;
    $[23] = props;
    $[24] = t6;
  } else {
    t6 = $[24];
  }
  const isSelectionStart = t6;
  let t7;
  if ($[25] !== isSelected || $[26] !== highlightedRange || $[27] !== props) {
    t7 = isSelected && highlightedRange && isSameDay(props.date, highlightedRange.end);
    $[25] = isSelected;
    $[26] = highlightedRange;
    $[27] = props;
    $[28] = t7;
  } else {
    t7 = $[28];
  }
  const isSelectionEnd = t7;
  const {
    locale
  } = useLocale();
  const dayOfWeek = getDayOfWeek(props.date, locale);
  const isRangeStart = isSelected && (isFirstSelectedAfterDisabled || dayOfWeek === 0 || props.date.day === 1);
  let t8;
  if ($[29] !== isSelected || $[30] !== isLastSelectedBeforeDisabled || $[31] !== dayOfWeek || $[32] !== currentMonth || $[33] !== props) {
    t8 = isSelected && (isLastSelectedBeforeDisabled || dayOfWeek === 6 || props.date.day === currentMonth.calendar.getDaysInMonth(currentMonth));
    $[29] = isSelected;
    $[30] = isLastSelectedBeforeDisabled;
    $[31] = dayOfWeek;
    $[32] = currentMonth;
    $[33] = props;
    $[34] = t8;
  } else {
    t8 = $[34];
  }
  const isRangeEnd = t8;
  const {
    focusProps,
    isFocusVisible
  } = useFocusRing();
  const t9 = isDisabled || isUnavailable || state.isReadOnly;
  let t10;
  if ($[35] !== t9) {
    t10 = {
      isDisabled: t9
    };
    $[35] = t9;
    $[36] = t10;
  } else {
    t10 = $[36];
  }
  const {
    hoverProps,
    isHovered
  } = useHover(t10);
  const t11 = isDisabled && !isInvalid;
  const t12 = isFocused && isFocusVisible;
  const t13 = !isSameMonth(props.date, currentMonth);
  const t14 = isPressed && !state.isReadOnly;
  const t15 = isSelected && "highlightedRange" in state;
  let t16;
  if ($[37] !== props.date || $[38] !== state.timeZone) {
    t16 = isToday(props.date, state.timeZone);
    $[37] = props.date;
    $[38] = state.timeZone;
    $[39] = t16;
  } else {
    t16 = $[39];
  }
  const t17 = isUnavailable || isInvalid && isDisabled;
  let t18;
  if ($[40] !== t11 || $[41] !== t12 || $[42] !== isHovered || $[43] !== isInvalid || $[44] !== t13 || $[45] !== t14 || $[46] !== isRangeEnd || $[47] !== t15 || $[48] !== isRangeStart || $[49] !== isSelected || $[50] !== isSelectionEnd || $[51] !== isSelectionStart || $[52] !== t16 || $[53] !== t17) {
    t18 = {
      isDisabled: t11,
      isFocused: t12,
      isHovered,
      isInvalid,
      isOutsideMonth: t13,
      isPressed: t14,
      isRangeEnd,
      isRangeSelection: t15,
      isRangeStart,
      isSelected,
      isSelectionEnd,
      isSelectionStart,
      isToday: t16,
      isUnavailable: t17
    };
    $[40] = t11;
    $[41] = t12;
    $[42] = isHovered;
    $[43] = isInvalid;
    $[44] = t13;
    $[45] = t14;
    $[46] = isRangeEnd;
    $[47] = t15;
    $[48] = isRangeStart;
    $[49] = isSelected;
    $[50] = isSelectionEnd;
    $[51] = isSelectionStart;
    $[52] = t16;
    $[53] = t17;
    $[54] = t18;
  } else {
    t18 = $[54];
  }
  const dayState = t18;
  const cellStyleProps = useCellStyles(dayState);
  const dayStyleProps = useDayStyles(dayState);
  let t19;
  if ($[55] !== buttonProps || $[56] !== hoverProps || $[57] !== focusProps) {
    t19 = mergeProps(buttonProps, hoverProps, focusProps);
    $[55] = buttonProps;
    $[56] = hoverProps;
    $[57] = focusProps;
    $[58] = t19;
  } else {
    t19 = $[58];
  }
  let t20;
  if ($[59] !== formattedDate) {
    t20 = /*#__PURE__*/jsx(Text, {
      align: "center",
      color: "inherit",
      trim: false,
      weight: "inherit",
      children: formattedDate
    });
    $[59] = formattedDate;
    $[60] = t20;
  } else {
    t20 = $[60];
  }
  let t21;
  if ($[61] !== ref || $[62] !== t19 || $[63] !== dayStyleProps || $[64] !== t20) {
    t21 = /*#__PURE__*/jsx("span", {
      ref: ref,
      ...t19,
      ...dayStyleProps,
      children: t20
    });
    $[61] = ref;
    $[62] = t19;
    $[63] = dayStyleProps;
    $[64] = t20;
    $[65] = t21;
  } else {
    t21 = $[65];
  }
  let t22;
  if ($[66] !== cellStyleProps || $[67] !== cellProps || $[68] !== t21) {
    t22 = /*#__PURE__*/jsx("td", {
      ...cellStyleProps,
      ...cellProps,
      children: t21
    });
    $[66] = cellStyleProps;
    $[67] = cellProps;
    $[68] = t21;
    $[69] = t22;
  } else {
    t22 = $[69];
  }
  return t22;
}
function useCellStyles(props = {}) {
  let cellSize = `var(--calendar-cell-width, ${tokenSchema.size.element.regular})`;
  let cellPadding = `var(--calendar-cell-padding, ${tokenSchema.size.space.xsmall})`;
  return {
    ...toDataAttributes(props, {
      omitFalsyValues: true,
      trimBooleanKeys: true
    }),
    className: css({
      height: cellSize,
      padding: cellPadding,
      position: 'relative',
      textAlign: 'center',
      width: cellSize,
      '&[data-range-selection]:not([data-outside-month])': {
        backgroundColor: tokenSchema.color.alias.backgroundSelected,
        '&[data-invalid]': {
          backgroundColor: tokenSchema.color.background.critical,
          color: tokenSchema.color.foreground.critical
        }
      },
      '&[data-selection-start], &[data-range-start]': {
        borderStartStartRadius: tokenSchema.size.radius.full,
        borderEndStartRadius: tokenSchema.size.radius.full
      },
      '&[data-selection-end], &[data-range-end]': {
        borderStartEndRadius: tokenSchema.size.radius.full,
        borderEndEndRadius: tokenSchema.size.radius.full
      }
    })
  };
}
function useDayStyles(props) {
  let className = css({
    alignItems: 'center',
    borderRadius: tokenSchema.size.radius.full,
    color: tokenSchema.color.foreground.neutral,
    cursor: 'default',
    display: 'flex',
    inset: tokenSchema.size.space.xsmall,
    justifyContent: 'center',
    outline: 0,
    position: 'absolute',
    // Date specific
    // -------------------------------------------------------------------------

    // hide dates from other months
    '&[data-outside-month]': {
      visibility: 'hidden'
    },
    // today — indicated by a small underline beneath the date
    '&[data-today]': {
      color: tokenSchema.color.foreground.accent,
      fontWeight: tokenSchema.typography.fontWeight.semibold,
      '&:not([data-unavailable])::before': {
        backgroundColor: 'currentColor',
        borderRadius: tokenSchema.size.radius.full,
        content: '""',
        height: tokenSchema.size.border.medium,
        marginInline: 'auto',
        position: 'absolute',
        top: `calc(50% + 1ch)`,
        width: '2ch'
      }
    },
    // unavailable — indicated by an angled strike-through over the date
    '&[data-unavailable]:not([data-selected])': {
      '::before': {
        backgroundColor: 'currentColor',
        borderRadius: tokenSchema.size.radius.full,
        content: '""',
        height: tokenSchema.size.border.medium,
        marginInline: 'auto',
        position: 'absolute',
        top: '50%',
        insetInline: tokenSchema.size.space.small,
        transform: 'rotate(-16deg)'
      }
    },
    // Interaction states
    // -------------------------------------------------------------------------

    '&[data-hovered]': {
      backgroundColor: tokenSchema.color.alias.backgroundHovered,
      color: tokenSchema.color.alias.foregroundHovered
    },
    '&[data-pressed]': {
      backgroundColor: tokenSchema.color.alias.backgroundPressed
    },
    '&[data-focused]': {
      outline: `${tokenSchema.size.alias.focusRing} solid ${tokenSchema.color.alias.focusRing}`,
      outlineOffset: tokenSchema.size.alias.focusRingGap
    },
    // Selection states
    // -------------------------------------------------------------------------

    '&[data-disabled]': {
      color: tokenSchema.color.alias.foregroundDisabled
    },
    '&[data-selected]:not([data-range-selection], [data-disabled]), &[data-selection-start], &[data-selection-end]': {
      backgroundColor: tokenSchema.color.background.accentEmphasis,
      color: tokenSchema.color.foreground.onEmphasis,
      '&[data-invalid]': {
        backgroundColor: tokenSchema.color.background.criticalEmphasis
      }
    },
    '&[data-range-selection]:not([data-selection-start], [data-selection-end])': {
      color: tokenSchema.color.foreground.accent,
      '&[data-hovered]': {
        backgroundColor: tokenSchema.color.alias.backgroundSelectedHovered
      },
      '&[data-invalid]': {
        color: tokenSchema.color.foreground.critical
      }
    }
  });
  return {
    ...toDataAttributes(props, {
      omitFalsyValues: true,
      trimBooleanKeys: true
    }),
    className
  };
}

function CalendarMonth(props) {
  const $ = c(22);
  const {
    state,
    startDate
  } = props;
  let t0;
  if ($[0] !== startDate) {
    t0 = endOfMonth(startDate);
    $[0] = startDate;
    $[1] = t0;
  } else {
    t0 = $[1];
  }
  let t1;
  if ($[2] !== props || $[3] !== t0) {
    t1 = {
      ...props,
      endDate: t0
    };
    $[2] = props;
    $[3] = t0;
    $[4] = t1;
  } else {
    t1 = $[4];
  }
  const {
    gridProps,
    headerProps,
    weekDays
  } = useCalendarGrid(t1, state);
  const {
    locale
  } = useLocale();
  const weeksInMonth = getWeeksInMonth(startDate, locale);
  const cellStyleProps = useCellStyles();
  let t2;
  if ($[5] === Symbol.for("react.memo_cache_sentinel")) {
    t2 = css({
      borderCollapse: "collapse",
      borderSpacing: 0,
      tableLayout: "fixed",
      userSelect: "none",
      width: "var(--calendar-width)"
    });
    $[5] = t2;
  } else {
    t2 = $[5];
  }
  let t3;
  if ($[6] !== cellStyleProps || $[7] !== weekDays) {
    let t4;
    if ($[9] !== cellStyleProps) {
      t4 = (day, index) => /*#__PURE__*/jsx("th", {
        ...cellStyleProps,
        children: /*#__PURE__*/jsx(Text, {
          align: "center",
          color: "neutralTertiary",
          size: "small",
          children: day
        })
      }, index);
      $[9] = cellStyleProps;
      $[10] = t4;
    } else {
      t4 = $[10];
    }
    t3 = weekDays.map(t4);
    $[6] = cellStyleProps;
    $[7] = weekDays;
    $[8] = t3;
  } else {
    t3 = $[8];
  }
  let t4;
  if ($[11] !== t3) {
    t4 = /*#__PURE__*/jsx("tr", {
      children: t3
    });
    $[11] = t3;
    $[12] = t4;
  } else {
    t4 = $[12];
  }
  let t5;
  if ($[13] !== headerProps || $[14] !== t4) {
    t5 = /*#__PURE__*/jsx("thead", {
      ...headerProps,
      children: t4
    });
    $[13] = headerProps;
    $[14] = t4;
    $[15] = t5;
  } else {
    t5 = $[15];
  }
  const t6 = [...new Array(weeksInMonth).keys()].map(weekIndex => /*#__PURE__*/jsx("tr", {
    children: state.getDatesInWeek(weekIndex, startDate).map((date, i) => date ? /*#__PURE__*/jsx(CalendarCell, {
      state: state,
      date: date,
      currentMonth: startDate
    }, i) : /*#__PURE__*/jsx("td", {}, i))
  }, weekIndex));
  let t7;
  if ($[16] !== t6) {
    t7 = /*#__PURE__*/jsx("tbody", {
      children: t6
    });
    $[16] = t6;
    $[17] = t7;
  } else {
    t7 = $[17];
  }
  let t8;
  if ($[18] !== gridProps || $[19] !== t5 || $[20] !== t7) {
    t8 = /*#__PURE__*/jsxs("table", {
      className: t2,
      ...gridProps,
      children: [t5, t7]
    });
    $[18] = gridProps;
    $[19] = t5;
    $[20] = t7;
    $[21] = t8;
  } else {
    t8 = $[21];
  }
  return t8;
}

function CalendarBase(props) {
  const $ = c(37);
  const {
    state,
    calendarProps,
    nextButtonProps,
    prevButtonProps,
    calendarRef: ref,
    visibleMonths: t0
  } = props;
  const visibleMonths = t0 === undefined ? 1 : t0;
  const styleProps = useCalendarStyles(props);
  const {
    direction
  } = useLocale();
  const currentMonth = state.visibleRange.start;
  const t1 = currentMonth.calendar.identifier === "gregory" && currentMonth.era === "BC" ? "short" : undefined;
  let t2;
  if ($[0] !== t1 || $[1] !== currentMonth.calendar.identifier || $[2] !== state.timeZone) {
    t2 = {
      month: "long",
      year: "numeric",
      era: t1,
      calendar: currentMonth.calendar.identifier,
      timeZone: state.timeZone
    };
    $[0] = t1;
    $[1] = currentMonth.calendar.identifier;
    $[2] = state.timeZone;
    $[3] = t2;
  } else {
    t2 = $[3];
  }
  const monthDateFormatter = useDateFormatter(t2);
  let titles;
  let calendars;
  if ($[4] !== visibleMonths || $[5] !== currentMonth || $[6] !== direction || $[7] !== prevButtonProps || $[8] !== state || $[9] !== monthDateFormatter || $[10] !== nextButtonProps || $[11] !== styleProps || $[12] !== props) {
    titles = [];
    calendars = [];
    for (let i = 0; i < visibleMonths; i++) {
      const d = currentMonth.add({
        months: i
      });
      titles.push( /*#__PURE__*/jsxs("div", {
        ...styleProps.monthHeader,
        children: [i === 0 && /*#__PURE__*/jsx(ActionButton, {
          ...prevButtonProps,
          prominence: "low",
          gridArea: "prev",
          justifySelf: "start",
          UNSAFE_style: {
            padding: 0
          },
          children: /*#__PURE__*/jsx(Icon, {
            src: direction === "rtl" ? chevronRightIcon : chevronLeftIcon,
            size: "medium"
          })
        }), /*#__PURE__*/jsx(Heading, {
          gridArea: "title",
          elementType: "h2",
          size: "small",
          align: "center",
          "aria-hidden": true,
          children: monthDateFormatter.format(d.toDate(state.timeZone))
        }), i === visibleMonths - 1 && /*#__PURE__*/jsx(ActionButton, {
          ...nextButtonProps,
          prominence: "low",
          gridArea: "next",
          justifySelf: "end",
          UNSAFE_style: {
            padding: 0
          },
          children: /*#__PURE__*/jsx(Icon, {
            src: direction === "rtl" ? chevronLeftIcon : chevronRightIcon,
            size: "medium"
          })
        })]
      }, i));
      calendars.push( /*#__PURE__*/createElement(CalendarMonth, {
        ...props,
        key: i,
        state: state,
        startDate: d
      }));
    }
    $[4] = visibleMonths;
    $[5] = currentMonth;
    $[6] = direction;
    $[7] = prevButtonProps;
    $[8] = state;
    $[9] = monthDateFormatter;
    $[10] = nextButtonProps;
    $[11] = styleProps;
    $[12] = props;
    $[13] = titles;
    $[14] = calendars;
  } else {
    titles = $[13];
    calendars = $[14];
  }
  const t3 = calendarProps["aria-label"];
  let t4;
  if ($[15] !== t3) {
    t4 = /*#__PURE__*/jsx(VisuallyHidden, {
      elementType: "h2",
      children: t3
    });
    $[15] = t3;
    $[16] = t4;
  } else {
    t4 = $[16];
  }
  let t5;
  if ($[17] !== styleProps.titles || $[18] !== titles) {
    t5 = /*#__PURE__*/jsx("div", {
      ...styleProps.titles,
      children: titles
    });
    $[17] = styleProps.titles;
    $[18] = titles;
    $[19] = t5;
  } else {
    t5 = $[19];
  }
  let t6;
  if ($[20] !== styleProps.calendars || $[21] !== calendars) {
    t6 = /*#__PURE__*/jsx("div", {
      ...styleProps.calendars,
      children: calendars
    });
    $[20] = styleProps.calendars;
    $[21] = calendars;
    $[22] = t6;
  } else {
    t6 = $[22];
  }
  const t7 = nextButtonProps["aria-label"];
  let t8;
  if ($[23] !== state) {
    t8 = () => state.focusNextPage();
    $[23] = state;
    $[24] = t8;
  } else {
    t8 = $[24];
  }
  let t9;
  if ($[25] !== t7 || $[26] !== nextButtonProps.isDisabled || $[27] !== t8) {
    t9 = /*#__PURE__*/jsx(VisuallyHidden, {
      children: /*#__PURE__*/jsx("button", {
        "aria-label": t7,
        disabled: nextButtonProps.isDisabled,
        onClick: t8,
        tabIndex: -1
      })
    });
    $[25] = t7;
    $[26] = nextButtonProps.isDisabled;
    $[27] = t8;
    $[28] = t9;
  } else {
    t9 = $[28];
  }
  let t10;
  if ($[29] !== styleProps.root || $[30] !== calendarProps || $[31] !== ref || $[32] !== t4 || $[33] !== t5 || $[34] !== t6 || $[35] !== t9) {
    t10 = /*#__PURE__*/jsxs("div", {
      ...styleProps.root,
      ...calendarProps,
      ref: ref,
      children: [t4, t5, t6, t9]
    });
    $[29] = styleProps.root;
    $[30] = calendarProps;
    $[31] = ref;
    $[32] = t4;
    $[33] = t5;
    $[34] = t6;
    $[35] = t9;
    $[36] = t10;
  } else {
    t10 = $[36];
  }
  return t10;
}
function useCalendarStyles(props) {
  const $ = c(10);
  const styleProps = useStyleProps(props);
  let t0;
  if ($[0] !== styleProps.className) {
    t0 = classNames(css({
      boxSizing: "border-box",
      maxWidth: "100%",
      overflow: "auto",
      padding: `calc(${tokenSchema.size.alias.focusRing} + ${tokenSchema.size.alias.focusRingGap})`,
      "--calendar-cell-width": tokenSchema.size.element.regular,
      "--calendar-cell-padding": tokenSchema.size.space.xsmall,
      "--calendar-width": "calc(var(--calendar-cell-width) * 7 + var(--calendar-cell-padding) * 12)"
    }), styleProps.className);
    $[0] = styleProps.className;
    $[1] = t0;
  } else {
    t0 = $[1];
  }
  let t1;
  if ($[2] !== styleProps || $[3] !== t0) {
    t1 = {
      ...styleProps,
      className: t0
    };
    $[2] = styleProps;
    $[3] = t0;
    $[4] = t1;
  } else {
    t1 = $[4];
  }
  const root = t1;
  let t2;
  if ($[5] === Symbol.for("react.memo_cache_sentinel")) {
    t2 = {
      className: css({
        boxSizing: "border-box",
        display: "grid",
        gap: tokenSchema.size.space.large,
        gridAutoColumns: "1fr",
        gridAutoFlow: "column",
        paddingInline: "var(--calendar-cell-padding)",
        width: "100%"
      })
    };
    $[5] = t2;
  } else {
    t2 = $[5];
  }
  const titles = t2;
  let t3;
  if ($[6] === Symbol.for("react.memo_cache_sentinel")) {
    t3 = {
      className: css({
        display: "grid",
        gridAutoColumns: "1fr",
        gridAutoFlow: "column",
        alignItems: "start",
        gap: tokenSchema.size.space.large
      })
    };
    $[6] = t3;
  } else {
    t3 = $[6];
  }
  const calendars = t3;
  let t4;
  if ($[7] === Symbol.for("react.memo_cache_sentinel")) {
    t4 = {
      className: css({
        alignItems: "center",
        display: "grid",
        gridTemplateAreas: `"prev title next"`,
        gridTemplateColumns: "minmax(auto, 1fr) auto minmax(auto, 1fr)",
        width: "var(--calendar-width)"
      })
    };
    $[7] = t4;
  } else {
    t4 = $[7];
  }
  const monthHeader = t4;
  let t5;
  if ($[8] !== root) {
    t5 = {
      calendars,
      monthHeader,
      root,
      titles
    };
    $[8] = root;
    $[9] = t5;
  } else {
    t5 = $[9];
  }
  return t5;
}

function Calendar(props, forwardedRef) {
  const $ = c(17);
  props = useProviderProps(props);
  const {
    visibleMonths: t0
  } = props;
  let visibleMonths;
  visibleMonths = t0 === undefined ? 1 : t0;
  visibleMonths = Math.max(visibleMonths, 1);
  let t1;
  const t2 = visibleMonths;
  let t3;
  if ($[0] !== t2) {
    t3 = {
      months: t2
    };
    $[0] = t2;
    $[1] = t3;
  } else {
    t3 = $[1];
  }
  t1 = t3;
  const visibleDuration = t1;
  const {
    locale
  } = useLocale();
  let t4;
  if ($[2] !== props || $[3] !== locale || $[4] !== visibleDuration) {
    t4 = {
      ...props,
      locale,
      visibleDuration,
      createCalendar
    };
    $[2] = props;
    $[3] = locale;
    $[4] = visibleDuration;
    $[5] = t4;
  } else {
    t4 = $[5];
  }
  const state = useCalendarState(t4);
  const domRef = useObjectRef(forwardedRef);
  let t5;
  if ($[6] !== domRef.current || $[7] !== state) {
    t5 = () => ({
      ...domRef.current,
      focus() {
        state.setFocused(true);
      }
    });
    $[6] = domRef.current;
    $[7] = state;
    $[8] = t5;
  } else {
    t5 = $[8];
  }
  useImperativeHandle(forwardedRef, t5);
  const {
    calendarProps,
    prevButtonProps,
    nextButtonProps
  } = useCalendar(props, state);
  const t6 = visibleMonths;
  let t7;
  if ($[9] !== props || $[10] !== t6 || $[11] !== state || $[12] !== domRef || $[13] !== calendarProps || $[14] !== prevButtonProps || $[15] !== nextButtonProps) {
    t7 = /*#__PURE__*/jsx(CalendarBase, {
      ...props,
      visibleMonths: t6,
      state: state,
      calendarRef: domRef,
      calendarProps: calendarProps,
      prevButtonProps: prevButtonProps,
      nextButtonProps: nextButtonProps
    });
    $[9] = props;
    $[10] = t6;
    $[11] = state;
    $[12] = domRef;
    $[13] = calendarProps;
    $[14] = prevButtonProps;
    $[15] = nextButtonProps;
    $[16] = t7;
  } else {
    t7 = $[16];
  }
  return t7;
}

/**
 * Calendars display a grid of days in one or more months and allow users to
 * select a single date.
 */
const _Calendar = /*#__PURE__*/forwardRef(Calendar);

function RangeCalendar(props, forwardedRef) {
  const $ = c(17);
  props = useProviderProps(props);
  const {
    visibleMonths: t0
  } = props;
  let visibleMonths;
  visibleMonths = t0 === undefined ? 1 : t0;
  visibleMonths = Math.max(visibleMonths, 1);
  let t1;
  const t2 = visibleMonths;
  let t3;
  if ($[0] !== t2) {
    t3 = {
      months: t2
    };
    $[0] = t2;
    $[1] = t3;
  } else {
    t3 = $[1];
  }
  t1 = t3;
  const visibleDuration = t1;
  const {
    locale
  } = useLocale();
  let t4;
  if ($[2] !== props || $[3] !== locale || $[4] !== visibleDuration) {
    t4 = {
      ...props,
      locale,
      visibleDuration,
      createCalendar
    };
    $[2] = props;
    $[3] = locale;
    $[4] = visibleDuration;
    $[5] = t4;
  } else {
    t4 = $[5];
  }
  const state = useRangeCalendarState(t4);
  const domRef = useObjectRef(forwardedRef);
  let t5;
  if ($[6] !== domRef.current || $[7] !== state) {
    t5 = () => ({
      ...domRef.current,
      focus() {
        state.setFocused(true);
      }
    });
    $[6] = domRef.current;
    $[7] = state;
    $[8] = t5;
  } else {
    t5 = $[8];
  }
  useImperativeHandle(forwardedRef, t5);
  const {
    calendarProps,
    prevButtonProps,
    nextButtonProps
  } = useRangeCalendar(props, state, domRef);
  const t6 = visibleMonths;
  let t7;
  if ($[9] !== props || $[10] !== t6 || $[11] !== state || $[12] !== domRef || $[13] !== calendarProps || $[14] !== prevButtonProps || $[15] !== nextButtonProps) {
    t7 = /*#__PURE__*/jsx(CalendarBase, {
      ...props,
      visibleMonths: t6,
      state: state,
      calendarRef: domRef,
      calendarProps: calendarProps,
      prevButtonProps: prevButtonProps,
      nextButtonProps: nextButtonProps
    });
    $[9] = props;
    $[10] = t6;
    $[11] = state;
    $[12] = domRef;
    $[13] = calendarProps;
    $[14] = prevButtonProps;
    $[15] = nextButtonProps;
    $[16] = t7;
  } else {
    t7 = $[16];
  }
  return t7;
}

/**
 * RangeCalendars display a grid of days in one or more months and allow users
 * to select a contiguous range of dates.
 */
const _RangeCalendar = /*#__PURE__*/forwardRef(RangeCalendar);

export { _Calendar as Calendar, _RangeCalendar as RangeCalendar };
