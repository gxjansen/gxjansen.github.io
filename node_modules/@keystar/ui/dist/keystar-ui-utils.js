export { c as cloneValidElement, u as useHasChild } from './children-f7c17978.js';
import React, { useRef, useEffect } from 'react';
import { c } from './react-compiler-runtime-19061925.js';
import '@react-aria/utils';

/**
 * Format IDs for compound components.
 *
 * @example
 * const root = useId()
 * const inputId = composeId(root, 'input') // => ':R1:--input'
 * const descriptionId = composeId(root, 'field-element' 'description') // => ':R1:--field-element--description'
 */
function composeId(...args) {
  return args.filter(Boolean).join('--');
}

/**
 * Checks if an unknown value is valid React text (string | number)?[]. This is
 * useful for conditionally wrapping some value when an element is required.
 */
function isReactText(value) {
  if (Array.isArray(value)) {
    return value.every(isReactText);
  }
  return typeof value === 'string' || typeof value === 'number';
}

/**
 * A thin wrapper around `React.useId()` that supports a consumer provided ID.
 */
function useId(id) {
  const generatedId = React.useId();
  return id || generatedId;
}

/**
 * Returns a function that returns `true` if the component is mounted, and
 * `false` otherwise.
 */
function useIsMounted() {
  const $ = c(3);
  const isMounted = useRef(false);
  let t0;
  let t1;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    t0 = () => {
      isMounted.current = true;
      return () => {
        isMounted.current = false;
      };
    };
    t1 = [];
    $[0] = t0;
    $[1] = t1;
  } else {
    t0 = $[0];
    t1 = $[1];
  }
  useEffect(t0, t1);
  let t2;
  if ($[2] === Symbol.for("react.memo_cache_sentinel")) {
    t2 = () => isMounted.current;
    $[2] = t2;
  } else {
    t2 = $[2];
  }
  return t2;
}

/**
 * Tracks the previous value of a variable.
 *
 * This is useful for comparing the previous value of some prop or state to the
 * current value, and taking action based on the change.
 */
function usePrevious(value) {
  const $ = c(2);
  const ref = useRef();
  let t0;
  if ($[0] !== value) {
    t0 = () => {
      ref.current = value;
    };
    $[0] = value;
    $[1] = t0;
  } else {
    t0 = $[1];
  }
  useEffect(t0);
  return ref.current;
}

/**
 * Render the children of a component, either as a function or a ReactNode.
 *
 * @param props The props of the component.
 * @param values A **memoized** object, which is passed as the argument to your `props.children` render fn.
 */
function useRenderProps(props, values) {
  const $ = c(3);
  const {
    children
  } = props;
  let t0;
  bb0: {
    if (typeof children === "function") {
      let t1;
      if ($[0] !== children || $[1] !== values) {
        t1 = children(values);
        $[0] = children;
        $[1] = values;
        $[2] = t1;
      } else {
        t1 = $[2];
      }
      t0 = t1;
      break bb0;
    }
    t0 = children;
  }
  return t0;
}

export { composeId, isReactText, useId, useIsMounted, usePrevious, useRenderProps };
