export { c as cloneValidElement, u as useHasChild } from './children-235e574a.js';
import React, { useRef, useEffect, useCallback, useMemo } from 'react';
import '@react-aria/utils';

/**
 * Format IDs for compound components.
 *
 * @example
 * const root = useId()
 * const inputId = composeId(root, 'input') // => ':R1:--input'
 * const descriptionId = composeId(root, 'field-element' 'description') // => ':R1:--field-element--description'
 */
function composeId(...args) {
  return args.filter(Boolean).join('--');
}

/**
 * Checks if an unknown value is valid React text (string | number)?[]. This is
 * useful for conditionally wrapping some value when an element is required.
 */
function isReactText(value) {
  if (Array.isArray(value)) {
    return value.every(isReactText);
  }
  return typeof value === 'string' || typeof value === 'number';
}

/**
 * A thin wrapper around `React.useId()` that supports a consumer provided ID.
 */
function useId(id) {
  let generatedId = React.useId();
  return id || generatedId;
}

/**
 * Returns a function that returns `true` if the component is mounted, and
 * `false` otherwise.
 */
function useIsMounted() {
  const isMounted = useRef(false);
  useEffect(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, []);
  return useCallback(() => isMounted.current, []);
}

/**
 * Tracks the previous value of a variable.
 *
 * This is useful for comparing the previous value of some prop or state to the
 * current value, and taking action based on the change.
 */
function usePrevious(value) {
  const ref = useRef();
  useEffect(() => {
    ref.current = value;
  });
  return ref.current;
}

/**
 * Render the children of a component, either as a function or a ReactNode.
 *
 * @param props The props of the component.
 * @param values A **memoized** object, which is passed as the argument to your `props.children` render fn.
 */
function useRenderProps(props, values) {
  let {
    children
  } = props;
  return useMemo(() => {
    if (typeof children === 'function') {
      return children(values);
    }
    return children;
  }, [children, values]);
}

export { composeId, isReactText, useId, useIsMounted, usePrevious, useRenderProps };
