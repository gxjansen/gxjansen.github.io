'use client';
import { c } from './react-compiler-runtime-19061925.js';
import { useSearchField } from '@react-aria/searchfield';
import { useObjectRef } from '@react-aria/utils';
import { useSearchFieldState } from '@react-stately/searchfield';
import { forwardRef } from 'react';
import { ClearButton } from '@keystar/ui/button';
import { searchIcon } from '@keystar/ui/icon/icons/searchIcon';
import { Icon } from '@keystar/ui/icon';
import { Flex } from '@keystar/ui/layout';
import { css } from '@keystar/ui/style';
import { TextFieldPrimitive } from '@keystar/ui/text-field';
import { jsx } from 'react/jsx-runtime';

/** Search fields are text fields, specifically designed for search behaviour. */
const SearchField = /*#__PURE__*/forwardRef(function SearchField(props, forwardedRef) {
  const $ = c(30);
  let t0;
  let isDisabled;
  let styleProps;
  let isReadOnly;
  let isRequired;
  let label;
  let description;
  let errorMessage;
  if ($[0] !== props) {
    const {
      autoFocus,
      description: t1,
      errorMessage: t2,
      id,
      isDisabled: t3,
      isReadOnly: t4,
      isRequired: t5,
      label: t6,
      showIcon: t7,
      ...t8
    } = props;
    description = t1;
    errorMessage = t2;
    isDisabled = t3;
    isReadOnly = t4;
    isRequired = t5;
    label = t6;
    t0 = t7;
    styleProps = t8;
    $[0] = props;
    $[1] = t0;
    $[2] = isDisabled;
    $[3] = styleProps;
    $[4] = isReadOnly;
    $[5] = isRequired;
    $[6] = label;
    $[7] = description;
    $[8] = errorMessage;
  } else {
    t0 = $[1];
    isDisabled = $[2];
    styleProps = $[3];
    isReadOnly = $[4];
    isRequired = $[5];
    label = $[6];
    description = $[7];
    errorMessage = $[8];
  }
  const showIcon = t0 === undefined ? true : t0;
  const domRef = useObjectRef(forwardedRef);
  const state = useSearchFieldState(props);
  const {
    labelProps,
    inputProps,
    clearButtonProps,
    descriptionProps,
    errorMessageProps
  } = useSearchField(props, state, domRef);
  const clearButtonVisible = state.value !== "" && !props.isReadOnly;
  let t1;
  if ($[9] !== clearButtonProps || $[10] !== isDisabled) {
    t1 = /*#__PURE__*/jsx(ClearButton, {
      ...clearButtonProps,
      preventFocus: true,
      isDisabled: isDisabled
    });
    $[9] = clearButtonProps;
    $[10] = isDisabled;
    $[11] = t1;
  } else {
    t1 = $[11];
  }
  const clearButton = t1;
  const t2 = props.isDisabled ? "color.alias.foregroundDisabled" : "neutralSecondary";
  let t3;
  if ($[12] !== t2) {
    t3 = /*#__PURE__*/jsx(Flex, {
      alignItems: "center",
      flexShrink: 0,
      justifyContent: "center",
      pointerEvents: "none",
      width: "element.regular",
      children: /*#__PURE__*/jsx(Icon, {
        src: searchIcon,
        color: t2
      })
    });
    $[12] = t2;
    $[13] = t3;
  } else {
    t3 = $[13];
  }
  const startElement = t3;
  let t4;
  if ($[14] === Symbol.for("react.memo_cache_sentinel")) {
    t4 = {
      className: css({
        input: {
          "&[data-adornment=\"start\"]": {
            paddingInlineStart: 0
          },
          "&[data-adornment=\"end\"]": {
            paddingInlineEnd: 0
          },
          "&[data-adornment=\"both\"]": {
            paddingInline: 0
          }
        }
      })
    };
    $[14] = t4;
  } else {
    t4 = $[14];
  }
  const t5 = showIcon && startElement;
  const t6 = clearButtonVisible && clearButton;
  let t7;
  if ($[15] !== domRef || $[16] !== styleProps || $[17] !== isDisabled || $[18] !== isReadOnly || $[19] !== isRequired || $[20] !== label || $[21] !== labelProps || $[22] !== inputProps || $[23] !== description || $[24] !== descriptionProps || $[25] !== errorMessage || $[26] !== errorMessageProps || $[27] !== t5 || $[28] !== t6) {
    t7 = /*#__PURE__*/jsx(TextFieldPrimitive, {
      ref: domRef,
      ...styleProps,
      isDisabled: isDisabled,
      isReadOnly: isReadOnly,
      isRequired: isRequired,
      label: label,
      labelProps: labelProps,
      inputProps: inputProps,
      inputWrapperProps: t4,
      description: description,
      descriptionProps: descriptionProps,
      errorMessage: errorMessage,
      errorMessageProps: errorMessageProps,
      startElement: t5,
      endElement: t6
    });
    $[15] = domRef;
    $[16] = styleProps;
    $[17] = isDisabled;
    $[18] = isReadOnly;
    $[19] = isRequired;
    $[20] = label;
    $[21] = labelProps;
    $[22] = inputProps;
    $[23] = description;
    $[24] = descriptionProps;
    $[25] = errorMessage;
    $[26] = errorMessageProps;
    $[27] = t5;
    $[28] = t6;
    $[29] = t7;
  } else {
    t7 = $[29];
  }
  return t7;
});

export { SearchField };
