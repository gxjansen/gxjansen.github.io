'use client';
import { c } from './react-compiler-runtime-19061925.js';
import { filterDOMProps } from '@react-aria/utils';
import { forwardRef } from 'react';
import { useSlotProps } from '@keystar/ui/slots';
import { useStyleProps, classNames, css, tokenSchema } from '@keystar/ui/style';
import { Text } from '@keystar/ui/typography';
import { jsx } from 'react/jsx-runtime';

/**
 * An avatar is a thumbnail representation of an entity, such as a user or an
 * organization.
 */
const Avatar = /*#__PURE__*/forwardRef(function Avatar(props, forwardedRef) {
  const $ = c(19);
  props = useSlotProps(props, "avatar");
  let t0;
  let otherProps;
  let alt;
  if ($[0] !== props) {
    ({
      alt,
      size: t0,
      ...otherProps
    } = props);
    $[0] = props;
    $[1] = t0;
    $[2] = otherProps;
    $[3] = alt;
  } else {
    t0 = $[1];
    otherProps = $[2];
    alt = $[3];
  }
  const size = t0 === undefined ? "regular" : t0;
  const styleProps = useStyleProps(otherProps);
  const t1 = size === "regular" ? undefined : size;
  let t2;
  if ($[4] !== otherProps) {
    t2 = filterDOMProps(otherProps);
    $[4] = otherProps;
    $[5] = t2;
  } else {
    t2 = $[5];
  }
  let t3;
  if ($[6] !== styleProps.className) {
    t3 = classNames(styleProps.className, css({
      alignItems: "center",
      backgroundColor: tokenSchema.color.background.surfaceTertiary,
      borderRadius: "50%",
      display: "inline-flex",
      flexShrink: 0,
      fontSize: "var(--avatar-text-size)",
      height: "var(--avatar-size)",
      justifyContent: "center",
      overflow: "hidden",
      width: "var(--avatar-size)",
      userSelect: "none",
      "--avatar-size": tokenSchema.size.element.regular,
      "--avatar-text-size": tokenSchema.typography.text.regular.size,
      "&[data-size=xsmall]": {
        "--avatar-size": tokenSchema.size.element.xsmall,
        "--avatar-text-size": tokenSchema.typography.text.small.size
      },
      "&[data-size=small]": {
        "--avatar-size": tokenSchema.size.element.small,
        "--avatar-text-size": tokenSchema.typography.text.small.size
      },
      "&[data-size=medium]": {
        "--avatar-size": tokenSchema.size.element.medium,
        "--avatar-text-size": tokenSchema.typography.text.medium.size
      },
      "&[data-size=large]": {
        "--avatar-size": tokenSchema.size.element.large,
        "--avatar-text-size": tokenSchema.typography.text.large.size
      },
      "&[data-size=xlarge]": {
        "--avatar-size": tokenSchema.size.element.xlarge,
        "--avatar-text-size": tokenSchema.typography.text.large.size
      }
    }));
    $[6] = styleProps.className;
    $[7] = t3;
  } else {
    t3 = $[7];
  }
  let t4;
  if ($[8] !== props || $[9] !== size) {
    t4 = "src" in props ? /*#__PURE__*/jsx("div", {
      className: css({
        height: "100%",
        width: "100%"
      }),
      style: {
        backgroundImage: `url(${props.src})`,
        backgroundPosition: "center",
        backgroundRepeat: "no-repeat",
        backgroundSize: "cover"
      }
    }) : /*#__PURE__*/jsx(Text, {
      "aria-hidden": true,
      color: "neutralSecondary",
      weight: "medium",
      UNSAFE_className: css({
        fontSize: "inherit"
      }),
      children: getInitials(props.name, size)
    });
    $[8] = props;
    $[9] = size;
    $[10] = t4;
  } else {
    t4 = $[10];
  }
  let t5;
  if ($[11] !== forwardedRef || $[12] !== alt || $[13] !== t1 || $[14] !== styleProps || $[15] !== t2 || $[16] !== t3 || $[17] !== t4) {
    t5 = /*#__PURE__*/jsx("div", {
      ref: forwardedRef,
      role: "img",
      "aria-label": alt,
      "data-size": t1,
      ...styleProps,
      ...t2,
      className: t3,
      children: t4
    });
    $[11] = forwardedRef;
    $[12] = alt;
    $[13] = t1;
    $[14] = styleProps;
    $[15] = t2;
    $[16] = t3;
    $[17] = t4;
    $[18] = t5;
  } else {
    t5 = $[18];
  }
  return t5;
});
function getInitials(name, size) {
  const words = name.split(' ');
  const first = words[0].charAt(0);
  const last = words[words.length - 1].charAt(0);
  if (size === 'xsmall') {
    return `${first}`.toUpperCase();
  }
  return `${first}${last}`.toUpperCase();
}

export { Avatar };
