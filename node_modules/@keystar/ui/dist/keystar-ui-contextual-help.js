'use client';
import { c } from './react-compiler-runtime-19061925.js';
import { useLocalizedStringFormatter } from '@react-aria/i18n';
import { useLabels, mergeProps } from '@react-aria/utils';
import { forwardRef } from 'react';
import { ActionButton } from '@keystar/ui/button';
import { DialogTrigger, Dialog } from '@keystar/ui/dialog';
import { Icon } from '@keystar/ui/icon';
import { helpCircleIcon } from '@keystar/ui/icon/icons/helpCircleIcon';
import { infoIcon } from '@keystar/ui/icon/icons/infoIcon';
import { ClearSlots } from '@keystar/ui/slots';
import { classNames, css, tokenSchema } from '@keystar/ui/style';
import { jsx, jsxs } from 'react/jsx-runtime';

const localizedMessages = {
  "ar-AE": {
    "help": `مساعدة`,
    "info": `معلومات`
  },
  "bg-BG": {
    "help": `Помощ`,
    "info": `Информация`
  },
  "cs-CZ": {
    "help": `Nápověda`,
    "info": `Informace`
  },
  "da-DK": {
    "help": `Hjælp`,
    "info": `Oplysninger`
  },
  "de-DE": {
    "help": `Hilfe`,
    "info": `Informationen`
  },
  "el-GR": {
    "help": `Βοήθεια`,
    "info": `Πληροφορίες`
  },
  "en-US": {
    "info": `Information`,
    "help": `Help`
  },
  "es-ES": {
    "help": `Ayuda`,
    "info": `Información`
  },
  "et-EE": {
    "help": `Spikker`,
    "info": `Teave`
  },
  "fi-FI": {
    "help": `Ohje`,
    "info": `Tiedot`
  },
  "fr-FR": {
    "help": `Aide`,
    "info": `Informations`
  },
  "he-IL": {
    "help": `עזרה`,
    "info": `מידע`
  },
  "hr-HR": {
    "help": `Pomoć`,
    "info": `Informacije`
  },
  "hu-HU": {
    "help": `Súgó`,
    "info": `Információ`
  },
  "it-IT": {
    "help": `Aiuto`,
    "info": `Informazioni`
  },
  "ja-JP": {
    "help": `ヘルプ`,
    "info": `情報`
  },
  "ko-KR": {
    "help": `도움말`,
    "info": `정보`
  },
  "lt-LT": {
    "help": `Žinynas`,
    "info": `Informacija`
  },
  "lv-LV": {
    "help": `Palīdzība`,
    "info": `Informācija`
  },
  "nb-NO": {
    "help": `Hjelp`,
    "info": `Informasjon`
  },
  "nl-NL": {
    "help": `Help`,
    "info": `Informatie`
  },
  "pl-PL": {
    "help": `Pomoc`,
    "info": `Informacja`
  },
  "pt-BR": {
    "help": `Ajuda`,
    "info": `Informações`
  },
  "pt-PT": {
    "help": `Ajuda`,
    "info": `Informação`
  },
  "ro-RO": {
    "help": `Ajutor`,
    "info": `Informaţii`
  },
  "ru-RU": {
    "help": `Справка`,
    "info": `Информация`
  },
  "sk-SK": {
    "help": `Pomoc`,
    "info": `Informácie`
  },
  "sl-SI": {
    "help": `Pomoč`,
    "info": `Informacije`
  },
  "sr-SP": {
    "help": `Pomoć`,
    "info": `Informacije`
  },
  "sv-SE": {
    "help": `Hjälp`,
    "info": `Information`
  },
  "tr-TR": {
    "help": `Yardım`,
    "info": `Bilgiler`
  },
  "uk-UA": {
    "help": `Довідка`,
    "info": `Інформація`
  },
  "zh-CN": {
    "help": `帮助`,
    "info": `信息`
  },
  "zh-TW": {
    "help": `說明`,
    "info": `資訊`
  }
};

/** Contextual help shows a user extra information about an adjacent component. */
const ContextualHelp = /*#__PURE__*/forwardRef(function ContextualHelp(props, ref) {
  const $ = c(25);
  let t0;
  let otherProps;
  let children;
  if ($[0] !== props) {
    ({
      children,
      variant: t0,
      ...otherProps
    } = props);
    $[0] = props;
    $[1] = t0;
    $[2] = otherProps;
    $[3] = children;
  } else {
    t0 = $[1];
    otherProps = $[2];
    children = $[3];
  }
  const variant = t0 === undefined ? "help" : t0;
  const stringFormatter = useLocalizedStringFormatter(localizedMessages);
  let t1;
  if ($[4] !== stringFormatter || $[5] !== variant) {
    t1 = stringFormatter.format(variant);
    $[4] = stringFormatter;
    $[5] = variant;
    $[6] = t1;
  } else {
    t1 = $[6];
  }
  const labelProps = useLabels(otherProps, t1);
  const icon = variant === "info" ? infoIcon : helpCircleIcon;
  let t2;
  if ($[7] !== otherProps || $[8] !== labelProps) {
    t2 = mergeProps(otherProps, labelProps, {
      isDisabled: false
    });
    $[7] = otherProps;
    $[8] = labelProps;
    $[9] = t2;
  } else {
    t2 = $[9];
  }
  let t3;
  if ($[10] !== otherProps.UNSAFE_className) {
    t3 = classNames(css({
      borderRadius: tokenSchema.size.radius.small,
      height: tokenSchema.size.element.small,
      minWidth: "unset",
      paddingInline: 0,
      width: tokenSchema.size.element.small
    }), otherProps.UNSAFE_className);
    $[10] = otherProps.UNSAFE_className;
    $[11] = t3;
  } else {
    t3 = $[11];
  }
  let t4;
  if ($[12] !== icon) {
    t4 = /*#__PURE__*/jsx(Icon, {
      src: icon
    });
    $[12] = icon;
    $[13] = t4;
  } else {
    t4 = $[13];
  }
  let t5;
  if ($[14] !== t2 || $[15] !== ref || $[16] !== t3 || $[17] !== t4) {
    t5 = /*#__PURE__*/jsx(ActionButton, {
      ...t2,
      ref: ref,
      UNSAFE_className: t3,
      prominence: "low",
      children: t4
    });
    $[14] = t2;
    $[15] = ref;
    $[16] = t3;
    $[17] = t4;
    $[18] = t5;
  } else {
    t5 = $[18];
  }
  let t6;
  if ($[19] !== children) {
    t6 = /*#__PURE__*/jsx(ClearSlots, {
      children: /*#__PURE__*/jsx(Dialog, {
        children: children
      })
    });
    $[19] = children;
    $[20] = t6;
  } else {
    t6 = $[20];
  }
  let t7;
  if ($[21] !== otherProps || $[22] !== t5 || $[23] !== t6) {
    t7 = /*#__PURE__*/jsxs(DialogTrigger, {
      ...otherProps,
      type: "popover",
      children: [t5, t6]
    });
    $[21] = otherProps;
    $[22] = t5;
    $[23] = t6;
    $[24] = t7;
  } else {
    t7 = $[24];
  }
  return t7;
});

export { ContextualHelp };
