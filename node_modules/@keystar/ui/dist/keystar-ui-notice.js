'use client';
import { c } from './react-compiler-runtime-19061925.js';
import { useSlotId, filterDOMProps } from '@react-aria/utils';
import { useRef } from 'react';
import { checkCircle2Icon } from '@keystar/ui/icon/icons/checkCircle2Icon';
import { infoIcon } from '@keystar/ui/icon/icons/infoIcon';
import { alertTriangleIcon } from '@keystar/ui/icon/icons/alertTriangleIcon';
import { Icon } from '@keystar/ui/icon';
import { Grid, minmax } from '@keystar/ui/layout';
import { Content, SlotProvider } from '@keystar/ui/slots';
import { useHasChild, isReactText } from '@keystar/ui/utils';
import { ClassList, useStyleProps, css, tokenSchema } from '@keystar/ui/style';
import { Text } from '@keystar/ui/typography';
import { jsx, jsxs } from 'react/jsx-runtime';

const noticeClassList = new ClassList('Notice', ['heading']);
const toneToIcon = {
  caution: alertTriangleIcon,
  critical: alertTriangleIcon,
  neutral: infoIcon,
  positive: checkCircle2Icon
};
const toneToRole = {
  caution: 'alert',
  critical: 'alert',
  neutral: 'status',
  positive: 'status'
};

// NOTE: this has been a good exploration, and slots will be useful elsewhere,
// but in this case where explicit IDs are required for accessibility and
// composition isn't paramount it may be more appropriate to simply use a
// prop-based API for the heading etc.

/**
 * Use notices to highlight information that affects a section, feature or page.
 * Draw attention without interrupting users from their current task.
 */
function Notice(props) {
  const $ = c(42);
  let t0;
  let otherProps;
  let children;
  if ($[0] !== props) {
    ({
      children,
      tone: t0,
      ...otherProps
    } = props);
    $[0] = props;
    $[1] = t0;
    $[2] = otherProps;
    $[3] = children;
  } else {
    t0 = $[1];
    otherProps = $[2];
    children = $[3];
  }
  const tone = t0 === undefined ? "neutral" : t0;
  const ref = useRef(null);
  const styleProps = useStyleProps(otherProps);
  let t1;
  if ($[4] === Symbol.for("react.memo_cache_sentinel")) {
    t1 = noticeClassList.element("heading");
    $[4] = t1;
  } else {
    t1 = $[4];
  }
  const headingClassName = t1;
  const headingId = useSlotId();
  const contentId = useSlotId();
  let t2;
  if ($[5] === Symbol.for("react.memo_cache_sentinel")) {
    t2 = noticeClassList.selector("heading");
    $[5] = t2;
  } else {
    t2 = $[5];
  }
  const hasHeading = useHasChild(t2, ref);
  const coercedTone = tone === "neutral" ? "accent" : tone;
  const icon = toneToIcon[tone];
  let t3;
  if ($[6] === Symbol.for("react.memo_cache_sentinel")) {
    t3 = css({
      display: "grid",
      gap: tokenSchema.size.space.large
    });
    $[6] = t3;
  } else {
    t3 = $[6];
  }
  const contentStyles = t3;
  let t4;
  const t5 = hasHeading ? "content" : "heading-start / heading-start / content-end / content-end";
  const t6 = hasHeading ? "regular" : undefined;
  let t7;
  if ($[7] !== t5 || $[8] !== contentId || $[9] !== t6) {
    t7 = {
      elementType: "div",
      gridArea: t5,
      id: contentId,
      paddingY: t6,
      UNSAFE_className: contentStyles
    };
    $[7] = t5;
    $[8] = contentId;
    $[9] = t6;
    $[10] = t7;
  } else {
    t7 = $[10];
  }
  let t8;
  if ($[11] !== headingId) {
    t8 = {
      elementType: "div",
      gridArea: "heading",
      id: headingId,
      UNSAFE_className: headingClassName,
      size: "small"
    };
    $[11] = headingId;
    $[12] = t8;
  } else {
    t8 = $[12];
  }
  let t9;
  if ($[13] !== coercedTone) {
    t9 = {
      color: coercedTone,
      weight: "medium"
    };
    $[13] = coercedTone;
    $[14] = t9;
  } else {
    t9 = $[14];
  }
  let t10;
  if ($[15] !== t7 || $[16] !== t8 || $[17] !== t9) {
    t10 = {
      content: t7,
      heading: t8,
      text: t9
    };
    $[15] = t7;
    $[16] = t8;
    $[17] = t9;
    $[18] = t10;
  } else {
    t10 = $[18];
  }
  t4 = t10;
  const slots = t4;
  const t11 = toneToRole[tone];
  let t12;
  if ($[19] !== otherProps) {
    t12 = filterDOMProps(otherProps);
    $[19] = otherProps;
    $[20] = t12;
  } else {
    t12 = $[20];
  }
  let t13;
  if ($[21] === Symbol.for("react.memo_cache_sentinel")) {
    t13 = ["icon heading", "icon content"];
    $[21] = t13;
  } else {
    t13 = $[21];
  }
  let t14;
  if ($[22] === Symbol.for("react.memo_cache_sentinel")) {
    t14 = ["icon.medium", "auto"];
    $[22] = t14;
  } else {
    t14 = $[22];
  }
  let t15;
  if ($[23] !== icon || $[24] !== coercedTone) {
    t15 = /*#__PURE__*/jsx(Icon, {
      src: icon,
      size: "medium",
      color: coercedTone,
      gridArea: "icon",
      alignSelf: "start"
    });
    $[23] = icon;
    $[24] = coercedTone;
    $[25] = t15;
  } else {
    t15 = $[25];
  }
  let t16;
  if ($[26] !== children) {
    t16 = isReactText(children) ? /*#__PURE__*/jsx(Content, {
      children: /*#__PURE__*/jsx(Text, {
        children: children
      })
    }) : children;
    $[26] = children;
    $[27] = t16;
  } else {
    t16 = $[27];
  }
  let t17;
  if ($[28] !== slots || $[29] !== t16) {
    t17 = /*#__PURE__*/jsx(SlotProvider, {
      slots: slots,
      children: t16
    });
    $[28] = slots;
    $[29] = t16;
    $[30] = t17;
  } else {
    t17 = $[30];
  }
  let t18;
  if ($[31] !== headingId || $[32] !== contentId || $[33] !== t11 || $[34] !== ref || $[35] !== styleProps.className || $[36] !== styleProps.style || $[37] !== t12 || $[38] !== coercedTone || $[39] !== t15 || $[40] !== t17) {
    t18 = /*#__PURE__*/jsxs(Grid, {
      "aria-live": "polite",
      "aria-labelledby": headingId,
      "aria-describedby": contentId,
      role: t11,
      ref: ref,
      tabIndex: 0,
      UNSAFE_className: styleProps.className,
      UNSAFE_style: styleProps.style,
      ...t12,
      backgroundColor: coercedTone,
      border: coercedTone,
      borderRadius: "medium",
      minWidth: 0,
      padding: "medium",
      width: "100%",
      alignItems: "center",
      areas: t13,
      columnGap: "medium",
      columns: t14,
      rows: `${minmax("icon.medium", "auto")} auto`,
      children: [t15, t17]
    });
    $[31] = headingId;
    $[32] = contentId;
    $[33] = t11;
    $[34] = ref;
    $[35] = styleProps.className;
    $[36] = styleProps.style;
    $[37] = t12;
    $[38] = coercedTone;
    $[39] = t15;
    $[40] = t17;
    $[41] = t18;
  } else {
    t18 = $[41];
  }
  return t18;
}

export { Notice };
