'use client';
import { c } from './react-compiler-runtime-19061925.js';
import { useLocale } from '@react-aria/i18n';
import { useNumberField } from '@react-aria/numberfield';
import { useObjectRef, mergeProps, filterDOMProps } from '@react-aria/utils';
import { useNumberFieldState } from '@react-stately/numberfield';
import { forwardRef } from 'react';
import { useProviderProps, useProvider } from '@keystar/ui/core';
import { toDataAttributes, classNames, css, tokenSchema, transition, onlyStyleProps } from '@keystar/ui/style';
import { TextFieldPrimitive } from '@keystar/ui/text-field';
import { useButton } from '@react-aria/button';
import { useHover } from '@react-aria/interactions';
import { plusIcon } from '@keystar/ui/icon/icons/plusIcon';
import { minusIcon } from '@keystar/ui/icon/icons/minusIcon';
import { chevronDownIcon } from '@keystar/ui/icon/icons/chevronDownIcon';
import { chevronUpIcon } from '@keystar/ui/icon/icons/chevronUpIcon';
import { Icon } from '@keystar/ui/icon';
import { jsxs, jsx, Fragment } from 'react/jsx-runtime';

/** @private "step" buttons for incrementing and decrementing. */
const StepButton = /*#__PURE__*/forwardRef(function StepButton(props, forwardedRef) {
  const $ = c(23);
  props = useProviderProps(props);
  const {
    scale
  } = useProvider();
  const {
    direction
  } = props;
  const domRef = useObjectRef(forwardedRef);
  let t0;
  if ($[0] !== props) {
    t0 = {
      ...props,
      elementType: "div"
    };
    $[0] = props;
    $[1] = t0;
  } else {
    t0 = $[1];
  }
  const {
    buttonProps,
    isPressed
  } = useButton(t0, domRef);
  const {
    hoverProps,
    isHovered
  } = useHover(props);
  const incrementIcon = scale === "large" ? plusIcon : chevronUpIcon;
  const decrementIcon = scale === "large" ? minusIcon : chevronDownIcon;
  const t1 = isHovered || undefined;
  const t2 = isPressed || undefined;
  let t3;
  if ($[2] !== direction || $[3] !== t1 || $[4] !== t2 || $[5] !== scale) {
    t3 = toDataAttributes({
      direction,
      hovered: t1,
      pressed: t2,
      scale
    });
    $[2] = direction;
    $[3] = t1;
    $[4] = t2;
    $[5] = scale;
    $[6] = t3;
  } else {
    t3 = $[6];
  }
  let t4;
  if ($[7] !== hoverProps || $[8] !== buttonProps) {
    t4 = mergeProps(hoverProps, buttonProps);
    $[7] = hoverProps;
    $[8] = buttonProps;
    $[9] = t4;
  } else {
    t4 = $[9];
  }
  let t5;
  if ($[10] === Symbol.for("react.memo_cache_sentinel")) {
    t5 = classNames(css({
      alignItems: "center",
      color: tokenSchema.color.alias.foregroundIdle,
      cursor: "default",
      display: "flex",
      justifyContent: "center",
      transition: transition("border-color"),
      svg: {
        position: "absolute"
      },
      "&[data-hovered]": {
        backgroundColor: tokenSchema.color.alias.backgroundHovered,
        color: tokenSchema.color.alias.foregroundHovered
      },
      "&[data-pressed]": {
        backgroundColor: tokenSchema.color.alias.backgroundPressed
      },
      "&[aria-disabled=true]": {
        backgroundColor: tokenSchema.color.background.surfaceSecondary,
        color: tokenSchema.color.alias.foregroundDisabled
      },
      "&[data-direction=up]": {
        gridArea: "increment"
      },
      "&[data-direction=down]": {
        gridArea: "decrement"
      },
      "&:not([data-scale=large])": {
        "&[data-direction=up]": {
          borderStartStartRadius: tokenSchema.size.radius.small,
          borderStartEndRadius: tokenSchema.size.radius.small
        },
        "&[data-direction=down]": {
          borderEndStartRadius: tokenSchema.size.radius.small,
          borderEndEndRadius: tokenSchema.size.radius.small
        },
        svg: {
          width: tokenSchema.size.icon.small
        }
      },
      "&[data-scale=large]": {
        "&[data-direction=up]": {
          borderStartEndRadius: tokenSchema.size.radius.regular,
          borderEndEndRadius: tokenSchema.size.radius.regular
        },
        "&[data-direction=down]": {
          borderEndStartRadius: tokenSchema.size.radius.regular,
          borderStartStartRadius: tokenSchema.size.radius.regular
        },
        "input:enabled ~ &": {
          border: `${tokenSchema.size.border.regular} solid ${tokenSchema.color.alias.borderIdle}`
        },
        "input:focus ~ &": {
          borderColor: tokenSchema.color.alias.borderFocused
        }
      }
    }));
    $[10] = t5;
  } else {
    t5 = $[10];
  }
  let t6;
  if ($[11] !== direction || $[12] !== incrementIcon) {
    t6 = direction === "up" && /*#__PURE__*/jsx(Icon, {
      src: incrementIcon
    });
    $[11] = direction;
    $[12] = incrementIcon;
    $[13] = t6;
  } else {
    t6 = $[13];
  }
  let t7;
  if ($[14] !== direction || $[15] !== decrementIcon) {
    t7 = direction === "down" && /*#__PURE__*/jsx(Icon, {
      src: decrementIcon
    });
    $[14] = direction;
    $[15] = decrementIcon;
    $[16] = t7;
  } else {
    t7 = $[16];
  }
  let t8;
  if ($[17] !== t3 || $[18] !== t4 || $[19] !== domRef || $[20] !== t6 || $[21] !== t7) {
    t8 = /*#__PURE__*/jsxs("div", {
      ...t3,
      ...t4,
      ref: domRef,
      className: t5,
      children: [t6, t7]
    });
    $[17] = t3;
    $[18] = t4;
    $[19] = domRef;
    $[20] = t6;
    $[21] = t7;
    $[22] = t8;
  } else {
    t8 = $[22];
  }
  return t8;
});

/**
 * Number fields let users enter a numeric value and incrementally increase or
 * decrease the value with a step-button control.
 */
const NumberField = /*#__PURE__*/forwardRef(function NumberField(props, forwardedRef) {
  const $ = c(29);
  props = useProviderProps(props);
  const {
    isReadOnly,
    isDisabled,
    hideStepper,
    label,
    description
  } = props;
  const {
    locale
  } = useLocale();
  let t0;
  if ($[0] !== props || $[1] !== locale) {
    t0 = {
      ...props,
      locale
    };
    $[0] = props;
    $[1] = locale;
    $[2] = t0;
  } else {
    t0 = $[2];
  }
  const state = useNumberFieldState(t0);
  const inputRef = useObjectRef(forwardedRef);
  const {
    groupProps,
    labelProps,
    inputProps,
    incrementButtonProps,
    decrementButtonProps,
    descriptionProps,
    errorMessageProps
  } = useNumberField(props, state, inputRef);
  const inputWrapperStyleProps = useInputWrapperStyleProps();
  let t1;
  if ($[3] !== props) {
    t1 = filterDOMProps(props);
    $[3] = props;
    $[4] = t1;
  } else {
    t1 = $[4];
  }
  let t2;
  if ($[5] !== props) {
    t2 = onlyStyleProps(props);
    $[5] = props;
    $[6] = t2;
  } else {
    t2 = $[6];
  }
  let t3;
  if ($[7] !== groupProps || $[8] !== inputWrapperStyleProps) {
    t3 = {
      ...groupProps,
      ...inputWrapperStyleProps
    };
    $[7] = groupProps;
    $[8] = inputWrapperStyleProps;
    $[9] = t3;
  } else {
    t3 = $[9];
  }
  let t4;
  if ($[10] !== hideStepper || $[11] !== incrementButtonProps || $[12] !== decrementButtonProps) {
    t4 = !hideStepper && /*#__PURE__*/jsxs(Fragment, {
      children: [/*#__PURE__*/jsx(StepButton, {
        direction: "up",
        ...incrementButtonProps
      }), /*#__PURE__*/jsx(StepButton, {
        direction: "down",
        ...decrementButtonProps
      })]
    });
    $[10] = hideStepper;
    $[11] = incrementButtonProps;
    $[12] = decrementButtonProps;
    $[13] = t4;
  } else {
    t4 = $[13];
  }
  let t5;
  if ($[14] !== t1 || $[15] !== t2 || $[16] !== label || $[17] !== description || $[18] !== props.errorMessage || $[19] !== descriptionProps || $[20] !== errorMessageProps || $[21] !== labelProps || $[22] !== t3 || $[23] !== inputRef || $[24] !== inputProps || $[25] !== isDisabled || $[26] !== isReadOnly || $[27] !== t4) {
    t5 = /*#__PURE__*/jsx(TextFieldPrimitive, {
      width: "alias.singleLineWidth",
      ...t1,
      ...t2,
      label: label,
      description: description,
      errorMessage: props.errorMessage,
      descriptionProps: descriptionProps,
      errorMessageProps: errorMessageProps,
      labelProps: labelProps,
      inputWrapperProps: t3,
      ref: inputRef,
      inputProps: inputProps,
      isDisabled: isDisabled,
      isReadOnly: isReadOnly,
      endElement: t4
    });
    $[14] = t1;
    $[15] = t2;
    $[16] = label;
    $[17] = description;
    $[18] = props.errorMessage;
    $[19] = descriptionProps;
    $[20] = errorMessageProps;
    $[21] = labelProps;
    $[22] = t3;
    $[23] = inputRef;
    $[24] = inputProps;
    $[25] = isDisabled;
    $[26] = isReadOnly;
    $[27] = t4;
    $[28] = t5;
  } else {
    t5 = $[28];
  }
  return t5;
});
function useInputWrapperStyleProps() {
  const $ = c(5);
  const {
    scale
  } = useProvider();
  let t0;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    t0 = css({
      display: "grid",
      gap: tokenSchema.size.border.regular,
      gridTemplateColumns: `1fr calc(${tokenSchema.size.element.regular} - ${tokenSchema.size.border.regular} * 2) ${tokenSchema.size.border.regular}`,
      gridTemplateRows: `${tokenSchema.size.border.regular} auto auto ${tokenSchema.size.border.regular}`,
      gridTemplateAreas: "\"field . .\" \"field increment .\" \"field decrement .\" \"field . .\"",
      "&[data-scale=\"large\"]": {
        gridTemplateColumns: `${tokenSchema.size.element.regular} 1fr ${tokenSchema.size.element.regular}`,
        gridTemplateRows: "auto",
        gridTemplateAreas: "\"decrement field increment\""
      },
      input: {
        gridArea: "field"
      }
    });
    $[0] = t0;
  } else {
    t0 = $[0];
  }
  const className = t0;
  let t1;
  if ($[1] !== scale) {
    t1 = toDataAttributes({
      scale
    });
    $[1] = scale;
    $[2] = t1;
  } else {
    t1 = $[2];
  }
  let t2;
  if ($[3] !== t1) {
    t2 = {
      ...t1,
      className
    };
    $[3] = t1;
    $[4] = t2;
  } else {
    t2 = $[4];
  }
  return t2;
}

export { NumberField };
