'use client';
export { Item } from '@react-stately/collections';
import { c } from './react-compiler-runtime-19061925.js';
import { FocusScope } from '@react-aria/focus';
import { announce } from '@react-aria/live-announcer';
import { useLocalizedStringFormatter } from '@react-aria/i18n';
import { useKeyboard } from '@react-aria/interactions';
import { useObjectRef, filterDOMProps } from '@react-aria/utils';
import React, { useState, useRef, useEffect } from 'react';
import { ActionGroup } from '@keystar/ui/action-group';
import { ActionButton } from '@keystar/ui/button';
import { Icon } from '@keystar/ui/icon';
import { xIcon } from '@keystar/ui/icon/icons/xIcon';
import { Transition } from '@keystar/ui/overlays';
import { ClassList, useStyleProps, classNames, css, transition, tokenSchema } from '@keystar/ui/style';
import { Text } from '@keystar/ui/typography';
import { useProviderProps } from '@keystar/ui/core';
import { jsx, jsxs } from 'react/jsx-runtime';

const localizedMessages = {
  "ar-AE": {
    "actions": `الإجراءات`,
    "actionsAvailable": `الإجراءات المتاحة.`,
    "clearSelection": `إزالة التحديد`,
    "selected": (args, formatter) => `${formatter.plural(args.count, {
      "=0": `غير محدد`,
      other: () => `${formatter.number(args.count)} محدد`
    })}`,
    "selectedAll": `تم تحديد الكل`
  },
  "bg-BG": {
    "actions": `Действия`,
    "actionsAvailable": `Налични действия.`,
    "clearSelection": `Изчистване на избора`,
    "selected": (args, formatter) => `${formatter.plural(args.count, {
      "=0": `Няма избрани`,
      one: () => `${formatter.number(args.count)} избран`,
      other: () => `${formatter.number(args.count)} избрани`
    })}`,
    "selectedAll": `Всички избрани`
  },
  "cs-CZ": {
    "actions": `Akce`,
    "actionsAvailable": `Dostupné akce.`,
    "clearSelection": `Vymazat výběr`,
    "selected": args => `Vybráno: ${args.count}`,
    "selectedAll": `Vybráno vše`
  },
  "da-DK": {
    "actions": `Handlinger`,
    "actionsAvailable": `Tilgængelige handlinger.`,
    "clearSelection": `Ryd markering`,
    "selected": (args, formatter) => `${formatter.plural(args.count, {
      "=0": `Ingen valgt`,
      other: () => `${formatter.number(args.count)} valgt`
    })}`,
    "selectedAll": `Alle valgt`
  },
  "de-DE": {
    "actions": `Aktionen`,
    "actionsAvailable": `Aktionen verfügbar.`,
    "clearSelection": `Auswahl löschen`,
    "selected": (args, formatter) => `${formatter.plural(args.count, {
      "=0": `Nichts ausgewählt`,
      one: () => `${formatter.number(args.count)} ausgewählt`,
      other: () => `${formatter.number(args.count)} ausgewählt`
    })}`,
    "selectedAll": `Alles ausgewählt`
  },
  "el-GR": {
    "actions": `Ενέργειες`,
    "actionsAvailable": `Υπάρχουν διαθέσιμες ενέργειες.`,
    "clearSelection": `Εκκαθάριση επιλογής`,
    "selected": (args, formatter) => `${formatter.plural(args.count, {
      "=0": `Δεν επιλέχθηκε κανένα`,
      one: () => `${formatter.number(args.count)} επιλεγμένο`,
      other: () => `${formatter.number(args.count)} επιλεγμένα`
    })}`,
    "selectedAll": `Επιλέχθηκαν όλα`
  },
  "en-US": {
    "clearSelection": `Clear selection`,
    "selected": (args, formatter) => `${formatter.plural(args.count, {
      "=0": `None selected`,
      other: () => `${formatter.number(args.count)} selected`
    })}`,
    "selectedAll": `All selected`,
    "actions": `Actions`,
    "actionsAvailable": `Actions available.`
  },
  "es-ES": {
    "actions": `Acciones`,
    "actionsAvailable": `Acciones disponibles.`,
    "clearSelection": `Borrar selección`,
    "selected": (args, formatter) => `${formatter.plural(args.count, {
      "=0": `Nada seleccionado`,
      one: () => `${formatter.number(args.count)} seleccionado`,
      other: () => `${formatter.number(args.count)} seleccionados`
    })}`,
    "selectedAll": `Todo seleccionado`
  },
  "et-EE": {
    "actions": `Toimingud`,
    "actionsAvailable": `Toimingud saadaval.`,
    "clearSelection": `Puhasta valik`,
    "selected": (args, formatter) => `${formatter.plural(args.count, {
      "=0": `Pole valitud`,
      other: () => `${formatter.number(args.count)} valitud`
    })}`,
    "selectedAll": `Kõik valitud`
  },
  "fi-FI": {
    "actions": `Toiminnot`,
    "actionsAvailable": `Toiminnot käytettävissä.`,
    "clearSelection": `Poista valinta`,
    "selected": (args, formatter) => `${formatter.plural(args.count, {
      "=0": `Ei mitään valittu`,
      other: () => `${formatter.number(args.count)} valittu`
    })}`,
    "selectedAll": `Kaikki valittu`
  },
  "fr-FR": {
    "actions": `Actions`,
    "actionsAvailable": `Actions disponibles.`,
    "clearSelection": `Supprimer la sélection`,
    "selected": (args, formatter) => `${formatter.plural(args.count, {
      "=0": `Aucun élément sélectionné`,
      one: () => `${formatter.number(args.count)} sélectionné`,
      other: () => `${formatter.number(args.count)} sélectionnés`
    })}`,
    "selectedAll": `Toute la sélection`
  },
  "he-IL": {
    "actions": `פעולות`,
    "actionsAvailable": `פעולות זמינות.`,
    "clearSelection": `נקה בחירה`,
    "selected": (args, formatter) => `${formatter.plural(args.count, {
      "=0": `לא בוצעה בחירה`,
      one: () => ` ${formatter.number(args.count)} בחר`,
      other: () => `${formatter.number(args.count)} נבחרו`
    })}",`,
    "selectedAll": `כל הפריטים שנבחרו`
  },
  "hr-HR": {
    "actions": `Radnje`,
    "actionsAvailable": `Dostupne radnje.`,
    "clearSelection": `Poništi odabir`,
    "selected": args => `Odabrano: ${args.count}`,
    "selectedAll": `Sve je odabrano`
  },
  "hu-HU": {
    "actions": `Műveletek`,
    "actionsAvailable": `Műveletek állnak rendelkezésre.`,
    "clearSelection": `Kijelölés törlése`,
    "selected": (args, formatter) => `${formatter.plural(args.count, {
      "=0": `Egy sincs kijelölve`,
      other: () => `${formatter.number(args.count)} kijelölve`
    })}`,
    "selectedAll": `Mind kijelölve`
  },
  "it-IT": {
    "actions": `Azioni`,
    "actionsAvailable": `Azioni disponibili.`,
    "clearSelection": `Annulla selezione`,
    "selected": (args, formatter) => `${formatter.plural(args.count, {
      "=0": `Nessuno selezionato`,
      one: () => `${formatter.number(args.count)} selezionato`,
      other: () => `${formatter.number(args.count)} selezionati`
    })}`,
    "selectedAll": `Tutti selezionati`
  },
  "ja-JP": {
    "actions": `アクション`,
    "actionsAvailable": `アクションを利用できます。`,
    "clearSelection": `選択をクリア`,
    "selected": (args, formatter) => `${formatter.plural(args.count, {
      "=0": `選択されていません`,
      other: () => `${formatter.number(args.count)} 個を選択しました`
    })}`,
    "selectedAll": `すべてを選択`
  },
  "ko-KR": {
    "actions": `액션`,
    "actionsAvailable": `사용 가능한 액션`,
    "clearSelection": `선택 항목 지우기`,
    "selected": (args, formatter) => `${formatter.plural(args.count, {
      "=0": `선택된 항목 없음`,
      other: () => `${formatter.number(args.count)}개 선택됨`
    })}`,
    "selectedAll": `모두 선택됨`
  },
  "lt-LT": {
    "actions": `Veiksmai`,
    "actionsAvailable": `Galimi veiksmai.`,
    "clearSelection": `Išvalyti pasirinkimą`,
    "selected": args => `Pasirinkta: ${args.count}`,
    "selectedAll": `Pasirinkta viskas`
  },
  "lv-LV": {
    "actions": `Darbības`,
    "actionsAvailable": `Pieejamas darbības.`,
    "clearSelection": `Notīrīt atlasi`,
    "selected": (args, formatter) => `${formatter.plural(args.count, {
      "=0": `Nav atlasīts nekas`,
      other: () => `Atlasīts(-i): ${formatter.number(args.count)}`
    })}`,
    "selectedAll": `Atlasīts viss`
  },
  "nb-NO": {
    "actions": `Handlinger`,
    "actionsAvailable": `Tilgjengelige handlinger.`,
    "clearSelection": `Tøm utvalg`,
    "selected": args => `Valde element: ${args.count}`,
    "selectedAll": `Alle er valgt`
  },
  "nl-NL": {
    "actions": `Acties`,
    "actionsAvailable": `Acties beschikbaar.`,
    "clearSelection": `Selectie wissen`,
    "selected": (args, formatter) => `${formatter.plural(args.count, {
      "=0": `Niets geselecteerd`,
      other: () => `${formatter.number(args.count)} geselecteerd`
    })}`,
    "selectedAll": `Alles geselecteerd`
  },
  "pl-PL": {
    "actions": `Działania`,
    "actionsAvailable": `Dostępne działania.`,
    "clearSelection": `Wyczyść zaznaczenie`,
    "selected": args => `Zaznaczono: ${args.count}`,
    "selectedAll": `Wszystkie zaznaczone`
  },
  "pt-BR": {
    "actions": `Ações`,
    "actionsAvailable": `Ações disponíveis.`,
    "clearSelection": `Limpar seleção`,
    "selected": (args, formatter) => `${formatter.plural(args.count, {
      "=0": `Nenhum selecionado`,
      one: () => `${formatter.number(args.count)} selecionado`,
      other: () => `${formatter.number(args.count)} selecionados`
    })}`,
    "selectedAll": `Todos selecionados`
  },
  "pt-PT": {
    "actions": `Ações`,
    "actionsAvailable": `Ações disponíveis.`,
    "clearSelection": `Limpar seleção`,
    "selected": (args, formatter) => `${formatter.plural(args.count, {
      "=0": `Nenhum selecionado`,
      one: () => `${formatter.number(args.count)} selecionado`,
      other: () => `${formatter.number(args.count)} selecionados`
    })}`,
    "selectedAll": `Tudo selecionado`
  },
  "ro-RO": {
    "actions": `Acțiuni`,
    "actionsAvailable": `Acțiuni disponibile.`,
    "clearSelection": `Goliți selecția`,
    "selected": (args, formatter) => `${formatter.plural(args.count, {
      "=0": `Niciunul selectat`,
      one: () => ` ${formatter.number(args.count)} selectat`,
      other: () => `${formatter.number(args.count)} selectate`
    })}`,
    "selectedAll": `Toate selectate`
  },
  "ru-RU": {
    "actions": `Действия`,
    "actionsAvailable": `Возможно выполнение действий.`,
    "clearSelection": `Очистить выбор`,
    "selected": args => `Выбрано: ${args.count}`,
    "selectedAll": `Выбрано все`
  },
  "sk-SK": {
    "actions": `Akcie`,
    "actionsAvailable": `Dostupné akcie.`,
    "clearSelection": `Vymazať výber`,
    "selected": args => `Vybrané položky: ${args.count}`,
    "selectedAll": `Všetky vybraté položky`
  },
  "sl-SI": {
    "actions": `Dejanja`,
    "actionsAvailable": `Na voljo so dejanja.`,
    "clearSelection": `Počisti izbor`,
    "selected": args => `Izbrano: ${args.count}`,
    "selectedAll": `Vsi izbrani`
  },
  "sr-SP": {
    "actions": `Radnje`,
    "actionsAvailable": `Dostupne su radnje.`,
    "clearSelection": `Poništi izbor`,
    "selected": args => `Izabrano: ${args.count}`,
    "selectedAll": `Sve je izabrano`
  },
  "sv-SE": {
    "actions": `Åtgärder`,
    "actionsAvailable": `Åtgärder finns.`,
    "clearSelection": `Rensa markering`,
    "selected": (args, formatter) => `${formatter.plural(args.count, {
      "=0": `Inga valda`,
      one: () => `${formatter.number(args.count)} vald`,
      other: () => `${formatter.number(args.count)} valda`
    })}`,
    "selectedAll": `Alla markerade`
  },
  "tr-TR": {
    "actions": `Eylemler`,
    "actionsAvailable": `Eylemler mevcut.`,
    "clearSelection": `Seçimi temizle`,
    "selected": (args, formatter) => `${formatter.plural(args.count, {
      "=0": `Hiçbiri seçilmedi`,
      other: () => `${formatter.number(args.count)} seçildi`
    })}`,
    "selectedAll": `Tümü seçildi`
  },
  "uk-UA": {
    "actions": `Дії`,
    "actionsAvailable": `Доступні дії.`,
    "clearSelection": `Очистити вибір`,
    "selected": args => `Вибрано: ${args.count}`,
    "selectedAll": `Усе вибрано`
  },
  "zh-CN": {
    "actions": `操作`,
    "actionsAvailable": `有可用操作。`,
    "clearSelection": `清除选择`,
    "selected": (args, formatter) => `${formatter.plural(args.count, {
      "=0": `无选择`,
      other: () => `已选择 ${formatter.number(args.count)} 个`
    })}`,
    "selectedAll": `全选`
  },
  "zh-TW": {
    "actions": `動作`,
    "actionsAvailable": `可執行的動作。`,
    "clearSelection": `清除選取項目`,
    "selected": (args, formatter) => `${formatter.plural(args.count, {
      "=0": `未選取任何項目`,
      other: () => `已選取 ${formatter.number(args.count)} 個`
    })}`,
    "selectedAll": `已選取所有項目`
  }
};

const actionbarClassList = new ClassList('ActionBar', ['bar', 'container']);

function ActionBar(props, forwardedRef) {
  const $ = c(7);
  const isOpen = props.selectedItemCount !== 0;
  const domRef = useObjectRef(forwardedRef);
  let t0;
  if ($[0] !== props || $[1] !== domRef) {
    t0 = /*#__PURE__*/jsx(ActionBarInnerWithRef, {
      ...props,
      ref: domRef
    });
    $[0] = props;
    $[1] = domRef;
    $[2] = t0;
  } else {
    t0 = $[2];
  }
  let t1;
  if ($[3] !== domRef || $[4] !== isOpen || $[5] !== t0) {
    t1 = /*#__PURE__*/jsx(Transition, {
      nodeRef: domRef,
      isOpen: isOpen,
      children: t0
    });
    $[3] = domRef;
    $[4] = isOpen;
    $[5] = t0;
    $[6] = t1;
  } else {
    t1 = $[6];
  }
  return t1;
}
function ActionBarInner(props, ref) {
  const $ = c(43);
  props = useProviderProps(props);
  const {
    children,
    onAction,
    onClearSelection,
    selectedItemCount,
    isOpen,
    items
  } = props;
  const styleProps = useStyleProps(props);
  const stringFormatter = useLocalizedStringFormatter(localizedMessages);
  const [lastCount, setLastCount] = useState(selectedItemCount);
  if ((selectedItemCount === "all" || selectedItemCount > 0) && selectedItemCount !== lastCount) {
    setLastCount(selectedItemCount);
  }
  let t0;
  if ($[0] !== onClearSelection) {
    t0 = {
      onKeyDown(e) {
        if (e.key === "Escape") {
          e.preventDefault();
          onClearSelection();
        }
      }
    };
    $[0] = onClearSelection;
    $[1] = t0;
  } else {
    t0 = $[1];
  }
  const {
    keyboardProps
  } = useKeyboard(t0);
  const isInitial = useRef(true);
  let t1;
  let t2;
  if ($[2] !== stringFormatter) {
    t1 = () => {
      if (isInitial.current) {
        isInitial.current = false;
        announce(stringFormatter.format("actionsAvailable"));
      }
    };
    t2 = [stringFormatter];
    $[2] = stringFormatter;
    $[3] = t1;
    $[4] = t2;
  } else {
    t1 = $[3];
    t2 = $[4];
  }
  useEffect(t1, t2);
  let t3;
  if ($[5] !== props) {
    t3 = filterDOMProps(props);
    $[5] = props;
    $[6] = t3;
  } else {
    t3 = $[6];
  }
  let t4;
  if ($[7] !== styleProps.className) {
    t4 = classNames(css({
      flex: "none",
      height: 0,
      opacity: 0,
      overflow: "hidden",
      transition: transition(["height", "opacity"], {
        duration: "short"
      }),
      "&[data-open=\"true\"]": {
        height: `calc(${tokenSchema.size.element.large} + (2 * ${tokenSchema.size.space.regular}))`,
        opacity: 1
      }
    }), actionbarClassList.element("root"), styleProps.className);
    $[7] = styleProps.className;
    $[8] = t4;
  } else {
    t4 = $[8];
  }
  let t5;
  if ($[9] === Symbol.for("react.memo_cache_sentinel")) {
    t5 = classNames(css({
      alignItems: "center",
      backgroundColor: tokenSchema.color.background.canvas,
      border: `${tokenSchema.size.border.regular} solid ${tokenSchema.color.border.emphasis}`,
      borderRadius: tokenSchema.size.radius.regular,
      boxShadow: `0 1px 4px ${tokenSchema.color.shadow.regular}`,
      display: "grid",
      gap: tokenSchema.size.space.small,
      gridTemplateAreas: "\"clear selected . actiongroup\"",
      gridTemplateColumns: `auto max-content minmax(${tokenSchema.size.element.small}, 1fr) auto`,
      bottom: tokenSchema.size.space.regular,
      insetInline: tokenSchema.size.space.regular,
      isolation: "isolate",
      justifyContent: "space-between",
      margin: "0 auto",
      padding: tokenSchema.size.space.regular,
      position: "absolute",
      transform: `translateY(${tokenSchema.size.space.large})`,
      transition: transition("transform", {
        duration: "short"
      }),
      "&[data-open=\"true\"]": {
        transform: "translateY(0)"
      }
    }), actionbarClassList.element("bar"));
    $[9] = t5;
  } else {
    t5 = $[9];
  }
  let t6;
  if ($[10] !== stringFormatter) {
    t6 = stringFormatter.format("actions");
    $[10] = stringFormatter;
    $[11] = t6;
  } else {
    t6 = $[11];
  }
  let t7;
  if ($[12] !== items || $[13] !== t6 || $[14] !== onAction || $[15] !== children) {
    t7 = /*#__PURE__*/jsx(ActionGroup, {
      items: items,
      "aria-label": t6,
      prominence: "low",
      overflowMode: "collapse",
      buttonLabelBehavior: "collapse",
      onAction: onAction,
      gridArea: "actiongroup",
      children: children
    });
    $[12] = items;
    $[13] = t6;
    $[14] = onAction;
    $[15] = children;
    $[16] = t7;
  } else {
    t7 = $[16];
  }
  let t8;
  if ($[17] !== stringFormatter) {
    t8 = stringFormatter.format("clearSelection");
    $[17] = stringFormatter;
    $[18] = t8;
  } else {
    t8 = $[18];
  }
  let t9;
  if ($[19] !== onClearSelection) {
    t9 = () => onClearSelection();
    $[19] = onClearSelection;
    $[20] = t9;
  } else {
    t9 = $[20];
  }
  let t10;
  if ($[21] === Symbol.for("react.memo_cache_sentinel")) {
    t10 = /*#__PURE__*/jsx(Icon, {
      src: xIcon
    });
    $[21] = t10;
  } else {
    t10 = $[21];
  }
  let t11;
  if ($[22] !== t8 || $[23] !== t9) {
    t11 = /*#__PURE__*/jsx(ActionButton, {
      gridArea: "clear",
      "aria-label": t8,
      onPress: t9,
      prominence: "low",
      children: t10
    });
    $[22] = t8;
    $[23] = t9;
    $[24] = t11;
  } else {
    t11 = $[24];
  }
  let t12;
  if ($[25] !== lastCount || $[26] !== stringFormatter) {
    t12 = lastCount === "all" ? stringFormatter.format("selectedAll") : `${lastCount} selected`;
    $[25] = lastCount;
    $[26] = stringFormatter;
    $[27] = t12;
  } else {
    t12 = $[27];
  }
  let t13;
  if ($[28] !== t12) {
    t13 = /*#__PURE__*/jsx(Text, {
      gridArea: "selected",
      children: t12
    });
    $[28] = t12;
    $[29] = t13;
  } else {
    t13 = $[29];
  }
  let t14;
  if ($[30] !== isOpen || $[31] !== t7 || $[32] !== t11 || $[33] !== t13) {
    t14 = /*#__PURE__*/jsxs("div", {
      "data-open": isOpen,
      className: t5,
      children: [t7, t11, t13]
    });
    $[30] = isOpen;
    $[31] = t7;
    $[32] = t11;
    $[33] = t13;
    $[34] = t14;
  } else {
    t14 = $[34];
  }
  let t15;
  if ($[35] !== t3 || $[36] !== styleProps || $[37] !== keyboardProps || $[38] !== isOpen || $[39] !== ref || $[40] !== t4 || $[41] !== t14) {
    t15 = /*#__PURE__*/jsx(FocusScope, {
      restoreFocus: true,
      children: /*#__PURE__*/jsx("div", {
        ...t3,
        ...styleProps,
        ...keyboardProps,
        "data-open": isOpen,
        ref: ref,
        className: t4,
        children: t14
      })
    });
    $[35] = t3;
    $[36] = styleProps;
    $[37] = keyboardProps;
    $[38] = isOpen;
    $[39] = ref;
    $[40] = t4;
    $[41] = t14;
    $[42] = t15;
  } else {
    t15 = $[42];
  }
  return t15;
}
const ActionBarInnerWithRef = /*#__PURE__*/React.forwardRef(ActionBarInner);

/**
 * Action bars are used for single and bulk selection patterns when a user needs
 * to perform actions on one or more items at the same time.
 */
const _ActionBar = /*#__PURE__*/React.forwardRef(ActionBar);

function ActionBarContainer(props, forwardedRef) {
  let styleProps = useStyleProps(props);
  let domRef = useObjectRef(forwardedRef);
  return /*#__PURE__*/jsx("div", {
    ...filterDOMProps(props),
    ...styleProps,
    ref: domRef,
    className: classNames(css({
      display: 'flex',
      flexDirection: 'column',
      position: 'relative',
      [`& > :not(${actionbarClassList.selector('root')})`]: {
        flex: 1,
        minHeight: 0
      }
    }), actionbarClassList.element('container'), styleProps.className),
    children: props.children
  });
}

/**
 * ActionBarContainer wraps around an ActionBar and a component that supports selection. It handles
 * the ActionBar's position with respect to its linked component.
 */
const _ActionBarContainer = /*#__PURE__*/React.forwardRef(ActionBarContainer);

export { _ActionBar as ActionBar, _ActionBarContainer as ActionBarContainer };
