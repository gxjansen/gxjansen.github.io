'use client';
import { useLink } from '@react-aria/link';
export { useLink } from '@react-aria/link';
import { c } from './react-compiler-runtime-19061925.js';
import { Fragment, forwardRef } from 'react';
import { mergeProps, useObjectRef } from '@react-aria/utils';
import { useFocusRing } from '@react-aria/focus';
import { useHover } from '@react-aria/interactions';
import { toDataAttributes, classNames, css, tokenSchema } from '@keystar/ui/style';
import { useHeadingContext, useTextContext, Text } from '@keystar/ui/typography';
import { jsx } from 'react/jsx-runtime';
import { useButton } from '@react-aria/button';

function useTextLink(t0) {
  const $ = c(18);
  const {
    autoFocus,
    prominence: t1
  } = t0;
  const prominence = t1 === undefined ? "default" : t1;
  const headingContext = useHeadingContext();
  const textContext = useTextContext();
  let t2;
  if ($[0] !== autoFocus) {
    t2 = {
      autoFocus
    };
    $[0] = autoFocus;
    $[1] = t2;
  } else {
    t2 = $[1];
  }
  const {
    focusProps,
    isFocusVisible
  } = useFocusRing(t2);
  let t3;
  if ($[2] === Symbol.for("react.memo_cache_sentinel")) {
    t3 = {};
    $[2] = t3;
  } else {
    t3 = $[2];
  }
  const {
    hoverProps,
    isHovered
  } = useHover(t3);
  const t4 = isHovered ? "true" : undefined;
  const t5 = isFocusVisible ? "visible" : undefined;
  let t6;
  let t7;
  if ($[3] !== prominence || $[4] !== t4 || $[5] !== t5 || $[6] !== hoverProps || $[7] !== focusProps) {
    const dataOptions = {
      prominence,
      hover: t4,
      focus: t5
    };
    if ($[10] !== hoverProps || $[11] !== focusProps) {
      t6 = mergeProps(hoverProps, focusProps);
      $[10] = hoverProps;
      $[11] = focusProps;
      $[12] = t6;
    } else {
      t6 = $[12];
    }
    t7 = toDataAttributes(dataOptions);
    $[3] = prominence;
    $[4] = t4;
    $[5] = t5;
    $[6] = hoverProps;
    $[7] = focusProps;
    $[8] = t6;
    $[9] = t7;
  } else {
    t6 = $[8];
    t7 = $[9];
  }
  const t8 = !textContext && !headingContext ? Text : Fragment;
  let t9;
  if ($[13] === Symbol.for("react.memo_cache_sentinel")) {
    t9 = classNames(css({
      color: tokenSchema.color.foreground.neutral,
      cursor: "pointer",
      outline: 0,
      textDecoration: "underline",
      textDecorationColor: tokenSchema.color.border.emphasis,
      textDecorationThickness: tokenSchema.size.border.regular,
      textUnderlineOffset: tokenSchema.size.border.medium,
      "&[data-hover=\"true\"], &[data-focus=\"visible\"]": {
        color: tokenSchema.color.foreground.neutralEmphasis,
        textDecorationColor: tokenSchema.color.foreground.neutral
      },
      "&[data-focus=\"visible\"]": {
        textDecorationStyle: "double"
      },
      "&[data-prominence=\"high\"]": {
        color: tokenSchema.color.foreground.accent,
        textDecorationColor: tokenSchema.color.border.accent,
        "&[data-hover=\"true\"], &[data-focus=\"visible\"]": {
          textDecorationColor: tokenSchema.color.foreground.accent
        }
      }
    }));
    $[13] = t9;
  } else {
    t9 = $[13];
  }
  let t10;
  if ($[14] !== t6 || $[15] !== t7 || $[16] !== t8) {
    t10 = {
      ...t6,
      ...t7,
      Wrapper: t8,
      className: t9
    };
    $[14] = t6;
    $[15] = t7;
    $[16] = t8;
    $[17] = t10;
  } else {
    t10 = $[17];
  }
  return t10;
}

/** @private Forked variant where an "href" is provided. */
const TextLinkAnchor = /*#__PURE__*/forwardRef(function TextLink(props, forwardedRef) {
  const $ = c(13);
  const {
    children
  } = props;
  const domRef = useObjectRef(forwardedRef);
  const t0 = useTextLink(props);
  let styleProps;
  let Wrapper;
  if ($[0] !== t0) {
    ({
      Wrapper,
      ...styleProps
    } = t0);
    $[0] = t0;
    $[1] = styleProps;
    $[2] = Wrapper;
  } else {
    styleProps = $[1];
    Wrapper = $[2];
  }
  const {
    linkProps
  } = useLink(props, domRef);
  let t1;
  if ($[3] !== linkProps || $[4] !== styleProps) {
    t1 = mergeProps(linkProps, styleProps);
    $[3] = linkProps;
    $[4] = styleProps;
    $[5] = t1;
  } else {
    t1 = $[5];
  }
  let t2;
  if ($[6] !== domRef || $[7] !== t1 || $[8] !== children) {
    t2 = /*#__PURE__*/jsx("a", {
      ref: domRef,
      ...t1,
      children: children
    });
    $[6] = domRef;
    $[7] = t1;
    $[8] = children;
    $[9] = t2;
  } else {
    t2 = $[9];
  }
  let t3;
  if ($[10] !== Wrapper || $[11] !== t2) {
    t3 = /*#__PURE__*/jsx(Wrapper, {
      children: t2
    });
    $[10] = Wrapper;
    $[11] = t2;
    $[12] = t3;
  } else {
    t3 = $[12];
  }
  return t3;
});

const TextLinkButton = /*#__PURE__*/forwardRef(function TextLink(props, forwardedRef) {
  const $ = c(18);
  let otherProps;
  let children;
  if ($[0] !== props) {
    ({
      children,
      ...otherProps
    } = props);
    $[0] = props;
    $[1] = otherProps;
    $[2] = children;
  } else {
    otherProps = $[1];
    children = $[2];
  }
  const domRef = useObjectRef(forwardedRef);
  const t0 = useTextLink(otherProps);
  let styleProps;
  let Wrapper;
  if ($[3] !== t0) {
    ({
      Wrapper,
      ...styleProps
    } = t0);
    $[3] = t0;
    $[4] = styleProps;
    $[5] = Wrapper;
  } else {
    styleProps = $[4];
    Wrapper = $[5];
  }
  let t1;
  if ($[6] !== otherProps) {
    t1 = {
      elementType: "span",
      ...otherProps
    };
    $[6] = otherProps;
    $[7] = t1;
  } else {
    t1 = $[7];
  }
  const {
    buttonProps
  } = useButton(t1, domRef);
  let t2;
  if ($[8] !== buttonProps || $[9] !== styleProps) {
    t2 = mergeProps(buttonProps, styleProps);
    $[8] = buttonProps;
    $[9] = styleProps;
    $[10] = t2;
  } else {
    t2 = $[10];
  }
  let t3;
  if ($[11] !== domRef || $[12] !== t2 || $[13] !== children) {
    t3 = /*#__PURE__*/jsx("span", {
      ref: domRef,
      ...t2,
      children: children
    });
    $[11] = domRef;
    $[12] = t2;
    $[13] = children;
    $[14] = t3;
  } else {
    t3 = $[14];
  }
  let t4;
  if ($[15] !== Wrapper || $[16] !== t3) {
    t4 = /*#__PURE__*/jsx(Wrapper, {
      children: t3
    });
    $[15] = Wrapper;
    $[16] = t3;
    $[17] = t4;
  } else {
    t4 = $[17];
  }
  return t4;
});

/**
 * Text links take users to another place in the application, and usually appear
 * within or directly following a sentence. Styled to resemble a hyperlink.
 */
const TextLink = /*#__PURE__*/forwardRef(function TextLink(props, forwardedRef) {
  const $ = c(6);
  if ("href" in props) {
    const t0 = forwardedRef;
    let t1;
    if ($[0] !== props || $[1] !== t0) {
      t1 = /*#__PURE__*/jsx(TextLinkAnchor, {
        ...props,
        ref: t0
      });
      $[0] = props;
      $[1] = t0;
      $[2] = t1;
    } else {
      t1 = $[2];
    }
    return t1;
  }
  const t0 = forwardedRef;
  let t1;
  if ($[3] !== props || $[4] !== t0) {
    t1 = /*#__PURE__*/jsx(TextLinkButton, {
      ...props,
      ref: t0
    });
    $[3] = props;
    $[4] = t0;
    $[5] = t1;
  } else {
    t1 = $[5];
  }
  return t1;
});

export { TextLink };
