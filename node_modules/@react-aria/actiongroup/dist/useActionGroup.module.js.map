{"mappings":";;;;;AAAA;;;;;;;;;;CAUC;;;;AAUD,MAAM,2CAAqB;IACzB,QAAQ;IACR,UAAU;IACV,YAAY;AACd;AAMO,SAAS,0CAAkB,KAA8B,EAAE,KAAmB,EAAE,GAAgC;IACrH,IAAI,cACF,UAAU,eACV,cAAc,cACf,GAAG;IAEJ,IAAI,CAAC,aAAa,aAAa,GAAG,CAAA,GAAA,eAAO,EAAE;IAC3C,CAAA,GAAA,sBAAc,EAAE;YACiB;QAA/B,aAAa,CAAC,CAAE,CAAA,IAAI,OAAO,MAAI,6BAAA,IAAI,OAAO,CAAC,aAAa,cAAzB,iDAAA,2BAA2B,OAAO,CAAC,oBAAkB;IACtF,GAAG;QAAC;KAAI;IAER,IAAI,UAAU;WAAI,MAAM,UAAU,CAAC,OAAO;KAAG;IAC7C,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAA,MAAO,CAAC,MAAM,YAAY,CAAC,GAAG,CAAC,OAC/C,aAAa;IAGf,IAAI,aAAC,SAAS,EAAC,GAAG,CAAA,GAAA,gBAAQ;IAC1B,IAAI,eAAe,CAAA,GAAA,yBAAiB,EAAE;IACtC,IAAI,gBAAgB,cAAc,SAAS,gBAAgB;IAC3D,IAAI,YAAY,CAAC;QACf,IAAI,CAAC,EAAE,aAAa,CAAC,QAAQ,CAAC,EAAE,MAAM,GACpC;QAGF,OAAQ,EAAE,GAAG;YACX,KAAK;YACL,KAAK;gBACH,EAAE,cAAc;gBAChB,EAAE,eAAe;gBACjB,IAAI,EAAE,GAAG,KAAK,gBAAgB,eAC5B,aAAa,aAAa,CAAC;oBAAC,MAAM;gBAAI;qBAEtC,aAAa,SAAS,CAAC;oBAAC,MAAM;gBAAI;gBAEpC;YACF,KAAK;YACL,KAAK;gBACH,EAAE,cAAc;gBAChB,EAAE,eAAe;gBACjB,IAAI,EAAE,GAAG,KAAK,eAAe,eAC3B,aAAa,SAAS,CAAC;oBAAC,MAAM;gBAAI;qBAElC,aAAa,aAAa,CAAC;oBAAC,MAAM;gBAAI;gBAExC;QACJ;IACF;IAEA,IAAI,OAA2B,wCAAkB,CAAC,MAAM,gBAAgB,CAAC,aAAa,CAAC;IACvF,IAAI,eAAe,SAAS,WAC1B,OAAO;IAET,OAAO;QACL,kBAAkB;YAChB,GAAG,CAAA,GAAA,qBAAa,EAAE,OAAO;gBAAC,WAAW;YAAI,EAAE;kBAC3C;YACA,oBAAoB,SAAS,YAAY,cAAc;YACvD,iBAAiB;uBACjB;QACF;IACF;AACF","sources":["packages/@react-aria/actiongroup/src/useActionGroup.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaActionGroupProps} from '@react-types/actiongroup';\nimport {createFocusManager} from '@react-aria/focus';\nimport {DOMAttributes, FocusableElement, Orientation} from '@react-types/shared';\nimport {filterDOMProps, useLayoutEffect} from '@react-aria/utils';\nimport {ListState} from '@react-stately/list';\nimport {RefObject, useState} from 'react';\nimport {useLocale} from '@react-aria/i18n';\n\nconst BUTTON_GROUP_ROLES = {\n  'none': 'toolbar',\n  'single': 'radiogroup',\n  'multiple': 'toolbar'\n};\n\nexport interface ActionGroupAria {\n  actionGroupProps: DOMAttributes\n}\n\nexport function useActionGroup<T>(props: AriaActionGroupProps<T>, state: ListState<T>, ref: RefObject<FocusableElement>): ActionGroupAria {\n  let {\n    isDisabled,\n    orientation = 'horizontal' as Orientation\n  } = props;\n\n  let [isInToolbar, setInToolbar] = useState(false);\n  useLayoutEffect(() => {\n    setInToolbar(!!(ref.current && ref.current.parentElement?.closest('[role=\"toolbar\"]')));\n  }, [ref]);\n\n  let allKeys = [...state.collection.getKeys()];\n  if (!allKeys.some(key => !state.disabledKeys.has(key))) {\n    isDisabled = true;\n  }\n\n  let {direction} = useLocale();\n  let focusManager = createFocusManager(ref);\n  let flipDirection = direction === 'rtl' && orientation === 'horizontal';\n  let onKeyDown = (e) => {\n    if (!e.currentTarget.contains(e.target)) {\n      return;\n    }\n\n    switch (e.key) {\n      case 'ArrowRight':\n      case 'ArrowDown':\n        e.preventDefault();\n        e.stopPropagation();\n        if (e.key === 'ArrowRight' && flipDirection) {\n          focusManager.focusPrevious({wrap: true});\n        } else {\n          focusManager.focusNext({wrap: true});\n        }\n        break;\n      case 'ArrowLeft':\n      case 'ArrowUp':\n        e.preventDefault();\n        e.stopPropagation();\n        if (e.key === 'ArrowLeft' && flipDirection) {\n          focusManager.focusNext({wrap: true});\n        } else {\n          focusManager.focusPrevious({wrap: true});\n        }\n        break;\n    }\n  };\n\n  let role: string | undefined = BUTTON_GROUP_ROLES[state.selectionManager.selectionMode];\n  if (isInToolbar && role === 'toolbar') {\n    role = 'group';\n  }\n  return {\n    actionGroupProps: {\n      ...filterDOMProps(props, {labelable: true}),\n      role,\n      'aria-orientation': role === 'toolbar' ? orientation : undefined,\n      'aria-disabled': isDisabled,\n      onKeyDown\n    }\n  };\n}\n"],"names":[],"version":3,"file":"useActionGroup.module.js.map"}