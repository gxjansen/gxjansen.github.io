{"mappings":";;;;;;;;;;;AAAA;;;;;;;;;;CAUC;;;;;;AAiCM,SAAS,0CAAiB,KAAyB,EAAE,KAA+B,EAAE,GAA2B;IACtH,IAAI,UAAC,MAAM,EAAC,GAAG;IACf,IAAI,cAAC,UAAU,EAAC,GAAG;IAEnB,IAAI,kBAAkB,CAAA,GAAA,kCAA0B,EAAE,CAAA,GAAA,oDAAW,GAAG;IAChE,IAAI,cAAc;IAClB,IAAI,aAAC,SAAS,EAAC,GAAG,CAAA,GAAA,yCAAe,EAAE,OAAO,OAAO;IACjD,IAAI,KAAK,CAAA,GAAA,YAAI;IACb,IAAI,UAAU,CAAC;YAAa,0BAAkC;YAAlC;eAAA,CAAA,6BAAA,2BAAA,WAAW,YAAY,cAAvB,+CAAA,8BAAA,YAA0B,kBAA1B,uCAAA,6BAAkC,sBAAA,WAAW,OAAO,CAAC,kBAAnB,0CAAA,oBAAyB,SAAS;IAAD;IAE/F,IAAI,QAAQ;IACZ,IAAI;IACJ,IAAI,OAAO,IAAI,KAAK,QAAQ;QAC1B,QAAQ,gBAAgB,MAAM,CAAC;QAC/B,aAAa,CAAC,EAAE,GAAG,CAAC,EAAE,CAAA,GAAA,yCAAuB,EAAE,OAAO,CAAC;IACzD,OAAO,IAAI,OAAO,YAAY,KAAK,MACjC,QAAQ,gBAAgB,MAAM,CAAC,cAAc;QAC3C,UAAU,QAAQ,OAAO,GAAG;IAC9B;SACK;QACL,IAAI;QACJ,IAAI;QACJ,IAAI,WAAW,WAAW,OAAO,OAAO,GAAG,IAAI,OAAO,YAAY,KAAK,UACrE,SAAS;aAET,SAAS,OAAO,YAAY,KAAK,WAAW,WAAW,YAAY,CAAC,OAAO,GAAG,IAAI,OAAO,GAAG;QAG9F,IAAI,WAAW,UAAU,OAAO,OAAO,GAAG,IAAI,OAAO,YAAY,KAAK,SACpE,QAAQ;aAER,QAAQ,OAAO,YAAY,KAAK,UAAU,WAAW,WAAW,CAAC,OAAO,GAAG,IAAI,OAAO,GAAG;QAG3F,IAAI,UAAU,OACZ,QAAQ,gBAAgB,MAAM,CAAC,iBAAiB;YAC9C,gBAAgB,QAAQ;YACxB,eAAe,QAAQ;QACzB;aACK,IAAI,QACT,QAAQ,gBAAgB,MAAM,CAAC,eAAe;YAC5C,UAAU,QAAQ;QACpB;aACK,IAAI,OACT,QAAQ,gBAAgB,MAAM,CAAC,gBAAgB;YAC7C,UAAU,QAAQ;QACpB;IAEJ;IAEA,IAAI,eAAe,MAAM,YAAY,CAAC;IACtC,IAAI,aAAa,CAAC,cAAc,SAAS,SAAS,CAAC,cAAc;IACjE,OAAO;QACL,oBAAoB;YAClB,GAAG,SAAS;gBACZ;YACA,wBAAwB,gBAAgB,MAAM,CAAC;YAC/C,cAAc;YACd,mBAAmB;YACnB,eAAe;YACf,UAAU;QACZ;sBACA;QACA,qFAAqF;QACrF,yGAAyG;QACzG,0FAA0F;QAC1F,UAAU,CAAC,gBAAgB,CAAC,CAAC;IAC/B;AACF","sources":["packages/@react-aria/dnd/src/useDropIndicator.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport * as DragManager from './DragManager';\nimport {DroppableCollectionState} from '@react-stately/dnd';\nimport {DropTarget, Key} from '@react-types/shared';\nimport {getDroppableCollectionId} from './utils';\nimport {HTMLAttributes, RefObject} from 'react';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {useDroppableItem} from './useDroppableItem';\nimport {useId} from '@react-aria/utils';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\n\nexport interface DropIndicatorProps {\n  /** The drop target that the drop indicator represents. */\n  target: DropTarget\n}\n\nexport interface DropIndicatorAria {\n  /** Props for the drop indicator element. */\n  dropIndicatorProps: HTMLAttributes<HTMLElement>,\n  /** Whether the drop indicator is currently the active drop target. */\n  isDropTarget: boolean,\n  /**\n   * Whether the drop indicator is hidden, both visually and from assistive technology.\n   * Use this to determine whether to omit the element from the DOM entirely.\n   */\n  isHidden: boolean\n}\n\n/**\n * Handles drop interactions for a target within a droppable collection.\n */\nexport function useDropIndicator(props: DropIndicatorProps, state: DroppableCollectionState, ref: RefObject<HTMLElement>): DropIndicatorAria {\n  let {target} = props;\n  let {collection} = state;\n\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/dnd');\n  let dragSession = DragManager.useDragSession();\n  let {dropProps} = useDroppableItem(props, state, ref);\n  let id = useId();\n  let getText = (key: Key) => collection.getTextValue?.(key) ?? collection.getItem(key)?.textValue;\n\n  let label = '';\n  let labelledBy: string;\n  if (target.type === 'root') {\n    label = stringFormatter.format('dropOnRoot');\n    labelledBy = `${id} ${getDroppableCollectionId(state)}`;\n  } else if (target.dropPosition === 'on') {\n    label = stringFormatter.format('dropOnItem', {\n      itemText: getText(target.key)\n    });\n  } else {\n    let before: Key | null;\n    let after: Key | null;\n    if (collection.getFirstKey() === target.key && target.dropPosition === 'before') {\n      before = null;\n    } else {\n      before = target.dropPosition === 'before' ? collection.getKeyBefore(target.key) : target.key;\n    }\n\n    if (collection.getLastKey() === target.key && target.dropPosition === 'after') {\n      after = null;\n    } else {\n      after = target.dropPosition === 'after' ? collection.getKeyAfter(target.key) : target.key;\n    }\n\n    if (before && after) {\n      label = stringFormatter.format('insertBetween', {\n        beforeItemText: getText(before),\n        afterItemText: getText(after)\n      });\n    } else if (before) {\n      label = stringFormatter.format('insertAfter', {\n        itemText: getText(before)\n      });\n    } else if (after) {\n      label = stringFormatter.format('insertBefore', {\n        itemText: getText(after)\n      });\n    }\n  }\n\n  let isDropTarget = state.isDropTarget(target);\n  let ariaHidden = !dragSession ? 'true' : dropProps['aria-hidden'];\n  return {\n    dropIndicatorProps: {\n      ...dropProps,\n      id,\n      'aria-roledescription': stringFormatter.format('dropIndicator'),\n      'aria-label': label,\n      'aria-labelledby': labelledBy,\n      'aria-hidden': ariaHidden,\n      tabIndex: -1\n    },\n    isDropTarget,\n    // If aria-hidden, we are either not in a drag session or the drop target is invalid.\n    // In that case, there's no need to render anything at all unless we need to show the indicator visually.\n    // This can happen when dragging using the native DnD API as opposed to keyboard dragging.\n    isHidden: !isDropTarget && !!ariaHidden\n  };\n}\n"],"names":[],"version":3,"file":"useDropIndicator.module.js.map"}