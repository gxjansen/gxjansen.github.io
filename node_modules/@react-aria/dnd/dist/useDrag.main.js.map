{"mappings":"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","sources":["packages/@react-aria/dnd/src/useDrag.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaButtonProps} from '@react-types/button';\nimport {DragEndEvent, DragItem, DragMoveEvent, DragPreviewRenderer, DragStartEvent, DropOperation, PressEvent} from '@react-types/shared';\nimport {DragEvent, HTMLAttributes, RefObject, useRef, useState} from 'react';\nimport * as DragManager from './DragManager';\nimport {DROP_EFFECT_TO_DROP_OPERATION, DROP_OPERATION, EFFECT_ALLOWED} from './constants';\nimport {globalDropEffect, setGlobalAllowedDropOperations, setGlobalDropEffect, useDragModality, writeToDataTransfer} from './utils';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {isVirtualClick, isVirtualPointerEvent, useDescription, useGlobalListeners, useLayoutEffect} from '@react-aria/utils';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\n\nexport interface DragOptions {\n  /** Handler that is called when a drag operation is started. */\n  onDragStart?: (e: DragStartEvent) => void,\n  /** Handler that is called when the drag is moved. */\n  onDragMove?: (e: DragMoveEvent) => void,\n  /** Handler that is called when the drag operation is ended, either as a result of a drop or a cancellation. */\n  onDragEnd?: (e: DragEndEvent) => void,\n  /** A function that returns the items being dragged. */\n  getItems: () => DragItem[],\n  /** The ref of the element that will be rendered as the drag preview while dragging. */\n  preview?: RefObject<DragPreviewRenderer>,\n  /** Function that returns the drop operations that are allowed for the dragged items. If not provided, all drop operations are allowed. */\n  getAllowedDropOperations?: () => DropOperation[],\n  /**\n   * Whether the item has an explicit focusable drag affordance to initiate accessible drag and drop mode.\n   * If true, the dragProps will omit these event handlers, and they will be applied to dragButtonProps instead.\n   */\n  hasDragButton?: boolean,\n  /**\n   * Whether the drag operation is disabled. If true, the element will not be draggable.\n   */\n  isDisabled?: boolean\n}\n\nexport interface DragResult {\n  /** Props for the draggable element. */\n  dragProps: HTMLAttributes<HTMLElement>,\n  /** Props for the explicit drag button affordance, if any. */\n  dragButtonProps: AriaButtonProps,\n  /** Whether the element is currently being dragged. */\n  isDragging: boolean\n}\n\nconst MESSAGES = {\n  keyboard: {\n    start: 'dragDescriptionKeyboard',\n    end: 'endDragKeyboard'\n  },\n  touch: {\n    start: 'dragDescriptionTouch',\n    end: 'endDragTouch'\n  },\n  virtual: {\n    start: 'dragDescriptionVirtual',\n    end: 'endDragVirtual'\n  }\n};\n\n/**\n * Handles drag interactions for an element, with support for traditional mouse and touch\n * based drag and drop, in addition to full parity for keyboard and screen reader users.\n */\nexport function useDrag(options: DragOptions): DragResult {\n  let {hasDragButton, isDisabled} = options;\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/dnd');\n  let state = useRef({\n    options,\n    x: 0,\n    y: 0\n  }).current;\n  state.options = options;\n  let isDraggingRef = useRef(false);\n  let [isDragging, setDraggingState] = useState(false);\n  let setDragging = (isDragging) => {\n    isDraggingRef.current = isDragging;\n    setDraggingState(isDragging);\n  };\n  let {addGlobalListener, removeAllGlobalListeners} = useGlobalListeners();\n  let modalityOnPointerDown = useRef<string>(null);\n\n  let onDragStart = (e: DragEvent) => {\n    if (e.defaultPrevented) {\n      return;\n    }\n\n    // Prevent the drag event from propagating to any parent draggables\n    e.stopPropagation();\n\n    // If this drag was initiated by a mobile screen reader (e.g. VoiceOver or TalkBack), enter virtual dragging mode.\n    if (modalityOnPointerDown.current === 'virtual') {\n      e.preventDefault();\n      startDragging(e.target as HTMLElement);\n      modalityOnPointerDown.current = null;\n      return;\n    }\n\n    if (typeof options.onDragStart === 'function') {\n      options.onDragStart({\n        type: 'dragstart',\n        x: e.clientX,\n        y: e.clientY\n      });\n    }\n\n    let items = options.getItems();\n    writeToDataTransfer(e.dataTransfer, items);\n\n    let allowed = DROP_OPERATION.all;\n    if (typeof options.getAllowedDropOperations === 'function') {\n      let allowedOperations = options.getAllowedDropOperations();\n      allowed = DROP_OPERATION.none;\n      for (let operation of allowedOperations) {\n        allowed |= DROP_OPERATION[operation] || DROP_OPERATION.none;\n      }\n    }\n\n    setGlobalAllowedDropOperations(allowed);\n    e.dataTransfer.effectAllowed = EFFECT_ALLOWED[allowed] || 'none';\n\n    // If there is a preview option, use it to render a custom preview image that will\n    // appear under the pointer while dragging. If not, the element itself is dragged by the browser.\n    if (typeof options.preview?.current === 'function') {\n      options.preview.current(items, node => {\n        // Compute the offset that the preview will appear under the mouse.\n        // If possible, this is based on the point the user clicked on the target.\n        // If the preview is much smaller, then just use the center point of the preview.\n        let size = node.getBoundingClientRect();\n        let rect = e.currentTarget.getBoundingClientRect();\n        let x = e.clientX - rect.x;\n        let y = e.clientY - rect.y;\n        if (x > size.width || y > size.height) {\n          x = size.width / 2;\n          y = size.height / 2;\n        }\n\n        // Rounding height to an even number prevents blurry preview seen on some screens\n        let height = 2 * Math.round(size.height / 2);\n        node.style.height = `${height}px`;\n\n        e.dataTransfer.setDragImage(node, x, y);\n      });\n    }\n\n    // Enforce that drops are handled by useDrop.\n    addGlobalListener(window, 'drop', e => {\n      e.preventDefault();\n      e.stopPropagation();\n      console.warn('Drags initiated from the React Aria useDrag hook may only be dropped on a target created with useDrop. This ensures that a keyboard and screen reader accessible alternative is available.');\n    }, {once: true});\n    state.x = e.clientX;\n    state.y = e.clientY;\n\n    // Wait a frame before we set dragging to true so that the browser has time to\n    // render the preview image before we update the element that has been dragged.\n    requestAnimationFrame(() => {\n      setDragging(true);\n    });\n  };\n\n  let onDrag = (e: DragEvent) => {\n    // Prevent the drag event from propagating to any parent draggables\n    e.stopPropagation();\n\n    if (e.clientX === state.x && e.clientY === state.y) {\n      return;\n    }\n\n    if (typeof options.onDragMove === 'function') {\n      options.onDragMove({\n        type: 'dragmove',\n        x: e.clientX,\n        y: e.clientY\n      });\n    }\n\n    state.x = e.clientX;\n    state.y = e.clientY;\n  };\n\n  let onDragEnd = (e: DragEvent) => {\n    // Prevent the drag event from propagating to any parent draggables\n    e.stopPropagation();\n\n    if (typeof options.onDragEnd === 'function') {\n      let event: DragEndEvent = {\n        type: 'dragend',\n        x: e.clientX,\n        y: e.clientY,\n        dropOperation: DROP_EFFECT_TO_DROP_OPERATION[e.dataTransfer.dropEffect]\n      };\n\n      // Chrome Android always returns none as its dropEffect so we use the drop effect set in useDrop via\n      // onDragEnter/onDragOver instead. https://bugs.chromium.org/p/chromium/issues/detail?id=1353951\n      if (globalDropEffect) {\n        event.dropOperation = DROP_EFFECT_TO_DROP_OPERATION[globalDropEffect];\n      }\n      options.onDragEnd(event);\n    }\n\n    setDragging(false);\n    removeAllGlobalListeners();\n    setGlobalAllowedDropOperations(DROP_OPERATION.none);\n    setGlobalDropEffect(undefined);\n  };\n\n  // If the dragged element is removed from the DOM via onDrop, onDragEnd won't fire: https://bugzilla.mozilla.org/show_bug.cgi?id=460801\n  // In this case, we need to manually call onDragEnd on cleanup\n  // eslint-disable-next-line arrow-body-style\n  useLayoutEffect(() => {\n    return () => {\n      if (isDraggingRef.current) {\n        if (typeof state.options.onDragEnd === 'function') {\n          let event: DragEndEvent = {\n            type: 'dragend',\n            x: 0,\n            y: 0,\n            dropOperation: DROP_EFFECT_TO_DROP_OPERATION[globalDropEffect || 'none']\n          };\n          state.options.onDragEnd(event);\n        }\n\n        setDragging(false);\n        setGlobalAllowedDropOperations(DROP_OPERATION.none);\n        setGlobalDropEffect(undefined);\n      }\n    };\n  }, [state]);\n\n  let onPress = (e: PressEvent) => {\n    if (e.pointerType !== 'keyboard' && e.pointerType !== 'virtual') {\n      return;\n    }\n\n    startDragging(e.target as HTMLElement);\n  };\n\n  let startDragging = (target: HTMLElement) => {\n    if (typeof state.options.onDragStart === 'function') {\n      let rect = target.getBoundingClientRect();\n      state.options.onDragStart({\n        type: 'dragstart',\n        x: rect.x + (rect.width / 2),\n        y: rect.y + (rect.height / 2)\n      });\n    }\n\n    DragManager.beginDragging({\n      element: target,\n      items: state.options.getItems(),\n      allowedDropOperations: typeof state.options.getAllowedDropOperations === 'function'\n        ? state.options.getAllowedDropOperations()\n        : ['move', 'copy', 'link'],\n      onDragEnd(e) {\n        setDragging(false);\n        if (typeof state.options.onDragEnd === 'function') {\n          state.options.onDragEnd(e);\n        }\n      }\n    }, stringFormatter);\n\n    setDragging(true);\n  };\n\n  let modality = useDragModality();\n  let message = !isDragging ? MESSAGES[modality].start : MESSAGES[modality].end;\n\n  let descriptionProps = useDescription(stringFormatter.format(message));\n\n  let interactions: HTMLAttributes<HTMLElement>;\n  if (!hasDragButton) {\n    // If there's no separate button to trigger accessible drag and drop mode,\n    // then add event handlers to the draggable element itself to start dragging.\n    // For keyboard, we use the Enter key in a capturing listener to prevent other\n    // events such as selection from also occurring. We attempt to infer whether a\n    // pointer event (e.g. long press) came from a touch screen reader, and then initiate\n    // dragging in the native onDragStart listener above.\n\n    interactions = {\n      ...descriptionProps,\n      onPointerDown(e) {\n        modalityOnPointerDown.current = isVirtualPointerEvent(e.nativeEvent) ? 'virtual' : e.pointerType;\n\n        // Try to detect virtual drag passthrough gestures.\n        if (e.width < 1 && e.height < 1) {\n          // iOS VoiceOver.\n          modalityOnPointerDown.current = 'virtual';\n        } else {\n          let rect = e.currentTarget.getBoundingClientRect();\n          let offsetX = e.clientX - rect.x;\n          let offsetY = e.clientY - rect.y;\n          let centerX = rect.width / 2;\n          let centerY = rect.height / 2;\n\n          if (Math.abs(offsetX - centerX) <= 0.5 && Math.abs(offsetY - centerY) <= 0.5) {\n            // Android TalkBack.\n            modalityOnPointerDown.current = 'virtual';\n          } else {\n            modalityOnPointerDown.current = e.pointerType;\n          }\n        }\n      },\n      onKeyDownCapture(e) {\n        if (e.target === e.currentTarget && e.key === 'Enter') {\n          e.preventDefault();\n          e.stopPropagation();\n        }\n      },\n      onKeyUpCapture(e) {\n        if (e.target === e.currentTarget && e.key === 'Enter') {\n          e.preventDefault();\n          e.stopPropagation();\n          startDragging(e.target as HTMLElement);\n        }\n      },\n      onClick(e) {\n        // Handle NVDA/JAWS in browse mode, and touch screen readers. In this case, no keyboard events are fired.\n        if (isVirtualClick(e.nativeEvent) || modalityOnPointerDown.current === 'virtual') {\n          e.preventDefault();\n          e.stopPropagation();\n          startDragging(e.target as HTMLElement);\n        }\n      }\n    };\n  }\n\n  if (isDisabled) {\n    return {\n      dragProps: {\n        draggable: 'false'\n      },\n      dragButtonProps: {},\n      isDragging: false\n    };\n  }\n\n  return {\n    dragProps: {\n      ...interactions,\n      draggable: 'true',\n      onDragStart,\n      onDrag,\n      onDragEnd\n    },\n    dragButtonProps: {\n      ...descriptionProps,\n      onPress\n    },\n    isDragging\n  };\n}\n"],"names":[],"version":3,"file":"useDrag.main.js.map"}