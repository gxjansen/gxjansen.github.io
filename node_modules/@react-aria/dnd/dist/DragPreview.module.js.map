{"mappings":";;;AAAA;;;;;;;;;;CAUC;;AAUD,SAAS,kCAAY,KAAuB,EAAE,GAAmC;IAC/E,IAAI,SAAS,MAAM,QAAQ;IAC3B,IAAI,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,eAAO,EAAe;IACpD,IAAI,SAAS,CAAA,GAAA,aAAK,EAAE;IAEpB,CAAA,GAAA,0BAAkB,EAAE,KAAK,IAAM,CAAC,OAAmB;YACjD,qFAAqF;YACrF,kGAAkG;YAClG,CAAA,GAAA,gBAAQ,EAAE;gBACR,YAAY,OAAO;YACrB;YAEA,+CAA+C;YAC/C,SAAS,OAAO,OAAO;YAEvB,kFAAkF;YAClF,sBAAsB;gBACpB,YAAY;YACd;QACF,GAAG;QAAC;KAAO;IAEX,IAAI,CAAC,UACH,OAAO;IAGT,qBACE,gCAAC;QAAI,OAAO;YAAC,QAAQ;YAAM,UAAU;YAAY,KAAK;YAAG,MAAM;QAAO;QAAG,KAAK;OAC3E;AAGP;AAEA,IAAI,0DAAe,CAAA,GAAA,YAAI,EAAE,UAAU,CAAC","sources":["packages/@react-aria/dnd/src/DragPreview.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DragItem, DragPreviewRenderer} from '@react-types/shared';\nimport {flushSync} from 'react-dom';\nimport React, {JSX, RefObject, useImperativeHandle, useRef, useState} from 'react';\n\nexport interface DragPreviewProps {\n  children: (items: DragItem[]) => JSX.Element\n}\n\nfunction DragPreview(props: DragPreviewProps, ref: RefObject<DragPreviewRenderer>) {\n  let render = props.children;\n  let [children, setChildren] = useState<JSX.Element>(null);\n  let domRef = useRef(null);\n\n  useImperativeHandle(ref, () => (items: DragItem[], callback: (node: HTMLElement) => void) => {\n    // This will be called during the onDragStart event by useDrag. We need to render the\n    // preview synchronously before this event returns so we can call event.dataTransfer.setDragImage.\n    flushSync(() => {\n      setChildren(render(items));\n    });\n\n    // Yield back to useDrag to set the drag image.\n    callback(domRef.current);\n\n    // Remove the preview from the DOM after a frame so the browser has time to paint.\n    requestAnimationFrame(() => {\n      setChildren(null);\n    });\n  }, [render]);\n\n  if (!children) {\n    return null;\n  }\n\n  return (\n    <div style={{zIndex: -100, position: 'absolute', top: 0, left: -100000}} ref={domRef}>\n      {children}\n    </div>\n  );\n}\n\nlet _DragPreview = React.forwardRef(DragPreview);\nexport {_DragPreview as DragPreview};\n"],"names":[],"version":3,"file":"DragPreview.module.js.map"}