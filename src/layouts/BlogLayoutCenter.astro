---
import { type CollectionEntry, getEntries } from "astro:content";
import { Image } from "astro:assets";
import { getRelativeLocaleUrl } from "astro:i18n";
import { YouTube } from 'astro-embed';

// main layout
import BaseLayout from "./BaseLayout.astro";

// components
import Button from "@components/Button/Button.astro";
import Category from "@components/Category/Category.astro";
import BlogNav from "@components/Blog/BlogNav.astro";
import CtaCardSplit from "@components/Cta/CtaCardSplit.astro";

// utils
import { formatDate, humanize, slugify } from "@js/textUtils";
import { getLocaleFromUrl } from "@js/localeUtils";
import { useTranslations } from "@js/translationUtils";

// images
import HumanNotAI from "@images/Written-By-Human-Not-By-AI-Badge-black.svg";

interface Props {
  post: CollectionEntry<"post">;
  allPosts: CollectionEntry<"post">[];
  transitionName?: string;
}

const { post, allPosts, transitionName } = Astro.props;
const {
  title,
  description,
  authors = [],
  categories = [],
  pubDate,
  updatedDate,
  heroImage,
} = post.data;

const currLocale = getLocaleFromUrl(Astro.url);
const t = useTranslations(currLocale);
const authorsData = authors && authors.length > 0 ? await getEntries(authors.map(author => ({ collection: 'authors', id: author }))) : [];
---

<BaseLayout
  type="blog"
  title={title}
  description={description}
  image={heroImage}
  authorsData={authorsData}
  postFrontmatter={post.data}
>
  <article 
    class="mt-24"
    aria-labelledby="article-title"
    itemscope 
    itemtype="https://schema.org/BlogPosting"
  >
    <div class="grid-pattern-container relative">
        <!-- Blog post info -->
        <div class="flex w-full flex-col items-center">
          <div class="mx-auto flex w-full max-w-[800px]">
            <div class="mx-auto text-center">
              <!-- Categories -->
              <div 
                class="flex justify-center gap-4"
                role="list"
                aria-label="Article categories"
              >
                {categories.map((category) => <Category category={category} />)}
              </div>

              <!-- title -->
              <h1 id="article-title" class="h1 mt-6" itemprop="headline">{title}</h1>

              <div
                class="mt-6 flex w-full flex-wrap justify-center gap-4 font-medium text-base-500 dark:text-base-400"
              >
                <!-- author info -->
                {
                  authorsData.map((authorData) => (
                    <div 
                      class="mb-auto flex"
                      itemprop="author" 
                      itemscope 
                      itemtype="https://schema.org/Person"
                    >
                      {authorData.data.avatar && (
                        <figure>
                          <Image
                            src={authorData.data.avatar}
                            alt={`${authorData.data.name} avatar`}
                            width={100}
                            quality="high"
                            loading="eager"
                            class="h-7 w-7 rounded-full object-cover"
                            itemprop="image"
                          />
                        </figure>
                      )}
                      <div class="my-auto ml-2" itemprop="name">{authorData.data.name}</div>
                    </div>
                  ))
                }

                {authorsData.length > 0 && pubDate && <span>&bull;</span>}

                <!-- Date -->
                {pubDate && (
                  <time 
                    class="my-auto h-full" 
                    datetime={pubDate instanceof Date ? pubDate.toISOString() : pubDate}
                    itemprop="datePublished"
                  >
                    <span aria-label="Published on">{formatDate(pubDate, currLocale)}</span>
                  </time>
                )}
              </div>
            </div>
          </div>
          <div class="flex justify-center pt-5">
            <a href="https://notbyai.fyi/" target="_blank" rel="noopener noreferrer">
              <Image
                src={HumanNotAI}
                alt="Written-By-Human-Not-By-AI"
                decoding="async"
                loading="lazy"
                width={100}
              />
            </a>
          </div>
          <!-- blog post main image -->
          {heroImage && (
            <div class="mt-6 max-w-[1000px] overflow-hidden">
              <Image
                src={heroImage}
                alt={heroImage.alt || `Cover image for article: ${title}`}
                width={2000}
                height={1125}
                class="max-h-[70vh] rounded-xl object-cover"
                loading="eager"
                transition:name={transitionName}
                itemprop="image"
              />
            </div>
          )}
        </div>
      </div>
    </div>

    <!-- article content -->
    <div class="mt-10 w-full">
      <div class="mx-auto max-w-2xl">
        <div class="text-base-900 dark:text-base-100 text-base">
          {
            updatedDate && (
              <div class="mb-6 italic">
                <time datetime={updatedDate instanceof Date ? updatedDate.toISOString() : updatedDate}>
                  {t("updated")}: {formatDate(updatedDate, currLocale)}
                </time>
              </div>
            )
          }
          <section 
            id="blog-post-content" 
            class="prose mx-auto"
            itemprop="articleBody"
            aria-label="Article content"
          >
            <slot />
          </section>
        </div>
    </div>
  </article>

  <!-- CTA Card (full width) -->
  <div class="mt-16">
    <CtaCardSplit />
  </div>

  <!-- Navigation -->
  <nav 
    class="mx-auto max-w-2xl"
    aria-label="Blog post navigation"
  >
    <BlogNav currentSlug={post.slug} posts={allPosts} />
  </nav>
</BaseLayout>
