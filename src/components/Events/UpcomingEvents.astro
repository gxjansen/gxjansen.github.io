---
import Badge from "../../components/Badge/Badge.astro";
import EventCard from "./EventCard.astro";
import type { Event } from "../../utils/eventUtils";
import eventsData from "../../data/events.json";
import Button from "../Button/Button.astro";

interface Props {
  events: Event[];
  showTitle?: boolean;
  maxEvents?: number;
}

const { 
  events, 
  showTitle = true, 
  maxEvents = 6 
} = Astro.props;

// Filter for upcoming events (today or future dates)
const today = new Date();
today.setHours(0, 0, 0, 0);

const upcomingEvents = events
  .filter((event) => new Date(event.date) >= today)
  .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())
  .slice(0, maxEvents);

// Split events into two columns for better organization
const firstColumnEvents = upcomingEvents.filter((_, i) => i % 2 === 0);
const secondColumnEvents = upcomingEvents.filter((_, i) => i % 2 === 1);
---

{upcomingEvents.length > 0 && (
  <section 
    class="grid-pattern-container mb-16"
    aria-labelledby="upcoming-events-heading"
  >
    <div class="relative">
        {showTitle && (
          <div class="flex justify-center">
            <div class="mx-auto mb-16 text-center md:max-w-4xl" data-aos="fade-up">
              <Badge>Events</Badge>
              <h2 id="upcoming-events-heading" class="h2">Upcoming Speaking Engagements</h2>
              {events.filter(event => new Date(event.date) >= today).length > maxEvents && (
              <p 
                class="mt-4 text-base-400 dark:text-base-500"
                aria-live="polite"
              >
                Showing {maxEvents} of {events.filter(event => new Date(event.date) >= today).length} upcoming events
              </p>
              )}
            </div>
          </div>
        )}

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 md:gap-8" role="list" aria-label="Upcoming events list">
          {/* First column */}
          <div class="space-y-6">
            {firstColumnEvents.map((event) => (
              <EventCard {...event} />
            ))}
          </div>

          {/* Second column - offset as a whole */}
          <div class="space-y-6 md:mt-24">
            {secondColumnEvents.map((event) => (
              <EventCard {...event} />
            ))}
          </div>
        </div>
    </div>

    {upcomingEvents.length > 0 && (
      <div class="flex justify-center mt-8">
        <Button href="/events#past-events" variant="secondary" aria-label="View all past speaking events">
          View Past Events
        </Button>
      </div>
    )}
</section>
)}
