---
import { Image } from "astro:assets";
import type { Event } from "../../utils/eventUtils";
import { loadCountryFlag } from "../../utils/flagUtils";

interface Props extends Event {
  showPresentationName?: boolean;  // Whether to show the presentation name
  presentationUrl?: string;        // URL to the presentation if it exists
  isOnPresentationPage?: boolean;  // Whether this card is shown on a presentation detail page
}

const { 
  name, 
  date, 
  url, 
  city, 
  country, 
  topic, 
  role, 
  workshop, 
  loadedIcon,
  showPresentationName = true,
  presentationUrl,
  isOnPresentationPage = false
} = Astro.props;

// Determine which URL to use for the link
const linkUrl = isOnPresentationPage ? url : (presentationUrl || url);

// Prepare the content wrapper based on whether there's a URL
const WrapperTag = linkUrl ? 'a' : 'div';
const wrapperProps = linkUrl ? {
  href: linkUrl,
  target: "_blank",
  rel: "noopener noreferrer",
} : {};

// Determine display text for topic/role
const displayText = topic || role;

// Define classes based on whether the card is clickable
const wrapperClasses = linkUrl 
  ? "cursor-pointer" 
  : "";

// Load country flag if country code is provided
const flagImage = country ? await loadCountryFlag(country) : null;
---

<article class="event-card group">
  <WrapperTag
    {...wrapperProps}
    class={wrapperClasses}
  >
  <div class="flex items-center mb-3">
    <div class="w-10 h-10 mr-3 bg-base-200 dark:bg-base-800 rounded-lg flex items-center justify-center">
      {loadedIcon ? (
        <Image
          src={loadedIcon}
          alt={`${name} Icon`}
          width={32}
          height={32}
          class="opacity-80 contrast-125 dark:opacity-90 dark:contrast-125"
        />
      ) : (
        <span class="text-2xl">üóìÔ∏è</span>
      )}
    </div>
    <div class="flex flex-col">
      <div class="flex items-center gap-2 flex-wrap">
        <div class="flex items-center gap-2">
          <span class="text-lg font-semibold text-teal-600 dark:text-teal-400">
            {name}
          </span>
          {workshop && (
            <span class="text-xs text-teal-600 dark:text-teal-400 px-2 py-1 bg-teal-50 dark:bg-green-400/10 rounded">
              Workshop
            </span>
          )}
          {linkUrl && (
            <span class="text-teal-600 dark:text-teal-400 group-hover:translate-x-1 transition-transform duration-200">
              <svg 
                xmlns="http://www.w3.org/2000/svg" 
                class="h-4 w-4" 
                viewBox="0 0 20 20" 
                fill="currentColor"
              >
                <path 
                  fill-rule="evenodd" 
                  d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" 
                  clip-rule="evenodd" 
                />
              </svg>
            </span>
          )}
        </div>
      </div>
      <div class="text-sm text-gray-600 dark:text-gray-300 flex items-center gap-1">
        {flagImage ? (
          <Image
            src={flagImage}
            alt={`Flag of ${country}`}
            width={16}
            height={12}
            class="inline-block rounded-sm mb-0 mix-blend-multiply dark:mix-blend-screen"
          />
        ) : (
          <span>üåé</span>
        )}
        <span>{city} &mdash; {" "}</span>
        <span>
          {new Date(date).toLocaleDateString("en-US", {
            month: "short",
            day: "numeric",
            year: "numeric"
          })}
        </span>
      </div>
    </div>
  </div>
  <div class="mt-2 flex items-center gap-2">
    {!isOnPresentationPage && displayText && (
      <em class="text-sm text-gray-600 dark:text-gray-400 line-clamp-1 flex-1">{displayText}</em>
    )}
    
    {linkUrl && !isOnPresentationPage && presentationUrl && (
      <div class="flex items-center gap-1 text-xs text-gray-500 dark:text-gray-400 group-hover:text-teal-600 dark:group-hover:text-teal-400 transition-colors duration-200">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor" class="size-4">
          <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
          <path d="M21 3a1 1 0 0 1 0 2v9a3 3 0 0 1 -3 3h-5v2h2a1 1 0 0 1 0 2h-6a1 1 0 0 1 0 -2h2v-2h-5a3 3 0 0 1 -3 -3v-9a1 1 0 1 1 0 -2zm-4.293 4.293a1 1 0 0 0 -1.414 0l-2.293 2.292l-1.293 -1.292a1 1 0 0 0 -1.414 0l-3 3a1 1 0 0 0 0 1.414l.094 .083a1 1 0 0 0 1.32 -.083l2.293 -2.292l1.293 1.292a1 1 0 0 0 1.414 0l3 -3a1 1 0 0 0 0 -1.414" />
        </svg>
      </div>
    )}
  </div>
  </WrapperTag>
</article>
