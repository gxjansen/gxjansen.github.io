---
/**
 * * Language select dropdown component
 * Uses info and utilities from src/js/i18nUtils.ts. Make sure this is updated with the languages you are using (to match the Astro config file)
 * Multiple dropdowns can be used on the same page
 */
import LanguageIcon from '@icons/ui/language.svg';
import ChevronDownIcon from '@icons/ui/chevron-down.svg';

// utils
import { getLocaleFromUrl } from "@js/localeUtils";
import { getLocalizedPathname } from "@js/translationUtils";

// config
import { locales, languageSwitcherMap } from "@config/siteSettings.json";

interface Props {
  class?: string; // any additional classes
  rest?: any; // catch-all for any additional parameters, such as "aria-label"
}

const { class: className, ...rest } = Astro.props as Props;

const currLocale = getLocaleFromUrl(Astro.url);
---

<div
  class:list={[
    "lang-select__dropdown description group relative my-auto flex items-center text-sm",
    className,
  ]}
  role="navigation"
  aria-label="Language selection"
  {...rest}
>
  <button
    class="primary-focus lang-select__dropdown-button flex items-center gap-0.5 whitespace-nowrap py-1 font-medium leading-tight text-base-500 transition hover:text-base-600 dark:text-base-400 dark:hover:text-base-300 md:flex focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 rounded"
    type="button"
    aria-expanded="false"
    aria-haspopup="true"
    aria-controls="lang-select__dropdown-content"
  >
    <span class="sr-only">Change language</span>
    <LanguageIcon
      aria-hidden="true"
      class="size-3.5 shrink-0 transition-transform"
    />
    {languageSwitcherMap[currLocale]}
    <ChevronDownIcon
      aria-hidden="true"
      class="lang-select__dropdown-chevron ml-auto size-4 shrink-0 transition-transform"
    />
  </button>
  <div
    id="lang-select__dropdown-content"
    aria-labelledby="lang-select"
    class="lang-select__dropdown-content invisible absolute top-full z-10 mt-2 w-full opacity-0 transition-all"
  >
    <ul
      class="mx-auto mt-3 w-fit max-w-xs whitespace-nowrap rounded-md border border-solid border-base-200 bg-base-50 px-3 py-1.5 drop-shadow-sm dark:border-base-800 dark:bg-base-900"
      role="menu"
    >
      {
        locales.map((lang) => (
          <li 
            class="flex w-full justify-center"
            role="menuitem"
          >
            <a
              class="primary-focus relative block w-full whitespace-nowrap py-1 font-medium leading-tight text-base-500 transition hover:text-base-600 dark:text-base-400 dark:hover:text-base-300 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 rounded"
              href={getLocalizedPathname(lang, Astro.url)}
              aria-label={`Change language to ${languageSwitcherMap[lang]}`}
              lang={lang}
              hreflang={lang}
            >
              {languageSwitcherMap[lang]}
            </a>
          </li>
        ))
      }
    </ul>
  </div>
</div>

<script>
  function dropdownToggleSetup() {
    const langSelects = document.querySelectorAll(".lang-select__dropdown");
    langSelects.forEach((langSelect) => {
      const dropdownButton = langSelect.querySelector(
        ".lang-select__dropdown-button",
      );
      const dropdownChevron = langSelect.querySelector(
        ".lang-select__dropdown-chevron",
      );
      const dropdownContent = langSelect.querySelector(
        ".lang-select__dropdown-content",
      );

      if (dropdownButton && dropdownContent && dropdownChevron) {
        function toggleDropdown(event: Event) {
          event.preventDefault();
          event.stopPropagation();
          
          const isExpanding = !langSelect.classList.contains("active");
          
          // Close any other open dropdowns first
          document.querySelectorAll(".lang-select__dropdown.active").forEach((dropdown) => {
            if (dropdown !== langSelect) {
              dropdown.classList.remove("active");
              dropdown.querySelector(".lang-select__dropdown-button")?.setAttribute("aria-expanded", "false");
              dropdown.querySelector(".lang-select__dropdown-content")?.classList.remove("dropdown--fade-in");
              dropdown.querySelector(".lang-select__dropdown-chevron")?.classList.remove("rotate-180");
            }
          });
          
          if (isExpanding) {
            // Opening dropdown
            langSelect.classList.add("active");
            dropdownButton.setAttribute("aria-expanded", "true");
            dropdownContent.classList.add("dropdown--fade-in");
            dropdownChevron.classList.add("rotate-180");
            
            // Focus first menu item
            setTimeout(() => {
              dropdownContent.querySelector("a")?.focus();
            }, 100);
          } else {
            // Closing dropdown
            langSelect.classList.remove("active");
            dropdownButton.setAttribute("aria-expanded", "false");
            dropdownContent.classList.remove("dropdown--fade-in");
            dropdownChevron.classList.remove("rotate-180");
            dropdownButton.focus();
          }
        }

        // Click handling
        dropdownButton.addEventListener("click", toggleDropdown);

        // Keyboard navigation for button
        dropdownButton.addEventListener("keydown", (event) => {
          if (event.key === "Enter" || event.key === " " || event.key === "ArrowDown") {
            event.preventDefault();
            if (!langSelect.classList.contains("active")) {
              toggleDropdown(event);
            }
          } else if (event.key === "Escape") {
            if (langSelect.classList.contains("active")) {
              toggleDropdown(event);
            }
          }
        });

        // Keyboard navigation within menu
        dropdownContent.addEventListener("keydown", (event) => {
          const items = Array.from(dropdownContent.querySelectorAll("a"));
          const currentIndex = items.indexOf(document.activeElement as HTMLElement);
          
          if (event.key === "ArrowDown") {
            event.preventDefault();
            const nextIndex = currentIndex + 1 < items.length ? currentIndex + 1 : 0;
            items[nextIndex].focus();
          } else if (event.key === "ArrowUp") {
            event.preventDefault();
            const prevIndex = currentIndex - 1 >= 0 ? currentIndex - 1 : items.length - 1;
            items[prevIndex].focus();
          } else if (event.key === "Escape") {
            event.preventDefault();
            toggleDropdown(event);
          } else if (event.key === "Tab" && !event.shiftKey && currentIndex === items.length - 1) {
            event.preventDefault();
            toggleDropdown(event);
          } else if (event.key === "Tab" && event.shiftKey && currentIndex === 0) {
            event.preventDefault();
            toggleDropdown(event);
          }
        });

        // Close on outside click
        document.addEventListener("click", (event) => {
          if (
            !langSelect?.contains(event.target as Node) &&
            langSelect?.classList.contains("active")
          ) {
            toggleDropdown(event);
          }
        });
      }
    });
  }

  // runs on initial page load
  dropdownToggleSetup();

  // runs on view transitions navigation
  document.addEventListener("astro:after-swap", dropdownToggleSetup);
</script>

<style lang="scss">
  .dropdown--fade-in {
    animation: dropdownFadeInAnimation ease-out 0.15s forwards;
    @apply visible opacity-100;
  }

  @keyframes dropdownFadeInAnimation {
    0% {
      @apply top-[80%];
    }
    100% {
      @apply top-full;
    }
  }
</style>
