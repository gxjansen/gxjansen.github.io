---
/**
 * * These are small cards with icons, titles, and text. With title first
 * This looks best with an even number of cards. They are smaller to
 * use with more cards in the same section. 4 or 6 cards is probably ideal
 *
 * ! I copy all icons into the src/icons folder and recommend you do the same
 * ! If the icon is at src/icons/tabler/paint.svg then you put in "tabler/paint"
 */

import { Icon } from "astro-icon";

// components
import FeatureCard from "@components/FeatureCard/FeatureCardSmall.astro";
import Badge from "@components/Badge/Badge.astro";

interface FeatureData {
  icon: string;
  title: string;
  text: string;
}

// data
const featureData: FeatureData[] = [
  {
    icon: "tabler/outline/a-b",
    title: "Conversion optimization",
    text: `I can help you set up, run experiments, analyze data, and glean insights about your customers that can be turned into actionable strategies​.`,
  },
  {
    icon: "tabler/outline/presentation",
    title: "Presentations",
    text: `As an international speaker and AWARD WINNING Podcast host, I'm available to inspire your audience at seminars or give workshops for your employees. I've been acknowledged as a highly engaging speaker at various events.`,
  },
  {
    icon: "tabler/outline/eye",
    title: "Expert Reviews",
    text: `I provide actionable tips on improving your online business and boosting conversion rates.`,
  },
  {
    icon: "tabler/outline/leaf",
    title: "Training & Workshops",
    text: `I can guide your team to form a 'customer intelligence team' and embed a continuous optimization strategy within your organization​`,
  },
  {
    icon: "tabler/outline/picnic-table",
    title: "Lunch",
    text: `Interested in discussing your case or exchanging thoughts over lunch? I'm usually around Amsterdam or Berlin and would love to hear from you`,
  },
  {
    icon: "tabler/outline/question-mark",
    title: "Questions",
    text: `Contact me and we can have a look at what I can do for your business.`,
  },
];

// Check for reduced motion preference
const reducedMotionQuery = "(prefers-reduced-motion: reduce)";
const shouldReduceMotion = typeof window !== "undefined" 
  ? window.matchMedia(reducedMotionQuery).matches 
  : false;
---

<section
  id="feature-cards-small"
  class="py-24 md:py-28"
  aria-labelledby="features-heading"
>
  <div 
    class="relative"
    role="presentation"
  >
    <div 
      class="mb-16 text-center md:max-w-4xl mx-auto" 
      data-aos={shouldReduceMotion ? "" : "fade-up"}
    >
      <Badge>Skills</Badge>
      <h2 
        id="features-heading" 
        class="h2 mb-4"
      >
        How can I help?
      </h2>
      <p 
        class="description text-pretty text-lg md:text-xl"
        aria-describedby="features-heading"
      >
        Let me help your business.
      </p>
    </div>
    {/* Desktop Grid Layout */}
    <div 
      class="hidden lg:grid lg:grid-cols-3 gap-6 site-container"
      role="list"
      aria-label="Services grid"
    >
      {
        featureData.map((feature, idx) => (
          <div role="listitem">
              <FeatureCard
                title={feature.title}
                text={feature.text}
                icon={feature.icon}
                suffix="-desktop"
                data-aos={shouldReduceMotion ? "" : "zoom-in"}
                data-aos-delay={shouldReduceMotion ? "" : (0.15 * idx).toString()}
              />
          </div>
        ))
      }
    </div>

    {/* Mobile/Tablet Carousel */}
    <div 
      class="scroll-container-wrapper lg:hidden site-container"
      id="feature-cards-carousel"
    >
      <div class="relative">
        <div class="carousel-header">
          <span 
            class="sr-only" 
            role="status" 
            aria-live="polite"
            id="carousel-status"
          >
            Services carousel. Use left and right arrow buttons or swipe to navigate through items.
          </span>
          
          <div 
            class="carousel-progress" 
            role="progressbar" 
            aria-label="Services carousel progress"
            aria-labelledby="carousel-status"
            aria-valuemin="1" 
            aria-valuemax={featureData.length}
            aria-valuenow="1"
            id="services-carousel-progress"
          >
            {featureData.map((_, idx) => (
              <div 
                class="progress-dot"
                data-active={idx === 0 ? "true" : "false"}
                aria-hidden="true"
              />
            ))}
          </div>
        </div>

        <button 
          class="nav-button left-button"
          aria-label={`View previous items. Currently at item 1 of ${featureData.length}`}
          disabled
        >
          <span aria-hidden="true">❮</span>
        </button>

          <div
            class="scroll-container"
            role="list"
            aria-label={`Feature cards carousel with ${featureData.length} items`}
            tabindex="0"
            id="feature-cards-container"
          >
          {
            featureData.map((feature, idx) => (
              <div 
                class="scroll-item" 
                role="listitem"
              >
                <FeatureCard
                  title={feature.title}
                  text={feature.text}
                  icon={feature.icon}
                  suffix="-mobile"
                  data-aos={shouldReduceMotion ? "" : "zoom-in"}
                  data-aos-delay={shouldReduceMotion ? "" : (0.15 * idx).toString()}
                  data-aos-trigger="#feature-cards-carousel"
                />
              </div>
            ))
          }
        </div>

        <button 
          class="nav-button right-button"
          aria-label="Next items"
        >
          <span aria-hidden="true">❯</span>
        </button>
      </div>
    </div>

    <script define:vars={{ totalItems: featureData.length }}>
      // Handle carousel navigation
      const wrapper = document.querySelector('#feature-cards-carousel');
      const container = wrapper?.querySelector('#feature-cards-container');
      const leftButton = wrapper?.querySelector('.left-button');
      const rightButton = wrapper?.querySelector('.right-button');

      if (wrapper && container && leftButton && rightButton) {
        const scrollAmount = container.clientWidth * 0.8; // 80% of container width
        const progressDots = wrapper?.querySelectorAll('.progress-dot');

        const updateCarouselState = () => {
          if (!container || !leftButton || !rightButton || !progressDots) return;

          const isAtStart = container.scrollLeft <= 10;
          const isAtEnd = container.scrollLeft + container.clientWidth >= container.scrollWidth - 10;
          
          // Update button states
          leftButton.disabled = isAtStart;
          rightButton.disabled = isAtEnd;
          leftButton.setAttribute('aria-disabled', isAtStart.toString());
          rightButton.setAttribute('aria-disabled', isAtEnd.toString());

          // Calculate current item index
          const scrollPercentage = container.scrollLeft / (container.scrollWidth - container.clientWidth);
          const currentIndex = Math.round(scrollPercentage * (totalItems - 1));

          // Update progress dots
          progressDots.forEach((dot, idx) => {
            dot.setAttribute('data-active', (idx === currentIndex).toString());
          });

          // Update ARIA labels
          leftButton.setAttribute('aria-label', `View previous items. Currently at item ${currentIndex + 1} of ${totalItems}`);
          rightButton.setAttribute('aria-label', `View next items. Currently at item ${currentIndex + 1} of ${totalItems}`);

          // Update screen reader status and progressbar
          const status = wrapper?.querySelector('[role="status"]');
          const progressbar = wrapper?.querySelector('[role="progressbar"]');
          
          if (status) {
            status.textContent = `Viewing item ${currentIndex + 1} of ${totalItems}. Use left and right arrow buttons or swipe to navigate.`;
          }
          
          if (progressbar) {
            progressbar.setAttribute('aria-valuenow', (currentIndex + 1).toString());
            progressbar.setAttribute('aria-valuetext', `Item ${currentIndex + 1} of ${totalItems}`);
          }
        };

        // Button click handlers with improved feedback
        leftButton.addEventListener('click', (e) => {
          e.stopPropagation();
          container.scrollBy({ left: -scrollAmount, behavior: 'smooth' });
          updateCarouselState();
        });

        rightButton.addEventListener('click', (e) => {
          e.stopPropagation();
          container.scrollBy({ left: scrollAmount, behavior: 'smooth' });
          updateCarouselState();
        });

        // Keyboard navigation
        container.addEventListener('keydown', (e) => {
          if (e.key === 'ArrowLeft') {
            container.scrollBy({ left: -scrollAmount, behavior: 'smooth' });
          } else if (e.key === 'ArrowRight') {
            container.scrollBy({ left: scrollAmount, behavior: 'smooth' });
          }
        });

        // Update carousel state on scroll, resize, and after animations
        container.addEventListener('scroll', updateCarouselState, { passive: true });
        window.addEventListener('resize', updateCarouselState);
        container.addEventListener('scrollend', updateCarouselState);
        
        // Initial state
        updateCarouselState();

        // Touch swipe feedback
        container.addEventListener('touchstart', () => {
          container.style.scrollSnapType = 'none'; // Disable snap during swipe
        });

        container.addEventListener('touchend', () => {
          container.style.scrollSnapType = 'x mandatory'; // Re-enable snap after swipe
          updateCarouselState();
        });
      }
    </script>
  </div>
</section>

<script>
  // Handle reduced motion preference changes
  if (typeof window !== 'undefined') {
    const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');
    
    function handleMotionPreference(e: MediaQueryListEvent | MediaQueryList) {
      const elements = document.querySelectorAll('[data-aos]');
      elements.forEach(element => {
        if (e.matches) {
          element.setAttribute('data-aos', '');
          element.setAttribute('data-aos-delay', '');
        } else {
          // Restore original animations
          const isHeader = element.classList.contains('mb-16');
          const isCard = element.closest('[role="listitem"]');
          
          if (isHeader) {
            element.setAttribute('data-aos', 'fade-up');
          } else if (isCard) {
            const index = Array.from(document.querySelectorAll('[role="listitem"]')).indexOf(isCard);
            element.setAttribute('data-aos', 'zoom-in');
            element.setAttribute('data-aos-delay', (0.15 * index).toString());
          }
        }
      });
    }

    mediaQuery.addEventListener('change', handleMotionPreference);
    handleMotionPreference(mediaQuery);
  }
</script>
