---
/**
 * * This is a toggleable image section. Selection text is on left and image is on right
 * Recommend using 3 toggle sections
 *
 * ! I copy all icons into the src/icons folder and recommend you do the same
 * ! If the icon is at src/icons/tabler/paint.svg then you put in "tabler/paint"
 */
import { Icon } from "astro-icon";
import { Image } from "astro:assets";

// components
import Badge from "@components/Badge/Badge.astro";

// images. Recommend having a different image for toggle section
import image1 from "@images/house.jpg";
import image2 from "@images/living-room.jpg";
import image3 from "@images/entry-way.jpg";

interface ToggleSection {
  icon: string;
  title: string;
  image: ImageMetadata;
}

// data
const featureData: ToggleSection[] = [
  {
    icon: "tabler/home",
    title: "Housing Exterior",
    image: image1,
  },
  {
    icon: "tabler/sofa",
    title: "Living room repaint",
    image: image2,
  },
  {
    icon: "tabler/paint",
    title: "Hallway restoration",
    image: image3,
  },
];
---

<section id="feature-toggle-image" class="my-24 overflow-x-clip md:my-36">
  <div class="site-container">
    <div class="mx-auto grid gap-8 rounded-xl md:grid-cols-5 lg:gap-12">
      <div class="md:col-span-2">
        <Badge>Gallery</Badge>
        <h2 class="h2">See the results</h2>
        <div class="mt-6 flex flex-col gap-2">
          {
            featureData.map((section, idx) => (
              <button
                id={`toggle-feature__toggle-${idx}`}
                class={`${
                  idx === 0 ? "toggle-feature__toggle--active" : ""
                } flex items-start justify-start gap-2 rounded-md border border-base-200 p-2 font-medium text-base-500 transition duration-300 hover:border-primary-300 hover:opacity-100 dark:border-base-800 dark:text-base-400 dark:hover:border-primary-300`}
              >
                <Icon
                  name={section.icon}
                  class="mt-1 h-5 w-5"
                  aria-hidden="true"
                />
                <p class="text-start text-lg">{section.title}</p>
              </button>
            ))
          }
        </div>
      </div>

      <!-- image -->
      <div class="mx-auto max-w-4xl md:col-span-3">
        {
          featureData.map((section, idx) => (
            <div
              id={`feature8__image-${idx}`}
              class={`${idx === 0 ? "" : "hidden"} relative rounded-xl`}
            >
              <Image
                class="relative z-10 rounded-xl border border-transparent object-cover"
                src={section.image}
                alt={section.title}
                width={1200}
              />

              <Icon
                name="atlas/dots3"
                class="absolute -bottom-6 -left-8 -z-10 w-32 text-accent-2"
                aria-hidden="true"
              />
              <Icon
                name="atlas/wave"
                class="absolute -right-8 -top-8 z-10 w-40 text-accent-1"
                aria-hidden="true"
              />
            </div>
          ))
        }
      </div>
    </div>
  </div>
</section>

<style>
  .toggle-feature__toggle--active {
    @apply border-primary-300 ring-1 ring-primary-500;
  }
</style>

<script>
  function toggleFeatureSetup() {
    const toggleButtons = document.querySelectorAll(
      "[id^=toggle-feature__toggle-]",
    ) as NodeListOf<HTMLButtonElement>;
    const toggleImages = document.querySelectorAll(
      "[id^=feature8__image-]",
    ) as NodeListOf<HTMLImageElement>;

    // add event listeners to toggle buttons
    toggleButtons?.forEach((button, idx) => {
      button.addEventListener("click", () => {
        // remove active class from all buttons
        toggleButtons?.forEach((button) => {
          button.classList.remove("toggle-feature__toggle--active");
        });

        // add active class to clicked button
        button.classList.add("toggle-feature__toggle--active");

        // hide all images
        toggleImages.forEach((image) => {
          image.classList.add("hidden");
        });

        // show clicked image
        toggleImages[idx]?.classList.remove("hidden");
      });
    });
  }

  // runs on initial page load
  toggleFeatureSetup();

  // runs on view transitions navigation
  document.addEventListener("astro:after-swap", toggleFeatureSetup);
</script>
