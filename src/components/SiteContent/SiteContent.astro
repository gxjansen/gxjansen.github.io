---
/**
 * * These are larger cards with icons, titles, and text
 * Recommend using minimum 3 cards in a row, although this should work for any number of cards
 * These smaller cards work great if there are a large amount of services to advertise
 *
 * ! If you can an error for an icon like "Error: Not Found: "calendar-check" in pack "tabler",
 * ! You can copy to actual SVG into src/icons, name it whatever, and use similar to below example "tabler/calendar-check"
 */

import { Icon } from "astro-icon";

// components
import ContentCard from "@components/SiteContent/ContentCard.astro";
import Badge from "@components/Badge/Badge.astro";
// import FeatureCard from "@components/FeatureCard/FeatureCardTest.astro";

interface FeatureData {
  icon: string;
  title: string;
  text: string;
  href: string;
  ctaText: string;
}

// data
const featureData: FeatureData[] = [
  {
    icon: "tabler/outline/broadcast",
    title: "200+ Conversations on Growth & Optimization",
    text: `Through CRO.CAFE and other podcasts, I've explored the psychology of user behavior, experimentation culture, and what makes digital experiences succeed. These conversations with industry leaders and practitioners reveal patterns I now apply to building resilient developer ecosystems. Understanding human behavior remains crucial whether optimizing interfaces or architecting communities.`,
    href: "/podcasts",
    ctaText: "Listen to Past Episodes",
  },
  {
    icon: "tabler/outline/article",
    title: "From Optimization to Ecosystem Thinking",
    text: `I've evolved from hands-on conversion optimization and community building tactics to strategic thinking about tech ecosystems and technology choices. Explore insights on behavioral psychology in tech, building sustainable systems, and why I'm passionate about open source, privacy, and developer sovereignty. More content coming on antifragile ecosystem design.`,
    href: "/post",
    ctaText: "Read Insights",
  },
  {
    icon: "tabler/outline/presentation",
    title: "Speaking on Community, Technology & Human Behavior",
    text: `Keynotes at 50+ global conferences in 25 countries,sharing insights from 20+ years at the intersection of psychology and technology. Topics range from developer community building and open source ecosystems to behavioral design and the future of tech communities. Available for strategic discussions on building resilient developer programs.`,
    href: "/events",
    ctaText: "View Speaking Topics",
  },
];
---

<section id="services-icon" class="py-24 md:py-28">
  <div class="site-container">
    <div class="relative">
      <div class="relative">
        <div class="mx-auto mb-16 text-center md:max-w-4xl" data-aos="fade-up">
          <Badge>Resources</Badge>
          <h2 class="h2 mb-4">Leadership Resources & Insights</h2>
          <!-- <p class="description text-lg md:text-xl">
            Podcasting is a great way to learn, share and get to know people. I've published over 250 episodes for different podcasts:
          </p> -->
        </div>
<div class="hidden lg:grid lg:grid-cols-3 gap-6">
            {
              featureData.map((feature, idx) => (
                <ContentCard
                  title={feature.title}
                  text={feature.text}
                  icon={feature.icon}
                  href={feature.href}
                  ctaText={feature.ctaText}
                  idx={idx}
                  data-aos="zoom-in"
                  data-aos-delay={0.15 * idx}
                />
              ))
            }
          </div>

          {/* Mobile/Tablet Carousel */}
          <div 
            class="scroll-container-wrapper lg:hidden"
            id="services-icon-cards"
          >
            <div class="relative">
              <div class="carousel-header">
                <span 
                  class="sr-only" 
                  role="status" 
                  aria-live="polite"
                  id="content-carousel-status"
                >
                  Content carousel. Use left and right arrow buttons or swipe to navigate through items.
                </span>
                
                <div 
                  class="carousel-progress" 
                  role="progressbar" 
                  aria-label="Content carousel progress"
                  aria-labelledby="content-carousel-status"
                  aria-valuemin="1" 
                  aria-valuemax={featureData.length}
                  aria-valuenow="1"
                  id="content-carousel-progress"
                >
                  {featureData.map((_, idx) => (
                    <div 
                      class="progress-dot"
                      data-active={idx === 0 ? "true" : "false"}
                      aria-hidden="true"
                    />
                  ))}
                </div>
              </div>

              <button 
                class="nav-button left-button"
                aria-label={`View previous items. Currently at item 1 of ${featureData.length}`}
                disabled
              >
                <span aria-hidden="true">❮</span>
              </button>

              <div
                class="scroll-container"
                role="region"
                aria-label={`Content carousel with ${featureData.length} items`}
                tabindex="0"
              >
                {
                  featureData.map((feature, idx) => (
                    <div class="scroll-item">
                      <ContentCard
                        title={feature.title}
                        text={feature.text}
                        icon={feature.icon}
                        href={feature.href}
                        ctaText={feature.ctaText}
                        idx={idx}
                        data-aos="zoom-in"
                        data-aos-delay={0.15 * idx}
                        data-aos-trigger="#services-icon-cards"
                      />
                    </div>
                  ))
                }
              </div>

              <button 
                class="nav-button right-button"
                aria-label="Next items"
              >
                <span aria-hidden="true">❯</span>
              </button>
            </div>
          </div>

          <script define:vars={{ totalItems: featureData.length }}>
            // Handle carousel navigation
            const wrapper = document.querySelector('.scroll-container-wrapper');
            const container = wrapper?.querySelector('.scroll-container');
            const leftButton = wrapper?.querySelector('.left-button');
            const rightButton = wrapper?.querySelector('.right-button');

            if (wrapper && container && leftButton && rightButton) {
              const scrollAmount = container.clientWidth * 0.8; // 80% of container width
              const progressDots = wrapper?.querySelectorAll('.progress-dot');

              const updateCarouselState = () => {
                if (!container || !leftButton || !rightButton || !progressDots) return;

                const isAtStart = container.scrollLeft <= 10;
                const isAtEnd = container.scrollLeft + container.clientWidth >= container.scrollWidth - 10;
                
                // Update button states
                leftButton.disabled = isAtStart;
                rightButton.disabled = isAtEnd;
                leftButton.setAttribute('aria-disabled', isAtStart.toString());
                rightButton.setAttribute('aria-disabled', isAtEnd.toString());

                // Calculate current item index
                const scrollPercentage = container.scrollLeft / (container.scrollWidth - container.clientWidth);
                const currentIndex = Math.round(scrollPercentage * (totalItems - 1));

                // Update progress dots
                progressDots.forEach((dot, idx) => {
                  dot.setAttribute('data-active', (idx === currentIndex).toString());
                });

                // Update ARIA labels
                leftButton.setAttribute('aria-label', `View previous items. Currently at item ${currentIndex + 1} of ${totalItems}`);
                rightButton.setAttribute('aria-label', `View next items. Currently at item ${currentIndex + 1} of ${totalItems}`);

                // Update screen reader status
                const status = wrapper?.querySelector('[role="status"]');
                if (status) {
                  status.textContent = `Viewing item ${currentIndex + 1} of ${totalItems}. Use left and right arrow buttons or swipe to navigate.`;
                }
              };

              // Button click handlers with improved feedback
              leftButton.addEventListener('click', (e) => {
                e.stopPropagation();
                container.scrollBy({ left: -scrollAmount, behavior: 'smooth' });
                updateCarouselState();
              });

              rightButton.addEventListener('click', (e) => {
                e.stopPropagation();
                container.scrollBy({ left: scrollAmount, behavior: 'smooth' });
                updateCarouselState();
              });

              // Keyboard navigation
              container.addEventListener('keydown', (e) => {
                if (e.key === 'ArrowLeft') {
                  container.scrollBy({ left: -scrollAmount, behavior: 'smooth' });
                } else if (e.key === 'ArrowRight') {
                  container.scrollBy({ left: scrollAmount, behavior: 'smooth' });
                }
              });

              // Update carousel state on scroll, resize, and after animations
              container.addEventListener('scroll', updateCarouselState, { passive: true });
              window.addEventListener('resize', updateCarouselState, { passive: true });
              container.addEventListener('scrollend', updateCarouselState);
              
              // Initial state
              updateCarouselState();

              // Touch swipe feedback
              container.addEventListener('touchstart', () => {
                container.style.scrollSnapType = 'none'; // Disable snap during swipe
              }, { passive: true });

              container.addEventListener('touchend', () => {
                container.style.scrollSnapType = 'x mandatory'; // Re-enable snap after swipe
                updateCarouselState();
              }, { passive: true });
            }
          </script>
      </div>
    </div>
  </div>
</section>
