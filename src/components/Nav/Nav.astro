---
// components
import NavLink from "@components/Nav/NavLink.astro";
import NavDropdown from "@components/Nav/NavDropdown/NavDropdown.astro";
import NavDropdownToggle from "./NavDropdown/NavDropdownToggle.astro";
import MegaMenuDropdownToggle from "@components/Nav/NavDropdown/MegaMenuDropdownToggle.astro";
import MobileNav from "@components/Nav/MobileNav/MobileNav.astro";
import SiteLogo from "@components/SiteLogo/SiteLogo.astro";
import Button from "@components/Button/Button.astro";
import LanguageSelect from "@components/LanguageSelect/LanguageSelect.astro";
import ThemeToggle from "@components/ThemeToggle/ThemeToggle.astro";

// utils
import { getLocaleFromUrl } from "@js/localeUtils";
import { getTranslatedData } from "@js/translationUtils";

// data
const currLocale = getLocaleFromUrl(Astro.url);
const navData = getTranslatedData("navData", currLocale);
import { locales } from "@config/siteSettings.json";
// console.log(JSON.stringify(navData, null, 2));
---

<div
  id="nav__container"
  class="navbar--initial fixed left-0 top-0 z-30 flex w-full flex-col border-b transition-all duration-300"
  transition:name={`nav`}
>
  <div class="mx-auto flex w-full">
    <div class="site-container flex h-14 w-full items-center px-4">
      <header class="relative flex w-full items-center gap-2">
        <!-- home button / image -->
        <div class="flex flex-auto justify-start">
          <SiteLogo />
        </div>

        <!-- <div class="flex flex-auto justify-center">
          
        </div> -->

        <!-- desktop nav menu -->
        <div class="flex flex-auto justify-end">
          <nav class="hidden md:block">
            <ul class="flex h-fit items-center">
              {
                // if dropdown exists, setup the dropdown, otherwise it is just a link
                navData
                  .filter((navItem) => !navItem.hidden)
                  .map((navItem) =>
                    "dropdown" in navItem ? (
                      // non-mobile dropdown menu
                      <>
                        {/* <NavDropdown navItem={navItem} /> */}
                        <NavDropdownToggle navItem={navItem} />
                      </>
                    ) : "megaMenuColumns" in navItem ? (
                      <MegaMenuDropdownToggle {navItem} />
                    ) : (
                      // normal nav link
                      <NavLink {navItem} />
                    ),
                  )
              }
            </ul>
          </nav>

          <ThemeToggle class="-ml-4 mr-3 hidden md:block" />

          <Button
            variant="secondary"
            class="my-auto hidden px-4 py-1.5 md:block"
            href="/contact"
          >
          Book Guido
          </Button>

          {
            locales.length > 1 && (
              <LanguageSelect class="ml-4 hidden md:block" />
            )
          }

          <!-- mobile nav menu, only load on small screens where it is visible -->
          <div class="md:hidden">
            <MobileNav />
          </div>
        </div>
    </header>
  </div>
</div>

<style lang="scss">
  .navbar--scrolled {
    @apply border-b-base-200 bg-base-50 dark:border-b-base-800 dark:bg-base-950;
  }

  .navbar--initial {
    @apply border-b-transparent bg-transparent py-2;
  }
</style>

<script>
  let navbar: HTMLElement | null;

  function scrollHandler() {
    if (navbar) {
      if (window.scrollY > 50) {
        // if we have scrolled down the page a bit, add a frosted-glass look to the navbar
        navbar.classList.add("navbar--scrolled");
        navbar.classList.remove("navbar--initial");
      } else {
        navbar.classList.add("navbar--initial");
        navbar.classList.remove("navbar--scrolled");
      }
    }
  }

  function initNav() {
    navbar = document.getElementById("nav__container");
    window.addEventListener("scroll", scrollHandler, { passive: true });
  }

  // runs on initial page load
  initNav();

  // runs on view transitions navigation. Not needed if item has "transition:persist"
  document.addEventListener("astro:after-swap", initNav);
</script>
