---
import { formatDate } from '@utils/pressUtils';
import type { PressCoverage } from '@types/press';

interface Props {
  videos: PressCoverage[];
}

const { videos } = Astro.props;

// Function to extract video ID from YouTube URL
function getYouTubeId(url: string): string {
  const match = url?.match(/(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))([^&?]+)/);
  return match ? match[1] : '';
}

// Debug: Log videos data
console.log('Videos data:', videos.map(video => ({
  title: video.title,
  url: video.youtubeLink,
  id: getYouTubeId(video.youtubeLink || '')
})));
---

<section id="videos" class="mb-16">
  <h2 class="h2 mb-4">Video Interviews</h2>
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
    {videos.map(video => {
      const videoId = getYouTubeId(video.youtubeLink || '');
      if (!videoId) return null;
      
      return (
        <article class="video-card">
          <div class="card-container">
            <div 
              class="lazy-youtube aspect-video bg-neutral-100 dark:bg-white/[.075] relative rounded-lg overflow-hidden" 
              data-video-id={videoId}
              data-title={video.title}
            >
              <div class="video-container absolute inset-0 hidden">
                <iframe
                  src={`https://www.youtube.com/embed/${videoId}?autoplay=1&rel=0`}
                  title={video.title}
                  frameborder="0"
                  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                  allowfullscreen
                  class="w-full h-full"
                ></iframe>
              </div>
              
              <!-- Thumbnail -->
              <img 
                src={`https://i.ytimg.com/vi/${videoId}/hqdefault.jpg`}
                alt={`Preview thumbnail for video: ${video.title}`}
                class="card-image"
                loading="lazy"
                decoding="async"
              />
              
              <!-- Play button -->
              <button
                type="button"
                class="absolute inset-0 w-full h-full flex items-center justify-center group"
                aria-label={`Play video: ${video.title}`}
                onclick={`
                  const container = this.closest('.lazy-youtube');
                  const videoContainer = container.querySelector('.video-container');
                  const thumbnail = container.querySelector('img');
                  const button = this;
                  
                  videoContainer.classList.remove('hidden');
                  thumbnail.classList.add('hidden');
                  button.classList.add('hidden');
                `}
              >
                <div class="w-16 h-12 bg-red-600 rounded-lg flex items-center justify-center group-hover:bg-red-700 transition-colors">
                  <svg 
                    class="w-6 h-6 text-white" 
                    viewBox="0 0 24 24" 
                    fill="currentColor"
                  >
                    <path d="M8 5v14l11-7z"/>
                  </svg>
                </div>
              </button>
            </div>
          </div>
          <div>
            <h3 class="card-title mt-6 mb-4">{video.title}</h3>
            <p class="card-description mb-4">
              {formatDate(video.publicationDate)}
              {video.personOrganization && ` â€¢ ${video.personOrganization}`}
            </p>
            <div class="mt-4">
              {video.articleUrl && (
                <a 
                  href={video.articleUrl} 
                  target="_blank" 
                  rel="noopener noreferrer"
                  class="card-read-button"
                >
                  View article
                  <svg xmlns="http://www.w3.org/2000/svg" class="size-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M5 12h14M12 5l7 7-7 7"/>
                  </svg>
                </a>
              )}
            </div>
          </div>
        </article>
      );
    })}
  </div>
</section>

<style>
  .lazy-youtube button:focus {
    outline: 2px solid theme('colors.primary.500');
    outline-offset: 2px;
  }

  /* High contrast mode support */
  @media (forced-colors: active) {
    .lazy-youtube button {
      border: 2px solid currentColor;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .lazy-youtube .transition-colors {
      transition: none;
    }
  }
</style>
