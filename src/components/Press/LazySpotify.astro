---
interface Props {
  episodeId: string;
  title: string;
}

const { episodeId, title } = Astro.props;
---

<div 
  class="lazy-spotify min-h-[152px] relative"
  data-episode-id={episodeId}
  data-title={title}
  role="region"
  aria-labelledby={`spotify-title-${episodeId}`}
  aria-describedby={`spotify-loading-${episodeId}`}
>
  <!-- Hidden but accessible title -->
  <div id={`spotify-title-${episodeId}`} class="sr-only">
    Podcast episode: {title}
  </div>

  <!-- Placeholder loading state -->
  <div 
    class="animate-pulse flex space-x-4 bg-white/5 rounded-lg p-4" 
    aria-hidden="true"
    role="presentation"
  >
    <div class="rounded-lg bg-neutral-200 dark:bg-white/[.1] h-[120px] w-[120px] flex-shrink-0"></div>
    <div class="flex-1 space-y-4 py-1">
      <div class="h-4 bg-neutral-200 dark:bg-white/[.1] rounded w-3/4"></div>
      <div class="space-y-2">
        <div class="h-3 bg-neutral-200 dark:bg-white/[.1] rounded"></div>
        <div class="h-3 bg-neutral-200 dark:bg-white/[.1] rounded w-5/6"></div>
      </div>
    </div>
  </div>

  <!-- Loading announcement for screen readers -->
  <div 
    id={`spotify-loading-${episodeId}`}
    class="sr-only" 
    role="status" 
    aria-live="polite"
  >
    Loading podcast player for episode: {title}. Please wait.
  </div>
</div>

<script>
  function initLazySpotify() {
    const players = document.querySelectorAll('.lazy-spotify');
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const container = entry.target;
          if (!container.dataset.loaded) {
            loadSpotifyEmbed(container);
            container.dataset.loaded = 'true';
            observer.unobserve(container);
          }
        }
      });
    }, {
      rootMargin: '100px 0px',
      threshold: 0.1
    });

    players.forEach(player => observer.observe(player));

    // Preload remaining embeds during idle time
    if ('requestIdleCallback' in window) {
      requestIdleCallback(() => {
        preloadRemainingEmbeds();
      }, { timeout: 2000 });
    } else {
      setTimeout(preloadRemainingEmbeds, 2000);
    }
  }

  function preloadRemainingEmbeds() {
    const unloadedPlayers = document.querySelectorAll('.lazy-spotify:not([data-loaded="true"])');
    unloadedPlayers.forEach(container => {
      if (!container.dataset.loaded) {
        loadSpotifyEmbed(container);
        container.dataset.loaded = 'true';
      }
    });
  }

  function loadSpotifyEmbed(container: Element) {
    const episodeId = container.getAttribute('data-episode-id');
    const title = container.getAttribute('data-title');
    
    // Create iframe wrapper for better keyboard handling
    const wrapper = document.createElement('div');
    wrapper.setAttribute('role', 'application');
    wrapper.setAttribute('tabindex', '0');
    wrapper.setAttribute('aria-label', `Podcast player for episode: ${title}`);
    wrapper.classList.add('focus:outline-none', 'focus:ring-2', 'focus:ring-primary-500', 'focus:ring-offset-2', 'rounded-lg');
    
    // Create and configure iframe
    const iframe = document.createElement('iframe');
    iframe.style.borderRadius = '12px';
    iframe.src = `https://open.spotify.com/embed/episode/${episodeId}?theme=0`;
    iframe.width = '100%';
    iframe.height = '152';
    iframe.setAttribute('allow', 'clipboard-write; encrypted-media; fullscreen; picture-in-picture');
    iframe.setAttribute('loading', 'lazy');
    iframe.setAttribute('title', `Spotify player: ${title}`);
    
    // Add keyboard support
    wrapper.addEventListener('keydown', (event) => {
      if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        iframe.focus();
      }
    });
    
    // Add iframe to wrapper
    wrapper.appendChild(iframe);
    
    // Clear container and add wrapper
    container.innerHTML = '';
    container.appendChild(wrapper);
    
    // Announce to screen readers
    const announcement = document.createElement('div');
    announcement.setAttribute('role', 'status');
    announcement.setAttribute('aria-live', 'polite');
    announcement.classList.add('sr-only');
    announcement.textContent = `Podcast player loaded for episode: ${title}. Press Enter or Space to focus on player controls.`;
    container.appendChild(announcement);
    
    // Remove announcement after reading
    setTimeout(() => announcement.remove(), 3000);
  }

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', initLazySpotify);

  // Re-initialize after view transitions
  document.addEventListener('astro:after-swap', initLazySpotify);
</script>
