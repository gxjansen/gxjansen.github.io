---
import { getImage } from "astro:assets";
import { type CollectionEntry } from "astro:content";
import { SEO } from "astro-seo";

// utils
import { getLocaleFromUrl } from "@js/localeUtils";
import { getTranslatedData } from "@js/translationUtils";

// data
const currLocale = getLocaleFromUrl(Astro.url);
const siteData = getTranslatedData("siteData", currLocale);

// component import
import jsonLDGenerator from "@js/jsonLD";

interface BaseProps {
  title: string;
  description: string;
  noindex?: boolean;
}

interface GenProps extends BaseProps {
  type: "general";
  image?: ImageMetadata;
}

interface BlogProps extends BaseProps {
  type: "blog";
  image?: ImageMetadata;
  authors?: CollectionEntry<"authors">[];
  postFrontmatter?: CollectionEntry<"blog">["data"];
}

const {
  type,
  title,
  description,
  image,
  noindex = false,
} = Astro.props as GenProps | BlogProps;

let optimizedImage;
let jsonLD;
const canonicalUrl = new URL(Astro.url.pathname, Astro.site);

// if this is a blog page we do things differently
if (type === "blog") {
  const { authors = [], postFrontmatter } = Astro.props as BlogProps;

  if (image) {
    optimizedImage = await getImage({
      src: image,
      format: "webp",
      quality: "high",
      width: 1200,
    });
  }

  jsonLD = jsonLDGenerator({
    type: "blog",
    postFrontmatter: postFrontmatter,
    image: optimizedImage,
    authors: authors,
    canonicalUrl: canonicalUrl,
  });
}
// for general pages
else {
  jsonLD = jsonLDGenerator({
    type: "general",
  });
}

function trimEndSlash(str: string) {
  if (str[str.length - 1] === "/") {
    return str.slice(0, -1);
  } else {
    return str;
  }
}

// put together the image URL
const baseUrl = trimEndSlash(Astro.site?.toString() || "");
const defaultImageUrl = baseUrl + siteData.defaultImage.src;
const imageUrl = optimizedImage ? baseUrl + optimizedImage.src : defaultImageUrl;
---

<SEO
  title={title}
  description={description}
  canonical={canonicalUrl.toString()}
  openGraph={{
    basic: {
      title,
      type: "website",
      image: defaultImageUrl,
    },
  }}
  twitter={{
    card: "summary_large_image",
    site: "@" + siteData.author.twitter,
    creator: "@" + siteData.author.twitter,
    title: title,
    description: description,
    image: imageUrl,
  }}
  noindex={noindex}
  nofollow={noindex}
/>

<!-- JSON LD -->
<Fragment set:html={jsonLD} />
