---
import { getImage } from "astro:assets";
import { type CollectionEntry } from "astro:content";

// utils
import { getLocaleFromUrl } from "@js/localeUtils";
import { getTranslatedData } from "@js/translationUtils";

// data
const currLocale = getLocaleFromUrl(Astro.url);
const siteData = getTranslatedData("siteData", currLocale);

// component import
import jsonLDGenerator from "@js/jsonLD";

interface BaseProps {
  title: string;
  description: string;
  noindex?: boolean;
}

interface GenProps extends BaseProps {
  type: "general";
  image?: ImageMetadata;
}

interface BlogProps extends BaseProps {
  type: "blog";
  image?: ImageMetadata;
  authors?: CollectionEntry<"authors">[];
  postFrontmatter?: CollectionEntry<"blog">["data"];
}

const {
  type,
  title,
  description,
  image,
  noindex = false,
} = Astro.props as GenProps | BlogProps;

let optimizedImage;
let jsonLD;
const canonicalUrl = new URL(Astro.url.pathname, Astro.site);

// if this is a blog page we do things differently
if (type === "blog") {
  const { authors = [], postFrontmatter } = Astro.props as BlogProps;

  if (image) {
    optimizedImage = await getImage({
      src: image,
      format: "webp",
      quality: "high",
      width: 1200,
    });
  }

  jsonLD = jsonLDGenerator({
    type: "blog",
    postFrontmatter: postFrontmatter,
    image: optimizedImage,
    authors: authors,
    canonicalUrl: canonicalUrl,
  });
}
// for general pages
else {
  jsonLD = jsonLDGenerator({
    type: "general",
  });
}

// Ensure we have an absolute URL for the image
const siteUrl = Astro.site ? Astro.site.toString().replace(/\/$/, '') : '';
const imageUrl = optimizedImage 
  ? new URL(optimizedImage.src, siteUrl).toString()
  : new URL(siteData.defaultImage.src, siteUrl).toString();
---

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />
{noindex && <meta name="robots" content="noindex,nofollow" />}
<link rel="canonical" href={canonicalUrl.toString()} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content={type === "blog" ? "article" : "website"} />
<meta property="og:url" content={canonicalUrl.toString()} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={imageUrl} />
<meta property="og:site_name" content={siteData.title} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={canonicalUrl.toString()} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={imageUrl} />
<meta name="twitter:site" content={"@" + siteData.author.twitter} />
<meta name="twitter:creator" content={"@" + siteData.author.twitter} />

<!-- JSON LD -->
<Fragment set:html={jsonLD} />
