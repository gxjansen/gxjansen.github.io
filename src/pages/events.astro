---
import BaseLayout from "@layouts/BaseLayout.astro";
import eventsData from "../data/events.json";
import FeatureFlagsMarquee from "@components/Feature/FeatureFlagsMarquee.astro";
import Badge from "@components/Badge/Badge.astro";
import CtaCardSplit from "@components/Cta/CtaCardSplit.astro";
import UpcomingEvents from "@components/Events/UpcomingEvents.astro";
import EventCard from "@components/Events/EventCard.astro";
import { loadEventIcons } from "../utils/eventUtils";
import type { Event } from "../utils/eventUtils";
import { getTotalPastEventsCount } from "../utils/eventUtils.js";

// Pre-load all event icons
const eventIcons = await loadEventIcons(eventsData as Omit<Event, 'loadedIcon'>[]);

// Filter for past events (yesterday or earlier)
const today = new Date();
today.setHours(0, 0, 0, 0);

const pastEvents = eventIcons.filter(
  (event) => new Date(event.date) < today
);

// Get unique years from past events for the index
const pastEventYears = Array.from(
  new Set(pastEvents.map((event) => new Date(event.date).getFullYear()))
).sort((a, b) => b - a);

// Page metadata
const pageTitle = "Speaking Events";
const pageDescription = "A comprehensive list of conferences, meetups, and workshops where I've had the privilege to speak and share knowledge with the community.";
const totalPastEvents = getTotalPastEventsCount();
---

<BaseLayout title={pageTitle} description={pageDescription}>
  <section id="services-icon" class="py-24 md:py-28">
    <div
      class="site-container bg-[url('/assets/pattern-light.svg')] bg-center bg-no-repeat dark:bg-[url('/assets/pattern-dark.svg')]"
    >
      <div class="mx-auto mb-16 text-center md:max-w-4xl" data-aos="fade-up">
        <Badge>Events</Badge>
        <h2 class="h2 mb-4">I ðŸ’š sharing my experience!</h2>
        <p class="description text-lg md:text-xl">
          I've had the privilege of speaking at a number of wonderful industry conferences and universities around the world, sharing my experience with the audience and sharing ideas with a lot of experts. Below is the current schedule of my upcoming speaking engagements:
        </p>
      </div>
  <div class="container mx-auto mt-16 overflow-x-clip">
      <FeatureFlagsMarquee />

    {/* Upcoming Events Section */}
    <UpcomingEvents events={eventIcons} maxEvents={6} />

    {/* Past Events Section */}
    <div class="site-container flex justify-center">
      <div class="mx-auto mb-16 text-center md:max-w-4xl" data-aos="fade-up">
        <Badge>Events</Badge>
        <h2 class="h2">Past Speaking Engagements</h2>
        <p class="description mt-4 text-pretty text-lg md:text-xl">
          {totalPastEvents} events and counting!
        </p>
      </div>
    </div>

    {/* Year Index */}
    <nav class="text-center mb-8">
      <ul class="inline-flex space-x-4">
        {pastEventYears.map((year) => (
          <li>
            <a href={`#${year}`} class="text-blue-400 hover:underline">
              {year}
            </a>
          </li>
        ))}
      </ul>
    </nav>

    {/* Events Grouped by Year */}
    {pastEventYears.map((year) => {
      const yearEvents = pastEvents
        .filter((event) => new Date(event.date).getFullYear() === year)
        .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

      // Split events into two columns
      const firstColumnEvents = yearEvents.filter((_, i) => i % 2 === 0);
      const secondColumnEvents = yearEvents.filter((_, i) => i % 2 === 1);

      return (
        <section id={String(year)} class="mb-16">
          <h2 class="text-3xl text-teal-400 border-b border-gray-700 pb-2 mb-8">
            {year}
          </h2>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* First column */}
            <div class="space-y-6">
              {firstColumnEvents.map((event) => (
                <EventCard {...event} />
              ))}
            </div>

            {/* Second column - offset as a whole */}
            <div class="space-y-6 md:mt-24">
              {secondColumnEvents.map((event) => (
                <EventCard {...event} />
              ))}
            </div>
          </div>
        </section>
      );
    })}
  </div>
  <CtaCardSplit />
</BaseLayout>
