---
// layout
import BaseLayout from "@layouts/BaseLayout.astro";

// components
import Badge from "@components/Badge/Badge.astro";
import EventCard from "@components/Events/EventCard.astro";
import UpcomingEvents from "@components/Events/UpcomingEvents.astro";
import FeatureFlagsMarquee from "@components/Feature/FeatureFlagsMarquee.astro";

// utils
import { getPresentationUrl } from "@utils/eventPresentationRelations";
import { getAllEvents, loadEventIcons } from "@utils/eventUtils";

// Get all events and sort them by date
const events = await getAllEvents();
const sortedEvents = [...events].sort((a, b) =>
  new Date(b.date).getTime() - new Date(a.date).getTime()
);

// Filter for past events only (before today)
const today = new Date();
today.setHours(0, 0, 0, 0);

const pastEvents = sortedEvents.filter((event) => new Date(event.date) < today);

// Implement pagination to reduce DOM size
const EVENTS_PER_PAGE = 40; // Show 40 events initially to reduce DOM size
const initialEvents = pastEvents.slice(0, EVENTS_PER_PAGE);
const remainingEvents = pastEvents.slice(EVENTS_PER_PAGE);

// Split events into two columns for better organization
const firstColumnEvents = initialEvents.filter((_, i) => i % 2 === 0);
const secondColumnEvents = initialEvents.filter((_, i) => i % 2 === 1);
---

<BaseLayout
  title="Events"
  description="Overview of all events"
  transition:animate="slide"
>
  {/* Upcoming Events Section */}
  <section class="py-24 md:py-28">
    <UpcomingEvents events={sortedEvents} />
  </section>

  {/* Countries Flags Section */}
  <section class="py-12">
    <FeatureFlagsMarquee />
  </section>

  {/* Past Events Section */}
  <section id="past-events" class="py-24 md:py-28">
    <div class="mx-auto mb-16 text-center md:max-w-4xl">
        <Badge>Events</Badge>
        <h1 class="h2 mb-4">Past Events</h1>
        <p class="description text-lg md:text-xl">
          An overview of all events I've spoken at or attended
        </p>
      </div>

      <div class="grid grid-cols-1 md:grid-cols-2 gap-6 md:gap-8" id="events-container">
        {/* First column */}
        <div class="space-y-6" id="first-column">
          {firstColumnEvents.map((event) => (
            <EventCard 
              {...event} 
              showPresentationName={true}
              presentationUrl={getPresentationUrl(event.id)}
            />
          ))}
        </div>

        {/* Second column - offset as a whole */}
        <div class="space-y-6 md:mt-24" id="second-column">
          {secondColumnEvents.map((event) => (
            <EventCard 
              {...event} 
              showPresentationName={true}
              presentationUrl={getPresentationUrl(event.id)}
            />
          ))}
        </div>
      </div>

      {/* Load More Button */}
      {remainingEvents.length > 0 && (
        <div class="mt-16 text-center">
          <button 
            id="load-more-btn"
            class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors duration-200"
            data-remaining-events={JSON.stringify(remainingEvents.map(event => ({
              ...event,
              loadedIcon: undefined, // Remove ImageMetadata object
              icon: event.icon // Keep the filename for client-side rendering
            })))}
            data-remaining-count={remainingEvents.length}
          >
            Load More Events ({remainingEvents.length})
            <svg class="ml-2 -mr-1 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
            </svg>
          </button>
        </div>
      )}
    </div>
  </section>
</BaseLayout>

<script>
  import { getPresentationUrl } from '@utils/eventPresentationRelations';
  
  function setupLoadMoreEvents() {
    const loadMoreBtn = document.getElementById('load-more-btn');
    const firstColumn = document.getElementById('first-column');
    const secondColumn = document.getElementById('second-column');
    
    if (!loadMoreBtn || !firstColumn || !secondColumn) return;
    
    const remainingEvents = JSON.parse(loadMoreBtn.dataset.remainingEvents || '[]');
    let currentIndex = 0;
    const BATCH_SIZE = 20; // Load 20 more events at a time
    
    function renderEventCard(event, index) {
      const presentationUrl = getPresentationUrl(event.id);
      const linkUrl = presentationUrl || event.url;
      const eventDate = new Date(event.date).toLocaleDateString("en-US", {
        month: "short",
        day: "numeric",
        year: "numeric"
      });
      
      return `
        <article class="event-card group" role="listitem">
          ${linkUrl ? `<a href="${linkUrl}" target="_blank" rel="noopener noreferrer" class="cursor-pointer">` : '<div>'}
            <div class="flex items-center mb-3">
              <div class="w-10 h-10 mr-3 bg-base-300 dark:bg-base-800 rounded-lg flex items-center justify-center">
                ${event.icon ? `
                  <img 
                    src="/images/events/${event.icon}"
                    alt="${event.name} Icon"
                    width="32"
                    height="32"
                    class="opacity-80 contrast-125 dark:opacity-90 dark:contrast-125"
                    loading="lazy"
                  />
                ` : '<span class="text-2xl">üóìÔ∏è</span>'}
              </div>
              <div class="flex flex-col">
                <div class="flex items-center gap-2 flex-wrap">
                  <div class="flex items-center gap-2">
                    <span class="text-lg font-semibold text-teal-600 dark:text-teal-400">
                      ${event.name}
                    </span>
                    ${event.workshop ? `
                      <span class="text-xs text-teal-600 dark:text-teal-400 px-2 py-1 bg-teal-50 dark:bg-green-400/10 rounded">
                        Workshop
                      </span>
                    ` : ''}
                    ${linkUrl ? `
                      <span class="text-teal-600 dark:text-teal-400 group-hover:translate-x-1 transition-transform duration-200">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                          <path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                        </svg>
                      </span>
                    ` : ''}
                  </div>
                </div>
                <div class="text-sm text-gray-600 dark:text-gray-300 flex flex-col sm:flex-row sm:items-center sm:gap-1">
                  <div class="flex items-center gap-1">
                    <span>üåé</span>
                    <span>${event.city}</span>
                  </div>
                  <span class="hidden sm:inline">&mdash;</span>
                  <span>${eventDate}</span>
                </div>
              </div>
            </div>
            <div class="mt-2 flex items-center gap-2">
              ${event.topic || event.role ? `
                <em class="text-sm text-gray-600 dark:text-gray-400 line-clamp-1 flex-1">
                  ${event.topic || event.role}
                </em>
              ` : ''}
              ${linkUrl && presentationUrl ? `
                <div class="flex items-center gap-1 text-xs text-gray-500 dark:text-gray-400 group-hover:text-teal-600 dark:group-hover:text-teal-400 transition-colors duration-200">
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor" class="size-4">
                    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                    <path d="M21 3a1 1 0 0 1 0 2v9a3 3 0 0 1 -3 3h-5v2h2a1 1 0 0 1 0 2h-6a1 1 0 0 1 0 -2h2v-2h-5a3 3 0 0 1 -3 -3v-9a1 1 0 1 1 0 -2zm-4.293 4.293a1 1 0 0 0 -1.414 0l-2.293 2.292l-1.293 -1.292a1 1 0 0 0 -1.414 0l-3 3a1 1 0 0 0 0 1.414l.094 .083a1 1 0 0 0 1.32 -.083l2.293 -2.292l1.293 1.292a1 1 0 0 0 1.414 0l3 -3a1 1 0 0 0 0 -1.414" />
                  </svg>
                </div>
              ` : ''}
            </div>
          ${linkUrl ? '</a>' : '</div>'}
        </article>
      `;
    }
    
    function loadMoreEvents() {
      const nextBatch = remainingEvents.slice(currentIndex, currentIndex + BATCH_SIZE);
      
      nextBatch.forEach((event, index) => {
        const isEven = (currentIndex + index) % 2 === 0;
        const targetColumn = isEven ? firstColumn : secondColumn;
        
        const eventElement = document.createElement('div');
        eventElement.innerHTML = renderEventCard(event, currentIndex + index);
        targetColumn.appendChild(eventElement.firstElementChild);
      });
      
      currentIndex += BATCH_SIZE;
      
      // Update button text or hide if no more events
      const remainingCount = remainingEvents.length - currentIndex;
      if (remainingCount <= 0) {
        loadMoreBtn.style.display = 'none';
      } else {
        loadMoreBtn.innerHTML = `
          Load More Events (${remainingCount})
          <svg class="ml-2 -mr-1 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
          </svg>
        `;
      }
    }
    
    loadMoreBtn.addEventListener('click', loadMoreEvents);
  }
  
  // Initialize on page load
  setupLoadMoreEvents();
  
  // Re-initialize after page transitions
  document.addEventListener('astro:after-swap', setupLoadMoreEvents);
</script>
