---
import { getCollection } from "astro:content";

// components
import BaseLayout from "@layouts/BaseLayout.astro";
import PostCardAtlas from "@components/PostCard/PostCardAtlas.astro";
import Badge from "@components/Badge/Badge.astro";

// utils
import { countItems, sortByValue } from "@js/blogUtils";
import { slugify } from "@js/textUtils";

export async function getStaticPaths() {
  // Get all posts
  const posts = await getCollection("post", ({ data }) => {
    return !data.draft;
  });

  // Get all categories and their original names
  const allCategories = posts
    .map(post => post.data.categories || [])
    .flat()
    .filter(Boolean);

  const uniqueCategories = [...new Set(allCategories)];
  
  // Create a path for each category, storing both slugified and original versions
  // Count posts per category
  const categoryCount = countItems(allCategories);
  const validCategories = uniqueCategories.filter(category => 
    categoryCount[slugify(category)]?.count >= 2
  );

  return validCategories.map(category => ({
    params: { category: slugify(category) },
    props: { 
      slugifiedCategory: slugify(category),
      originalCategory: category 
    }
  }));
}

// Get both versions of the category from props
const { slugifiedCategory, originalCategory } = Astro.props;

// Get all posts
const posts = await getCollection("post", ({ data }) => {
  return !data.draft;
});

// Filter posts by category, ensuring categories exist
const filteredPosts = posts.filter((post) =>
  (post.data.categories || [])
    .map((cat) => slugify(cat))
    .includes(slugifiedCategory)
);

// Get all categories for sidebar, filtering out undefined/null values
const categories = posts
  .map((post) => post.data.categories || [])
  .flat()
  .filter(Boolean);
const processedCategories = sortByValue(countItems(categories));

// Set up page metadata
const title = `Posts in category: ${originalCategory}`;
const description = `Articles categorized under ${originalCategory}`;
---

<BaseLayout title={title} description={description}>
  <section class="py-24 md:py-28">
    <div class="site-container">
      <div class="grid-pattern-container">
        <div class="relative">
          <div class="mx-auto mb-16 text-center md:max-w-4xl" data-aos="fade-up">
            <Badge>Category</Badge>
            <h1 class="h1 mb-4">{originalCategory}</h1>
            <p class="description text-lg md:text-xl">
              Articles related to {originalCategory.toLowerCase()}
            </p>
          </div>

          <!-- Blog posts grid -->
          <div class="container mx-auto px-4">
            <div class="grid gap-16 sm:grid-cols-2">
              {filteredPosts.map(post => (
                <PostCardAtlas post={post} showDescription={true} />
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
</BaseLayout>
