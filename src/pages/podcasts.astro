---
// layout
import BaseLayout from "@layouts/BaseLayout.astro";

// components
import ServicesIcon from "@components/Services/ServicesIcon.astro";
import PodcastFeed from "@components/Podcasts/PodcastFeed.astro";
import type { PodcastEpisode } from "../types/podcast";

// Function to extract content between XML tags
function getTagContent(xml: string, tag: string): string {
  const regex = new RegExp(`<${tag}[^>]*>(.*?)<\/${tag}>`, "s");
  const match = xml.match(regex);
  return match ? match[1].trim() : "";
}

// Function to extract all items from XML
function getItems(xml: string): string[] {
  const items: string[] = [];
  let remaining = xml;
  
  while (true) {
    const startIndex = remaining.indexOf("<item>");
    if (startIndex === -1) break;
    
    const endIndex = remaining.indexOf("</item>") + 7;
    if (endIndex === -1) break;
    
    items.push(remaining.slice(startIndex, endIndex));
    remaining = remaining.slice(endIndex);
  }
  
  return items;
}

// Function to fetch and parse RSS feed
async function fetchPodcastFeed(url: string): Promise<PodcastEpisode[]> {
  try {
    const response = await fetch(url);
    const xml = await response.text();
    
    // Get channel title
    const channelTitle = getTagContent(xml, "channel").match(/<title[^>]*>(.*?)<\/title>/s)?.[1] || "";
    
    // Get all items
    const items = getItems(xml);
    
    return items.map(item => ({
      title: getTagContent(item, "title"),
      description: getTagContent(item, "description"),
      pubDate: getTagContent(item, "pubDate"),
      duration: getTagContent(item, "itunes:duration"),
      link: getTagContent(item, "link"),
      podcastName: channelTitle
    }));
  } catch (error) {
    console.error(`Error fetching feed ${url}:`, error);
    return [];
  }
}

// Fetch episodes from all feeds
const feeds = [
  "https://feeds.transistor.fm/sheeptank",
  "https://feeds.transistor.fm/cro-cafe",
  "https://feeds.transistor.fm/cro-cafe-nl"
];

const allEpisodes = await Promise.all(feeds.map(fetchPodcastFeed))
  .then(results => results.flat())
  .catch(error => {
    console.error("Error fetching podcast feeds:", error);
    return [];
  });

// Sort episodes by date, newest first
const sortedEpisodes = [...allEpisodes].sort((a, b) => 
  new Date(b.pubDate).getTime() - new Date(a.pubDate).getTime()
);

// Take only the latest 20 episodes
const latestEpisodes = sortedEpisodes.slice(0, 20);
---

<BaseLayout
  title="Guido's Podcasts"
  description="Overview of the podcasts that I host and produce."
>
  <ServicesIcon />
  
  {/* Latest Episodes Section */}
  <div class="bg-gray-50 dark:bg-gray-900 py-16 mt-16">
    <div class="container mx-auto px-4">
      <PodcastFeed episodes={latestEpisodes} />
    </div>
  </div>
</BaseLayout>
