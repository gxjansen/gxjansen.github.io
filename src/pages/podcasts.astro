---
// layout
import BaseLayout from "@layouts/BaseLayout.astro";

// components
import ServicesIcon from "@components/Services/ServicesIcon.astro";
import PodcastFeed from "@components/Podcasts/PodcastFeed.astro";
import type { PodcastEpisode } from "../types/podcast";

// Function to fetch and parse RSS feed
async function fetchPodcastFeed(url: string): Promise<PodcastEpisode[]> {
  try {
    const response = await fetch(url, {
      headers: {
        'Accept': 'application/xml'
      }
    });
    const text = await response.text();
    
    // Extract all <item> elements
    const items = text.match(/<item>[\s\S]*?<\/item>/g) || [];
    
    return items.map(item => {
      // Extract title
      const title = item.match(/<title>(.*?)<\/title>/)?.[1] || '';
      
      // Extract description
      const description = item.match(/<description>(.*?)<\/description>/)?.[1] || '';
      
      // Extract pubDate
      const pubDate = item.match(/<pubDate>(.*?)<\/pubDate>/)?.[1] || '';
      
      // Extract duration
      const duration = item.match(/<itunes:duration>(.*?)<\/itunes:duration>/)?.[1] || '';
      
      // Extract link and convert to embed URL
      const linkMatch = item.match(/<link>(.*?)<\/link>/)?.[1] || '';
      const episodeIdMatch = linkMatch.match(/https:\/\/share\.transistor\.fm\/s\/(.*?)$/);
      const embedUrl = episodeIdMatch 
        ? `https://share.transistor.fm/e/${episodeIdMatch[1]}`
        : '';
      
      // Extract podcast name from channel title
      const podcastName = text.match(/<channel>[\s\S]*?<title>(.*?)<\/title>/)?.[1] || '';
      
      return {
        title: title.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&'),
        description: description.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&'),
        pubDate,
        duration,
        link: embedUrl,
        podcastName: podcastName.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&')
      };
    });
  } catch (error) {
    console.error(`Error fetching feed ${url}:`, error);
    return [];
  }
}

// Fetch episodes from all feeds
const feeds = [
  "https://feeds.transistor.fm/sheeptank",
  "https://feeds.transistor.fm/cro-cafe",
  "https://feeds.transistor.fm/cro-cafe-nl"
];

const allEpisodes = await Promise.all(feeds.map(fetchPodcastFeed))
  .then(results => results.flat())
  .catch(error => {
    console.error("Error fetching podcast feeds:", error);
    return [];
  });

// Sort episodes by date, newest first
const sortedEpisodes = [...allEpisodes].sort((a, b) => 
  new Date(b.pubDate).getTime() - new Date(a.pubDate).getTime()
);

// Take only the latest 20 episodes
const latestEpisodes = sortedEpisodes.slice(0, 20);
---

<BaseLayout
  title="Guido's Podcasts"
  description="Overview of the podcasts that I host and produce."
>
  <ServicesIcon />
  
  {/* Latest Episodes Section */}
  <div class="bg-gray-50 dark:bg-gray-900 py-16 mt-16">
    <div class="container mx-auto px-4">
      <PodcastFeed episodes={latestEpisodes} />
    </div>
  </div>
</BaseLayout>
