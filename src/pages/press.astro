---
// layout
import BaseLayout from "@layouts/BaseLayout.astro";

// components
import Badge from "@components/Badge/Badge.astro";
import ContentTypeSelector from "@components/Press/ContentTypeSelector.astro";
import VideoSection from "@components/Press/VideoSection.astro";
import PodcastSection from "@components/Press/PodcastSection.astro";
import ArticleSection from "@components/Press/ArticleSection.astro";
import LinkedInCTA from "@components/Press/LinkedInCTA.astro";

// data
import { pressCoverage } from '../data/press-coverage';

// Sort press coverage by date
const sortedCoverage = [...pressCoverage].sort((a, b) => 
  new Date(b.publicationDate).getTime() - new Date(a.publicationDate).getTime()
);

// Separate content by type
const videos = sortedCoverage.filter(item => item.youtubeLink);
const podcasts = sortedCoverage.filter(item => item.spotifyEmbedId);
const articles = sortedCoverage.filter(item => !item.youtubeLink && !item.spotifyEmbedId);

// Get first few video IDs for preloading
const firstVideoIds = videos
  .slice(0, 2)
  .map(video => {
    const match = video.youtubeLink?.match(/(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))([^&?]+)/);
    return match ? match[1] : '';
  })
  .filter(Boolean);
---

<BaseLayout 
  title="Press / Media"
  description="Media appearances, interviews and articles featuring Guido Jansen."
>
  <!-- Resource hints for performance optimization -->
  <Fragment slot="head">
    <!-- Preconnect to external domains -->
    <link rel="preconnect" href="https://www.youtube.com" />
    <link rel="preconnect" href="https://i.ytimg.com" />
    <link rel="preconnect" href="https://open.spotify.com" />
    
    <!-- DNS prefetch as fallback -->
    <link rel="dns-prefetch" href="https://www.youtube.com" />
    <link rel="dns-prefetch" href="https://i.ytimg.com" />
    <link rel="dns-prefetch" href="https://open.spotify.com" />
    
    <!-- Preload critical thumbnails -->
    {firstVideoIds.map(videoId => (
      <link 
        rel="preload" 
        href={`https://i.ytimg.com/vi/${videoId}/hqdefault.jpg`}
        as="image"
        fetchpriority="high"
      />
    ))}
  </Fragment>

  <section class="py-24 md:py-28">
    <div class="grid-pattern-container relative">
      <div class="mx-auto mb-16 text-center md:max-w-4xl" data-aos="fade-up">
        <Badge>Media</Badge>
        <h2 class="h2 mb-4">Press / Media</h2>
        <p class="description text-lg md:text-xl">
          I'm interviewed by different media regularly and appear on different (online and offline) panels. Below you can find a selection of these. Contact me if you're interested in interviewing me or having me on your event!
        </p>
      </div>

      <ContentTypeSelector />
    </div>
  </section>

  <!-- Use view transitions for smooth content switching -->
  <div class="view-transition-group:media-content">
    <VideoSection videos={videos} />
    <PodcastSection podcasts={podcasts} />
    <ArticleSection articles={articles} />
  </div>
  
  <LinkedInCTA />
</BaseLayout>

<script>
  // Handle smooth scrolling to sections
  document.addEventListener('DOMContentLoaded', () => {
    const links = document.querySelectorAll('a[href^="#"]');
    const headerOffset = 80; // Adjust this value based on your header height
    
    links.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('href');
        const targetElement = document.querySelector(targetId);
        
        if (targetElement) {
          // Get the target's position accounting for header height
          const elementPosition = targetElement.getBoundingClientRect().top;
          const offsetPosition = elementPosition + window.pageYOffset - headerOffset;

          // Smooth scroll to adjusted position
          window.scrollTo({
            top: offsetPosition,
            behavior: 'smooth'
          });

          // If clicking the podcasts link, trigger preloading
          if (targetId === '#podcasts') {
            // Small delay to ensure scroll starts first
            setTimeout(() => {
              const event = new CustomEvent('preloadPodcasts');
              document.dispatchEvent(event);
            }, 100);
          }
        }
      });
    });
  });

  // Trigger podcast preloading after initial page load
  window.addEventListener('load', () => {
    // Wait a bit after load to not compete with critical resources
    setTimeout(() => {
      const event = new CustomEvent('preloadPodcasts');
      document.dispatchEvent(event);
    }, 2000);
  });
</script>
